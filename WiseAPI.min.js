var WiseAPI=function(){"use strict";var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function n(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function a(e,n){return e(n={exports:{}},n.exports),n.exports}function i(e){return e&&e.default||e}var t=a((function(e,n){Object.defineProperty(n,"__esModule",{value:!0});class a extends Error{constructor(e,n=500,a=!1){super(e),this.message=e,this.code=n,this.internal=a,this.code=n,this.internal=a,Error.captureStackTrace(this,this.constructor)}}n.default=a}));n(t);var o=function(e,n){return function(){for(var a=new Array(arguments.length),i=0;i<a.length;i++)a[i]=arguments[i];return e.apply(n,a)}},s=Object.prototype.toString;function r(e){return"[object Array]"===s.call(e)}function c(e){return void 0===e}function p(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==s.call(e))return!1;var n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}function u(e){return"[object Function]"===s.call(e)}function d(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),r(e))for(var a=0,i=e.length;a<i;a++)n.call(null,e[a],a,e);else for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&n.call(null,e[t],t,e)}var m={isArray:r,isArrayBuffer:function(e){return"[object ArrayBuffer]"===s.call(e)},isBuffer:function(e){return null!==e&&!c(e)&&null!==e.constructor&&!c(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:p,isPlainObject:l,isUndefined:c,isDate:function(e){return"[object Date]"===s.call(e)},isFile:function(e){return"[object File]"===s.call(e)},isBlob:function(e){return"[object Blob]"===s.call(e)},isFunction:u,isStream:function(e){return p(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:d,merge:function e(){var n={};function a(a,i){l(n[i])&&l(a)?n[i]=e(n[i],a):l(a)?n[i]=e({},a):r(a)?n[i]=a.slice():n[i]=a}for(var i=0,t=arguments.length;i<t;i++)d(arguments[i],a);return n},extend:function(e,n,a){return d(n,(function(n,i){e[i]=a&&"function"==typeof n?o(n,a):n})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}};function h(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var f=function(e,n,a){if(!n)return e;var i;if(a)i=a(n);else if(m.isURLSearchParams(n))i=n.toString();else{var t=[];m.forEach(n,(function(e,n){null!=e&&(m.isArray(e)?n+="[]":e=[e],m.forEach(e,(function(e){m.isDate(e)?e=e.toISOString():m.isObject(e)&&(e=JSON.stringify(e)),t.push(h(n)+"="+h(e))})))})),i=t.join("&")}if(i){var o=e.indexOf("#");-1!==o&&(e=e.slice(0,o)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e};function v(){this.handlers=[]}v.prototype.use=function(e,n){return this.handlers.push({fulfilled:e,rejected:n}),this.handlers.length-1},v.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},v.prototype.forEach=function(e){m.forEach(this.handlers,(function(n){null!==n&&e(n)}))};var x=v,g=function(e,n,a){return m.forEach(a,(function(a){e=a(e,n)})),e},b=function(e){return!(!e||!e.__CANCEL__)},w="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function _(){throw new Error("setTimeout has not been defined")}function y(){throw new Error("clearTimeout has not been defined")}var k=_,E=y;function j(e){if(k===setTimeout)return setTimeout(e,0);if((k===_||!k)&&setTimeout)return k=setTimeout,setTimeout(e,0);try{return k(e,0)}catch(n){try{return k.call(null,e,0)}catch(n){return k.call(this,e,0)}}}"function"==typeof w.setTimeout&&(k=setTimeout),"function"==typeof w.clearTimeout&&(E=clearTimeout);var R,A=[],z=!1,S=-1;function T(){z&&R&&(z=!1,R.length?A=R.concat(A):S=-1,A.length&&O())}function O(){if(!z){var e=j(T);z=!0;for(var n=A.length;n;){for(R=A,A=[];++S<n;)R&&R[S].run();S=-1,n=A.length}R=null,z=!1,function(e){if(E===clearTimeout)return clearTimeout(e);if((E===y||!E)&&clearTimeout)return E=clearTimeout,clearTimeout(e);try{E(e)}catch(n){try{return E.call(null,e)}catch(n){return E.call(this,e)}}}(e)}}function L(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var a=1;a<arguments.length;a++)n[a-1]=arguments[a];A.push(new C(e,n)),1!==A.length||z||j(O)}function C(e,n){this.fun=e,this.array=n}function U(){}C.prototype.run=function(){this.fun.apply(null,this.array)};var q=U,B=U,M=U,P=U,N=U,D=U,I=U,F=w.performance||{},Z=F.now||F.mozNow||F.msNow||F.oNow||F.webkitNow||function(){return(new Date).getTime()},H=new Date,$={nextTick:L,title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:q,addListener:B,once:M,off:P,removeListener:N,removeAllListeners:D,emit:I,binding:function(e){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(e){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(e){var n=.001*Z.call(F),a=Math.floor(n),i=Math.floor(n%1*1e9);return e&&(a-=e[0],(i-=e[1])<0&&(a--,i+=1e9)),[a,i]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-H)/1e3}},Y=function(e,n){m.forEach(e,(function(a,i){i!==n&&i.toUpperCase()===n.toUpperCase()&&(e[n]=a,delete e[i])}))},W=function(e,n,a,i,t){return e.config=n,a&&(e.code=a),e.request=i,e.response=t,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e},V=function(e,n,a,i,t){var o=new Error(e);return W(o,n,a,i,t)},K=function(e,n,a){var i=a.config.validateStatus;a.status&&i&&!i(a.status)?n(V("Request failed with status code "+a.status,a.config,null,a.request,a)):e(a)},G=m.isStandardBrowserEnv()?{write:function(e,n,a,i,t,o){var s=[];s.push(e+"="+encodeURIComponent(n)),m.isNumber(a)&&s.push("expires="+new Date(a).toGMTString()),m.isString(i)&&s.push("path="+i),m.isString(t)&&s.push("domain="+t),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}},X=function(e,n){return e&&!/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(n)?function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}(e,n):n},J=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"],Q=m.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),a=document.createElement("a");function i(e){var i=e;return n&&(a.setAttribute("href",i),i=a.href),a.setAttribute("href",i),{href:a.href,protocol:a.protocol?a.protocol.replace(/:$/,""):"",host:a.host,search:a.search?a.search.replace(/^\?/,""):"",hash:a.hash?a.hash.replace(/^#/,""):"",hostname:a.hostname,port:a.port,pathname:"/"===a.pathname.charAt(0)?a.pathname:"/"+a.pathname}}return e=i(window.location.href),function(n){var a=m.isString(n)?i(n):n;return a.protocol===e.protocol&&a.host===e.host}}():function(){return!0},ee=[],ne=[],ae="undefined"!=typeof Uint8Array?Uint8Array:Array,ie=!1;function te(){ie=!0;for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=0,a=e.length;n<a;++n)ee[n]=e[n],ne[e.charCodeAt(n)]=n;ne["-".charCodeAt(0)]=62,ne["_".charCodeAt(0)]=63}function oe(e,n,a){for(var i,t,o=[],s=n;s<a;s+=3)i=(e[s]<<16)+(e[s+1]<<8)+e[s+2],o.push(ee[(t=i)>>18&63]+ee[t>>12&63]+ee[t>>6&63]+ee[63&t]);return o.join("")}function se(e){var n;ie||te();for(var a=e.length,i=a%3,t="",o=[],s=16383,r=0,c=a-i;r<c;r+=s)o.push(oe(e,r,r+s>c?c:r+s));return 1===i?(n=e[a-1],t+=ee[n>>2],t+=ee[n<<4&63],t+="=="):2===i&&(n=(e[a-2]<<8)+e[a-1],t+=ee[n>>10],t+=ee[n>>4&63],t+=ee[n<<2&63],t+="="),o.push(t),o.join("")}function re(e,n,a,i,t){var o,s,r=8*t-i-1,c=(1<<r)-1,p=c>>1,l=-7,u=a?t-1:0,d=a?-1:1,m=e[n+u];for(u+=d,o=m&(1<<-l)-1,m>>=-l,l+=r;l>0;o=256*o+e[n+u],u+=d,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=i;l>0;s=256*s+e[n+u],u+=d,l-=8);if(0===o)o=1-p;else{if(o===c)return s?NaN:1/0*(m?-1:1);s+=Math.pow(2,i),o-=p}return(m?-1:1)*s*Math.pow(2,o-i)}function ce(e,n,a,i,t,o){var s,r,c,p=8*o-t-1,l=(1<<p)-1,u=l>>1,d=23===t?Math.pow(2,-24)-Math.pow(2,-77):0,m=i?0:o-1,h=i?1:-1,f=n<0||0===n&&1/n<0?1:0;for(n=Math.abs(n),isNaN(n)||n===1/0?(r=isNaN(n)?1:0,s=l):(s=Math.floor(Math.log(n)/Math.LN2),n*(c=Math.pow(2,-s))<1&&(s--,c*=2),(n+=s+u>=1?d/c:d*Math.pow(2,1-u))*c>=2&&(s++,c/=2),s+u>=l?(r=0,s=l):s+u>=1?(r=(n*c-1)*Math.pow(2,t),s+=u):(r=n*Math.pow(2,u-1)*Math.pow(2,t),s=0));t>=8;e[a+m]=255&r,m+=h,r/=256,t-=8);for(s=s<<t|r,p+=t;p>0;e[a+m]=255&s,m+=h,s/=256,p-=8);e[a+m-h]|=128*f}var pe={}.toString,le=Array.isArray||function(e){return"[object Array]"==pe.call(e)};function ue(){return me.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function de(e,n){if(ue()<n)throw new RangeError("Invalid typed array length");return me.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(n)).__proto__=me.prototype:(null===e&&(e=new me(n)),e.length=n),e}function me(e,n,a){if(!(me.TYPED_ARRAY_SUPPORT||this instanceof me))return new me(e,n,a);if("number"==typeof e){if("string"==typeof n)throw new Error("If encoding is specified then the first argument must be a string");return ve(this,e)}return he(this,e,n,a)}function he(e,n,a,i){if("number"==typeof n)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&n instanceof ArrayBuffer?function(e,n,a,i){if(n.byteLength,a<0||n.byteLength<a)throw new RangeError("'offset' is out of bounds");if(n.byteLength<a+(i||0))throw new RangeError("'length' is out of bounds");return n=void 0===a&&void 0===i?new Uint8Array(n):void 0===i?new Uint8Array(n,a):new Uint8Array(n,a,i),me.TYPED_ARRAY_SUPPORT?(e=n).__proto__=me.prototype:e=xe(e,n),e}(e,n,a,i):"string"==typeof n?function(e,n,a){if("string"==typeof a&&""!==a||(a="utf8"),!me.isEncoding(a))throw new TypeError('"encoding" must be a valid string encoding');var i=0|we(n,a),t=(e=de(e,i)).write(n,a);return t!==i&&(e=e.slice(0,t)),e}(e,n,a):function(e,n){if(be(n)){var a=0|ge(n.length);return 0===(e=de(e,a)).length||n.copy(e,0,0,a),e}if(n){if("undefined"!=typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!=typeof n.length||(i=n.length)!=i?de(e,0):xe(e,n);if("Buffer"===n.type&&le(n.data))return xe(e,n.data)}var i;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,n)}function fe(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function ve(e,n){if(fe(n),e=de(e,n<0?0:0|ge(n)),!me.TYPED_ARRAY_SUPPORT)for(var a=0;a<n;++a)e[a]=0;return e}function xe(e,n){var a=n.length<0?0:0|ge(n.length);e=de(e,a);for(var i=0;i<a;i+=1)e[i]=255&n[i];return e}function ge(e){if(e>=ue())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+ue().toString(16)+" bytes");return 0|e}function be(e){return!(null==e||!e._isBuffer)}function we(e,n){if(be(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var a=e.length;if(0===a)return 0;for(var i=!1;;)switch(n){case"ascii":case"latin1":case"binary":return a;case"utf8":case"utf-8":case void 0:return We(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*a;case"hex":return a>>>1;case"base64":return Ve(e).length;default:if(i)return We(e).length;n=(""+n).toLowerCase(),i=!0}}function _e(e,n,a){var i=!1;if((void 0===n||n<0)&&(n=0),n>this.length)return"";if((void 0===a||a>this.length)&&(a=this.length),a<=0)return"";if((a>>>=0)<=(n>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return Be(this,n,a);case"utf8":case"utf-8":return Le(this,n,a);case"ascii":return Ue(this,n,a);case"latin1":case"binary":return qe(this,n,a);case"base64":return Oe(this,n,a);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Me(this,n,a);default:if(i)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),i=!0}}function ye(e,n,a){var i=e[n];e[n]=e[a],e[a]=i}function ke(e,n,a,i,t){if(0===e.length)return-1;if("string"==typeof a?(i=a,a=0):a>2147483647?a=2147483647:a<-2147483648&&(a=-2147483648),a=+a,isNaN(a)&&(a=t?0:e.length-1),a<0&&(a=e.length+a),a>=e.length){if(t)return-1;a=e.length-1}else if(a<0){if(!t)return-1;a=0}if("string"==typeof n&&(n=me.from(n,i)),be(n))return 0===n.length?-1:Ee(e,n,a,i,t);if("number"==typeof n)return n&=255,me.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?t?Uint8Array.prototype.indexOf.call(e,n,a):Uint8Array.prototype.lastIndexOf.call(e,n,a):Ee(e,[n],a,i,t);throw new TypeError("val must be string, number or Buffer")}function Ee(e,n,a,i,t){var o,s=1,r=e.length,c=n.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(e.length<2||n.length<2)return-1;s=2,r/=2,c/=2,a/=2}function p(e,n){return 1===s?e[n]:e.readUInt16BE(n*s)}if(t){var l=-1;for(o=a;o<r;o++)if(p(e,o)===p(n,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===c)return l*s}else-1!==l&&(o-=o-l),l=-1}else for(a+c>r&&(a=r-c),o=a;o>=0;o--){for(var u=!0,d=0;d<c;d++)if(p(e,o+d)!==p(n,d)){u=!1;break}if(u)return o}return-1}function je(e,n,a,i){a=Number(a)||0;var t=e.length-a;i?(i=Number(i))>t&&(i=t):i=t;var o=n.length;if(o%2!=0)throw new TypeError("Invalid hex string");i>o/2&&(i=o/2);for(var s=0;s<i;++s){var r=parseInt(n.substr(2*s,2),16);if(isNaN(r))return s;e[a+s]=r}return s}function Re(e,n,a,i){return Ke(We(n,e.length-a),e,a,i)}function Ae(e,n,a,i){return Ke(function(e){for(var n=[],a=0;a<e.length;++a)n.push(255&e.charCodeAt(a));return n}(n),e,a,i)}function ze(e,n,a,i){return Ae(e,n,a,i)}function Se(e,n,a,i){return Ke(Ve(n),e,a,i)}function Te(e,n,a,i){return Ke(function(e,n){for(var a,i,t,o=[],s=0;s<e.length&&!((n-=2)<0);++s)i=(a=e.charCodeAt(s))>>8,t=a%256,o.push(t),o.push(i);return o}(n,e.length-a),e,a,i)}function Oe(e,n,a){return 0===n&&a===e.length?se(e):se(e.slice(n,a))}function Le(e,n,a){a=Math.min(e.length,a);for(var i=[],t=n;t<a;){var o,s,r,c,p=e[t],l=null,u=p>239?4:p>223?3:p>191?2:1;if(t+u<=a)switch(u){case 1:p<128&&(l=p);break;case 2:128==(192&(o=e[t+1]))&&(c=(31&p)<<6|63&o)>127&&(l=c);break;case 3:o=e[t+1],s=e[t+2],128==(192&o)&&128==(192&s)&&(c=(15&p)<<12|(63&o)<<6|63&s)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:o=e[t+1],s=e[t+2],r=e[t+3],128==(192&o)&&128==(192&s)&&128==(192&r)&&(c=(15&p)<<18|(63&o)<<12|(63&s)<<6|63&r)>65535&&c<1114112&&(l=c)}null===l?(l=65533,u=1):l>65535&&(l-=65536,i.push(l>>>10&1023|55296),l=56320|1023&l),i.push(l),t+=u}return function(e){var n=e.length;if(n<=Ce)return String.fromCharCode.apply(String,e);for(var a="",i=0;i<n;)a+=String.fromCharCode.apply(String,e.slice(i,i+=Ce));return a}(i)}me.TYPED_ARRAY_SUPPORT=void 0===w.TYPED_ARRAY_SUPPORT||w.TYPED_ARRAY_SUPPORT,me.poolSize=8192,me._augment=function(e){return e.__proto__=me.prototype,e},me.from=function(e,n,a){return he(null,e,n,a)},me.TYPED_ARRAY_SUPPORT&&(me.prototype.__proto__=Uint8Array.prototype,me.__proto__=Uint8Array),me.alloc=function(e,n,a){return function(e,n,a,i){return fe(n),n<=0?de(e,n):void 0!==a?"string"==typeof i?de(e,n).fill(a,i):de(e,n).fill(a):de(e,n)}(null,e,n,a)},me.allocUnsafe=function(e){return ve(null,e)},me.allocUnsafeSlow=function(e){return ve(null,e)},me.isBuffer=Ge,me.compare=function(e,n){if(!be(e)||!be(n))throw new TypeError("Arguments must be Buffers");if(e===n)return 0;for(var a=e.length,i=n.length,t=0,o=Math.min(a,i);t<o;++t)if(e[t]!==n[t]){a=e[t],i=n[t];break}return a<i?-1:i<a?1:0},me.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},me.concat=function(e,n){if(!le(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return me.alloc(0);var a;if(void 0===n)for(n=0,a=0;a<e.length;++a)n+=e[a].length;var i=me.allocUnsafe(n),t=0;for(a=0;a<e.length;++a){var o=e[a];if(!be(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(i,t),t+=o.length}return i},me.byteLength=we,me.prototype._isBuffer=!0,me.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var n=0;n<e;n+=2)ye(this,n,n+1);return this},me.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var n=0;n<e;n+=4)ye(this,n,n+3),ye(this,n+1,n+2);return this},me.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var n=0;n<e;n+=8)ye(this,n,n+7),ye(this,n+1,n+6),ye(this,n+2,n+5),ye(this,n+3,n+4);return this},me.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?Le(this,0,e):_e.apply(this,arguments)},me.prototype.equals=function(e){if(!be(e))throw new TypeError("Argument must be a Buffer");return this===e||0===me.compare(this,e)},me.prototype.inspect=function(){var e="";return this.length>0&&(e=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(e+=" ... ")),"<Buffer "+e+">"},me.prototype.compare=function(e,n,a,i,t){if(!be(e))throw new TypeError("Argument must be a Buffer");if(void 0===n&&(n=0),void 0===a&&(a=e?e.length:0),void 0===i&&(i=0),void 0===t&&(t=this.length),n<0||a>e.length||i<0||t>this.length)throw new RangeError("out of range index");if(i>=t&&n>=a)return 0;if(i>=t)return-1;if(n>=a)return 1;if(this===e)return 0;for(var o=(t>>>=0)-(i>>>=0),s=(a>>>=0)-(n>>>=0),r=Math.min(o,s),c=this.slice(i,t),p=e.slice(n,a),l=0;l<r;++l)if(c[l]!==p[l]){o=c[l],s=p[l];break}return o<s?-1:s<o?1:0},me.prototype.includes=function(e,n,a){return-1!==this.indexOf(e,n,a)},me.prototype.indexOf=function(e,n,a){return ke(this,e,n,a,!0)},me.prototype.lastIndexOf=function(e,n,a){return ke(this,e,n,a,!1)},me.prototype.write=function(e,n,a,i){if(void 0===n)i="utf8",a=this.length,n=0;else if(void 0===a&&"string"==typeof n)i=n,a=this.length,n=0;else{if(!isFinite(n))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");n|=0,isFinite(a)?(a|=0,void 0===i&&(i="utf8")):(i=a,a=void 0)}var t=this.length-n;if((void 0===a||a>t)&&(a=t),e.length>0&&(a<0||n<0)||n>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var o=!1;;)switch(i){case"hex":return je(this,e,n,a);case"utf8":case"utf-8":return Re(this,e,n,a);case"ascii":return Ae(this,e,n,a);case"latin1":case"binary":return ze(this,e,n,a);case"base64":return Se(this,e,n,a);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Te(this,e,n,a);default:if(o)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),o=!0}},me.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var Ce=4096;function Ue(e,n,a){var i="";a=Math.min(e.length,a);for(var t=n;t<a;++t)i+=String.fromCharCode(127&e[t]);return i}function qe(e,n,a){var i="";a=Math.min(e.length,a);for(var t=n;t<a;++t)i+=String.fromCharCode(e[t]);return i}function Be(e,n,a){var i=e.length;(!n||n<0)&&(n=0),(!a||a<0||a>i)&&(a=i);for(var t="",o=n;o<a;++o)t+=Ye(e[o]);return t}function Me(e,n,a){for(var i=e.slice(n,a),t="",o=0;o<i.length;o+=2)t+=String.fromCharCode(i[o]+256*i[o+1]);return t}function Pe(e,n,a){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+n>a)throw new RangeError("Trying to access beyond buffer length")}function Ne(e,n,a,i,t,o){if(!be(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(n>t||n<o)throw new RangeError('"value" argument is out of bounds');if(a+i>e.length)throw new RangeError("Index out of range")}function De(e,n,a,i){n<0&&(n=65535+n+1);for(var t=0,o=Math.min(e.length-a,2);t<o;++t)e[a+t]=(n&255<<8*(i?t:1-t))>>>8*(i?t:1-t)}function Ie(e,n,a,i){n<0&&(n=4294967295+n+1);for(var t=0,o=Math.min(e.length-a,4);t<o;++t)e[a+t]=n>>>8*(i?t:3-t)&255}function Fe(e,n,a,i,t,o){if(a+i>e.length)throw new RangeError("Index out of range");if(a<0)throw new RangeError("Index out of range")}function Ze(e,n,a,i,t){return t||Fe(e,0,a,4),ce(e,n,a,i,23,4),a+4}function He(e,n,a,i,t){return t||Fe(e,0,a,8),ce(e,n,a,i,52,8),a+8}me.prototype.slice=function(e,n){var a,i=this.length;if((e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(n=void 0===n?i:~~n)<0?(n+=i)<0&&(n=0):n>i&&(n=i),n<e&&(n=e),me.TYPED_ARRAY_SUPPORT)(a=this.subarray(e,n)).__proto__=me.prototype;else{var t=n-e;a=new me(t,void 0);for(var o=0;o<t;++o)a[o]=this[o+e]}return a},me.prototype.readUIntLE=function(e,n,a){e|=0,n|=0,a||Pe(e,n,this.length);for(var i=this[e],t=1,o=0;++o<n&&(t*=256);)i+=this[e+o]*t;return i},me.prototype.readUIntBE=function(e,n,a){e|=0,n|=0,a||Pe(e,n,this.length);for(var i=this[e+--n],t=1;n>0&&(t*=256);)i+=this[e+--n]*t;return i},me.prototype.readUInt8=function(e,n){return n||Pe(e,1,this.length),this[e]},me.prototype.readUInt16LE=function(e,n){return n||Pe(e,2,this.length),this[e]|this[e+1]<<8},me.prototype.readUInt16BE=function(e,n){return n||Pe(e,2,this.length),this[e]<<8|this[e+1]},me.prototype.readUInt32LE=function(e,n){return n||Pe(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},me.prototype.readUInt32BE=function(e,n){return n||Pe(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},me.prototype.readIntLE=function(e,n,a){e|=0,n|=0,a||Pe(e,n,this.length);for(var i=this[e],t=1,o=0;++o<n&&(t*=256);)i+=this[e+o]*t;return i>=(t*=128)&&(i-=Math.pow(2,8*n)),i},me.prototype.readIntBE=function(e,n,a){e|=0,n|=0,a||Pe(e,n,this.length);for(var i=n,t=1,o=this[e+--i];i>0&&(t*=256);)o+=this[e+--i]*t;return o>=(t*=128)&&(o-=Math.pow(2,8*n)),o},me.prototype.readInt8=function(e,n){return n||Pe(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},me.prototype.readInt16LE=function(e,n){n||Pe(e,2,this.length);var a=this[e]|this[e+1]<<8;return 32768&a?4294901760|a:a},me.prototype.readInt16BE=function(e,n){n||Pe(e,2,this.length);var a=this[e+1]|this[e]<<8;return 32768&a?4294901760|a:a},me.prototype.readInt32LE=function(e,n){return n||Pe(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},me.prototype.readInt32BE=function(e,n){return n||Pe(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},me.prototype.readFloatLE=function(e,n){return n||Pe(e,4,this.length),re(this,e,!0,23,4)},me.prototype.readFloatBE=function(e,n){return n||Pe(e,4,this.length),re(this,e,!1,23,4)},me.prototype.readDoubleLE=function(e,n){return n||Pe(e,8,this.length),re(this,e,!0,52,8)},me.prototype.readDoubleBE=function(e,n){return n||Pe(e,8,this.length),re(this,e,!1,52,8)},me.prototype.writeUIntLE=function(e,n,a,i){e=+e,n|=0,a|=0,i||Ne(this,e,n,a,Math.pow(2,8*a)-1,0);var t=1,o=0;for(this[n]=255&e;++o<a&&(t*=256);)this[n+o]=e/t&255;return n+a},me.prototype.writeUIntBE=function(e,n,a,i){e=+e,n|=0,a|=0,i||Ne(this,e,n,a,Math.pow(2,8*a)-1,0);var t=a-1,o=1;for(this[n+t]=255&e;--t>=0&&(o*=256);)this[n+t]=e/o&255;return n+a},me.prototype.writeUInt8=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,1,255,0),me.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[n]=255&e,n+1},me.prototype.writeUInt16LE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,2,65535,0),me.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):De(this,e,n,!0),n+2},me.prototype.writeUInt16BE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,2,65535,0),me.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):De(this,e,n,!1),n+2},me.prototype.writeUInt32LE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,4,4294967295,0),me.TYPED_ARRAY_SUPPORT?(this[n+3]=e>>>24,this[n+2]=e>>>16,this[n+1]=e>>>8,this[n]=255&e):Ie(this,e,n,!0),n+4},me.prototype.writeUInt32BE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,4,4294967295,0),me.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):Ie(this,e,n,!1),n+4},me.prototype.writeIntLE=function(e,n,a,i){if(e=+e,n|=0,!i){var t=Math.pow(2,8*a-1);Ne(this,e,n,a,t-1,-t)}var o=0,s=1,r=0;for(this[n]=255&e;++o<a&&(s*=256);)e<0&&0===r&&0!==this[n+o-1]&&(r=1),this[n+o]=(e/s>>0)-r&255;return n+a},me.prototype.writeIntBE=function(e,n,a,i){if(e=+e,n|=0,!i){var t=Math.pow(2,8*a-1);Ne(this,e,n,a,t-1,-t)}var o=a-1,s=1,r=0;for(this[n+o]=255&e;--o>=0&&(s*=256);)e<0&&0===r&&0!==this[n+o+1]&&(r=1),this[n+o]=(e/s>>0)-r&255;return n+a},me.prototype.writeInt8=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,1,127,-128),me.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[n]=255&e,n+1},me.prototype.writeInt16LE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,2,32767,-32768),me.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):De(this,e,n,!0),n+2},me.prototype.writeInt16BE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,2,32767,-32768),me.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):De(this,e,n,!1),n+2},me.prototype.writeInt32LE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,4,2147483647,-2147483648),me.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8,this[n+2]=e>>>16,this[n+3]=e>>>24):Ie(this,e,n,!0),n+4},me.prototype.writeInt32BE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),me.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):Ie(this,e,n,!1),n+4},me.prototype.writeFloatLE=function(e,n,a){return Ze(this,e,n,!0,a)},me.prototype.writeFloatBE=function(e,n,a){return Ze(this,e,n,!1,a)},me.prototype.writeDoubleLE=function(e,n,a){return He(this,e,n,!0,a)},me.prototype.writeDoubleBE=function(e,n,a){return He(this,e,n,!1,a)},me.prototype.copy=function(e,n,a,i){if(a||(a=0),i||0===i||(i=this.length),n>=e.length&&(n=e.length),n||(n=0),i>0&&i<a&&(i=a),i===a)return 0;if(0===e.length||0===this.length)return 0;if(n<0)throw new RangeError("targetStart out of bounds");if(a<0||a>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-n<i-a&&(i=e.length-n+a);var t,o=i-a;if(this===e&&a<n&&n<i)for(t=o-1;t>=0;--t)e[t+n]=this[t+a];else if(o<1e3||!me.TYPED_ARRAY_SUPPORT)for(t=0;t<o;++t)e[t+n]=this[t+a];else Uint8Array.prototype.set.call(e,this.subarray(a,a+o),n);return o},me.prototype.fill=function(e,n,a,i){if("string"==typeof e){if("string"==typeof n?(i=n,n=0,a=this.length):"string"==typeof a&&(i=a,a=this.length),1===e.length){var t=e.charCodeAt(0);t<256&&(e=t)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!me.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(n<0||this.length<n||this.length<a)throw new RangeError("Out of range index");if(a<=n)return this;var o;if(n>>>=0,a=void 0===a?this.length:a>>>0,e||(e=0),"number"==typeof e)for(o=n;o<a;++o)this[o]=e;else{var s=be(e)?e:We(new me(e,i).toString()),r=s.length;for(o=0;o<a-n;++o)this[o+n]=s[o%r]}return this};var $e=/[^+\/0-9A-Za-z-_]/g;function Ye(e){return e<16?"0"+e.toString(16):e.toString(16)}function We(e,n){var a;n=n||1/0;for(var i=e.length,t=null,o=[],s=0;s<i;++s){if((a=e.charCodeAt(s))>55295&&a<57344){if(!t){if(a>56319){(n-=3)>-1&&o.push(239,191,189);continue}if(s+1===i){(n-=3)>-1&&o.push(239,191,189);continue}t=a;continue}if(a<56320){(n-=3)>-1&&o.push(239,191,189),t=a;continue}a=65536+(t-55296<<10|a-56320)}else t&&(n-=3)>-1&&o.push(239,191,189);if(t=null,a<128){if((n-=1)<0)break;o.push(a)}else if(a<2048){if((n-=2)<0)break;o.push(a>>6|192,63&a|128)}else if(a<65536){if((n-=3)<0)break;o.push(a>>12|224,a>>6&63|128,63&a|128)}else{if(!(a<1114112))throw new Error("Invalid code point");if((n-=4)<0)break;o.push(a>>18|240,a>>12&63|128,a>>6&63|128,63&a|128)}}return o}function Ve(e){return function(e){var n,a,i,t,o,s;ie||te();var r=e.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");o="="===e[r-2]?2:"="===e[r-1]?1:0,s=new ae(3*r/4-o),i=o>0?r-4:r;var c=0;for(n=0,a=0;n<i;n+=4,a+=3)t=ne[e.charCodeAt(n)]<<18|ne[e.charCodeAt(n+1)]<<12|ne[e.charCodeAt(n+2)]<<6|ne[e.charCodeAt(n+3)],s[c++]=t>>16&255,s[c++]=t>>8&255,s[c++]=255&t;return 2===o?(t=ne[e.charCodeAt(n)]<<2|ne[e.charCodeAt(n+1)]>>4,s[c++]=255&t):1===o&&(t=ne[e.charCodeAt(n)]<<10|ne[e.charCodeAt(n+1)]<<4|ne[e.charCodeAt(n+2)]>>2,s[c++]=t>>8&255,s[c++]=255&t),s}(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace($e,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Ke(e,n,a,i){for(var t=0;t<i&&!(t+a>=n.length||t>=e.length);++t)n[t+a]=e[t];return t}function Ge(e){return null!=e&&(!!e._isBuffer||Xe(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&Xe(e.slice(0,0))}(e))}function Xe(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}var Je,Qe,en=ln(w.fetch)&&ln(w.ReadableStream);function nn(e){Qe||(Qe=new w.XMLHttpRequest).open("GET",w.location.host?"/":"https://example.com");try{return Qe.responseType=e,Qe.responseType===e}catch(e){return!1}}var an=void 0!==w.ArrayBuffer,tn=an&&ln(w.ArrayBuffer.prototype.slice),on=an&&nn("arraybuffer"),sn=!en&&tn&&nn("ms-stream"),rn=!en&&an&&nn("moz-chunked-arraybuffer"),cn=ln(Qe.overrideMimeType),pn=ln(w.VBArray);function ln(e){return"function"==typeof e}Qe=null;var un="function"==typeof Object.create?function(e,n){e.super_=n,e.prototype=Object.create(n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,n){e.super_=n;var a=function(){};a.prototype=n.prototype,e.prototype=new a,e.prototype.constructor=e},dn=/%[sdj%]/g;function mn(e){if(!Sn(e)){for(var n=[],a=0;a<arguments.length;a++)n.push(gn(arguments[a]));return n.join(" ")}a=1;for(var i=arguments,t=i.length,o=String(e).replace(dn,(function(e){if("%%"===e)return"%";if(a>=t)return e;switch(e){case"%s":return String(i[a++]);case"%d":return Number(i[a++]);case"%j":try{return JSON.stringify(i[a++])}catch(e){return"[Circular]"}default:return e}})),s=i[a];a<t;s=i[++a])Rn(s)||!Ln(s)?o+=" "+s:o+=" "+gn(s);return o}function hn(e,n){if(Tn(w.process))return function(){return hn(e,n).apply(this,arguments)};if(!0===$.noDeprecation)return e;var a=!1;return function(){if(!a){if($.throwDeprecation)throw new Error(n);$.traceDeprecation?console.trace(n):console.error(n),a=!0}return e.apply(this,arguments)}}var fn,vn={};function xn(e){return Tn(fn)&&(fn=$.env.NODE_DEBUG||""),e=e.toUpperCase(),vn[e]||(new RegExp("\\b"+e+"\\b","i").test(fn)?vn[e]=function(){var n=mn.apply(null,arguments);console.error("%s %d: %s",e,0,n)}:vn[e]=function(){}),vn[e]}function gn(e,n){var a={seen:[],stylize:wn};return arguments.length>=3&&(a.depth=arguments[2]),arguments.length>=4&&(a.colors=arguments[3]),jn(n)?a.showHidden=n:n&&In(a,n),Tn(a.showHidden)&&(a.showHidden=!1),Tn(a.depth)&&(a.depth=2),Tn(a.colors)&&(a.colors=!1),Tn(a.customInspect)&&(a.customInspect=!0),a.colors&&(a.stylize=bn),_n(a,e,a.depth)}function bn(e,n){var a=gn.styles[n];return a?"["+gn.colors[a][0]+"m"+e+"["+gn.colors[a][1]+"m":e}function wn(e,n){return e}function _n(e,n,a){if(e.customInspect&&n&&qn(n.inspect)&&n.inspect!==gn&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(a,e);return Sn(i)||(i=_n(e,i,a)),i}var t=function(e,n){if(Tn(n))return e.stylize("undefined","undefined");if(Sn(n)){var a="'"+JSON.stringify(n).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(a,"string")}return zn(n)?e.stylize(""+n,"number"):jn(n)?e.stylize(""+n,"boolean"):Rn(n)?e.stylize("null","null"):void 0}(e,n);if(t)return t;var o=Object.keys(n),s=function(e){var n={};return e.forEach((function(e,a){n[e]=!0})),n}(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(n)),Un(n)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return yn(n);if(0===o.length){if(qn(n)){var r=n.name?": "+n.name:"";return e.stylize("[Function"+r+"]","special")}if(On(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(Cn(n))return e.stylize(Date.prototype.toString.call(n),"date");if(Un(n))return yn(n)}var c,p="",l=!1,u=["{","}"];return En(n)&&(l=!0,u=["[","]"]),qn(n)&&(p=" [Function"+(n.name?": "+n.name:"")+"]"),On(n)&&(p=" "+RegExp.prototype.toString.call(n)),Cn(n)&&(p=" "+Date.prototype.toUTCString.call(n)),Un(n)&&(p=" "+yn(n)),0!==o.length||l&&0!=n.length?a<0?On(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),c=l?function(e,n,a,i,t){for(var o=[],s=0,r=n.length;s<r;++s)Fn(n,String(s))?o.push(kn(e,n,a,i,String(s),!0)):o.push("");return t.forEach((function(t){t.match(/^\d+$/)||o.push(kn(e,n,a,i,t,!0))})),o}(e,n,a,s,o):o.map((function(i){return kn(e,n,a,s,i,l)})),e.seen.pop(),function(e,n,a){return e.reduce((function(e,n){return n.indexOf("\n"),e+n.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?a[0]+(""===n?"":n+"\n ")+" "+e.join(",\n  ")+" "+a[1]:a[0]+n+" "+e.join(", ")+" "+a[1]}(c,p,u)):u[0]+p+u[1]}function yn(e){return"["+Error.prototype.toString.call(e)+"]"}function kn(e,n,a,i,t,o){var s,r,c;if((c=Object.getOwnPropertyDescriptor(n,t)||{value:n[t]}).get?r=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(r=e.stylize("[Setter]","special")),Fn(i,t)||(s="["+t+"]"),r||(e.seen.indexOf(c.value)<0?(r=Rn(a)?_n(e,c.value,null):_n(e,c.value,a-1)).indexOf("\n")>-1&&(r=o?r.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+r.split("\n").map((function(e){return"   "+e})).join("\n")):r=e.stylize("[Circular]","special")),Tn(s)){if(o&&t.match(/^\d+$/))return r;(s=JSON.stringify(""+t)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+r}function En(e){return Array.isArray(e)}function jn(e){return"boolean"==typeof e}function Rn(e){return null===e}function An(e){return null==e}function zn(e){return"number"==typeof e}function Sn(e){return"string"==typeof e}function Tn(e){return void 0===e}function On(e){return Ln(e)&&"[object RegExp]"===Mn(e)}function Ln(e){return"object"==typeof e&&null!==e}function Cn(e){return Ln(e)&&"[object Date]"===Mn(e)}function Un(e){return Ln(e)&&("[object Error]"===Mn(e)||e instanceof Error)}function qn(e){return"function"==typeof e}function Bn(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e}function Mn(e){return Object.prototype.toString.call(e)}function Pn(e){return e<10?"0"+e.toString(10):e.toString(10)}gn.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},gn.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var Nn=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function Dn(){var e=new Date,n=[Pn(e.getHours()),Pn(e.getMinutes()),Pn(e.getSeconds())].join(":");return[e.getDate(),Nn[e.getMonth()],n].join(" ")}function In(e,n){if(!n||!Ln(n))return e;for(var a=Object.keys(n),i=a.length;i--;)e[a[i]]=n[a[i]];return e}function Fn(e,n){return Object.prototype.hasOwnProperty.call(e,n)}var Zn={inherits:un,_extend:In,log:function(){console.log("%s - %s",Dn(),mn.apply(null,arguments))},isBuffer:function(e){return me.isBuffer(e)},isPrimitive:Bn,isFunction:qn,isError:Un,isDate:Cn,isObject:Ln,isRegExp:On,isUndefined:Tn,isSymbol:function(e){return"symbol"==typeof e},isString:Sn,isNumber:zn,isNullOrUndefined:An,isNull:Rn,isBoolean:jn,isArray:En,inspect:gn,deprecate:hn,format:mn,debuglog:xn};function Hn(){}function $n(){$n.init.call(this)}function Yn(e){return void 0===e._maxListeners?$n.defaultMaxListeners:e._maxListeners}function Wn(e,n,a){if(n)e.call(a);else for(var i=e.length,t=na(e,i),o=0;o<i;++o)t[o].call(a)}function Vn(e,n,a,i){if(n)e.call(a,i);else for(var t=e.length,o=na(e,t),s=0;s<t;++s)o[s].call(a,i)}function Kn(e,n,a,i,t){if(n)e.call(a,i,t);else for(var o=e.length,s=na(e,o),r=0;r<o;++r)s[r].call(a,i,t)}function Gn(e,n,a,i,t,o){if(n)e.call(a,i,t,o);else for(var s=e.length,r=na(e,s),c=0;c<s;++c)r[c].call(a,i,t,o)}function Xn(e,n,a,i){if(n)e.apply(a,i);else for(var t=e.length,o=na(e,t),s=0;s<t;++s)o[s].apply(a,i)}function Jn(e,n,a,i){var t,o,s,r;if("function"!=typeof a)throw new TypeError('"listener" argument must be a function');if((o=e._events)?(o.newListener&&(e.emit("newListener",n,a.listener?a.listener:a),o=e._events),s=o[n]):(o=e._events=new Hn,e._eventsCount=0),s){if("function"==typeof s?s=o[n]=i?[a,s]:[s,a]:i?s.unshift(a):s.push(a),!s.warned&&(t=Yn(e))&&t>0&&s.length>t){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+n+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=n,c.count=s.length,r=c,"function"==typeof console.warn?console.warn(r):console.log(r)}}else s=o[n]=a,++e._eventsCount;return e}function Qn(e,n,a){var i=!1;function t(){e.removeListener(n,t),i||(i=!0,a.apply(e,arguments))}return t.listener=a,t}function ea(e){var n=this._events;if(n){var a=n[e];if("function"==typeof a)return 1;if(a)return a.length}return 0}function na(e,n){for(var a=new Array(n);n--;)a[n]=e[n];return a}function aa(){this.head=null,this.tail=null,this.length=0}Hn.prototype=Object.create(null),$n.EventEmitter=$n,$n.usingDomains=!1,$n.prototype.domain=void 0,$n.prototype._events=void 0,$n.prototype._maxListeners=void 0,$n.defaultMaxListeners=10,$n.init=function(){this.domain=null,$n.usingDomains&&(void 0).active,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new Hn,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},$n.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},$n.prototype.getMaxListeners=function(){return Yn(this)},$n.prototype.emit=function(e){var n,a,i,t,o,s,r,c="error"===e;if(s=this._events)c=c&&null==s.error;else if(!c)return!1;if(r=this.domain,c){if(n=arguments[1],!r){if(n instanceof Error)throw n;var p=new Error('Uncaught, unspecified "error" event. ('+n+")");throw p.context=n,p}return n||(n=new Error('Uncaught, unspecified "error" event')),n.domainEmitter=this,n.domain=r,n.domainThrown=!1,r.emit("error",n),!1}if(!(a=s[e]))return!1;var l="function"==typeof a;switch(i=arguments.length){case 1:Wn(a,l,this);break;case 2:Vn(a,l,this,arguments[1]);break;case 3:Kn(a,l,this,arguments[1],arguments[2]);break;case 4:Gn(a,l,this,arguments[1],arguments[2],arguments[3]);break;default:for(t=new Array(i-1),o=1;o<i;o++)t[o-1]=arguments[o];Xn(a,l,this,t)}return!0},$n.prototype.addListener=function(e,n){return Jn(this,e,n,!1)},$n.prototype.on=$n.prototype.addListener,$n.prototype.prependListener=function(e,n){return Jn(this,e,n,!0)},$n.prototype.once=function(e,n){if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');return this.on(e,Qn(this,e,n)),this},$n.prototype.prependOnceListener=function(e,n){if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,Qn(this,e,n)),this},$n.prototype.removeListener=function(e,n){var a,i,t,o,s;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');if(!(i=this._events))return this;if(!(a=i[e]))return this;if(a===n||a.listener&&a.listener===n)0==--this._eventsCount?this._events=new Hn:(delete i[e],i.removeListener&&this.emit("removeListener",e,a.listener||n));else if("function"!=typeof a){for(t=-1,o=a.length;o-- >0;)if(a[o]===n||a[o].listener&&a[o].listener===n){s=a[o].listener,t=o;break}if(t<0)return this;if(1===a.length){if(a[0]=void 0,0==--this._eventsCount)return this._events=new Hn,this;delete i[e]}else!function(e,n){for(var a=n,i=a+1,t=e.length;i<t;a+=1,i+=1)e[a]=e[i];e.pop()}(a,t);i.removeListener&&this.emit("removeListener",e,s||n)}return this},$n.prototype.removeAllListeners=function(e){var n,a;if(!(a=this._events))return this;if(!a.removeListener)return 0===arguments.length?(this._events=new Hn,this._eventsCount=0):a[e]&&(0==--this._eventsCount?this._events=new Hn:delete a[e]),this;if(0===arguments.length){for(var i,t=Object.keys(a),o=0;o<t.length;++o)"removeListener"!==(i=t[o])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=new Hn,this._eventsCount=0,this}if("function"==typeof(n=a[e]))this.removeListener(e,n);else if(n)do{this.removeListener(e,n[n.length-1])}while(n[0]);return this},$n.prototype.listeners=function(e){var n,a=this._events;return a&&(n=a[e])?"function"==typeof n?[n.listener||n]:function(e){for(var n=new Array(e.length),a=0;a<n.length;++a)n[a]=e[a].listener||e[a];return n}(n):[]},$n.listenerCount=function(e,n){return"function"==typeof e.listenerCount?e.listenerCount(n):ea.call(e,n)},$n.prototype.listenerCount=ea,$n.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]},aa.prototype.push=function(e){var n={data:e,next:null};this.length>0?this.tail.next=n:this.head=n,this.tail=n,++this.length},aa.prototype.unshift=function(e){var n={data:e,next:this.head};0===this.length&&(this.tail=n),this.head=n,++this.length},aa.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},aa.prototype.clear=function(){this.head=this.tail=null,this.length=0},aa.prototype.join=function(e){if(0===this.length)return"";for(var n=this.head,a=""+n.data;n=n.next;)a+=e+n.data;return a},aa.prototype.concat=function(e){if(0===this.length)return me.alloc(0);if(1===this.length)return this.head.data;for(var n=me.allocUnsafe(e>>>0),a=this.head,i=0;a;)a.data.copy(n,i),i+=a.data.length,a=a.next;return n};var ia=me.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function ta(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),function(e){if(e&&!ia(e))throw new Error("Unknown encoding: "+e)}(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=sa;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=ra;break;default:return void(this.write=oa)}this.charBuffer=new me(6),this.charReceived=0,this.charLength=0}function oa(e){return e.toString(this.encoding)}function sa(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function ra(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}ta.prototype.write=function(e){for(var n="";this.charLength;){var a=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,a),this.charReceived+=a,this.charReceived<this.charLength)return"";if(e=e.slice(a,e.length),!((i=(n=this.charBuffer.slice(0,this.charLength).toString(this.encoding)).charCodeAt(n.length-1))>=55296&&i<=56319)){if(this.charReceived=this.charLength=0,0===e.length)return n;break}this.charLength+=this.surrogateSize,n=""}this.detectIncompleteChar(e);var i,t=e.length;if(this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,t),t-=this.charReceived),t=(n+=e.toString(this.encoding,0,t)).length-1,(i=n.charCodeAt(t))>=55296&&i<=56319){var o=this.surrogateSize;return this.charLength+=o,this.charReceived+=o,this.charBuffer.copy(this.charBuffer,o,0,o),e.copy(this.charBuffer,0,0,o),n.substring(0,t)}return n},ta.prototype.detectIncompleteChar=function(e){for(var n=e.length>=3?3:e.length;n>0;n--){var a=e[e.length-n];if(1==n&&a>>5==6){this.charLength=2;break}if(n<=2&&a>>4==14){this.charLength=3;break}if(n<=3&&a>>3==30){this.charLength=4;break}}this.charReceived=n},ta.prototype.end=function(e){var n="";if(e&&e.length&&(n=this.write(e)),this.charReceived){var a=this.charReceived,i=this.charBuffer,t=this.encoding;n+=i.slice(0,a).toString(t)}return n},la.ReadableState=pa;var ca=xn("stream");function pa(e,n){e=e||{},this.objectMode=!!e.objectMode,n instanceof Pa&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var a=e.highWaterMark,i=this.objectMode?16:16384;this.highWaterMark=a||0===a?a:i,this.highWaterMark=~~this.highWaterMark,this.buffer=new aa,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(this.decoder=new ta(e.encoding),this.encoding=e.encoding)}function la(e){if(!(this instanceof la))return new la(e);this._readableState=new pa(e,this),this.readable=!0,e&&"function"==typeof e.read&&(this._read=e.read),$n.call(this)}function ua(e,n,a,i,t){var o=function(e,n){var a=null;return me.isBuffer(n)||"string"==typeof n||null==n||e.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a}(n,a);if(o)e.emit("error",o);else if(null===a)n.reading=!1,function(e,n){if(!n.ended){if(n.decoder){var a=n.decoder.end();a&&a.length&&(n.buffer.push(a),n.length+=n.objectMode?1:a.length)}n.ended=!0,ha(e)}}(e,n);else if(n.objectMode||a&&a.length>0)if(n.ended&&!t){var s=new Error("stream.push() after EOF");e.emit("error",s)}else if(n.endEmitted&&t){var r=new Error("stream.unshift() after end event");e.emit("error",r)}else{var c;!n.decoder||t||i||(a=n.decoder.write(a),c=!n.objectMode&&0===a.length),t||(n.reading=!1),c||(n.flowing&&0===n.length&&!n.sync?(e.emit("data",a),e.read(0)):(n.length+=n.objectMode?1:a.length,t?n.buffer.unshift(a):n.buffer.push(a),n.needReadable&&ha(e))),function(e,n){n.readingMore||(n.readingMore=!0,L(va,e,n))}(e,n)}else t||(n.reading=!1);return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(n)}un(la,$n),la.prototype.push=function(e,n){var a=this._readableState;return a.objectMode||"string"!=typeof e||(n=n||a.defaultEncoding)!==a.encoding&&(e=me.from(e,n),n=""),ua(this,a,e,n,!1)},la.prototype.unshift=function(e){return ua(this,this._readableState,e,"",!0)},la.prototype.isPaused=function(){return!1===this._readableState.flowing},la.prototype.setEncoding=function(e){return this._readableState.decoder=new ta(e),this._readableState.encoding=e,this};var da=8388608;function ma(e,n){return e<=0||0===n.length&&n.ended?0:n.objectMode?1:e!=e?n.flowing&&n.length?n.buffer.head.data.length:n.length:(e>n.highWaterMark&&(n.highWaterMark=function(e){return e>=da?e=da:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=n.length?e:n.ended?n.length:(n.needReadable=!0,0))}function ha(e){var n=e._readableState;n.needReadable=!1,n.emittedReadable||(ca("emitReadable",n.flowing),n.emittedReadable=!0,n.sync?L(fa,e):fa(e))}function fa(e){ca("emit readable"),e.emit("readable"),ba(e)}function va(e,n){for(var a=n.length;!n.reading&&!n.flowing&&!n.ended&&n.length<n.highWaterMark&&(ca("maybeReadMore read 0"),e.read(0),a!==n.length);)a=n.length;n.readingMore=!1}function xa(e){ca("readable nexttick read 0"),e.read(0)}function ga(e,n){n.reading||(ca("resume read 0"),e.read(0)),n.resumeScheduled=!1,n.awaitDrain=0,e.emit("resume"),ba(e),n.flowing&&!n.reading&&e.read(0)}function ba(e){var n=e._readableState;for(ca("flow",n.flowing);n.flowing&&null!==e.read(););}function wa(e,n){return 0===n.length?null:(n.objectMode?a=n.buffer.shift():!e||e>=n.length?(a=n.decoder?n.buffer.join(""):1===n.buffer.length?n.buffer.head.data:n.buffer.concat(n.length),n.buffer.clear()):a=function(e,n,a){var i;return e<n.head.data.length?(i=n.head.data.slice(0,e),n.head.data=n.head.data.slice(e)):i=e===n.head.data.length?n.shift():a?function(e,n){var a=n.head,i=1,t=a.data;for(e-=t.length;a=a.next;){var o=a.data,s=e>o.length?o.length:e;if(s===o.length?t+=o:t+=o.slice(0,e),0==(e-=s)){s===o.length?(++i,a.next?n.head=a.next:n.head=n.tail=null):(n.head=a,a.data=o.slice(s));break}++i}return n.length-=i,t}(e,n):function(e,n){var a=me.allocUnsafe(e),i=n.head,t=1;for(i.data.copy(a),e-=i.data.length;i=i.next;){var o=i.data,s=e>o.length?o.length:e;if(o.copy(a,a.length-e,0,s),0==(e-=s)){s===o.length?(++t,i.next?n.head=i.next:n.head=n.tail=null):(n.head=i,i.data=o.slice(s));break}++t}return n.length-=t,a}(e,n),i}(e,n.buffer,n.decoder),a);var a}function _a(e){var n=e._readableState;if(n.length>0)throw new Error('"endReadable()" called on non-empty stream');n.endEmitted||(n.ended=!0,L(ya,n,e))}function ya(e,n){e.endEmitted||0!==e.length||(e.endEmitted=!0,n.readable=!1,n.emit("end"))}function ka(e,n){for(var a=0,i=e.length;a<i;a++)if(e[a]===n)return a;return-1}function Ea(){}function ja(e,n,a){this.chunk=e,this.encoding=n,this.callback=a,this.next=null}function Ra(e,n){Object.defineProperty(this,"buffer",{get:hn((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")}),e=e||{},this.objectMode=!!e.objectMode,n instanceof Pa&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var a=e.highWaterMark,i=this.objectMode?16:16384;this.highWaterMark=a||0===a?a:i,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var t=!1===e.decodeStrings;this.decodeStrings=!t,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,n){var a=e._writableState,i=a.sync,t=a.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(a),n)!function(e,n,a,i,t){--n.pendingcb,a?L(t,i):t(i),e._writableState.errorEmitted=!0,e.emit("error",i)}(e,a,i,n,t);else{var o=Oa(a);o||a.corked||a.bufferProcessing||!a.bufferedRequest||Ta(e,a),i?L(Sa,e,a,o,t):Sa(e,a,o,t)}}(n,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new Ua(this)}function Aa(e){if(!(this instanceof Aa||this instanceof Pa))return new Aa(e);this._writableState=new Ra(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev)),$n.call(this)}function za(e,n,a,i,t,o,s){n.writelen=i,n.writecb=s,n.writing=!0,n.sync=!0,a?e._writev(t,n.onwrite):e._write(t,o,n.onwrite),n.sync=!1}function Sa(e,n,a,i){a||function(e,n){0===n.length&&n.needDrain&&(n.needDrain=!1,e.emit("drain"))}(e,n),n.pendingcb--,i(),Ca(e,n)}function Ta(e,n){n.bufferProcessing=!0;var a=n.bufferedRequest;if(e._writev&&a&&a.next){var i=n.bufferedRequestCount,t=new Array(i),o=n.corkedRequestsFree;o.entry=a;for(var s=0;a;)t[s]=a,a=a.next,s+=1;za(e,n,!0,n.length,t,"",o.finish),n.pendingcb++,n.lastBufferedRequest=null,o.next?(n.corkedRequestsFree=o.next,o.next=null):n.corkedRequestsFree=new Ua(n)}else{for(;a;){var r=a.chunk,c=a.encoding,p=a.callback;if(za(e,n,!1,n.objectMode?1:r.length,r,c,p),a=a.next,n.writing)break}null===a&&(n.lastBufferedRequest=null)}n.bufferedRequestCount=0,n.bufferedRequest=a,n.bufferProcessing=!1}function Oa(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function La(e,n){n.prefinished||(n.prefinished=!0,e.emit("prefinish"))}function Ca(e,n){var a=Oa(n);return a&&(0===n.pendingcb?(La(e,n),n.finished=!0,e.emit("finish")):La(e,n)),a}function Ua(e){var n=this;this.next=null,this.entry=null,this.finish=function(a){var i=n.entry;for(n.entry=null;i;){var t=i.callback;e.pendingcb--,t(a),i=i.next}e.corkedRequestsFree?e.corkedRequestsFree.next=n:e.corkedRequestsFree=n}}la.prototype.read=function(e){ca("read",e),e=parseInt(e,10);var n=this._readableState,a=e;if(0!==e&&(n.emittedReadable=!1),0===e&&n.needReadable&&(n.length>=n.highWaterMark||n.ended))return ca("read: emitReadable",n.length,n.ended),0===n.length&&n.ended?_a(this):ha(this),null;if(0===(e=ma(e,n))&&n.ended)return 0===n.length&&_a(this),null;var i,t=n.needReadable;return ca("need readable",t),(0===n.length||n.length-e<n.highWaterMark)&&ca("length less than watermark",t=!0),n.ended||n.reading?ca("reading or ended",t=!1):t&&(ca("do read"),n.reading=!0,n.sync=!0,0===n.length&&(n.needReadable=!0),this._read(n.highWaterMark),n.sync=!1,n.reading||(e=ma(a,n))),null===(i=e>0?wa(e,n):null)?(n.needReadable=!0,e=0):n.length-=e,0===n.length&&(n.ended||(n.needReadable=!0),a!==e&&n.ended&&_a(this)),null!==i&&this.emit("data",i),i},la.prototype._read=function(e){this.emit("error",new Error("not implemented"))},la.prototype.pipe=function(e,n){var a=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=e;break;case 1:i.pipes=[i.pipes,e];break;default:i.pipes.push(e)}i.pipesCount+=1,ca("pipe count=%d opts=%j",i.pipesCount,n);var t=n&&!1===n.end?p:s;function o(e){ca("onunpipe"),e===a&&p()}function s(){ca("onend"),e.end()}i.endEmitted?L(t):a.once("end",t),e.on("unpipe",o);var r=function(e){return function(){var n=e._readableState;ca("pipeOnDrain",n.awaitDrain),n.awaitDrain&&n.awaitDrain--,0===n.awaitDrain&&e.listeners("data").length&&(n.flowing=!0,ba(e))}}(a);e.on("drain",r);var c=!1;function p(){ca("cleanup"),e.removeListener("close",m),e.removeListener("finish",h),e.removeListener("drain",r),e.removeListener("error",d),e.removeListener("unpipe",o),a.removeListener("end",s),a.removeListener("end",p),a.removeListener("data",u),c=!0,!i.awaitDrain||e._writableState&&!e._writableState.needDrain||r()}var l=!1;function u(n){ca("ondata"),l=!1,!1!==e.write(n)||l||((1===i.pipesCount&&i.pipes===e||i.pipesCount>1&&-1!==ka(i.pipes,e))&&!c&&(ca("false write response, pause",a._readableState.awaitDrain),a._readableState.awaitDrain++,l=!0),a.pause())}function d(n){ca("onerror",n),f(),e.removeListener("error",d),0===("error",e.listeners("error").length)&&e.emit("error",n)}function m(){e.removeListener("finish",h),f()}function h(){ca("onfinish"),e.removeListener("close",m),f()}function f(){ca("unpipe"),a.unpipe(e)}return a.on("data",u),function(e,n,a){if("function"==typeof e.prependListener)return e.prependListener(n,a);e._events&&e._events[n]?Array.isArray(e._events[n])?e._events[n].unshift(a):e._events[n]=[a,e._events[n]]:e.on(n,a)}(e,"error",d),e.once("close",m),e.once("finish",h),e.emit("pipe",a),i.flowing||(ca("pipe resume"),a.resume()),e},la.prototype.unpipe=function(e){var n=this._readableState;if(0===n.pipesCount)return this;if(1===n.pipesCount)return e&&e!==n.pipes||(e||(e=n.pipes),n.pipes=null,n.pipesCount=0,n.flowing=!1,e&&e.emit("unpipe",this)),this;if(!e){var a=n.pipes,i=n.pipesCount;n.pipes=null,n.pipesCount=0,n.flowing=!1;for(var t=0;t<i;t++)a[t].emit("unpipe",this);return this}var o=ka(n.pipes,e);return-1===o||(n.pipes.splice(o,1),n.pipesCount-=1,1===n.pipesCount&&(n.pipes=n.pipes[0]),e.emit("unpipe",this)),this},la.prototype.on=function(e,n){var a=$n.prototype.on.call(this,e,n);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var i=this._readableState;i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.emittedReadable=!1,i.reading?i.length&&ha(this):L(xa,this))}return a},la.prototype.addListener=la.prototype.on,la.prototype.resume=function(){var e=this._readableState;return e.flowing||(ca("resume"),e.flowing=!0,function(e,n){n.resumeScheduled||(n.resumeScheduled=!0,L(ga,e,n))}(this,e)),this},la.prototype.pause=function(){return ca("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(ca("pause"),this._readableState.flowing=!1,this.emit("pause")),this},la.prototype.wrap=function(e){var n=this._readableState,a=!1,i=this;for(var t in e.on("end",(function(){if(ca("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&i.push(e)}i.push(null)})),e.on("data",(function(t){ca("wrapped data"),n.decoder&&(t=n.decoder.write(t)),n.objectMode&&null==t||(n.objectMode||t&&t.length)&&(i.push(t)||(a=!0,e.pause()))})),e)void 0===this[t]&&"function"==typeof e[t]&&(this[t]=function(n){return function(){return e[n].apply(e,arguments)}}(t));return function(e,n){for(var a=0,i=e.length;a<i;a++)n(e[a])}(["error","close","destroy","pause","resume"],(function(n){e.on(n,i.emit.bind(i,n))})),i._read=function(n){ca("wrapped _read",n),a&&(a=!1,e.resume())},i},la._fromList=wa,Aa.WritableState=Ra,un(Aa,$n),Ra.prototype.getBuffer=function(){for(var e=this.bufferedRequest,n=[];e;)n.push(e),e=e.next;return n},Aa.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},Aa.prototype.write=function(e,n,a){var i=this._writableState,t=!1;return"function"==typeof n&&(a=n,n=null),me.isBuffer(e)?n="buffer":n||(n=i.defaultEncoding),"function"!=typeof a&&(a=Ea),i.ended?function(e,n){var a=new Error("write after end");e.emit("error",a),L(n,a)}(this,a):function(e,n,a,i){var t=!0,o=!1;return null===a?o=new TypeError("May not write null values to stream"):me.isBuffer(a)||"string"==typeof a||void 0===a||n.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(e.emit("error",o),L(i,o),t=!1),t}(this,i,e,a)&&(i.pendingcb++,t=function(e,n,a,i,t){a=function(e,n,a){return e.objectMode||!1===e.decodeStrings||"string"!=typeof n||(n=me.from(n,a)),n}(n,a,i),me.isBuffer(a)&&(i="buffer");var o=n.objectMode?1:a.length;n.length+=o;var s=n.length<n.highWaterMark;if(s||(n.needDrain=!0),n.writing||n.corked){var r=n.lastBufferedRequest;n.lastBufferedRequest=new ja(a,i,t),r?r.next=n.lastBufferedRequest:n.bufferedRequest=n.lastBufferedRequest,n.bufferedRequestCount+=1}else za(e,n,!1,o,a,i,t);return s}(this,i,e,n,a)),t},Aa.prototype.cork=function(){this._writableState.corked++},Aa.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||Ta(this,e))},Aa.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Aa.prototype._write=function(e,n,a){a(new Error("not implemented"))},Aa.prototype._writev=null,Aa.prototype.end=function(e,n,a){var i=this._writableState;"function"==typeof e?(a=e,e=null,n=null):"function"==typeof n&&(a=n,n=null),null!=e&&this.write(e,n),i.corked&&(i.corked=1,this.uncork()),i.ending||i.finished||function(e,n,a){n.ending=!0,Ca(e,n),a&&(n.finished?L(a):e.once("finish",a)),n.ended=!0,e.writable=!1}(this,i,a)},un(Pa,la);for(var qa=Object.keys(Aa.prototype),Ba=0;Ba<qa.length;Ba++){var Ma=qa[Ba];Pa.prototype[Ma]||(Pa.prototype[Ma]=Aa.prototype[Ma])}function Pa(e){if(!(this instanceof Pa))return new Pa(e);la.call(this,e),Aa.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",Na)}function Na(){this.allowHalfOpen||this._writableState.ended||L(Da,this)}function Da(e){e.end()}function Ia(e){this.afterTransform=function(n,a){return function(e,n,a){var i=e._transformState;i.transforming=!1;var t=i.writecb;if(!t)return e.emit("error",new Error("no writecb in Transform class"));i.writechunk=null,i.writecb=null,null!=a&&e.push(a),t(n);var o=e._readableState;o.reading=!1,(o.needReadable||o.length<o.highWaterMark)&&e._read(o.highWaterMark)}(e,n,a)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function Fa(e){if(!(this instanceof Fa))return new Fa(e);Pa.call(this,e),this._transformState=new Ia(this);var n=this;this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.once("prefinish",(function(){"function"==typeof this._flush?this._flush((function(e){Za(n,e)})):Za(n)}))}function Za(e,n){if(n)return e.emit("error",n);var a=e._writableState,i=e._transformState;if(a.length)throw new Error("Calling transform done when ws.length != 0");if(i.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}function Ha(e){if(!(this instanceof Ha))return new Ha(e);Fa.call(this,e)}function $a(){$n.call(this)}un(Fa,Pa),Fa.prototype.push=function(e,n){return this._transformState.needTransform=!1,Pa.prototype.push.call(this,e,n)},Fa.prototype._transform=function(e,n,a){throw new Error("Not implemented")},Fa.prototype._write=function(e,n,a){var i=this._transformState;if(i.writecb=a,i.writechunk=e,i.writeencoding=n,!i.transforming){var t=this._readableState;(i.needTransform||t.needReadable||t.length<t.highWaterMark)&&this._read(t.highWaterMark)}},Fa.prototype._read=function(e){var n=this._transformState;null!==n.writechunk&&n.writecb&&!n.transforming?(n.transforming=!0,this._transform(n.writechunk,n.writeencoding,n.afterTransform)):n.needTransform=!0},un(Ha,Fa),Ha.prototype._transform=function(e,n,a){a(null,e)},un($a,$n),$a.Readable=la,$a.Writable=Aa,$a.Duplex=Pa,$a.Transform=Fa,$a.PassThrough=Ha,$a.Stream=$a,$a.prototype.pipe=function(e,n){var a=this;function i(n){e.writable&&!1===e.write(n)&&a.pause&&a.pause()}function t(){a.readable&&a.resume&&a.resume()}a.on("data",i),e.on("drain",t),e._isStdio||n&&!1===n.end||(a.on("end",s),a.on("close",r));var o=!1;function s(){o||(o=!0,e.end())}function r(){o||(o=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(p(),0===$n.listenerCount(this,"error"))throw e}function p(){a.removeListener("data",i),e.removeListener("drain",t),a.removeListener("end",s),a.removeListener("close",r),a.removeListener("error",c),e.removeListener("error",c),a.removeListener("end",p),a.removeListener("close",p),e.removeListener("close",p)}return a.on("error",c),e.on("error",c),a.on("end",p),a.on("close",p),e.on("close",p),e.emit("pipe",a),e};function Ya(e,n,a){var i,t=this;if(la.call(t),t._mode=a,t.headers={},t.rawHeaders=[],t.trailers={},t.rawTrailers=[],t.on("end",(function(){$.nextTick((function(){t.emit("close")}))})),"fetch"===a){t._fetchResponse=n,t.url=n.url,t.statusCode=n.status,t.statusMessage=n.statusText;for(var o,s,r=n.headers[Symbol.iterator]();o=(s=r.next()).value,!s.done;)t.headers[o[0].toLowerCase()]=o[1],t.rawHeaders.push(o[0],o[1]);var c=n.body.getReader();(i=function(){c.read().then((function(e){t._destroyed||(e.done?t.push(null):(t.push(new me(e.value)),i()))}))})()}else if(t._xhr=e,t._pos=0,t.url=e.responseURL,t.statusCode=e.status,t.statusMessage=e.statusText,e.getAllResponseHeaders().split(/\r?\n/).forEach((function(e){var n=e.match(/^([^:]+):\s*(.*)/);if(n){var a=n[1].toLowerCase();"set-cookie"===a?(void 0===t.headers[a]&&(t.headers[a]=[]),t.headers[a].push(n[2])):void 0!==t.headers[a]?t.headers[a]+=", "+n[2]:t.headers[a]=n[2],t.rawHeaders.push(n[1],n[2])}})),t._charset="x-user-defined",!cn){var p=t.rawHeaders["mime-type"];if(p){var l=p.match(/;\s*charset=([^;])(;|$)/);l&&(t._charset=l[1].toLowerCase())}t._charset||(t._charset="utf-8")}}function Wa(e){var n,a=this;Aa.call(a),a._opts=e,a._body=[],a._headers={},e.auth&&a.setHeader("Authorization","Basic "+new me(e.auth).toString("base64")),Object.keys(e.headers).forEach((function(n){a.setHeader(n,e.headers[n])}));var i=!0;if("disable-fetch"===e.mode)i=!1,n=!0;else if("prefer-streaming"===e.mode)n=!1;else if("allow-wrong-content-type"===e.mode)n=!cn;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");n=!0}a._mode=function(e,n){return en&&n?"fetch":rn?"moz-chunked-arraybuffer":sn?"ms-stream":on&&e?"arraybuffer":pn&&e?"text:vbarray":"text"}(n,i),a.on("finish",(function(){a._onFinish()}))}un(Ya,la),Ya.prototype._read=function(){},Ya.prototype._onXHRProgress=function(){var e=this,n=e._xhr,a=null;switch(e._mode){case"text:vbarray":if(4!==n.readyState)break;try{a=new w.VBArray(n.responseBody).toArray()}catch(e){}if(null!==a){e.push(new me(a));break}case"text":try{a=n.responseText}catch(n){e._mode="text:vbarray";break}if(a.length>e._pos){var i=a.substr(e._pos);if("x-user-defined"===e._charset){for(var t=new me(i.length),o=0;o<i.length;o++)t[o]=255&i.charCodeAt(o);e.push(t)}else e.push(i,e._charset);e._pos=a.length}break;case"arraybuffer":if(4!==n.readyState||!n.response)break;a=n.response,e.push(new me(new Uint8Array(a)));break;case"moz-chunked-arraybuffer":if(a=n.response,3!==n.readyState||!a)break;e.push(new me(new Uint8Array(a)));break;case"ms-stream":if(a=n.response,3!==n.readyState)break;var s=new w.MSStreamReader;s.onprogress=function(){s.result.byteLength>e._pos&&(e.push(new me(new Uint8Array(s.result.slice(e._pos)))),e._pos=s.result.byteLength)},s.onload=function(){e.push(null)},s.readAsArrayBuffer(a)}4===e._xhr.readyState&&"ms-stream"!==e._mode&&e.push(null)},un(Wa,Aa);var Va=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","user-agent","via"];Wa.prototype.setHeader=function(e,n){var a=e.toLowerCase();-1===Va.indexOf(a)&&(this._headers[a]={name:e,value:n})},Wa.prototype.getHeader=function(e){return this._headers[e.toLowerCase()].value},Wa.prototype.removeHeader=function(e){delete this._headers[e.toLowerCase()]},Wa.prototype._onFinish=function(){var e=this;if(!e._destroyed){var n,a=e._opts,i=e._headers;if("POST"!==a.method&&"PUT"!==a.method&&"PATCH"!==a.method||(n=function(){if(void 0!==Je)return Je;try{new w.Blob([new ArrayBuffer(1)]),Je=!0}catch(e){Je=!1}return Je}()?new w.Blob(e._body.map((function(e){return function(e){if(e instanceof Uint8Array){if(0===e.byteOffset&&e.byteLength===e.buffer.byteLength)return e.buffer;if("function"==typeof e.buffer.slice)return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}if(Ge(e)){for(var n=new Uint8Array(e.length),a=e.length,i=0;i<a;i++)n[i]=e[i];return n.buffer}throw new Error("Argument must be a Buffer")}(e)})),{type:(i["content-type"]||{}).value||""}):me.concat(e._body).toString()),"fetch"===e._mode){var t=Object.keys(i).map((function(e){return[i[e].name,i[e].value]}));w.fetch(e._opts.url,{method:e._opts.method,headers:t,body:n,mode:"cors",credentials:a.withCredentials?"include":"same-origin"}).then((function(n){e._fetchResponse=n,e._connect()}),(function(n){e.emit("error",n)}))}else{var o=e._xhr=new w.XMLHttpRequest;try{o.open(e._opts.method,e._opts.url,!0)}catch(n){return void $.nextTick((function(){e.emit("error",n)}))}"responseType"in o&&(o.responseType=e._mode.split(":")[0]),"withCredentials"in o&&(o.withCredentials=!!a.withCredentials),"text"===e._mode&&"overrideMimeType"in o&&o.overrideMimeType("text/plain; charset=x-user-defined"),Object.keys(i).forEach((function(e){o.setRequestHeader(i[e].name,i[e].value)})),e._response=null,o.onreadystatechange=function(){switch(o.readyState){case 3:case 4:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(o.onprogress=function(){e._onXHRProgress()}),o.onerror=function(){e._destroyed||e.emit("error",new Error("XHR error"))};try{o.send(n)}catch(n){return void $.nextTick((function(){e.emit("error",n)}))}}}},Wa.prototype._onXHRProgress=function(){var e=this;(function(e){try{var n=e.status;return null!==n&&0!==n}catch(e){return!1}})(e._xhr)&&!e._destroyed&&(e._response||e._connect(),e._response._onXHRProgress())},Wa.prototype._connect=function(){var e=this;e._destroyed||(e._response=new Ya(e._xhr,e._fetchResponse,e._mode),e.emit("response",e._response))},Wa.prototype._write=function(e,n,a){this._body.push(e),a()},Wa.prototype.abort=Wa.prototype.destroy=function(){var e=this;e._destroyed=!0,e._response&&(e._response._destroyed=!0),e._xhr&&e._xhr.abort()},Wa.prototype.end=function(e,n,a){"function"==typeof e&&(a=e,e=void 0),Aa.prototype.end.call(this,e,n,a)},Wa.prototype.flushHeaders=function(){},Wa.prototype.setTimeout=function(){},Wa.prototype.setNoDelay=function(){},Wa.prototype.setSocketKeepAlive=function(){};
/*! https://mths.be/punycode v1.4.1 by @mathias */
var Ka=2147483647,Ga=/[^\x20-\x7E]/,Xa=/[\x2E\u3002\uFF0E\uFF61]/g,Ja={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},Qa=Math.floor,ei=String.fromCharCode;function ni(e){throw new RangeError(Ja[e])}function ai(e,n){return e+22+75*(e<26)-((0!=n)<<5)}function ii(e,n,a){var i=0;for(e=a?Qa(e/700):e>>1,e+=Qa(e/n);e>455;i+=36)e=Qa(e/35);return Qa(i+36*e/(e+38))}function ti(e){return function(e,n){var a=e.split("@"),i="";a.length>1&&(i=a[0]+"@",e=a[1]);var t=function(e,n){for(var a=e.length,i=[];a--;)i[a]=n(e[a]);return i}((e=e.replace(Xa,".")).split("."),(function(e){return Ga.test(e)?"xn--"+function(e){var n,a,i,t,o,s,r,c,p,l,u,d,m,h,f,v=[];for(d=(e=function(e){for(var n,a,i=[],t=0,o=e.length;t<o;)(n=e.charCodeAt(t++))>=55296&&n<=56319&&t<o?56320==(64512&(a=e.charCodeAt(t++)))?i.push(((1023&n)<<10)+(1023&a)+65536):(i.push(n),t--):i.push(n);return i}(e)).length,n=128,a=0,o=72,s=0;s<d;++s)(u=e[s])<128&&v.push(ei(u));for(i=t=v.length,t&&v.push("-");i<d;){for(r=Ka,s=0;s<d;++s)(u=e[s])>=n&&u<r&&(r=u);for(r-n>Qa((Ka-a)/(m=i+1))&&ni("overflow"),a+=(r-n)*m,n=r,s=0;s<d;++s)if((u=e[s])<n&&++a>Ka&&ni("overflow"),u==n){for(c=a,p=36;!(c<(l=p<=o?1:p>=o+26?26:p-o));p+=36)f=c-l,h=36-l,v.push(ei(ai(l+f%h,0))),c=Qa(f/h);v.push(ei(ai(c,0))),o=ii(a,m,i==t),a=0,++i}++a,++n}return v.join("")}(e):e})).join(".");return i+t}(e)}function oi(e,n){return Object.prototype.hasOwnProperty.call(e,n)}var si=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function ri(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}}function ci(e,n){if(e.map)return e.map(n);for(var a=[],i=0;i<e.length;i++)a.push(n(e[i],i));return a}var pi=Object.keys||function(e){var n=[];for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&n.push(a);return n};function li(e,n,a,i){n=n||"&",a=a||"=";var t={};if("string"!=typeof e||0===e.length)return t;var o=/\+/g;e=e.split(n);var s=1e3;i&&"number"==typeof i.maxKeys&&(s=i.maxKeys);var r=e.length;s>0&&r>s&&(r=s);for(var c=0;c<r;++c){var p,l,u,d,m=e[c].replace(o,"%20"),h=m.indexOf(a);h>=0?(p=m.substr(0,h),l=m.substr(h+1)):(p=m,l=""),u=decodeURIComponent(p),d=decodeURIComponent(l),oi(t,u)?si(t[u])?t[u].push(d):t[u]=[t[u],d]:t[u]=d}return t}var ui={parse:ji,resolve:function(e,n){return ji(e,!1,!0).resolve(n)},resolveObject:function(e,n){return e?ji(e,!1,!0).resolveObject(n):n},format:function(e){return Sn(e)&&(e=Ri({},e)),Ai(e)},Url:di};function di(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var mi=/^([a-z0-9.+-]+:)/i,hi=/:[0-9]*$/,fi=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,vi=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),xi=["'"].concat(vi),gi=["%","/","?",";","#"].concat(xi),bi=["/","?","#"],wi=/^[+a-z0-9A-Z_-]{0,63}$/,_i=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,yi={javascript:!0,"javascript:":!0},ki={javascript:!0,"javascript:":!0},Ei={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function ji(e,n,a){if(e&&Ln(e)&&e instanceof di)return e;var i=new di;return i.parse(e,n,a),i}function Ri(e,n,a,i){if(!Sn(n))throw new TypeError("Parameter 'url' must be a string, not "+typeof n);var t=n.indexOf("?"),o=-1!==t&&t<n.indexOf("#")?"?":"#",s=n.split(o);s[0]=s[0].replace(/\\/g,"/");var r=n=s.join(o);if(r=r.trim(),!i&&1===n.split("#").length){var c=fi.exec(r);if(c)return e.path=r,e.href=r,e.pathname=c[1],c[2]?(e.search=c[2],e.query=a?li(e.search.substr(1)):e.search.substr(1)):a&&(e.search="",e.query={}),e}var p,l,u,d,m=mi.exec(r);if(m){var h=(m=m[0]).toLowerCase();e.protocol=h,r=r.substr(m.length)}if(i||m||r.match(/^\/\/[^@\/]+@[^@\/]+/)){var f="//"===r.substr(0,2);!f||m&&ki[m]||(r=r.substr(2),e.slashes=!0)}if(!ki[m]&&(f||m&&!Ei[m])){var v,x,g=-1;for(p=0;p<bi.length;p++)-1!==(l=r.indexOf(bi[p]))&&(-1===g||l<g)&&(g=l);for(-1!==(x=-1===g?r.lastIndexOf("@"):r.lastIndexOf("@",g))&&(v=r.slice(0,x),r=r.slice(x+1),e.auth=decodeURIComponent(v)),g=-1,p=0;p<gi.length;p++)-1!==(l=r.indexOf(gi[p]))&&(-1===g||l<g)&&(g=l);-1===g&&(g=r.length),e.host=r.slice(0,g),r=r.slice(g),zi(e),e.hostname=e.hostname||"";var b="["===e.hostname[0]&&"]"===e.hostname[e.hostname.length-1];if(!b){var w=e.hostname.split(/\./);for(p=0,u=w.length;p<u;p++){var _=w[p];if(_&&!_.match(wi)){for(var y="",k=0,E=_.length;k<E;k++)_.charCodeAt(k)>127?y+="x":y+=_[k];if(!y.match(wi)){var j=w.slice(0,p),R=w.slice(p+1),A=_.match(_i);A&&(j.push(A[1]),R.unshift(A[2])),R.length&&(r="/"+R.join(".")+r),e.hostname=j.join(".");break}}}}e.hostname.length>255?e.hostname="":e.hostname=e.hostname.toLowerCase(),b||(e.hostname=ti(e.hostname)),d=e.port?":"+e.port:"";var z=e.hostname||"";e.host=z+d,e.href+=e.host,b&&(e.hostname=e.hostname.substr(1,e.hostname.length-2),"/"!==r[0]&&(r="/"+r))}if(!yi[h])for(p=0,u=xi.length;p<u;p++){var S=xi[p];if(-1!==r.indexOf(S)){var T=encodeURIComponent(S);T===S&&(T=escape(S)),r=r.split(S).join(T)}}var O=r.indexOf("#");-1!==O&&(e.hash=r.substr(O),r=r.slice(0,O));var L=r.indexOf("?");if(-1!==L?(e.search=r.substr(L),e.query=r.substr(L+1),a&&(e.query=li(e.query)),r=r.slice(0,L)):a&&(e.search="",e.query={}),r&&(e.pathname=r),Ei[h]&&e.hostname&&!e.pathname&&(e.pathname="/"),e.pathname||e.search){d=e.pathname||"";var C=e.search||"";e.path=d+C}return e.href=Ai(e),e}function Ai(e){var n=e.auth||"";n&&(n=(n=encodeURIComponent(n)).replace(/%3A/i,":"),n+="@");var a=e.protocol||"",i=e.pathname||"",t=e.hash||"",o=!1,s="";e.host?o=n+e.host:e.hostname&&(o=n+(-1===e.hostname.indexOf(":")?e.hostname:"["+this.hostname+"]"),e.port&&(o+=":"+e.port)),e.query&&Ln(e.query)&&Object.keys(e.query).length&&(s=function(e,n,a,i){return n=n||"&",a=a||"=",null===e&&(e=void 0),"object"==typeof e?ci(pi(e),(function(i){var t=encodeURIComponent(ri(i))+a;return si(e[i])?ci(e[i],(function(e){return t+encodeURIComponent(ri(e))})).join(n):t+encodeURIComponent(ri(e[i]))})).join(n):""}(e.query));var r=e.search||s&&"?"+s||"";return a&&":"!==a.substr(-1)&&(a+=":"),e.slashes||(!a||Ei[a])&&!1!==o?(o="//"+(o||""),i&&"/"!==i.charAt(0)&&(i="/"+i)):o||(o=""),t&&"#"!==t.charAt(0)&&(t="#"+t),r&&"?"!==r.charAt(0)&&(r="?"+r),a+o+(i=i.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(r=r.replace("#","%23"))+t}function zi(e){var n=e.host,a=hi.exec(n);a&&(":"!==(a=a[0])&&(e.port=a.substr(1)),n=n.substr(0,n.length-a.length)),n&&(e.hostname=n)}function Si(e,n){"string"==typeof e&&(e=ji(e));var a=-1===w.location.protocol.search(/^https?:$/)?"http:":"",i=e.protocol||a,t=e.hostname||e.host,o=e.port,s=e.path||"/";t&&-1!==t.indexOf(":")&&(t="["+t+"]"),e.url=(t?i+"//"+t:"")+(o?":"+o:"")+s,e.method=(e.method||"GET").toUpperCase(),e.headers=e.headers||{};var r=new Wa(e);return n&&r.on("response",n),r}function Ti(){}di.prototype.parse=function(e,n,a){return Ri(this,e,n,a)},di.prototype.format=function(){return Ai(this)},di.prototype.resolve=function(e){return this.resolveObject(ji(e,!1,!0)).format()},di.prototype.resolveObject=function(e){if(Sn(e)){var n=new di;n.parse(e,!1,!0),e=n}for(var a,i=new di,t=Object.keys(this),o=0;o<t.length;o++){var s=t[o];i[s]=this[s]}if(i.hash=e.hash,""===e.href)return i.href=i.format(),i;if(e.slashes&&!e.protocol){for(var r=Object.keys(e),c=0;c<r.length;c++){var p=r[c];"protocol"!==p&&(i[p]=e[p])}return Ei[i.protocol]&&i.hostname&&!i.pathname&&(i.path=i.pathname="/"),i.href=i.format(),i}if(e.protocol&&e.protocol!==i.protocol){if(!Ei[e.protocol]){for(var l=Object.keys(e),u=0;u<l.length;u++){var d=l[u];i[d]=e[d]}return i.href=i.format(),i}if(i.protocol=e.protocol,e.host||ki[e.protocol])i.pathname=e.pathname;else{for(a=(e.pathname||"").split("/");a.length&&!(e.host=a.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==a[0]&&a.unshift(""),a.length<2&&a.unshift(""),i.pathname=a.join("/")}if(i.search=e.search,i.query=e.query,i.host=e.host||"",i.auth=e.auth,i.hostname=e.hostname||e.host,i.port=e.port,i.pathname||i.search){var m=i.pathname||"",h=i.search||"";i.path=m+h}return i.slashes=i.slashes||e.slashes,i.href=i.format(),i}var f,v=i.pathname&&"/"===i.pathname.charAt(0),x=e.host||e.pathname&&"/"===e.pathname.charAt(0),g=x||v||i.host&&e.pathname,b=g,w=i.pathname&&i.pathname.split("/")||[],_=i.protocol&&!Ei[i.protocol];if(a=e.pathname&&e.pathname.split("/")||[],_&&(i.hostname="",i.port=null,i.host&&(""===w[0]?w[0]=i.host:w.unshift(i.host)),i.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===a[0]?a[0]=e.host:a.unshift(e.host)),e.host=null),g=g&&(""===a[0]||""===w[0])),x)i.host=e.host||""===e.host?e.host:i.host,i.hostname=e.hostname||""===e.hostname?e.hostname:i.hostname,i.search=e.search,i.query=e.query,w=a;else if(a.length)w||(w=[]),w.pop(),w=w.concat(a),i.search=e.search,i.query=e.query;else if(!An(e.search))return _&&(i.hostname=i.host=w.shift(),(f=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=f.shift(),i.host=i.hostname=f.shift())),i.search=e.search,i.query=e.query,Rn(i.pathname)&&Rn(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.href=i.format(),i;if(!w.length)return i.pathname=null,i.search?i.path="/"+i.search:i.path=null,i.href=i.format(),i;for(var y=w.slice(-1)[0],k=(i.host||e.host||w.length>1)&&("."===y||".."===y)||""===y,E=0,j=w.length;j>=0;j--)"."===(y=w[j])?w.splice(j,1):".."===y?(w.splice(j,1),E++):E&&(w.splice(j,1),E--);if(!g&&!b)for(;E--;E)w.unshift("..");!g||""===w[0]||w[0]&&"/"===w[0].charAt(0)||w.unshift(""),k&&"/"!==w.join("/").substr(-1)&&w.push("");var R=""===w[0]||w[0]&&"/"===w[0].charAt(0);return _&&(i.hostname=i.host=R?"":w.length?w.shift():"",(f=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=f.shift(),i.host=i.hostname=f.shift())),(g=g||i.host&&w.length)&&!R&&w.unshift(""),w.length?i.pathname=w.join("/"):(i.pathname=null,i.path=null),Rn(i.pathname)&&Rn(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.auth=e.auth||i.auth,i.slashes=i.slashes||e.slashes,i.href=i.format(),i},di.prototype.parseHost=function(){return zi(this)},Ti.defaultMaxSockets=4;var Oi={request:Si,get:function(e,n){var a=Si(e,n);return a.end(),a},Agent:Ti,METHODS:["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"],STATUS_CODES:{100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Time-out",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request-URI Too Large",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Time-out",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}};function Li(e,n){if(e===n)return 0;for(var a=e.length,i=n.length,t=0,o=Math.min(a,i);t<o;++t)if(e[t]!==n[t]){a=e[t],i=n[t];break}return a<i?-1:i<a?1:0}var Ci,Ui=Object.prototype.hasOwnProperty,qi=Object.keys||function(e){var n=[];for(var a in e)Ui.call(e,a)&&n.push(a);return n},Bi=Array.prototype.slice;function Mi(){return void 0!==Ci?Ci:Ci="foo"===function(){}.name}function Pi(e){return Object.prototype.toString.call(e)}function Ni(e){return!Ge(e)&&"function"==typeof w.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer)))}function Di(e,n){e||Yi(e,!0,n,"==",Wi)}var Ii=/\s*function\s+([^\(\s]*)\s*/;function Fi(e){if(qn(e)){if(Mi())return e.name;var n=e.toString().match(Ii);return n&&n[1]}}function Zi(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=function(e){return Hi($i(e.actual),128)+" "+e.operator+" "+Hi($i(e.expected),128)}(this),this.generatedMessage=!0);var n=e.stackStartFunction||Yi;if(Error.captureStackTrace)Error.captureStackTrace(this,n);else{var a=new Error;if(a.stack){var i=a.stack,t=Fi(n),o=i.indexOf("\n"+t);if(o>=0){var s=i.indexOf("\n",o+1);i=i.substring(s+1)}this.stack=i}}}function Hi(e,n){return"string"==typeof e?e.length<n?e:e.slice(0,n):e}function $i(e){if(Mi()||!qn(e))return gn(e);var n=Fi(e);return"[Function"+(n?": "+n:"")+"]"}function Yi(e,n,a,i,t){throw new Zi({message:a,actual:e,expected:n,operator:i,stackStartFunction:t})}function Wi(e,n){e||Yi(e,!0,n,"==",Wi)}function Vi(e,n,a,i){if(e===n)return!0;if(Ge(e)&&Ge(n))return 0===Li(e,n);if(Cn(e)&&Cn(n))return e.getTime()===n.getTime();if(On(e)&&On(n))return e.source===n.source&&e.global===n.global&&e.multiline===n.multiline&&e.lastIndex===n.lastIndex&&e.ignoreCase===n.ignoreCase;if(null!==e&&"object"==typeof e||null!==n&&"object"==typeof n){if(Ni(e)&&Ni(n)&&Pi(e)===Pi(n)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===Li(new Uint8Array(e.buffer),new Uint8Array(n.buffer));if(Ge(e)!==Ge(n))return!1;var t=(i=i||{actual:[],expected:[]}).actual.indexOf(e);return-1!==t&&t===i.expected.indexOf(n)||(i.actual.push(e),i.expected.push(n),function(e,n,a,i){if(null==e||null==n)return!1;if(Bn(e)||Bn(n))return e===n;if(a&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(n))return!1;var t=Ki(e),o=Ki(n);if(t&&!o||!t&&o)return!1;if(t)return Vi(e=Bi.call(e),n=Bi.call(n),a);var s,r,c=qi(e),p=qi(n);if(c.length!==p.length)return!1;for(c.sort(),p.sort(),r=c.length-1;r>=0;r--)if(c[r]!==p[r])return!1;for(r=c.length-1;r>=0;r--)if(!Vi(e[s=c[r]],n[s],a,i))return!1;return!0}(e,n,a,i))}return a?e===n:e==n}function Ki(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function Gi(e,n){if(!e||!n)return!1;if("[object RegExp]"==Object.prototype.toString.call(n))return n.test(e);try{if(e instanceof n)return!0}catch(e){}return!Error.isPrototypeOf(n)&&!0===n.call({},e)}function Xi(e,n,a,i){var t;if("function"!=typeof n)throw new TypeError('"block" argument must be a function');"string"==typeof a&&(i=a,a=null),t=function(e){var n;try{e()}catch(e){n=e}return n}(n),i=(a&&a.name?" ("+a.name+").":".")+(i?" "+i:"."),e&&!t&&Yi(t,a,"Missing expected exception"+i);var o="string"==typeof i,s=!e&&t&&!a;if((!e&&Un(t)&&o&&Gi(t,a)||s)&&Yi(t,a,"Got unwanted exception"+i),e&&t&&a&&!Gi(t,a)||!e&&t)throw t}Di.AssertionError=Zi,un(Zi,Error),Di.fail=Yi,Di.ok=Wi,Di.equal=function e(n,a,i){n!=a&&Yi(n,a,i,"==",e)},Di.notEqual=function e(n,a,i){n==a&&Yi(n,a,i,"!=",e)},Di.deepEqual=function e(n,a,i){Vi(n,a,!1)||Yi(n,a,i,"deepEqual",e)},Di.deepStrictEqual=function e(n,a,i){Vi(n,a,!0)||Yi(n,a,i,"deepStrictEqual",e)},Di.notDeepEqual=function e(n,a,i){Vi(n,a,!1)&&Yi(n,a,i,"notDeepEqual",e)},Di.notDeepStrictEqual=function e(n,a,i){Vi(n,a,!0)&&Yi(n,a,i,"notDeepStrictEqual",e)},Di.strictEqual=function e(n,a,i){n!==a&&Yi(n,a,i,"===",e)},Di.notStrictEqual=function e(n,a,i){n===a&&Yi(n,a,i,"!==",e)},Di.throws=function(e,n,a){Xi(!0,e,n,a)},Di.doesNotThrow=function(e,n,a){Xi(!1,e,n,a)},Di.ifError=function(e){if(e)throw e};var Ji=1e3,Qi=6e4,et=60*Qi,nt=24*et,at=function(e,n){n=n||{};var a=typeof e;if("string"===a&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var n=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(n){var a=parseFloat(n[1]);switch((n[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"days":case"day":case"d":return a*nt;case"hours":case"hour":case"hrs":case"hr":case"h":return a*et;case"minutes":case"minute":case"mins":case"min":case"m":return a*Qi;case"seconds":case"second":case"secs":case"sec":case"s":return a*Ji;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===a&&!1===isNaN(e))return n.long?function(e){return it(e,nt,"day")||it(e,et,"hour")||it(e,Qi,"minute")||it(e,Ji,"second")||e+" ms"}(e):function(e){return e>=nt?Math.round(e/nt)+"d":e>=et?Math.round(e/et)+"h":e>=Qi?Math.round(e/Qi)+"m":e>=Ji?Math.round(e/Ji)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function it(e,n,a){if(!(e<n))return e<1.5*n?Math.floor(e/n)+" "+a:Math.ceil(e/n)+" "+a+"s"}var tt=a((function(e,n){var a;function i(e){function i(){if(i.enabled){var e=i,t=+new Date,o=t-(a||t);e.diff=o,e.prev=a,e.curr=t,a=t;for(var s=new Array(arguments.length),r=0;r<s.length;r++)s[r]=arguments[r];s[0]=n.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(a,i){if("%%"===a)return a;c++;var t=n.formatters[i];if("function"==typeof t){var o=s[c];a=t.call(e,o),s.splice(c,1),c--}return a})),n.formatArgs.call(e,s);var p=i.log||n.log||console.log.bind(console);p.apply(e,s)}}return i.namespace=e,i.enabled=n.enabled(e),i.useColors=n.useColors(),i.color=function(e){var a,i=0;for(a in e)i=(i<<5)-i+e.charCodeAt(a),i|=0;return n.colors[Math.abs(i)%n.colors.length]}(e),"function"==typeof n.init&&n.init(i),i}(n=e.exports=i.debug=i.default=i).coerce=function(e){return e instanceof Error?e.stack||e.message:e},n.disable=function(){n.enable("")},n.enable=function(e){n.save(e),n.names=[],n.skips=[];for(var a=("string"==typeof e?e:"").split(/[\s,]+/),i=a.length,t=0;t<i;t++)a[t]&&("-"===(e=a[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")))},n.enabled=function(e){var a,i;for(a=0,i=n.skips.length;a<i;a++)if(n.skips[a].test(e))return!1;for(a=0,i=n.names.length;a<i;a++)if(n.names[a].test(e))return!0;return!1},n.humanize=at,n.names=[],n.skips=[],n.formatters={}})),ot=(tt.coerce,tt.disable,tt.enable,tt.enabled,tt.humanize,tt.names,tt.skips,tt.formatters,a((function(e,n){function a(){var e;try{e=n.storage.debug}catch(e){}return!e&&void 0!==$&&"env"in $&&(e=$.env.DEBUG),e}(n=e.exports=tt).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},n.formatArgs=function(e){var a=this.useColors;if(e[0]=(a?"%c":"")+this.namespace+(a?" %c":" ")+e[0]+(a?"%c ":" ")+"+"+n.humanize(this.diff),a){var i="color: "+this.color;e.splice(1,0,i,"color: inherit");var t=0,o=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(t++,"%c"===e&&(o=t))})),e.splice(o,0,i)}},n.save=function(e){try{null==e?n.storage.removeItem("debug"):n.storage.debug=e}catch(e){}},n.load=a,n.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},n.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),n.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],n.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},n.enable(a())})));ot.log,ot.formatArgs,ot.save,ot.load,ot.useColors,ot.storage,ot.colors;var st,rt=function(){return!1},ct=function(){throw new Error("tty.ReadStream is not implemented")},pt={},lt=a((function(e,n){(n=e.exports=tt).init=function(e){e.inspectOpts={};for(var a=Object.keys(n.inspectOpts),i=0;i<a.length;i++)e.inspectOpts[a[i]]=n.inspectOpts[a[i]]},n.log=function(){return i.write(Zn.format.apply(Zn,arguments)+"\n")},n.formatArgs=function(e){var a=this.namespace;if(this.useColors){var i=this.color,t="  [3"+i+";1m"+a+" [0m";e[0]=t+e[0].split("\n").join("\n"+t),e.push("[3"+i+"m+"+n.humanize(this.diff)+"[0m")}else e[0]=(new Date).toUTCString()+" "+a+" "+e[0]},n.save=function(e){null==e?delete $.env.DEBUG:$.env.DEBUG=e},n.load=t,n.useColors=function(){return"colors"in n.inspectOpts?Boolean(n.inspectOpts.colors):rt(a)},n.colors=[6,2,3,4,5,1],n.inspectOpts=Object.keys($.env).filter((function(e){return/^debug_/i.test(e)})).reduce((function(e,n){var a=n.substring(6).toLowerCase().replace(/_([a-z])/g,(function(e,n){return n.toUpperCase()})),i=$.env[n];return i=!!/^(yes|on|true|enabled)$/i.test(i)||!/^(no|off|false|disabled)$/i.test(i)&&("null"===i?null:Number(i)),e[a]=i,e}),{});var a=parseInt($.env.DEBUG_FD,10)||2;1!==a&&2!==a&&Zn.deprecate((function(){}),"except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();var i=1===a?$.stdout:2===a?$.stderr:function(e){var n;switch($.binding("tty_wrap").guessHandleType(e)){case"TTY":(n=new ct(e))._type="tty",n._handle&&n._handle.unref&&n._handle.unref();break;case"FILE":(n=new pt.SyncWriteStream(e,{autoClose:!1}))._type="fs";break;case"PIPE":case"TCP":(n=new pt.Socket({fd:e,readable:!1,writable:!0})).readable=!1,n.read=null,n._type="pipe",n._handle&&n._handle.unref&&n._handle.unref();break;default:throw new Error("Implement me. Unknown stream file type!")}return n.fd=e,n._isStdio=!0,n}(a);function t(){return $.env.DEBUG}n.formatters.o=function(e){return this.inspectOpts.colors=this.useColors,Zn.inspect(e,this.inspectOpts).split("\n").map((function(e){return e.trim()})).join(" ")},n.formatters.O=function(e){return this.inspectOpts.colors=this.useColors,Zn.inspect(e,this.inspectOpts)},n.enable(t())})),ut=(lt.init,lt.log,lt.formatArgs,lt.save,lt.load,lt.useColors,lt.colors,lt.inspectOpts,a((function(e){void 0!==$&&"renderer"===$.type?e.exports=ot:e.exports=lt})));try{st=ut("follow-redirects")}catch(ni){st=function(){}}var dt=st,mt=ui.URL,ht=$a.Writable,ft=Object.create(null);["abort","aborted","connect","error","socket","timeout"].forEach((function(e){ft[e]=function(n,a,i){this._redirectable.emit(e,n,a,i)}}));var vt=At("ERR_FR_REDIRECTION_FAILURE",""),xt=At("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded"),gt=At("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),bt=At("ERR_STREAM_WRITE_AFTER_END","write after end");function wt(e,n){ht.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],n&&this.on("response",n);var a=this;this._onNativeResponse=function(e){a._processResponse(e)},this._performRequest()}function _t(e,n){clearTimeout(e._timeout),e._timeout=setTimeout((function(){e.emit("timeout")}),n)}function yt(){clearTimeout(this._timeout)}function kt(e){var n={maxRedirects:21,maxBodyLength:10485760},a={};return Object.keys(e).forEach((function(i){var t=i+":",o=a[t]=e[i],s=n[i]=Object.create(o);s.request=function(e,i,o){if("string"==typeof e){var s=e;try{e=jt(new mt(s))}catch(n){e=ui.parse(s)}}else mt&&e instanceof mt?e=jt(e):(o=i,i=e,e={protocol:t});return"function"==typeof i&&(o=i,i=null),(i=Object.assign({maxRedirects:n.maxRedirects,maxBodyLength:n.maxBodyLength},e,i)).nativeProtocols=a,Di.equal(i.protocol,t,"protocol mismatch"),dt("options",i),new wt(i,o)},s.get=function(e,n,a){var i=s.request(e,n,a);return i.end(),i}})),n}function Et(){}function jt(e){var n={protocol:e.protocol,hostname:e.hostname.startsWith("[")?e.hostname.slice(1,-1):e.hostname,hash:e.hash,search:e.search,pathname:e.pathname,path:e.pathname+e.search,href:e.href};return""!==e.port&&(n.port=Number(e.port)),n}function Rt(e,n){var a;for(var i in n)e.test(i)&&(a=n[i],delete n[i]);return a}function At(e,n){function a(e){Error.captureStackTrace(this,this.constructor),this.message=e||n}return a.prototype=new Error,a.prototype.constructor=a,a.prototype.name="Error ["+e+"]",a.prototype.code=e,a}wt.prototype=Object.create(ht.prototype),wt.prototype.write=function(e,n,a){if(this._ending)throw new bt;if(!("string"==typeof e||"object"==typeof e&&"length"in e))throw new TypeError("data should be a string, Buffer or Uint8Array");"function"==typeof n&&(a=n,n=null),0!==e.length?this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:n}),this._currentRequest.write(e,n,a)):(this.emit("error",new gt),this.abort()):a&&a()},wt.prototype.end=function(e,n,a){if("function"==typeof e?(a=e,e=n=null):"function"==typeof n&&(a=n,n=null),e){var i=this,t=this._currentRequest;this.write(e,n,(function(){i._ended=!0,t.end(null,null,a)})),this._ending=!0}else this._ended=this._ending=!0,this._currentRequest.end(null,null,a)},wt.prototype.setHeader=function(e,n){this._options.headers[e]=n,this._currentRequest.setHeader(e,n)},wt.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)},wt.prototype.setTimeout=function(e,n){if(n&&this.once("timeout",n),this.socket)_t(this,e);else{var a=this;this._currentRequest.once("socket",(function(){_t(a,e)}))}return this.once("response",yt),this.once("error",yt),this},["abort","flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach((function(e){wt.prototype[e]=function(n,a){return this._currentRequest[e](n,a)}})),["aborted","connection","socket"].forEach((function(e){Object.defineProperty(wt.prototype,e,{get:function(){return this._currentRequest[e]}})})),wt.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var n=e.path.indexOf("?");n<0?e.pathname=e.path:(e.pathname=e.path.substring(0,n),e.search=e.path.substring(n))}},wt.prototype._performRequest=function(){var e=this._options.protocol,n=this._options.nativeProtocols[e];if(n){if(this._options.agents){var a=e.substr(0,e.length-1);this._options.agent=this._options.agents[a]}var i=this._currentRequest=n.request(this._options,this._onNativeResponse);for(var t in this._currentUrl=ui.format(this._options),i._redirectable=this,ft)t&&i.on(t,ft[t]);if(this._isRedirect){var o=0,s=this,r=this._requestBodyBuffers;!function e(n){if(i===s._currentRequest)if(n)s.emit("error",n);else if(o<r.length){var a=r[o++];i.finished||i.write(a.data,a.encoding,e)}else s._ended&&i.end()}()}}else this.emit("error",new TypeError("Unsupported protocol "+e))},wt.prototype._processResponse=function(e){var n=e.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:e.headers,statusCode:n});var a=e.headers.location;if(a&&!1!==this._options.followRedirects&&n>=300&&n<400){if(this._currentRequest.removeAllListeners(),this._currentRequest.on("error",Et),this._currentRequest.abort(),e.destroy(),++this._redirectCount>this._options.maxRedirects)return void this.emit("error",new xt);((301===n||302===n)&&"POST"===this._options.method||303===n&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],Rt(/^content-/i,this._options.headers));var i=Rt(/^host$/i,this._options.headers)||ui.parse(this._currentUrl).hostname,t=ui.resolve(this._currentUrl,a);dt("redirecting to",t),this._isRedirect=!0;var o=ui.parse(t);if(Object.assign(this._options,o),o.hostname!==i&&Rt(/^authorization$/i,this._options.headers),"function"==typeof this._options.beforeRedirect){var s={headers:e.headers};try{this._options.beforeRedirect.call(null,this._options,s)}catch(e){return void this.emit("error",e)}this._sanitizeOptions(this._options)}try{this._performRequest()}catch(e){var r=new vt("Redirected request failed: "+e.message);r.cause=e,this.emit("error",r)}}else e.responseUrl=this._currentUrl,e.redirects=this._redirects,this.emit("response",e),this._requestBodyBuffers=[]};var zt=kt({http:Oi,https:Oi}),St=kt;zt.wrap=St;var Tt={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};function Ot(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}function Lt(e,n,a,i,t){if(n.subarray&&e.subarray)e.set(n.subarray(a,a+i),t);else for(var o=0;o<i;o++)e[t+o]=n[a+o]}var Ct=Uint8Array,Ut=Uint16Array,qt=Int32Array;function Bt(e){for(var n=e.length;--n>=0;)e[n]=0}var Mt=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],Pt=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Nt=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Dt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],It=new Array(576);Bt(It);var Ft=new Array(60);Bt(Ft);var Zt=new Array(512);Bt(Zt);var Ht=new Array(256);Bt(Ht);var $t=new Array(29);Bt($t);var Yt,Wt,Vt,Kt=new Array(30);function Gt(e,n,a,i,t){this.static_tree=e,this.extra_bits=n,this.extra_base=a,this.elems=i,this.max_length=t,this.has_stree=e&&e.length}function Xt(e,n){this.dyn_tree=e,this.max_code=0,this.stat_desc=n}function Jt(e){return e<256?Zt[e]:Zt[256+(e>>>7)]}function Qt(e,n){e.pending_buf[e.pending++]=255&n,e.pending_buf[e.pending++]=n>>>8&255}function eo(e,n,a){e.bi_valid>16-a?(e.bi_buf|=n<<e.bi_valid&65535,Qt(e,e.bi_buf),e.bi_buf=n>>16-e.bi_valid,e.bi_valid+=a-16):(e.bi_buf|=n<<e.bi_valid&65535,e.bi_valid+=a)}function no(e,n,a){eo(e,a[2*n],a[2*n+1])}function ao(e,n){var a=0;do{a|=1&e,e>>>=1,a<<=1}while(--n>0);return a>>>1}function io(e,n,a){var i,t,o=new Array(16),s=0;for(i=1;i<=15;i++)o[i]=s=s+a[i-1]<<1;for(t=0;t<=n;t++){var r=e[2*t+1];0!==r&&(e[2*t]=ao(o[r]++,r))}}function to(e){var n;for(n=0;n<286;n++)e.dyn_ltree[2*n]=0;for(n=0;n<30;n++)e.dyn_dtree[2*n]=0;for(n=0;n<19;n++)e.bl_tree[2*n]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function oo(e){e.bi_valid>8?Qt(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function so(e,n,a,i){var t=2*n,o=2*a;return e[t]<e[o]||e[t]===e[o]&&i[n]<=i[a]}function ro(e,n,a){for(var i=e.heap[a],t=a<<1;t<=e.heap_len&&(t<e.heap_len&&so(n,e.heap[t+1],e.heap[t],e.depth)&&t++,!so(n,i,e.heap[t],e.depth));)e.heap[a]=e.heap[t],a=t,t<<=1;e.heap[a]=i}function co(e,n,a){var i,t,o,s,r=0;if(0!==e.last_lit)do{i=e.pending_buf[e.d_buf+2*r]<<8|e.pending_buf[e.d_buf+2*r+1],t=e.pending_buf[e.l_buf+r],r++,0===i?no(e,t,n):(no(e,(o=Ht[t])+256+1,n),0!==(s=Mt[o])&&eo(e,t-=$t[o],s),no(e,o=Jt(--i),a),0!==(s=Pt[o])&&eo(e,i-=Kt[o],s))}while(r<e.last_lit);no(e,256,n)}function po(e,n){var a,i,t,o=n.dyn_tree,s=n.stat_desc.static_tree,r=n.stat_desc.has_stree,c=n.stat_desc.elems,p=-1;for(e.heap_len=0,e.heap_max=573,a=0;a<c;a++)0!==o[2*a]?(e.heap[++e.heap_len]=p=a,e.depth[a]=0):o[2*a+1]=0;for(;e.heap_len<2;)o[2*(t=e.heap[++e.heap_len]=p<2?++p:0)]=1,e.depth[t]=0,e.opt_len--,r&&(e.static_len-=s[2*t+1]);for(n.max_code=p,a=e.heap_len>>1;a>=1;a--)ro(e,o,a);t=c;do{a=e.heap[1],e.heap[1]=e.heap[e.heap_len--],ro(e,o,1),i=e.heap[1],e.heap[--e.heap_max]=a,e.heap[--e.heap_max]=i,o[2*t]=o[2*a]+o[2*i],e.depth[t]=(e.depth[a]>=e.depth[i]?e.depth[a]:e.depth[i])+1,o[2*a+1]=o[2*i+1]=t,e.heap[1]=t++,ro(e,o,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,n){var a,i,t,o,s,r,c=n.dyn_tree,p=n.max_code,l=n.stat_desc.static_tree,u=n.stat_desc.has_stree,d=n.stat_desc.extra_bits,m=n.stat_desc.extra_base,h=n.stat_desc.max_length,f=0;for(o=0;o<=15;o++)e.bl_count[o]=0;for(c[2*e.heap[e.heap_max]+1]=0,a=e.heap_max+1;a<573;a++)(o=c[2*c[2*(i=e.heap[a])+1]+1]+1)>h&&(o=h,f++),c[2*i+1]=o,i>p||(e.bl_count[o]++,s=0,i>=m&&(s=d[i-m]),r=c[2*i],e.opt_len+=r*(o+s),u&&(e.static_len+=r*(l[2*i+1]+s)));if(0!==f){do{for(o=h-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[h]--,f-=2}while(f>0);for(o=h;0!==o;o--)for(i=e.bl_count[o];0!==i;)(t=e.heap[--a])>p||(c[2*t+1]!==o&&(e.opt_len+=(o-c[2*t+1])*c[2*t],c[2*t+1]=o),i--)}}(e,n),io(o,p,e.bl_count)}function lo(e,n,a){var i,t,o=-1,s=n[1],r=0,c=7,p=4;for(0===s&&(c=138,p=3),n[2*(a+1)+1]=65535,i=0;i<=a;i++)t=s,s=n[2*(i+1)+1],++r<c&&t===s||(r<p?e.bl_tree[2*t]+=r:0!==t?(t!==o&&e.bl_tree[2*t]++,e.bl_tree[32]++):r<=10?e.bl_tree[34]++:e.bl_tree[36]++,r=0,o=t,0===s?(c=138,p=3):t===s?(c=6,p=3):(c=7,p=4))}function uo(e,n,a){var i,t,o=-1,s=n[1],r=0,c=7,p=4;for(0===s&&(c=138,p=3),i=0;i<=a;i++)if(t=s,s=n[2*(i+1)+1],!(++r<c&&t===s)){if(r<p)do{no(e,t,e.bl_tree)}while(0!=--r);else 0!==t?(t!==o&&(no(e,t,e.bl_tree),r--),no(e,16,e.bl_tree),eo(e,r-3,2)):r<=10?(no(e,17,e.bl_tree),eo(e,r-3,3)):(no(e,18,e.bl_tree),eo(e,r-11,7));r=0,o=t,0===s?(c=138,p=3):t===s?(c=6,p=3):(c=7,p=4)}}Bt(Kt);var mo=!1;function ho(e,n,a,i){eo(e,0+(i?1:0),3),function(e,n,a,i){oo(e),Qt(e,a),Qt(e,~a),Lt(e.pending_buf,e.window,n,a,e.pending),e.pending+=a}(e,n,a)}function fo(e,n,a){return e.pending_buf[e.d_buf+2*e.last_lit]=n>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&n,e.pending_buf[e.l_buf+e.last_lit]=255&a,e.last_lit++,0===n?e.dyn_ltree[2*a]++:(e.matches++,n--,e.dyn_ltree[2*(Ht[a]+256+1)]++,e.dyn_dtree[2*Jt(n)]++),e.last_lit===e.lit_bufsize-1}function vo(e,n,a,i){for(var t=65535&e|0,o=e>>>16&65535|0,s=0;0!==a;){a-=s=a>2e3?2e3:a;do{o=o+(t=t+n[i++]|0)|0}while(--s);t%=65521,o%=65521}return t|o<<16|0}var xo=function(){for(var e,n=[],a=0;a<256;a++){e=a;for(var i=0;i<8;i++)e=1&e?3988292384^e>>>1:e>>>1;n[a]=e}return n}();function go(e,n,a,i){var t=xo,o=i+a;e^=-1;for(var s=i;s<o;s++)e=e>>>8^t[255&(e^n[s])];return-1^e}var bo,wo=-2,_o=258,yo=262,ko=103,Eo=113,jo=666;function Ro(e,n){return e.msg=Tt[n],n}function Ao(e){return(e<<1)-(e>4?9:0)}function zo(e){for(var n=e.length;--n>=0;)e[n]=0}function So(e){var n=e.state,a=n.pending;a>e.avail_out&&(a=e.avail_out),0!==a&&(Lt(e.output,n.pending_buf,n.pending_out,a,e.next_out),e.next_out+=a,n.pending_out+=a,e.total_out+=a,e.avail_out-=a,n.pending-=a,0===n.pending&&(n.pending_out=0))}function To(e,n){(function(e,n,a,i){var t,o,s=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=function(e){var n,a=4093624447;for(n=0;n<=31;n++,a>>>=1)if(1&a&&0!==e.dyn_ltree[2*n])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(n=32;n<256;n++)if(0!==e.dyn_ltree[2*n])return 1;return 0}(e)),po(e,e.l_desc),po(e,e.d_desc),s=function(e){var n;for(lo(e,e.dyn_ltree,e.l_desc.max_code),lo(e,e.dyn_dtree,e.d_desc.max_code),po(e,e.bl_desc),n=18;n>=3&&0===e.bl_tree[2*Dt[n]+1];n--);return e.opt_len+=3*(n+1)+5+5+4,n}(e),t=e.opt_len+3+7>>>3,(o=e.static_len+3+7>>>3)<=t&&(t=o)):t=o=a+5,a+4<=t&&-1!==n?ho(e,n,a,i):4===e.strategy||o===t?(eo(e,2+(i?1:0),3),co(e,It,Ft)):(eo(e,4+(i?1:0),3),function(e,n,a,i){var t;for(eo(e,n-257,5),eo(e,a-1,5),eo(e,i-4,4),t=0;t<i;t++)eo(e,e.bl_tree[2*Dt[t]+1],3);uo(e,e.dyn_ltree,n-1),uo(e,e.dyn_dtree,a-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,s+1),co(e,e.dyn_ltree,e.dyn_dtree)),to(e),i&&oo(e)})(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,n),e.block_start=e.strstart,So(e.strm)}function Oo(e,n){e.pending_buf[e.pending++]=n}function Lo(e,n){e.pending_buf[e.pending++]=n>>>8&255,e.pending_buf[e.pending++]=255&n}function Co(e,n){var a,i,t=e.max_chain_length,o=e.strstart,s=e.prev_length,r=e.nice_match,c=e.strstart>e.w_size-yo?e.strstart-(e.w_size-yo):0,p=e.window,l=e.w_mask,u=e.prev,d=e.strstart+_o,m=p[o+s-1],h=p[o+s];e.prev_length>=e.good_match&&(t>>=2),r>e.lookahead&&(r=e.lookahead);do{if(p[(a=n)+s]===h&&p[a+s-1]===m&&p[a]===p[o]&&p[++a]===p[o+1]){o+=2,a++;do{}while(p[++o]===p[++a]&&p[++o]===p[++a]&&p[++o]===p[++a]&&p[++o]===p[++a]&&p[++o]===p[++a]&&p[++o]===p[++a]&&p[++o]===p[++a]&&p[++o]===p[++a]&&o<d);if(i=_o-(d-o),o=d-_o,i>s){if(e.match_start=n,s=i,i>=r)break;m=p[o+s-1],h=p[o+s]}}}while((n=u[n&l])>c&&0!=--t);return s<=e.lookahead?s:e.lookahead}function Uo(e){var n,a,i,t,o,s,r,c,p,l,u=e.w_size;do{if(t=e.window_size-e.lookahead-e.strstart,e.strstart>=u+(u-yo)){Lt(e.window,e.window,u,u,0),e.match_start-=u,e.strstart-=u,e.block_start-=u,n=a=e.hash_size;do{i=e.head[--n],e.head[n]=i>=u?i-u:0}while(--a);n=a=u;do{i=e.prev[--n],e.prev[n]=i>=u?i-u:0}while(--a);t+=u}if(0===e.strm.avail_in)break;if(s=e.strm,r=e.window,c=e.strstart+e.lookahead,p=t,l=void 0,(l=s.avail_in)>p&&(l=p),a=0===l?0:(s.avail_in-=l,Lt(r,s.input,s.next_in,l,c),1===s.state.wrap?s.adler=vo(s.adler,r,l,c):2===s.state.wrap&&(s.adler=go(s.adler,r,l,c)),s.next_in+=l,s.total_in+=l,l),e.lookahead+=a,e.lookahead+e.insert>=3)for(o=e.strstart-e.insert,e.ins_h=e.window[o],e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+3-1])&e.hash_mask,e.prev[o&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=o,o++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<yo&&0!==e.strm.avail_in)}function qo(e,n){for(var a,i;;){if(e.lookahead<yo){if(Uo(e),e.lookahead<yo&&0===n)return 1;if(0===e.lookahead)break}if(a=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==a&&e.strstart-a<=e.w_size-yo&&(e.match_length=Co(e,a)),e.match_length>=3)if(i=fo(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else i=fo(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(i&&(To(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===n?(To(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(To(e,!1),0===e.strm.avail_out)?1:2}function Bo(e,n){for(var a,i,t;;){if(e.lookahead<yo){if(Uo(e),e.lookahead<yo&&0===n)return 1;if(0===e.lookahead)break}if(a=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==a&&e.prev_length<e.max_lazy_match&&e.strstart-a<=e.w_size-yo&&(e.match_length=Co(e,a),e.match_length<=5&&(1===e.strategy||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){t=e.strstart+e.lookahead-3,i=fo(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=t&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,i&&(To(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((i=fo(e,0,e.window[e.strstart-1]))&&To(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(i=fo(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===n?(To(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(To(e,!1),0===e.strm.avail_out)?1:2}function Mo(e,n,a,i,t){this.good_length=e,this.max_lazy=n,this.nice_length=a,this.max_chain=i,this.func=t}function Po(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Ut(1146),this.dyn_dtree=new Ut(122),this.bl_tree=new Ut(78),zo(this.dyn_ltree),zo(this.dyn_dtree),zo(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Ut(16),this.heap=new Ut(573),zo(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Ut(573),zo(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function No(e){var n=function(e){var n;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(n=e.state).pending=0,n.pending_out=0,n.wrap<0&&(n.wrap=-n.wrap),n.status=n.wrap?42:Eo,e.adler=2===n.wrap?0:1,n.last_flush=0,function(e){mo||(function(){var e,n,a,i,t,o=new Array(16);for(a=0,i=0;i<28;i++)for($t[i]=a,e=0;e<1<<Mt[i];e++)Ht[a++]=i;for(Ht[a-1]=i,t=0,i=0;i<16;i++)for(Kt[i]=t,e=0;e<1<<Pt[i];e++)Zt[t++]=i;for(t>>=7;i<30;i++)for(Kt[i]=t<<7,e=0;e<1<<Pt[i]-7;e++)Zt[256+t++]=i;for(n=0;n<=15;n++)o[n]=0;for(e=0;e<=143;)It[2*e+1]=8,e++,o[8]++;for(;e<=255;)It[2*e+1]=9,e++,o[9]++;for(;e<=279;)It[2*e+1]=7,e++,o[7]++;for(;e<=287;)It[2*e+1]=8,e++,o[8]++;for(io(It,287,o),e=0;e<30;e++)Ft[2*e+1]=5,Ft[2*e]=ao(e,5);Yt=new Gt(It,Mt,257,286,15),Wt=new Gt(Ft,Pt,0,30,15),Vt=new Gt(new Array(0),Nt,0,19,7)}(),mo=!0),e.l_desc=new Xt(e.dyn_ltree,Yt),e.d_desc=new Xt(e.dyn_dtree,Wt),e.bl_desc=new Xt(e.bl_tree,Vt),e.bi_buf=0,e.bi_valid=0,to(e)}(n),0):Ro(e,wo)}(e);return 0===n&&function(e){e.window_size=2*e.w_size,zo(e.head),e.max_lazy_match=bo[e.level].max_lazy,e.good_match=bo[e.level].good_length,e.nice_match=bo[e.level].nice_length,e.max_chain_length=bo[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0}(e.state),n}function Do(e,n){var a,i,t,o;if(!e||!e.state||n>5||n<0)return e?Ro(e,wo):wo;if(i=e.state,!e.output||!e.input&&0!==e.avail_in||i.status===jo&&4!==n)return Ro(e,0===e.avail_out?-5:wo);if(i.strm=e,a=i.last_flush,i.last_flush=n,42===i.status)if(2===i.wrap)e.adler=0,Oo(i,31),Oo(i,139),Oo(i,8),i.gzhead?(Oo(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),Oo(i,255&i.gzhead.time),Oo(i,i.gzhead.time>>8&255),Oo(i,i.gzhead.time>>16&255),Oo(i,i.gzhead.time>>24&255),Oo(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),Oo(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(Oo(i,255&i.gzhead.extra.length),Oo(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=go(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(Oo(i,0),Oo(i,0),Oo(i,0),Oo(i,0),Oo(i,0),Oo(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),Oo(i,3),i.status=Eo);else{var s=8+(i.w_bits-8<<4)<<8;s|=(i.strategy>=2||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(s|=32),s+=31-s%31,i.status=Eo,Lo(i,s),0!==i.strstart&&(Lo(i,e.adler>>>16),Lo(i,65535&e.adler)),e.adler=1}if(69===i.status)if(i.gzhead.extra){for(t=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>t&&(e.adler=go(e.adler,i.pending_buf,i.pending-t,t)),So(e),t=i.pending,i.pending!==i.pending_buf_size));)Oo(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>t&&(e.adler=go(e.adler,i.pending_buf,i.pending-t,t)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){t=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>t&&(e.adler=go(e.adler,i.pending_buf,i.pending-t,t)),So(e),t=i.pending,i.pending===i.pending_buf_size)){o=1;break}o=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,Oo(i,o)}while(0!==o);i.gzhead.hcrc&&i.pending>t&&(e.adler=go(e.adler,i.pending_buf,i.pending-t,t)),0===o&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){t=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>t&&(e.adler=go(e.adler,i.pending_buf,i.pending-t,t)),So(e),t=i.pending,i.pending===i.pending_buf_size)){o=1;break}o=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,Oo(i,o)}while(0!==o);i.gzhead.hcrc&&i.pending>t&&(e.adler=go(e.adler,i.pending_buf,i.pending-t,t)),0===o&&(i.status=ko)}else i.status=ko;if(i.status===ko&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&So(e),i.pending+2<=i.pending_buf_size&&(Oo(i,255&e.adler),Oo(i,e.adler>>8&255),e.adler=0,i.status=Eo)):i.status=Eo),0!==i.pending){if(So(e),0===e.avail_out)return i.last_flush=-1,0}else if(0===e.avail_in&&Ao(n)<=Ao(a)&&4!==n)return Ro(e,-5);if(i.status===jo&&0!==e.avail_in)return Ro(e,-5);if(0!==e.avail_in||0!==i.lookahead||0!==n&&i.status!==jo){var r=2===i.strategy?function(e,n){for(var a;;){if(0===e.lookahead&&(Uo(e),0===e.lookahead)){if(0===n)return 1;break}if(e.match_length=0,a=fo(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,a&&(To(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===n?(To(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(To(e,!1),0===e.strm.avail_out)?1:2}(i,n):3===i.strategy?function(e,n){for(var a,i,t,o,s=e.window;;){if(e.lookahead<=_o){if(Uo(e),e.lookahead<=_o&&0===n)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(i=s[t=e.strstart-1])===s[++t]&&i===s[++t]&&i===s[++t]){o=e.strstart+_o;do{}while(i===s[++t]&&i===s[++t]&&i===s[++t]&&i===s[++t]&&i===s[++t]&&i===s[++t]&&i===s[++t]&&i===s[++t]&&t<o);e.match_length=_o-(o-t),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(a=fo(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(a=fo(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),a&&(To(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===n?(To(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(To(e,!1),0===e.strm.avail_out)?1:2}(i,n):bo[i.level].func(i,n);if(3!==r&&4!==r||(i.status=jo),1===r||3===r)return 0===e.avail_out&&(i.last_flush=-1),0;if(2===r&&(1===n?function(e){eo(e,2,3),no(e,256,It),function(e){16===e.bi_valid?(Qt(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}(i):5!==n&&(ho(i,0,0,!1),3===n&&(zo(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),So(e),0===e.avail_out))return i.last_flush=-1,0}return 4!==n?0:i.wrap<=0?1:(2===i.wrap?(Oo(i,255&e.adler),Oo(i,e.adler>>8&255),Oo(i,e.adler>>16&255),Oo(i,e.adler>>24&255),Oo(i,255&e.total_in),Oo(i,e.total_in>>8&255),Oo(i,e.total_in>>16&255),Oo(i,e.total_in>>24&255)):(Lo(i,e.adler>>>16),Lo(i,65535&e.adler)),So(e),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?0:1)}function Io(e,n){var a,i,t,o,s,r,c,p,l,u,d,m,h,f,v,x,g,b,w,_,y,k,E,j,R;a=e.state,i=e.next_in,j=e.input,t=i+(e.avail_in-5),o=e.next_out,R=e.output,s=o-(n-e.avail_out),r=o+(e.avail_out-257),c=a.dmax,p=a.wsize,l=a.whave,u=a.wnext,d=a.window,m=a.hold,h=a.bits,f=a.lencode,v=a.distcode,x=(1<<a.lenbits)-1,g=(1<<a.distbits)-1;e:do{h<15&&(m+=j[i++]<<h,h+=8,m+=j[i++]<<h,h+=8),b=f[m&x];n:for(;;){if(m>>>=w=b>>>24,h-=w,0==(w=b>>>16&255))R[o++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=f[(65535&b)+(m&(1<<w)-1)];continue n}if(32&w){a.mode=12;break e}e.msg="invalid literal/length code",a.mode=30;break e}_=65535&b,(w&=15)&&(h<w&&(m+=j[i++]<<h,h+=8),_+=m&(1<<w)-1,m>>>=w,h-=w),h<15&&(m+=j[i++]<<h,h+=8,m+=j[i++]<<h,h+=8),b=v[m&g];a:for(;;){if(m>>>=w=b>>>24,h-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=v[(65535&b)+(m&(1<<w)-1)];continue a}e.msg="invalid distance code",a.mode=30;break e}if(y=65535&b,h<(w&=15)&&(m+=j[i++]<<h,(h+=8)<w&&(m+=j[i++]<<h,h+=8)),(y+=m&(1<<w)-1)>c){e.msg="invalid distance too far back",a.mode=30;break e}if(m>>>=w,h-=w,y>(w=o-s)){if((w=y-w)>l&&a.sane){e.msg="invalid distance too far back",a.mode=30;break e}if(k=0,E=d,0===u){if(k+=p-w,w<_){_-=w;do{R[o++]=d[k++]}while(--w);k=o-y,E=R}}else if(u<w){if(k+=p+u-w,(w-=u)<_){_-=w;do{R[o++]=d[k++]}while(--w);if(k=0,u<_){_-=w=u;do{R[o++]=d[k++]}while(--w);k=o-y,E=R}}}else if(k+=u-w,w<_){_-=w;do{R[o++]=d[k++]}while(--w);k=o-y,E=R}for(;_>2;)R[o++]=E[k++],R[o++]=E[k++],R[o++]=E[k++],_-=3;_&&(R[o++]=E[k++],_>1&&(R[o++]=E[k++]))}else{k=o-y;do{R[o++]=R[k++],R[o++]=R[k++],R[o++]=R[k++],_-=3}while(_>2);_&&(R[o++]=R[k++],_>1&&(R[o++]=R[k++]))}break}}break}}while(i<t&&o<r);i-=_=h>>3,m&=(1<<(h-=_<<3))-1,e.next_in=i,e.next_out=o,e.avail_in=i<t?t-i+5:5-(i-t),e.avail_out=o<r?r-o+257:257-(o-r),a.hold=m,a.bits=h}bo=[new Mo(0,0,0,0,(function(e,n){var a=65535;for(a>e.pending_buf_size-5&&(a=e.pending_buf_size-5);;){if(e.lookahead<=1){if(Uo(e),0===e.lookahead&&0===n)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var i=e.block_start+a;if((0===e.strstart||e.strstart>=i)&&(e.lookahead=e.strstart-i,e.strstart=i,To(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-yo&&(To(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===n?(To(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(To(e,!1),e.strm.avail_out),1)})),new Mo(4,4,8,4,qo),new Mo(4,5,16,8,qo),new Mo(4,6,32,32,qo),new Mo(4,4,16,16,Bo),new Mo(8,16,32,32,Bo),new Mo(8,16,128,128,Bo),new Mo(8,32,128,256,Bo),new Mo(32,128,258,1024,Bo),new Mo(32,258,258,4096,Bo)];var Fo=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],Zo=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],Ho=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],$o=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];function Yo(e,n,a,i,t,o,s,r){var c,p,l,u,d,m,h,f,v,x=r.bits,g=0,b=0,w=0,_=0,y=0,k=0,E=0,j=0,R=0,A=0,z=null,S=0,T=new Ut(16),O=new Ut(16),L=null,C=0;for(g=0;g<=15;g++)T[g]=0;for(b=0;b<i;b++)T[n[a+b]]++;for(y=x,_=15;_>=1&&0===T[_];_--);if(y>_&&(y=_),0===_)return t[o++]=20971520,t[o++]=20971520,r.bits=1,0;for(w=1;w<_&&0===T[w];w++);for(y<w&&(y=w),j=1,g=1;g<=15;g++)if(j<<=1,(j-=T[g])<0)return-1;if(j>0&&(0===e||1!==_))return-1;for(O[1]=0,g=1;g<15;g++)O[g+1]=O[g]+T[g];for(b=0;b<i;b++)0!==n[a+b]&&(s[O[n[a+b]]++]=b);if(0===e?(z=L=s,m=19):1===e?(z=Fo,S-=257,L=Zo,C-=257,m=256):(z=Ho,L=$o,m=-1),A=0,b=0,g=w,d=o,k=y,E=0,l=-1,u=(R=1<<y)-1,1===e&&R>852||2===e&&R>592)return 1;for(;;){h=g-E,s[b]<m?(f=0,v=s[b]):s[b]>m?(f=L[C+s[b]],v=z[S+s[b]]):(f=96,v=0),c=1<<g-E,w=p=1<<k;do{t[d+(A>>E)+(p-=c)]=h<<24|f<<16|v|0}while(0!==p);for(c=1<<g-1;A&c;)c>>=1;if(0!==c?(A&=c-1,A+=c):A=0,b++,0==--T[g]){if(g===_)break;g=n[a+s[b]]}if(g>y&&(A&u)!==l){for(0===E&&(E=y),d+=w,j=1<<(k=g-E);k+E<_&&!((j-=T[k+E])<=0);)k++,j<<=1;if(R+=1<<k,1===e&&R>852||2===e&&R>592)return 1;t[l=A&u]=y<<24|k<<16|d-o|0}}return 0!==A&&(t[d+A]=g-E<<24|64<<16|0),r.bits=y,0}var Wo=-2,Vo=12,Ko=30;function Go(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function Xo(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Ut(320),this.work=new Ut(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function Jo(e){var n;return e&&e.state?((n=e.state).wsize=0,n.whave=0,n.wnext=0,function(e){var n;return e&&e.state?(n=e.state,e.total_in=e.total_out=n.total=0,e.msg="",n.wrap&&(e.adler=1&n.wrap),n.mode=1,n.last=0,n.havedict=0,n.dmax=32768,n.head=null,n.hold=0,n.bits=0,n.lencode=n.lendyn=new qt(852),n.distcode=n.distdyn=new qt(592),n.sane=1,n.back=-1,0):Wo}(e)):Wo}var Qo,es,ns,as=!0;function is(e){if(as){var n;for(Qo=new qt(512),es=new qt(32),n=0;n<144;)e.lens[n++]=8;for(;n<256;)e.lens[n++]=9;for(;n<280;)e.lens[n++]=7;for(;n<288;)e.lens[n++]=8;for(Yo(1,e.lens,0,288,Qo,0,e.work,{bits:9}),n=0;n<32;)e.lens[n++]=5;Yo(2,e.lens,0,32,es,0,e.work,{bits:5}),as=!1}e.lencode=Qo,e.lenbits=9,e.distcode=es,e.distbits=5}function ts(e){if(e<1||e>7)throw new TypeError("Bad argument");this.mode=e,this.init_done=!1,this.write_in_progress=!1,this.pending_close=!1,this.windowBits=0,this.level=0,this.memLevel=0,this.strategy=0,this.dictionary=null}function os(e,n){for(var a=0;a<e.length;a++)this[n+a]=e[a]}ts.prototype.init=function(e,n,a,i,t){var o;switch(this.windowBits=e,this.level=n,this.memLevel=a,this.strategy=i,3!==this.mode&&4!==this.mode||(this.windowBits+=16),7===this.mode&&(this.windowBits+=32),5!==this.mode&&6!==this.mode||(this.windowBits=-this.windowBits),this.strm=new Ot,this.mode){case 1:case 3:case 5:o=function(e,n,a,i,t,o){if(!e)return wo;var s=1;if(-1===n&&(n=6),i<0?(s=0,i=-i):i>15&&(s=2,i-=16),t<1||t>9||i<8||i>15||n<0||n>9||o<0||o>4)return Ro(e,wo);8===i&&(i=9);var r=new Po;return e.state=r,r.strm=e,r.wrap=s,r.gzhead=null,r.w_bits=i,r.w_size=1<<r.w_bits,r.w_mask=r.w_size-1,r.hash_bits=t+7,r.hash_size=1<<r.hash_bits,r.hash_mask=r.hash_size-1,r.hash_shift=~~((r.hash_bits+3-1)/3),r.window=new Ct(2*r.w_size),r.head=new Ut(r.hash_size),r.prev=new Ut(r.w_size),r.lit_bufsize=1<<t+6,r.pending_buf_size=4*r.lit_bufsize,r.pending_buf=new Ct(r.pending_buf_size),r.d_buf=1*r.lit_bufsize,r.l_buf=3*r.lit_bufsize,r.level=n,r.strategy=o,r.method=8,No(e)}(this.strm,this.level,0,this.windowBits,this.memLevel,this.strategy);break;case 2:case 4:case 6:case 7:o=function(e,n){var a,i;return e?(i=new Xo,e.state=i,i.window=null,0!==(a=function(e,n){var a,i;return e&&e.state?(i=e.state,n<0?(a=0,n=-n):(a=1+(n>>4),n<48&&(n&=15)),n&&(n<8||n>15)?Wo:(null!==i.window&&i.wbits!==n&&(i.window=null),i.wrap=a,i.wbits=n,Jo(e))):Wo}(e,n))&&(e.state=null),a):Wo}(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}0===o?(this.write_in_progress=!1,this.init_done=!0):this._error(o)},ts.prototype.params=function(){throw new Error("deflateParams Not supported")},ts.prototype._writeCheck=function(){if(!this.init_done)throw new Error("write before init");if(0===this.mode)throw new Error("already finalized");if(this.write_in_progress)throw new Error("write already in progress");if(this.pending_close)throw new Error("close is pending")},ts.prototype.write=function(e,n,a,i,t,o,s){this._writeCheck(),this.write_in_progress=!0;var r=this;return $.nextTick((function(){r.write_in_progress=!1;var c=r._write(e,n,a,i,t,o,s);r.callback(c[0],c[1]),r.pending_close&&r.close()})),this},ts.prototype.writeSync=function(e,n,a,i,t,o,s){return this._writeCheck(),this._write(e,n,a,i,t,o,s)},ts.prototype._write=function(e,n,a,i,t,o,s){if(this.write_in_progress=!0,0!==e&&1!==e&&2!==e&&3!==e&&4!==e&&5!==e)throw new Error("Invalid flush value");null==n&&(n=new me(0),i=0,a=0),t._set?t.set=t._set:t.set=os;var r,c=this.strm;switch(c.avail_in=i,c.input=n,c.next_in=a,c.avail_out=s,c.output=t,c.next_out=o,this.mode){case 1:case 3:case 5:r=Do(c,e);break;case 7:case 2:case 4:case 6:r=function(e,n){var a,i,t,o,s,r,c,p,l,u,d,m,h,f,v,x,g,b,w,_,y,k,E,j,R=0,A=new Ct(4),z=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return Wo;(a=e.state).mode===Vo&&(a.mode=13),s=e.next_out,t=e.output,c=e.avail_out,o=e.next_in,i=e.input,r=e.avail_in,p=a.hold,l=a.bits,u=r,d=c,k=0;e:for(;;)switch(a.mode){case 1:if(0===a.wrap){a.mode=13;break}for(;l<16;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}if(2&a.wrap&&35615===p){a.check=0,A[0]=255&p,A[1]=p>>>8&255,a.check=go(a.check,A,2,0),p=0,l=0,a.mode=2;break}if(a.flags=0,a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&p)<<8)+(p>>8))%31){e.msg="incorrect header check",a.mode=Ko;break}if(8!=(15&p)){e.msg="unknown compression method",a.mode=Ko;break}if(l-=4,y=8+(15&(p>>>=4)),0===a.wbits)a.wbits=y;else if(y>a.wbits){e.msg="invalid window size",a.mode=Ko;break}a.dmax=1<<y,e.adler=a.check=1,a.mode=512&p?10:Vo,p=0,l=0;break;case 2:for(;l<16;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}if(a.flags=p,8!=(255&a.flags)){e.msg="unknown compression method",a.mode=Ko;break}if(57344&a.flags){e.msg="unknown header flags set",a.mode=Ko;break}a.head&&(a.head.text=p>>8&1),512&a.flags&&(A[0]=255&p,A[1]=p>>>8&255,a.check=go(a.check,A,2,0)),p=0,l=0,a.mode=3;case 3:for(;l<32;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}a.head&&(a.head.time=p),512&a.flags&&(A[0]=255&p,A[1]=p>>>8&255,A[2]=p>>>16&255,A[3]=p>>>24&255,a.check=go(a.check,A,4,0)),p=0,l=0,a.mode=4;case 4:for(;l<16;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}a.head&&(a.head.xflags=255&p,a.head.os=p>>8),512&a.flags&&(A[0]=255&p,A[1]=p>>>8&255,a.check=go(a.check,A,2,0)),p=0,l=0,a.mode=5;case 5:if(1024&a.flags){for(;l<16;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}a.length=p,a.head&&(a.head.extra_len=p),512&a.flags&&(A[0]=255&p,A[1]=p>>>8&255,a.check=go(a.check,A,2,0)),p=0,l=0}else a.head&&(a.head.extra=null);a.mode=6;case 6:if(1024&a.flags&&((m=a.length)>r&&(m=r),m&&(a.head&&(y=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Array(a.head.extra_len)),Lt(a.head.extra,i,o,m,y)),512&a.flags&&(a.check=go(a.check,i,m,o)),r-=m,o+=m,a.length-=m),a.length))break e;a.length=0,a.mode=7;case 7:if(2048&a.flags){if(0===r)break e;m=0;do{y=i[o+m++],a.head&&y&&a.length<65536&&(a.head.name+=String.fromCharCode(y))}while(y&&m<r);if(512&a.flags&&(a.check=go(a.check,i,m,o)),r-=m,o+=m,y)break e}else a.head&&(a.head.name=null);a.length=0,a.mode=8;case 8:if(4096&a.flags){if(0===r)break e;m=0;do{y=i[o+m++],a.head&&y&&a.length<65536&&(a.head.comment+=String.fromCharCode(y))}while(y&&m<r);if(512&a.flags&&(a.check=go(a.check,i,m,o)),r-=m,o+=m,y)break e}else a.head&&(a.head.comment=null);a.mode=9;case 9:if(512&a.flags){for(;l<16;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}if(p!==(65535&a.check)){e.msg="header crc mismatch",a.mode=Ko;break}p=0,l=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),e.adler=a.check=0,a.mode=Vo;break;case 10:for(;l<32;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}e.adler=a.check=Go(p),p=0,l=0,a.mode=11;case 11:if(0===a.havedict)return e.next_out=s,e.avail_out=c,e.next_in=o,e.avail_in=r,a.hold=p,a.bits=l,2;e.adler=a.check=1,a.mode=Vo;case Vo:if(5===n||6===n)break e;case 13:if(a.last){p>>>=7&l,l-=7&l,a.mode=27;break}for(;l<3;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}switch(a.last=1&p,l-=1,3&(p>>>=1)){case 0:a.mode=14;break;case 1:if(is(a),a.mode=20,6===n){p>>>=2,l-=2;break e}break;case 2:a.mode=17;break;case 3:e.msg="invalid block type",a.mode=Ko}p>>>=2,l-=2;break;case 14:for(p>>>=7&l,l-=7&l;l<32;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}if((65535&p)!=(p>>>16^65535)){e.msg="invalid stored block lengths",a.mode=Ko;break}if(a.length=65535&p,p=0,l=0,a.mode=15,6===n)break e;case 15:a.mode=16;case 16:if(m=a.length){if(m>r&&(m=r),m>c&&(m=c),0===m)break e;Lt(t,i,o,m,s),r-=m,o+=m,c-=m,s+=m,a.length-=m;break}a.mode=Vo;break;case 17:for(;l<14;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}if(a.nlen=257+(31&p),p>>>=5,l-=5,a.ndist=1+(31&p),p>>>=5,l-=5,a.ncode=4+(15&p),p>>>=4,l-=4,a.nlen>286||a.ndist>30){e.msg="too many length or distance symbols",a.mode=Ko;break}a.have=0,a.mode=18;case 18:for(;a.have<a.ncode;){for(;l<3;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}a.lens[z[a.have++]]=7&p,p>>>=3,l-=3}for(;a.have<19;)a.lens[z[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,E={bits:a.lenbits},k=Yo(0,a.lens,0,19,a.lencode,0,a.work,E),a.lenbits=E.bits,k){e.msg="invalid code lengths set",a.mode=Ko;break}a.have=0,a.mode=19;case 19:for(;a.have<a.nlen+a.ndist;){for(;x=(R=a.lencode[p&(1<<a.lenbits)-1])>>>16&255,g=65535&R,!((v=R>>>24)<=l);){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}if(g<16)p>>>=v,l-=v,a.lens[a.have++]=g;else{if(16===g){for(j=v+2;l<j;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}if(p>>>=v,l-=v,0===a.have){e.msg="invalid bit length repeat",a.mode=Ko;break}y=a.lens[a.have-1],m=3+(3&p),p>>>=2,l-=2}else if(17===g){for(j=v+3;l<j;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}l-=v,y=0,m=3+(7&(p>>>=v)),p>>>=3,l-=3}else{for(j=v+7;l<j;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}l-=v,y=0,m=11+(127&(p>>>=v)),p>>>=7,l-=7}if(a.have+m>a.nlen+a.ndist){e.msg="invalid bit length repeat",a.mode=Ko;break}for(;m--;)a.lens[a.have++]=y}}if(a.mode===Ko)break;if(0===a.lens[256]){e.msg="invalid code -- missing end-of-block",a.mode=Ko;break}if(a.lenbits=9,E={bits:a.lenbits},k=Yo(1,a.lens,0,a.nlen,a.lencode,0,a.work,E),a.lenbits=E.bits,k){e.msg="invalid literal/lengths set",a.mode=Ko;break}if(a.distbits=6,a.distcode=a.distdyn,E={bits:a.distbits},k=Yo(2,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,E),a.distbits=E.bits,k){e.msg="invalid distances set",a.mode=Ko;break}if(a.mode=20,6===n)break e;case 20:a.mode=21;case 21:if(r>=6&&c>=258){e.next_out=s,e.avail_out=c,e.next_in=o,e.avail_in=r,a.hold=p,a.bits=l,Io(e,d),s=e.next_out,t=e.output,c=e.avail_out,o=e.next_in,i=e.input,r=e.avail_in,p=a.hold,l=a.bits,a.mode===Vo&&(a.back=-1);break}for(a.back=0;x=(R=a.lencode[p&(1<<a.lenbits)-1])>>>16&255,g=65535&R,!((v=R>>>24)<=l);){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}if(x&&0==(240&x)){for(b=v,w=x,_=g;x=(R=a.lencode[_+((p&(1<<b+w)-1)>>b)])>>>16&255,g=65535&R,!(b+(v=R>>>24)<=l);){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}p>>>=b,l-=b,a.back+=b}if(p>>>=v,l-=v,a.back+=v,a.length=g,0===x){a.mode=26;break}if(32&x){a.back=-1,a.mode=Vo;break}if(64&x){e.msg="invalid literal/length code",a.mode=Ko;break}a.extra=15&x,a.mode=22;case 22:if(a.extra){for(j=a.extra;l<j;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}a.length+=p&(1<<a.extra)-1,p>>>=a.extra,l-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=23;case 23:for(;x=(R=a.distcode[p&(1<<a.distbits)-1])>>>16&255,g=65535&R,!((v=R>>>24)<=l);){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}if(0==(240&x)){for(b=v,w=x,_=g;x=(R=a.distcode[_+((p&(1<<b+w)-1)>>b)])>>>16&255,g=65535&R,!(b+(v=R>>>24)<=l);){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}p>>>=b,l-=b,a.back+=b}if(p>>>=v,l-=v,a.back+=v,64&x){e.msg="invalid distance code",a.mode=Ko;break}a.offset=g,a.extra=15&x,a.mode=24;case 24:if(a.extra){for(j=a.extra;l<j;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}a.offset+=p&(1<<a.extra)-1,p>>>=a.extra,l-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){e.msg="invalid distance too far back",a.mode=Ko;break}a.mode=25;case 25:if(0===c)break e;if(m=d-c,a.offset>m){if((m=a.offset-m)>a.whave&&a.sane){e.msg="invalid distance too far back",a.mode=Ko;break}m>a.wnext?(m-=a.wnext,h=a.wsize-m):h=a.wnext-m,m>a.length&&(m=a.length),f=a.window}else f=t,h=s-a.offset,m=a.length;m>c&&(m=c),c-=m,a.length-=m;do{t[s++]=f[h++]}while(--m);0===a.length&&(a.mode=21);break;case 26:if(0===c)break e;t[s++]=a.length,c--,a.mode=21;break;case 27:if(a.wrap){for(;l<32;){if(0===r)break e;r--,p|=i[o++]<<l,l+=8}if(d-=c,e.total_out+=d,a.total+=d,d&&(e.adler=a.check=a.flags?go(a.check,t,d,s-d):vo(a.check,t,d,s-d)),d=c,(a.flags?p:Go(p))!==a.check){e.msg="incorrect data check",a.mode=Ko;break}p=0,l=0}a.mode=28;case 28:if(a.wrap&&a.flags){for(;l<32;){if(0===r)break e;r--,p+=i[o++]<<l,l+=8}if(p!==(4294967295&a.total)){e.msg="incorrect length check",a.mode=Ko;break}p=0,l=0}a.mode=29;case 29:k=1;break e;case Ko:k=-3;break e;case 31:return-4;case 32:default:return Wo}return e.next_out=s,e.avail_out=c,e.next_in=o,e.avail_in=r,a.hold=p,a.bits=l,(a.wsize||d!==e.avail_out&&a.mode<Ko&&(a.mode<27||4!==n))&&function(e,n,a,i){var t,o=e.state;null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new Ct(o.wsize)),i>=o.wsize?(Lt(o.window,n,a-o.wsize,o.wsize,0),o.wnext=0,o.whave=o.wsize):((t=o.wsize-o.wnext)>i&&(t=i),Lt(o.window,n,a-i,t,o.wnext),(i-=t)?(Lt(o.window,n,a-i,i,0),o.wnext=i,o.whave=o.wsize):(o.wnext+=t,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=t)))}(e,e.output,e.next_out,d-e.avail_out),u-=e.avail_in,d-=e.avail_out,e.total_in+=u,e.total_out+=d,a.total+=d,a.wrap&&d&&(e.adler=a.check=a.flags?go(a.check,t,d,e.next_out-d):vo(a.check,t,d,e.next_out-d)),e.data_type=a.bits+(a.last?64:0)+(a.mode===Vo?128:0)+(20===a.mode||15===a.mode?256:0),(0===u&&0===d||4===n)&&0===k&&(k=-5),k}(c,e);break;default:throw new Error("Unknown mode "+this.mode)}return 1!==r&&0!==r&&this._error(r),this.write_in_progress=!1,[c.avail_in,c.avail_out]},ts.prototype.close=function(){this.write_in_progress?this.pending_close=!0:(this.pending_close=!1,1===this.mode||3===this.mode||5===this.mode?function(e){var n;e&&e.state&&(42!==(n=e.state.status)&&69!==n&&73!==n&&91!==n&&n!==ko&&n!==Eo&&n!==jo?Ro(e,wo):(e.state=null,n===Eo&&Ro(e,-3)))}(this.strm):function(e){if(!e||!e.state)return Wo;var n=e.state;n.window&&(n.window=null),e.state=null}(this.strm),this.mode=0)},ts.prototype.reset=function(){switch(this.mode){case 1:case 5:ns=No(this.strm);break;case 2:case 6:ns=Jo(this.strm)}0!==ns&&this._error(ns)},ts.prototype._error=function(e){this.onerror(Tt[e]+": "+this.strm.msg,e),this.write_in_progress=!1,this.pending_close&&this.close()};var ss=Object.freeze({__proto__:null,NONE:0,DEFLATE:1,INFLATE:2,GZIP:3,GUNZIP:4,DEFLATERAW:5,INFLATERAW:6,UNZIP:7,Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8,Zlib:ts}),rs={};Object.keys(ss).forEach((function(e){rs[e]=ss[e]})),rs.Z_MIN_WINDOWBITS=8,rs.Z_MAX_WINDOWBITS=15,rs.Z_DEFAULT_WINDOWBITS=15,rs.Z_MIN_CHUNK=64,rs.Z_MAX_CHUNK=1/0,rs.Z_DEFAULT_CHUNK=16384,rs.Z_MIN_MEMLEVEL=1,rs.Z_MAX_MEMLEVEL=9,rs.Z_DEFAULT_MEMLEVEL=8,rs.Z_MIN_LEVEL=-1,rs.Z_MAX_LEVEL=9,rs.Z_DEFAULT_LEVEL=rs.Z_DEFAULT_COMPRESSION;var cs={Z_OK:rs.Z_OK,Z_STREAM_END:rs.Z_STREAM_END,Z_NEED_DICT:rs.Z_NEED_DICT,Z_ERRNO:rs.Z_ERRNO,Z_STREAM_ERROR:rs.Z_STREAM_ERROR,Z_DATA_ERROR:rs.Z_DATA_ERROR,Z_MEM_ERROR:rs.Z_MEM_ERROR,Z_BUF_ERROR:rs.Z_BUF_ERROR,Z_VERSION_ERROR:rs.Z_VERSION_ERROR};function ps(e){if(!(this instanceof ps))return new ps(e);vs.call(this,e,rs.DEFLATE)}function ls(e){if(!(this instanceof ls))return new ls(e);vs.call(this,e,rs.INFLATE)}function us(e){if(!(this instanceof us))return new us(e);vs.call(this,e,rs.GZIP)}function ds(e){if(!(this instanceof ds))return new ds(e);vs.call(this,e,rs.GUNZIP)}function ms(e){if(!(this instanceof ms))return new ms(e);vs.call(this,e,rs.DEFLATERAW)}function hs(e){if(!(this instanceof hs))return new hs(e);vs.call(this,e,rs.INFLATERAW)}function fs(e){if(!(this instanceof fs))return new fs(e);vs.call(this,e,rs.UNZIP)}function vs(e,n){if(this._opts=e=e||{},this._chunkSize=e.chunkSize||rs.Z_DEFAULT_CHUNK,Fa.call(this,e),e.flush&&e.flush!==rs.Z_NO_FLUSH&&e.flush!==rs.Z_PARTIAL_FLUSH&&e.flush!==rs.Z_SYNC_FLUSH&&e.flush!==rs.Z_FULL_FLUSH&&e.flush!==rs.Z_FINISH&&e.flush!==rs.Z_BLOCK)throw new Error("Invalid flush flag: "+e.flush);if(this._flushFlag=e.flush||rs.Z_NO_FLUSH,e.chunkSize&&(e.chunkSize<rs.Z_MIN_CHUNK||e.chunkSize>rs.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+e.chunkSize);if(e.windowBits&&(e.windowBits<rs.Z_MIN_WINDOWBITS||e.windowBits>rs.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+e.windowBits);if(e.level&&(e.level<rs.Z_MIN_LEVEL||e.level>rs.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+e.level);if(e.memLevel&&(e.memLevel<rs.Z_MIN_MEMLEVEL||e.memLevel>rs.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+e.memLevel);if(e.strategy&&e.strategy!=rs.Z_FILTERED&&e.strategy!=rs.Z_HUFFMAN_ONLY&&e.strategy!=rs.Z_RLE&&e.strategy!=rs.Z_FIXED&&e.strategy!=rs.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+e.strategy);if(e.dictionary&&!me.isBuffer(e.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._binding=new rs.Zlib(n);var a=this;this._hadError=!1,this._binding.onerror=function(e,n){a._binding=null,a._hadError=!0;var i=new Error(e);i.errno=n,i.code=rs.codes[n],a.emit("error",i)};var i=rs.Z_DEFAULT_COMPRESSION;"number"==typeof e.level&&(i=e.level);var t=rs.Z_DEFAULT_STRATEGY;"number"==typeof e.strategy&&(t=e.strategy),this._binding.init(e.windowBits||rs.Z_DEFAULT_WINDOWBITS,i,e.memLevel||rs.Z_DEFAULT_MEMLEVEL,t,e.dictionary),this._buffer=new me(this._chunkSize),this._offset=0,this._closed=!1,this._level=i,this._strategy=t,this.once("end",this.close)}Object.keys(cs).forEach((function(e){cs[cs[e]]=e})),un(vs,Fa),vs.prototype.params=function(e,n,a){if(e<rs.Z_MIN_LEVEL||e>rs.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+e);if(n!=rs.Z_FILTERED&&n!=rs.Z_HUFFMAN_ONLY&&n!=rs.Z_RLE&&n!=rs.Z_FIXED&&n!=rs.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+n);if(this._level!==e||this._strategy!==n){var i=this;this.flush(rs.Z_SYNC_FLUSH,(function(){i._binding.params(e,n),i._hadError||(i._level=e,i._strategy=n,a&&a())}))}else $.nextTick(a)},vs.prototype.reset=function(){return this._binding.reset()},vs.prototype._flush=function(e){this._transform(new me(0),"",e)},vs.prototype.flush=function(e,n){var a=this._writableState;if(("function"==typeof e||void 0===e&&!n)&&(n=e,e=rs.Z_FULL_FLUSH),a.ended)n&&$.nextTick(n);else if(a.ending)n&&this.once("end",n);else if(a.needDrain){var i=this;this.once("drain",(function(){i.flush(n)}))}else this._flushFlag=e,this.write(new me(0),"",n)},vs.prototype.close=function(e){if(e&&$.nextTick(e),!this._closed){this._closed=!0,this._binding.close();var n=this;$.nextTick((function(){n.emit("close")}))}},vs.prototype._transform=function(e,n,a){var i,t=this._writableState,o=(t.ending||t.ended)&&(!e||t.length===e.length);if(null===!e&&!me.isBuffer(e))return a(new Error("invalid input"));o?i=rs.Z_FINISH:(i=this._flushFlag,e.length>=t.length&&(this._flushFlag=this._opts.flush||rs.Z_NO_FLUSH)),this._processChunk(e,i,a)},vs.prototype._processChunk=function(e,n,a){var i=e&&e.length,t=this._chunkSize-this._offset,o=0,s=this,r="function"==typeof a;if(!r){var c,p=[],l=0;this.on("error",(function(e){c=e}));do{var u=this._binding.writeSync(n,e,o,i,this._buffer,this._offset,t)}while(!this._hadError&&h(u[0],u[1]));if(this._hadError)throw c;var d=me.concat(p,l);return this.close(),d}var m=this._binding.write(n,e,o,i,this._buffer,this._offset,t);function h(c,u){if(!s._hadError){var d=t-u;if(function(e,n){if(!e)throw new Error("have should not go down")}(d>=0),d>0){var m=s._buffer.slice(s._offset,s._offset+d);s._offset+=d,r?s.push(m):(p.push(m),l+=m.length)}if((0===u||s._offset>=s._chunkSize)&&(t=s._chunkSize,s._offset=0,s._buffer=new me(s._chunkSize)),0===u){if(o+=i-c,i=c,!r)return!0;var f=s._binding.write(n,e,o,i,s._buffer,s._offset,s._chunkSize);return f.callback=h,void(f.buffer=e)}if(!r)return!1;a()}}m.buffer=e,m.callback=h},un(ps,vs),un(ls,vs),un(us,vs),un(ds,vs),un(ms,vs),un(hs,vs),un(fs,vs);var xs=function(e){return new fs(e)},gs="axios",bs="0.20.0",ws="Promise based HTTP client for the browser and node.js",_s="index.js",ys={test:"grunt test && bundlesize",start:"node ./sandbox/server.js",build:"NODE_ENV=production grunt build",preversion:"npm test",version:"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",postversion:"git push && git push --tags",examples:"node ./examples/server.js",coveralls:"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",fix:"eslint --fix lib/**/*.js"},ks={type:"git",url:"https://github.com/axios/axios.git"},Es=["xhr","http","ajax","promise","node"],js="Matt Zabriskie",Rs={url:"https://github.com/axios/axios/issues"},As="https://github.com/axios/axios",zs={bundlesize:"^0.17.0",coveralls:"^3.0.0","es6-promise":"^4.2.4",grunt:"^1.0.2","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^20.1.0","grunt-karma":"^2.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^1.0.18","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1",karma:"^1.3.0","karma-chrome-launcher":"^2.2.0","karma-coverage":"^1.1.1","karma-firefox-launcher":"^1.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-opera-launcher":"^1.0.0","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^1.2.0","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^1.7.0","load-grunt-tasks":"^3.5.2",minimist:"^1.2.0",mocha:"^5.2.0",sinon:"^4.5.0",typescript:"^2.8.1","url-search-params":"^0.10.0",webpack:"^1.13.1","webpack-dev-server":"^1.14.1"},Ss={"./lib/adapters/http.js":"./lib/adapters/xhr.js"},Ts="dist/axios.min.js",Os="dist/axios.min.js",Ls="./index.d.ts",Cs={"follow-redirects":"^1.10.0"},Us=[{path:"./dist/axios.min.js",threshold:"5kB"}],qs={name:gs,version:bs,description:ws,main:_s,scripts:ys,repository:ks,keywords:Es,author:js,license:"MIT",bugs:Rs,homepage:As,devDependencies:zs,browser:Ss,jsdelivr:Ts,unpkg:Os,typings:Ls,dependencies:Cs,bundlesize:Us},Bs=i(Object.freeze({__proto__:null,name:gs,version:bs,description:ws,main:_s,scripts:ys,repository:ks,keywords:Es,author:js,license:"MIT",bugs:Rs,homepage:As,devDependencies:zs,browser:Ss,jsdelivr:Ts,unpkg:Os,typings:Ls,dependencies:Cs,bundlesize:Us,default:qs})),Ms=zt.http,Ps=zt.https,Ns=/https:?/,Ds={"Content-Type":"application/x-www-form-urlencoded"};function Is(e,n){!m.isUndefined(e)&&m.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var Fs,Zs={adapter:("undefined"!=typeof XMLHttpRequest?Fs=function(e){return new Promise((function(n,a){var i=e.data,t=e.headers;m.isFormData(i)&&delete t["Content-Type"],(m.isBlob(i)||m.isFile(i))&&i.type&&delete t["Content-Type"];var o=new XMLHttpRequest;if(e.auth){var s=e.auth.username||"",r=unescape(encodeURIComponent(e.auth.password))||"";t.Authorization="Basic "+btoa(s+":"+r)}var c=X(e.baseURL,e.url);if(o.open(e.method.toUpperCase(),f(c,e.params,e.paramsSerializer),!0),o.timeout=e.timeout,o.onreadystatechange=function(){if(o&&4===o.readyState&&(0!==o.status||o.responseURL&&0===o.responseURL.indexOf("file:"))){var i,t,s,r,c,p="getAllResponseHeaders"in o?(i=o.getAllResponseHeaders(),c={},i?(m.forEach(i.split("\n"),(function(e){if(r=e.indexOf(":"),t=m.trim(e.substr(0,r)).toLowerCase(),s=m.trim(e.substr(r+1)),t){if(c[t]&&J.indexOf(t)>=0)return;c[t]="set-cookie"===t?(c[t]?c[t]:[]).concat([s]):c[t]?c[t]+", "+s:s}})),c):c):null,l={data:e.responseType&&"text"!==e.responseType?o.response:o.responseText,status:o.status,statusText:o.statusText,headers:p,config:e,request:o};K(n,a,l),o=null}},o.onabort=function(){o&&(a(V("Request aborted",e,"ECONNABORTED",o)),o=null)},o.onerror=function(){a(V("Network Error",e,null,o)),o=null},o.ontimeout=function(){var n="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(n=e.timeoutErrorMessage),a(V(n,e,"ECONNABORTED",o)),o=null},m.isStandardBrowserEnv()){var p=(e.withCredentials||Q(c))&&e.xsrfCookieName?G.read(e.xsrfCookieName):void 0;p&&(t[e.xsrfHeaderName]=p)}if("setRequestHeader"in o&&m.forEach(t,(function(e,n){void 0===i&&"content-type"===n.toLowerCase()?delete t[n]:o.setRequestHeader(n,e)})),m.isUndefined(e.withCredentials)||(o.withCredentials=!!e.withCredentials),e.responseType)try{o.responseType=e.responseType}catch(n){if("json"!==e.responseType)throw n}"function"==typeof e.onDownloadProgress&&o.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&o.upload&&o.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){o&&(o.abort(),a(e),o=null)})),i||(i=null),o.send(i)}))}:void 0!==$&&"[object process]"===Object.prototype.toString.call($)&&(Fs=function(e){return new Promise((function(n,a){var i=function(e){n(e)},t=function(e){a(e)},o=e.data,s=e.headers;if(s["User-Agent"]||s["user-agent"]||(s["User-Agent"]="axios/"+Bs.version),o&&!m.isStream(o)){if(me.isBuffer(o));else if(m.isArrayBuffer(o))o=me.from(new Uint8Array(o));else{if(!m.isString(o))return t(V("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",e));o=me.from(o,"utf-8")}s["Content-Length"]=o.length}var r=void 0;e.auth&&(r=(e.auth.username||"")+":"+(e.auth.password||""));var c=X(e.baseURL,e.url),p=ui.parse(c),l=p.protocol||"http:";if(!r&&p.auth){var u=p.auth.split(":");r=(u[0]||"")+":"+(u[1]||"")}r&&delete s.Authorization;var d=Ns.test(l),h=d?e.httpsAgent:e.httpAgent,v={path:f(p.path,e.params,e.paramsSerializer).replace(/^\?/,""),method:e.method.toUpperCase(),headers:s,agent:h,agents:{http:e.httpAgent,https:e.httpsAgent},auth:r};e.socketPath?v.socketPath=e.socketPath:(v.hostname=p.hostname,v.port=p.port);var x,g=e.proxy;if(!g&&!1!==g){var b=l.slice(0,-1)+"_proxy",w=$.env[b]||$.env[b.toUpperCase()];if(w){var _=ui.parse(w),y=$.env.no_proxy||$.env.NO_PROXY,k=!0;if(y&&(k=!y.split(",").map((function(e){return e.trim()})).some((function(e){return!!e&&("*"===e||"."===e[0]&&p.hostname.substr(p.hostname.length-e.length)===e||p.hostname===e)}))),k&&(g={host:_.hostname,port:_.port},_.auth)){var E=_.auth.split(":");g.auth={username:E[0],password:E[1]}}}}if(g&&(v.hostname=g.host,v.host=g.host,v.headers.host=p.hostname+(p.port?":"+p.port:""),v.port=g.port,v.path=l+"//"+p.hostname+(p.port?":"+p.port:"")+v.path,g.auth)){var j=me.from(g.auth.username+":"+g.auth.password,"utf8").toString("base64");v.headers["Proxy-Authorization"]="Basic "+j}var R=d&&(!g||Ns.test(g.protocol));e.transport?x=e.transport:0===e.maxRedirects?x=Oi:(e.maxRedirects&&(v.maxRedirects=e.maxRedirects),x=R?Ps:Ms),e.maxBodyLength>-1&&(v.maxBodyLength=e.maxBodyLength);var A=x.request(v,(function(n){if(!A.aborted){var a=n,o=n.req||A;if(204!==n.statusCode&&"HEAD"!==o.method&&!1!==e.decompress)switch(n.headers["content-encoding"]){case"gzip":case"compress":case"deflate":a=a.pipe(xs()),delete n.headers["content-encoding"]}var s={status:n.statusCode,statusText:n.statusMessage,headers:n.headers,config:e,request:o};if("stream"===e.responseType)s.data=a,K(i,t,s);else{var r=[];a.on("data",(function(n){r.push(n),e.maxContentLength>-1&&me.concat(r).length>e.maxContentLength&&(a.destroy(),t(V("maxContentLength size of "+e.maxContentLength+" exceeded",e,null,o)))})),a.on("error",(function(n){A.aborted||t(W(n,e,null,o))})),a.on("end",(function(){var n=me.concat(r);"arraybuffer"!==e.responseType&&(n=n.toString(e.responseEncoding),e.responseEncoding&&"utf8"!==e.responseEncoding||(n=m.stripBOM(n))),s.data=n,K(i,t,s)}))}}}));A.on("error",(function(n){A.aborted&&"ERR_FR_TOO_MANY_REDIRECTS"!==n.code||t(W(n,e,null,A))})),e.timeout&&A.setTimeout(e.timeout,(function(){A.abort(),t(V("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",A))})),e.cancelToken&&e.cancelToken.promise.then((function(e){A.aborted||(A.abort(),t(e))})),m.isStream(o)?o.on("error",(function(n){t(W(n,e,null,A))})).pipe(A):A.end(o)}))}),Fs),transformRequest:[function(e,n){return Y(n,"Accept"),Y(n,"Content-Type"),m.isFormData(e)||m.isArrayBuffer(e)||m.isBuffer(e)||m.isStream(e)||m.isFile(e)||m.isBlob(e)?e:m.isArrayBufferView(e)?e.buffer:m.isURLSearchParams(e)?(Is(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):m.isObject(e)?(Is(n,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};m.forEach(["delete","get","head"],(function(e){Zs.headers[e]={}})),m.forEach(["post","put","patch"],(function(e){Zs.headers[e]=m.merge(Ds)}));var Hs=Zs;function $s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var Ys=function(e){return $s(e),e.headers=e.headers||{},e.data=g(e.data,e.headers,e.transformRequest),e.headers=m.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),m.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete e.headers[n]})),(e.adapter||Hs.adapter)(e).then((function(n){return $s(e),n.data=g(n.data,n.headers,e.transformResponse),n}),(function(n){return b(n)||($s(e),n&&n.response&&(n.response.data=g(n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)}))},Ws=function(e,n){n=n||{};var a={},i=["url","method","data"],t=["headers","auth","proxy","params"],o=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function r(e,n){return m.isPlainObject(e)&&m.isPlainObject(n)?m.merge(e,n):m.isPlainObject(n)?m.merge({},n):m.isArray(n)?n.slice():n}function c(i){m.isUndefined(n[i])?m.isUndefined(e[i])||(a[i]=r(void 0,e[i])):a[i]=r(e[i],n[i])}m.forEach(i,(function(e){m.isUndefined(n[e])||(a[e]=r(void 0,n[e]))})),m.forEach(t,c),m.forEach(o,(function(i){m.isUndefined(n[i])?m.isUndefined(e[i])||(a[i]=r(void 0,e[i])):a[i]=r(void 0,n[i])})),m.forEach(s,(function(i){i in n?a[i]=r(e[i],n[i]):i in e&&(a[i]=r(void 0,e[i]))}));var p=i.concat(t).concat(o).concat(s),l=Object.keys(e).concat(Object.keys(n)).filter((function(e){return-1===p.indexOf(e)}));return m.forEach(l,c),a};function Vs(e){this.defaults=e,this.interceptors={request:new x,response:new x}}Vs.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=Ws(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var n=[Ys,void 0],a=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){n.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){n.push(e.fulfilled,e.rejected)}));n.length;)a=a.then(n.shift(),n.shift());return a},Vs.prototype.getUri=function(e){return e=Ws(this.defaults,e),f(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},m.forEach(["delete","get","head","options"],(function(e){Vs.prototype[e]=function(n,a){return this.request(Ws(a||{},{method:e,url:n}))}})),m.forEach(["post","put","patch"],(function(e){Vs.prototype[e]=function(n,a,i){return this.request(Ws(i||{},{method:e,url:n,data:a}))}}));var Ks=Vs;function Gs(e){this.message=e}Gs.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},Gs.prototype.__CANCEL__=!0;var Xs=Gs;function Js(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(e){n=e}));var a=this;e((function(e){a.reason||(a.reason=new Xs(e),n(a.reason))}))}Js.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},Js.source=function(){var e;return{token:new Js((function(n){e=n})),cancel:e}};var Qs=Js;function er(e){var n=new Ks(e),a=o(Ks.prototype.request,n);return m.extend(a,Ks.prototype,n),m.extend(a,n),a}var nr=er(Hs);nr.Axios=Ks,nr.create=function(e){return er(Ws(nr.defaults,e))},nr.Cancel=Xs,nr.CancelToken=Qs,nr.isCancel=b,nr.all=function(e){return Promise.all(e)},nr.spread=function(e){return function(n){return e.apply(null,n)}};var ar=nr,ir=nr;ar.default=ir;var tr=ar,or=a((function(n,a){var i=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0}),a.Request=void 0;const t=i(tr);a.Request=class{constructor(e=t.default){this.request=e}get(e,n={}){return this.request.get(e,n)}post(e,n,a={}){return this.request.post(e,n,a)}put(e,n,a={}){return this.request.put(e,n,a)}patch(e,n,a={}){return this.request.patch(e,n,a)}delete(e,n={}){return this.request.delete(e,n)}static isRequestError(e){return!(!e.response||!e.response.status)}}}));n(or),or.Request;var sr=a((function(n,a){var i=e&&e.__createBinding||(Object.create?function(e,n,a,i){void 0===i&&(i=a),Object.defineProperty(e,i,{enumerable:!0,get:function(){return n[a]}})}:function(e,n,a,i){void 0===i&&(i=a),e[i]=n[a]}),t=e&&e.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&i(n,e,a);return t(n,e),n};Object.defineProperty(a,"__esModule",{value:!0});const s=o(or);a.default=class{constructor(e="",n=""){this.token=e,this.url=n,this.request=new s.Request}}}));n(sr);var rr=a((function(e,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default={App:{baseUrl:"http://localhost:3333/api"},Meeting:{domain:"conf.v4h.cloud",externalApi:"https://conf.v4h.cloud/external_api.js"}}}));n(rr);var cr=a((function(n,a){var i=e&&e.__awaiter||function(e,n,a,i){return new(a||(a=Promise))((function(t,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function r(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((i=i.apply(e,n||[])).next())}))},t=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const o=t(rr);a.default=e=>new Promise((n=>i(void 0,void 0,void 0,(function*(){if(window.JitsiMeetExternalAPI)n(window.JitsiMeetExternalAPI);else{const a=document.getElementsByTagName("head")[0],i=document.createElement("script");i.setAttribute("type","text/javascript"),i.setAttribute("src",e?`https://${e}/external_api.js`:o.default.Meeting.externalApi),a.addEventListener("load",(e=>{"SCRIPT"===e.target.nodeName&&n(window.JitsiMeetExternalAPI)}),!0),a.appendChild(i)}}))))}));n(cr);var pr=a((function(n,a){var i=e&&e.__awaiter||function(e,n,a,i){return new(a||(a=Promise))((function(t,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function r(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((i=i.apply(e,n||[])).next())}))},t=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const o=t(cr),s=t(rr);a.default=class{startConference(e){return i(this,void 0,void 0,(function*(){const n={parentNode:e.parentNode,jwt:e.jwt,roomName:e.roomName,width:640,height:480,onClose:e.onClose,onLoad:e.onLoad,user:{displayName:e.userInfo&&e.userInfo.displayName?e.userInfo.displayName:"Convidado"},configOverwrite:{startWithAudioMuted:e.startWithAudioMuted,startWithVideoMuted:e.startWithVideoMuted},interfaceConfigOverwrite:{TOOLBAR_BUTTONS:e.buttons}};console.log(n),this.options=n,o.default().then((a=>{this.JitsiExternalApi=new a(e.domain?e.domain:s.default.Meeting.domain,n),e.userInfo&&e.userInfo.displayName&&this.JitsiExternalApi.executeCommand("displayName",e.userInfo.displayName),e.shareLink&&this.JitsiExternalApi.executeCommand("link",e.shareLink),this.JitsiExternalApi.addEventListener("readyToClose",n.onClose)}))}))}closeConference(){return i(this,void 0,void 0,(function*(){this.options.parentNode.innerHTML=""}))}getNumberOfPart(){return i(this,void 0,void 0,(function*(){return this.JitsiExternalApi.getNumberOfParticipants()}))}}}));n(pr);var lr=a((function(n,a){var i=e&&e.__awaiter||function(e,n,a,i){return new(a||(a=Promise))((function(t,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function r(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((i=i.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(t),r=o(sr),c=o(pr);class p extends r.default{constructor(e,n,a){super(e,n),this.url=this.url+"/sessions",this.sessionCurrent=null,this.domain=a}create(e){return i(this,void 0,void 0,(function*(){return this.request.post(""+this.url,e,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e){return i(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(){return i(this,void 0,void 0,(function*(){return this.request.get(""+this.url,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return i(this,void 0,void 0,(function*(){return this.request.put(`${this.url}/${e}`,n,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return i(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}join(e){return i(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/${e}/join`,null,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}startConference(e,n){return i(this,void 0,void 0,(function*(){const a=yield this.join(e);this.conference=new c.default,this.sessionCurrent=e,yield this.conference.startConference(Object.assign({jwt:a.sessionToken,roomName:a.short,onClose:()=>i(this,void 0,void 0,(function*(){yield this.endConference(e,n.onClose)})),domain:this.domain},n))}))}stopConference(){return i(this,void 0,void 0,(function*(){this.sessionCurrent&&(yield this.conference.closeConference())}))}endConference(e,n){return i(this,void 0,void 0,(function*(){this.conference.closeConference(),n&&n()}))}}a.default=p}));n(lr);var ur=a((function(n,a){var i=e&&e.__awaiter||function(e,n,a,i){return new(a||(a=Promise))((function(t,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function r(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((i=i.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(t),r=o(sr);class c extends r.default{constructor(e,n){super(e,n),this.url=this.url+"/orgs"}create(e){return i(this,void 0,void 0,(function*(){return this.request.post(""+this.url,e,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e){return i(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(){return i(this,void 0,void 0,(function*(){return this.request.get(""+this.url,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return i(this,void 0,void 0,(function*(){return this.request.put(`${this.url}/${e}`,n,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return i(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}a.default=c}));n(ur);var dr=a((function(n,a){var i=e&&e.__awaiter||function(e,n,a,i){return new(a||(a=Promise))((function(t,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function r(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((i=i.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(t),r=o(sr);class c extends r.default{constructor(e,n){super(e,n)}create(e,n){return i(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/orgs/${e}/orgUnits`,n,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e,n){return i(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/orgs/${e}/orgUnits/${n}`,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(e){return i(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/orgs/${e}/orgUnits`,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n,a){return i(this,void 0,void 0,(function*(){return this.request.put(`${this.url}/orgs/${e}/orgUnits/${n}`,a,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e,n){return i(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/orgs/${e}/orgUnits/${n}`,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}a.default=c}));n(dr);var mr=$a.Stream,hr=fr;function fr(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}Zn.inherits(fr,mr),fr.create=function(e,n){var a=new this;for(var i in n=n||{})a[i]=n[i];a.source=e;var t=e.emit;return e.emit=function(){return a._handleEmit(arguments),t.apply(e,arguments)},e.on("error",(function(){})),a.pauseStream&&e.pause(),a},Object.defineProperty(fr.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),fr.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},fr.prototype.resume=function(){this._released||this.release(),this.source.resume()},fr.prototype.pause=function(){this.source.pause()},fr.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},fr.prototype.pipe=function(){var e=mr.prototype.pipe.apply(this,arguments);return this.resume(),e},fr.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},fr.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}};var vr=$a.Stream,xr=gr;function gr(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null,this._insideLoop=!1,this._pendingNext=!1}function br(e,n){for(var a=0,i=e.length-1;i>=0;i--){var t=e[i];"."===t?e.splice(i,1):".."===t?(e.splice(i,1),a++):a&&(e.splice(i,1),a--)}if(n)for(;a--;a)e.unshift("..");return e}Zn.inherits(gr,vr),gr.create=function(e){var n=new this;for(var a in e=e||{})n[a]=e[a];return n},gr.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!me.isBuffer(e)},gr.prototype.append=function(e){if(gr.isStreamLike(e)){if(!(e instanceof hr)){var n=hr.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=n}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},gr.prototype.pipe=function(e,n){return vr.prototype.pipe.call(this,e,n),this.resume(),e},gr.prototype._getNext=function(){if(this._currentStream=null,this._insideLoop)this._pendingNext=!0;else{this._insideLoop=!0;try{do{this._pendingNext=!1,this._realGetNext()}while(this._pendingNext)}finally{this._insideLoop=!1}}},gr.prototype._realGetNext=function(){var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){gr.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),this._pipeNext(e)}.bind(this)):this._pipeNext(e):this.end()},gr.prototype._pipeNext=function(e){if(this._currentStream=e,gr.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var n=e;this.write(n),this._getNext()},gr.prototype._handleErrors=function(e){var n=this;e.on("error",(function(e){n._emitError(e)}))},gr.prototype.write=function(e){this.emit("data",e)},gr.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},gr.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},gr.prototype.end=function(){this._reset(),this.emit("end")},gr.prototype.destroy=function(){this._reset(),this.emit("close")},gr.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},gr.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},gr.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach((function(n){n.dataSize&&(e.dataSize+=n.dataSize)})),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},gr.prototype._emitError=function(e){this._reset(),this.emit("error",e)};var wr=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,_r=function(e){return wr.exec(e).slice(1)};function yr(){for(var e="",n=!1,a=arguments.length-1;a>=-1&&!n;a--){var i=a>=0?arguments[a]:"/";if("string"!=typeof i)throw new TypeError("Arguments to path.resolve must be strings");i&&(e=i+"/"+e,n="/"===i.charAt(0))}return(n?"/":"")+(e=br(Rr(e.split("/"),(function(e){return!!e})),!n).join("/"))||"."}function kr(e){var n=Er(e),a="/"===Ar(e,-1);return(e=br(Rr(e.split("/"),(function(e){return!!e})),!n).join("/"))||n||(e="."),e&&a&&(e+="/"),(n?"/":"")+e}function Er(e){return"/"===e.charAt(0)}var jr={extname:function(e){return _r(e)[3]},basename:function(e,n){var a=_r(e)[2];return n&&a.substr(-1*n.length)===n&&(a=a.substr(0,a.length-n.length)),a},dirname:function(e){var n=_r(e),a=n[0],i=n[1];return a||i?(i&&(i=i.substr(0,i.length-1)),a+i):"."},sep:"/",delimiter:":",relative:function(e,n){function a(e){for(var n=0;n<e.length&&""===e[n];n++);for(var a=e.length-1;a>=0&&""===e[a];a--);return n>a?[]:e.slice(n,a-n+1)}e=yr(e).substr(1),n=yr(n).substr(1);for(var i=a(e.split("/")),t=a(n.split("/")),o=Math.min(i.length,t.length),s=o,r=0;r<o;r++)if(i[r]!==t[r]){s=r;break}var c=[];for(r=s;r<i.length;r++)c.push("..");return(c=c.concat(t.slice(s))).join("/")},join:function(){var e=Array.prototype.slice.call(arguments,0);return kr(Rr(e,(function(e,n){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},isAbsolute:Er,normalize:kr,resolve:yr};function Rr(e,n){if(e.filter)return e.filter(n);for(var a=[],i=0;i<e.length;i++)n(e[i],i,e)&&a.push(e[i]);return a}var Ar="b"==="ab".substr(-1)?function(e,n,a){return e.substr(n,a)}:function(e,n,a){return n<0&&(n=e.length+n),e.substr(n,a)},zr=i(Object.freeze({__proto__:null,default:{"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/3gpp-ims+xml":{source:"iana",compressible:!0},"application/a2l":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:!0},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/alto-updatestreamcontrol+json":{source:"iana",compressible:!0},"application/alto-updatestreamparams+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:!0,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:!0,extensions:["atomdeleted"]},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:!0,extensions:["atomsvc"]},"application/atsc-dwd+xml":{source:"iana",compressible:!0,extensions:["dwd"]},"application/atsc-dynamic-event-message":{source:"iana"},"application/atsc-held+xml":{source:"iana",compressible:!0,extensions:["held"]},"application/atsc-rdt+json":{source:"iana",compressible:!0},"application/atsc-rsat+xml":{source:"iana",compressible:!0,extensions:["rsat"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:!0},"application/bacnet-xdd+zip":{source:"iana",compressible:!1},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana",compressible:!0,extensions:["xcs"]},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/cap+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/cbor":{source:"iana"},"application/cbor-seq":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:!0},"application/ccxml+xml":{source:"iana",compressible:!0,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:!0,extensions:["cdfx"]},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:!0},"application/cellml+xml":{source:"iana",compressible:!0},"application/cfw":{source:"iana"},"application/clue+xml":{source:"iana",compressible:!0},"application/clue_info+xml":{source:"iana",compressible:!0},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:!0},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:!0},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:!0},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:!0},"application/cstadata+xml":{source:"iana",compressible:!0},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",compressible:!0,extensions:["mpd"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:!0,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:!0},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana",compressible:!0},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:!0},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:!0,extensions:["dbk"]},"application/dots+cbor":{source:"iana"},"application/dskpp+xml":{source:"iana",compressible:!0},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:!0,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["ecma","es"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/emergencycalldata.comment+xml":{source:"iana",compressible:!0},"application/emergencycalldata.control+xml":{source:"iana",compressible:!0},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.veds+xml":{source:"iana",compressible:!0},"application/emma+xml":{source:"iana",compressible:!0,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:!0,extensions:["emotionml"]},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:!0},"application/epub+zip":{source:"iana",compressible:!1,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/expect-ct-report+json":{source:"iana",compressible:!0},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:!0,extensions:["fdt"]},"application/fhir+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/fhir+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/flexfec":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1},"application/framework-attributes+xml":{source:"iana",compressible:!0},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:!0},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:!0,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:!0,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:!0},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:!0},"application/ibe-pkg-reply+xml":{source:"iana",compressible:!0},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:!0,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:!0,extensions:["its"]},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:!0},"application/kpml-response+xml":{source:"iana",compressible:!0},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:!0,extensions:["lgr"]},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:!0},"application/lost+xml":{source:"iana",compressible:!0,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:!0},"application/lpf+zip":{source:"iana",compressible:!1},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:!0,extensions:["mads"]},"application/manifest+json":{charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:!0,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:!0,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:!0},"application/mathml-presentation+xml":{source:"iana",compressible:!0},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:!0},"application/mbms-deregister+xml":{source:"iana",compressible:!0},"application/mbms-envelope+xml":{source:"iana",compressible:!0},"application/mbms-msk+xml":{source:"iana",compressible:!0},"application/mbms-msk-response+xml":{source:"iana",compressible:!0},"application/mbms-protection-description+xml":{source:"iana",compressible:!0},"application/mbms-reception-report+xml":{source:"iana",compressible:!0},"application/mbms-register+xml":{source:"iana",compressible:!0},"application/mbms-register-response+xml":{source:"iana",compressible:!0},"application/mbms-schedule+xml":{source:"iana",compressible:!0},"application/mbms-user-service-description+xml":{source:"iana",compressible:!0},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:!0},"application/media_control+xml":{source:"iana",compressible:!0},"application/mediaservercontrol+xml":{source:"iana",compressible:!0,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",compressible:!0,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:!0,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:!0,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mipc":{source:"iana"},"application/mmt-aei+xml":{source:"iana",compressible:!0,extensions:["maei"]},"application/mmt-usd+xml":{source:"iana",compressible:!0,extensions:["musd"]},"application/mods+xml":{source:"iana",compressible:!0,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/mrb-publish+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/msc-ivr+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msc-mixer+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/multipart-core":{source:"iana"},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana",extensions:["nq"]},"application/n-triples":{source:"iana",extensions:["nt"]},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana",charset:"US-ASCII"},"application/news-groupinfo":{source:"iana",charset:"US-ASCII"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:!0},"application/node":{source:"iana",extensions:["cjs"]},"application/nss":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odm+xml":{source:"iana",compressible:!0},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:!0,extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:!0,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/oscore":{source:"iana"},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p2p-overlay+xml":{source:"iana",compressible:!0,extensions:["relo"]},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pem-certificate-chain":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana"},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pidf-diff+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:!0,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana",compressible:!0},"application/provenance+xml":{source:"iana",compressible:!0,extensions:["provx"]},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.hpub+zip":{source:"iana",compressible:!1},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:!0},"application/pskc+xml":{source:"iana",compressible:!0,extensions:["pskcxml"]},"application/pvd+json":{source:"iana",compressible:!0},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:!0,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",compressible:!0,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:!0,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:!0},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:!0},"application/rls-services+xml":{source:"iana",compressible:!0,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:!0,extensions:["rapd"]},"application/route-s-tsid+xml":{source:"iana",compressible:!0,extensions:["sls"]},"application/route-usd+xml":{source:"iana",compressible:!0,extensions:["rusd"]},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:!0,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:!0},"application/samlmetadata+xml":{source:"iana",compressible:!0},"application/sbe":{source:"iana"},"application/sbml+xml":{source:"iana",compressible:!0,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:!0},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:!0},"application/senml+xml":{source:"iana",compressible:!0,extensions:["senmlx"]},"application/senml-etch+cbor":{source:"iana"},"application/senml-etch+json":{source:"iana",compressible:!0},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:!0},"application/sensml+xml":{source:"iana",compressible:!0,extensions:["sensmlx"]},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:!0},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:!0,extensions:["shf"]},"application/sieve":{source:"iana",extensions:["siv","sieve"]},"application/simple-filter+xml":{source:"iana",compressible:!0},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/sipc":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:!0,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:!0,extensions:["srx"]},"application/spirits-event+xml":{source:"iana",compressible:!0},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:!0,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:!0,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:!0,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:!0,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:!0},"application/swid+xml":{source:"iana",compressible:!0,extensions:["swidtag"]},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/taxii+json":{source:"iana",compressible:!0},"application/td+json":{source:"iana",compressible:!0},"application/tei+xml":{source:"iana",compressible:!0,extensions:["tei","teicorpus"]},"application/tetra_isi":{source:"iana"},"application/thraud+xml":{source:"iana",compressible:!0,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:!0},"application/tnauthlist":{source:"iana"},"application/toml":{compressible:!0,extensions:["toml"]},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana"},"application/ttml+xml":{source:"iana",compressible:!0,extensions:["ttml"]},"application/tve-trigger":{source:"iana"},"application/tzif":{source:"iana"},"application/tzif-leap":{source:"iana"},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:!0},"application/urc-ressheet+xml":{source:"iana",compressible:!0,extensions:["rsheet"]},"application/urc-targetdesc+xml":{source:"iana",compressible:!0},"application/urc-uisocketdesc+xml":{source:"iana",compressible:!0},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana",compressible:!0},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:!0,extensions:["1km"]},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-init-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-transmission-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:!1,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:!0,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.afplinedata-pagedef":{source:"iana"},"application/vnd.afpc.foca-charset":{source:"iana"},"application/vnd.afpc.foca-codedfont":{source:"iana"},"application/vnd.afpc.foca-codepage":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.afpc.modca-formdef":{source:"iana"},"application/vnd.afpc.modca-mediummap":{source:"iana"},"application/vnd.afpc.modca-objectcontainer":{source:"iana"},"application/vnd.afpc.modca-overlay":{source:"iana"},"application/vnd.afpc.modca-pagesegment":{source:"iana"},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:!0},"application/vnd.android.ota":{source:"iana"},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.aplextor.warrp+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",compressible:!0,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["keynote"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:!0},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:!0,extensions:["bmml"]},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.error":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:!0},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.bpf":{source:"iana"},"application/vnd.bpf3":{source:"iana"},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:!0},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:!0,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.ciedi":{source:"iana"},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:!0,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana",compressible:!1},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:!0,extensions:["wbs"]},"application/vnd.cryptii.pipe+json":{source:"iana",compressible:!0},"application/vnd.crypto-shade-file":{source:"iana"},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:!0},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:!0},"application/vnd.cybank":{source:"iana"},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:!1},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.dbf":{source:"iana"},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:!0,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:!0},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbisl+xml":{source:"iana",compressible:!0},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:!0},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:!0},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:!0},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:!1},"application/vnd.eszigno3+xml":{source:"iana",compressible:!0,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:!1},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:!1},"application/vnd.etsi.cug+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:!0},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:!0},"application/vnd.etsi.sci+xml":{source:"iana",compressible:!0},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:!0},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:!0},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:!1},"application/vnd.exstream-package":{source:"iana"},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.ficlab.flb+zip":{source:"iana",compressible:!1},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:!0},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.gentics.grd+json":{source:"iana",compressible:!0},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana",compressible:!0},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:!0},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:!1},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:!0},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",compressible:!0,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:!0,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:!0},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:!1},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:!1},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:!0},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:!0},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:!0},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:!0,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.iso11783-10+zip":{source:"iana",compressible:!1},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las":{source:"iana"},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",compressible:!0,extensions:["lasxml"]},"application/vnd.laszip":{source:"iana"},"application/vnd.leap+json":{source:"iana",compressible:!0},"application/vnd.liberty-request+xml":{source:"iana",compressible:!0},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:!0,extensions:["lbe"]},"application/vnd.logipipe.circuit+zip":{source:"iana",compressible:!1},"application/vnd.loom":{source:"iana"},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana"},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:!0},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:!0},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:!0},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:!0},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:!0},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:!0},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:!0},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:!0},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:!0,extensions:["ac"]},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:!0},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oci.image.manifest.v1+json":{source:"iana",compressible:!0},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:!0},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:!0},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:!0},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:!0},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:!0},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:!0},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:!0},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:!0},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:!0,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:!0},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:!0},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:!0},"application/vnd.omads-email+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-file+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-folder+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:!0,extensions:["obgx"]},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:!0,extensions:["osm"]},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:!0},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:!0},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.patientecommsdoc":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:!0},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:!0},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:!0},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana"},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:!0,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:!0,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sar":{source:"iana"},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shade-save-file":{source:"iana"},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:!0},"application/vnd.shopkick+json":{source:"iana",compressible:!0},"application/vnd.shp":{source:"iana"},"application/vnd.shx":{source:"iana"},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.snesdev-page-table":{source:"iana"},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:!0,extensions:["fo"]},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:!0,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",charset:"UTF-8",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:!0},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:!0},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:!0,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.veryant.thin":{source:"iana"},"application/vnd.ves.encrypted":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",charset:"UTF-8",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:!0},"application/vnd.wv.ssp+xml":{source:"iana",compressible:!0},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:!0},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:!0,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:!0,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:!0,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:!0},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:!0,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:!0,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:!0,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:!0,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:!0,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-keepass2":{extensions:["kdbx"]},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-pki-message":{source:"iana"},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"iana",extensions:["der","crt","pem"]},"application/x-x509-ca-ra-cert":{source:"iana"},"application/x-x509-next-ca-cert":{source:"iana"},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:!0,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:!0},"application/xaml+xml":{source:"apache",compressible:!0,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:!0,extensions:["xav"]},"application/xcap-caps+xml":{source:"iana",compressible:!0,extensions:["xca"]},"application/xcap-diff+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:!0,extensions:["xel"]},"application/xcap-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/xcap-ns+xml":{source:"iana",compressible:!0,extensions:["xns"]},"application/xcon-conference-info+xml":{source:"iana",compressible:!0},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:!0},"application/xenc+xml":{source:"iana",compressible:!0,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:!0},"application/xliff+xml":{source:"iana",compressible:!0,extensions:["xlf"]},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:!0},"application/xmpp+xml":{source:"iana",compressible:!0},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:!0,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:!0,extensions:["xslt"]},"application/xspf+xml":{source:"apache",compressible:!0,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:!0,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana",compressible:!0},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana",compressible:!0},"application/yin+xml":{source:"iana",compressible:!0,extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana"},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/flexfec":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/mhas":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana",extensions:["mxmf"]},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tetra_acelp":{source:"iana"},"audio/tetra_acelp_bb":{source:"iana"},"audio/tone":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dts.uhd":{source:"iana"},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",compressible:!0,extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:!1,extensions:["apng"]},"image/avci":{source:"iana"},"image/avcs":{source:"iana"},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/hej2k":{source:"iana",extensions:["hej2"]},"image/hsj2":{source:"iana",extensions:["hsj2"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jph":{source:"iana",extensions:["jph"]},"image/jphc":{source:"iana",extensions:["jhc"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/jxr":{source:"iana",extensions:["jxr"]},"image/jxra":{source:"iana",extensions:["jxra"]},"image/jxrs":{source:"iana",extensions:["jxrs"]},"image/jxs":{source:"iana",extensions:["jxs"]},"image/jxsc":{source:"iana",extensions:["jxsc"]},"image/jxsi":{source:"iana",extensions:["jxsi"]},"image/jxss":{source:"iana",extensions:["jxss"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:!1,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-dds":{extensions:["dds"]},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana",extensions:["3mf"]},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/mtl":{source:"iana",extensions:["mtl"]},"model/obj":{source:"iana",extensions:["obj"]},"model/stl":{source:"iana",extensions:["stl"]},"model/vnd.collada+xml":{source:"iana",compressible:!0,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:!0},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana",extensions:["ogex"]},"model/vnd.parasolid.transmit.binary":{source:"iana",extensions:["x_b"]},"model/vnd.parasolid.transmit.text":{source:"iana",extensions:["x_t"]},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.usdz+zip":{source:"iana",compressible:!1,extensions:["usdz"]},"model/vnd.valve.source.compiled-map":{source:"iana",extensions:["bsp"]},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana",extensions:["x3db"]},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana",extensions:["x3dv"]},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana"},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/flexfec":{source:"iana"},"text/fwdred":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{compressible:!0,extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mdx":{compressible:!0,extensions:["mdx"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana",charset:"UTF-8"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana",charset:"UTF-8"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shex":{extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana",charset:"UTF-8"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana",charset:"UTF-8"},"text/vnd.ficlab.flt":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.senx.warpscript":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sosi":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",charset:"UTF-8",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana",charset:"UTF-8"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/flexfec":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana"},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vnd.youtube.yt":{source:"iana"},"video/vp8":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}}})),Sr=a((function(e,n){var a,i,t,o=jr.extname,s=/^\s*([^;\s]*)(?:;|\s|$)/,r=/^text\//i;function c(e){if(!e||"string"!=typeof e)return!1;var n=s.exec(e),a=n&&zr[n[1].toLowerCase()];return a&&a.charset?a.charset:!(!n||!r.test(n[1]))&&"UTF-8"}n.charset=c,n.charsets={lookup:c},n.contentType=function(e){if(!e||"string"!=typeof e)return!1;var a=-1===e.indexOf("/")?n.lookup(e):e;if(!a)return!1;if(-1===a.indexOf("charset")){var i=n.charset(a);i&&(a+="; charset="+i.toLowerCase())}return a},n.extension=function(e){if(!e||"string"!=typeof e)return!1;var a=s.exec(e),i=a&&n.extensions[a[1].toLowerCase()];return!(!i||!i.length)&&i[0]},n.extensions=Object.create(null),n.lookup=function(e){if(!e||"string"!=typeof e)return!1;var a=o("x."+e).toLowerCase().substr(1);return a&&n.types[a]||!1},n.types=Object.create(null),a=n.extensions,i=n.types,t=["nginx","apache",void 0,"iana"],Object.keys(zr).forEach((function(e){var n=zr[e],o=n.extensions;if(o&&o.length){a[e]=o;for(var s=0;s<o.length;s++){var r=o[s];if(i[r]){var c=t.indexOf(zr[i[r]].source),p=t.indexOf(n.source);if("application/octet-stream"!==i[r]&&(c>p||c===p&&"application/"===i[r].substr(0,12)))continue}i[r]=e}}}))})),Tr=(Sr.charset,Sr.charsets,Sr.contentType,Sr.extension,Sr.extensions,Sr.lookup,Sr.types,function(e){var n="function"==typeof setImmediate?setImmediate:"object"==typeof $&&"function"==typeof $.nextTick?$.nextTick:null;n?n(e):setTimeout(e,0)}),Or=function(e){var n=!1;return Tr((function(){n=!0})),function(a,i){n?e(a,i):Tr((function(){e(a,i)}))}},Lr=function(e){Object.keys(e.jobs).forEach(Cr.bind(e)),e.jobs={}};function Cr(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}var Ur=function(e,n,a,i){var t=a.keyedList?a.keyedList[a.index]:a.index;a.jobs[t]=function(e,n,a,i){return 2==e.length?e(a,Or(i)):e(a,n,Or(i))}(n,t,e[t],(function(e,n){t in a.jobs&&(delete a.jobs[t],e?Lr(a):a.results[t]=n,i(e,a.results))}))},qr=function(e,n){var a=!Array.isArray(e),i={index:0,keyedList:a||n?Object.keys(e):null,jobs:{},results:a?{}:[],size:a?Object.keys(e).length:e.length};return n&&i.keyedList.sort(a?n:function(a,i){return n(e[a],e[i])}),i},Br=function(e){Object.keys(this.jobs).length&&(this.index=this.size,Lr(this),Or(e)(null,this.results))},Mr=function(e,n,a,i){var t=qr(e,a);return Ur(e,n,t,(function a(o,s){o?i(o,s):(t.index++,t.index<(t.keyedList||e).length?Ur(e,n,t,a):i(null,t.results))})),Br.bind(t,i)};function Pr(e,n){return e<n?-1:e>n?1:0}Mr.ascending=Pr,Mr.descending=function(e,n){return-1*Pr(e,n)};var Nr=function(e,n,a){for(var i=qr(e);i.index<(i.keyedList||e).length;)Ur(e,n,i,(function(e,n){e?a(e,n):0!==Object.keys(i.jobs).length||a(null,i.results)})),i.index++;return Br.bind(i,a)},Dr=function(e,n){return Object.keys(n).forEach((function(a){e[a]=e[a]||n[a]})),e},Ir=ui.parse,Fr=Zr;function Zr(e){if(!(this instanceof Zr))return new Zr(e);for(var n in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],xr.call(this),e=e||{})this[n]=e[n]}Zn.inherits(Zr,xr),Zr.LINE_BREAK="\r\n",Zr.DEFAULT_CONTENT_TYPE="application/octet-stream",Zr.prototype.append=function(e,n,a){"string"==typeof(a=a||{})&&(a={filename:a});var i=xr.prototype.append.bind(this);if("number"==typeof n&&(n=""+n),Zn.isArray(n))this._error(new Error("Arrays are not supported."));else{var t=this._multiPartHeader(e,n,a),o=this._multiPartFooter();i(t),i(n),i(o),this._trackLength(t,n,a)}},Zr.prototype._trackLength=function(e,n,a){var i=0;null!=a.knownLength?i+=+a.knownLength:me.isBuffer(n)?i=n.length:"string"==typeof n&&(i=me.byteLength(n)),this._valueLength+=i,this._overheadLength+=me.byteLength(e)+Zr.LINE_BREAK.length,n&&(n.path||n.readable&&n.hasOwnProperty("httpVersion"))&&(a.knownLength||this._valuesToMeasure.push(n))},Zr.prototype._lengthRetriever=function(e,n){e.hasOwnProperty("fd")?null!=e.end&&e.end!=1/0&&null!=e.start?n(null,e.end+1-(e.start?e.start:0)):pt.stat(e.path,(function(a,i){var t;a?n(a):(t=i.size-(e.start?e.start:0),n(null,t))})):e.hasOwnProperty("httpVersion")?n(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",(function(a){e.pause(),n(null,+a.headers["content-length"])})),e.resume()):n("Unknown stream")},Zr.prototype._multiPartHeader=function(e,n,a){if("string"==typeof a.header)return a.header;var i,t=this._getContentDisposition(n,a),o=this._getContentType(n,a),s="",r={"Content-Disposition":["form-data",'name="'+e+'"'].concat(t||[]),"Content-Type":[].concat(o||[])};for(var c in"object"==typeof a.header&&Dr(r,a.header),r)r.hasOwnProperty(c)&&null!=(i=r[c])&&(Array.isArray(i)||(i=[i]),i.length&&(s+=c+": "+i.join("; ")+Zr.LINE_BREAK));return"--"+this.getBoundary()+Zr.LINE_BREAK+s+Zr.LINE_BREAK},Zr.prototype._getContentDisposition=function(e,n){var a,i;return"string"==typeof n.filepath?a=jr.normalize(n.filepath).replace(/\\/g,"/"):n.filename||e.name||e.path?a=jr.basename(n.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(a=jr.basename(e.client._httpMessage.path||"")),a&&(i='filename="'+a+'"'),i},Zr.prototype._getContentType=function(e,n){var a=n.contentType;return!a&&e.name&&(a=Sr.lookup(e.name)),!a&&e.path&&(a=Sr.lookup(e.path)),!a&&e.readable&&e.hasOwnProperty("httpVersion")&&(a=e.headers["content-type"]),a||!n.filepath&&!n.filename||(a=Sr.lookup(n.filepath||n.filename)),a||"object"!=typeof e||(a=Zr.DEFAULT_CONTENT_TYPE),a},Zr.prototype._multiPartFooter=function(){return function(e){var n=Zr.LINE_BREAK;0===this._streams.length&&(n+=this._lastBoundary()),e(n)}.bind(this)},Zr.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+Zr.LINE_BREAK},Zr.prototype.getHeaders=function(e){var n,a={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(n in e)e.hasOwnProperty(n)&&(a[n.toLowerCase()]=e[n]);return a},Zr.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},Zr.prototype.getBuffer=function(){for(var e=new me.alloc(0),n=this.getBoundary(),a=0,i=this._streams.length;a<i;a++)"function"!=typeof this._streams[a]&&(e=me.isBuffer(this._streams[a])?me.concat([e,this._streams[a]]):me.concat([e,me.from(this._streams[a])]),"string"==typeof this._streams[a]&&this._streams[a].substring(2,n.length+2)===n||(e=me.concat([e,me.from(Zr.LINE_BREAK)])));return me.concat([e,me.from(this._lastBoundary())])},Zr.prototype._generateBoundary=function(){for(var e="--------------------------",n=0;n<24;n++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},Zr.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},Zr.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},Zr.prototype.getLength=function(e){var n=this._overheadLength+this._valueLength;this._streams.length&&(n+=this._lastBoundary().length),this._valuesToMeasure.length?Nr(this._valuesToMeasure,this._lengthRetriever,(function(a,i){a?e(a):(i.forEach((function(e){n+=e})),e(null,n))})):$.nextTick(e.bind(this,null,n))},Zr.prototype.submit=function(e,n){var a,i,t={method:"post"};return"string"==typeof e?(e=Ir(e),i=Dr({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},t)):(i=Dr(e,t)).port||(i.port="https:"==i.protocol?443:80),i.headers=this.getHeaders(e.headers),i.protocol,a=Oi.request(i),this.getLength(function(e,i){if(e)this._error(e);else if(a.setHeader("Content-Length",i),this.pipe(a),n){var t,o=function(e,i){return a.removeListener("error",o),a.removeListener("response",t),n.call(this,e,i)};t=o.bind(this,null),a.on("error",o),a.on("response",t)}}.bind(this)),a},Zr.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},Zr.prototype.toString=function(){return"[object FormData]"};var Hr=a((function(n,a){var i=e&&e.__awaiter||function(e,n,a,i){return new(a||(a=Promise))((function(t,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function r(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((i=i.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(Fr),r=o(t),c=o(sr);class p extends c.default{constructor(e,n){super(e,n),this.url=this.url+"/archives"}sendFile(e,n){return i(this,void 0,void 0,(function*(){const a=new s.default;return n.org&&a.append("org",n.org),n.orgUnit&&a.append("orgUnit",n.orgUnit),n.session&&a.append("session",n.session),n.type&&a.append("type",n.type),a.append("filename",e),this.request.post(""+this.url,a,{headers:Object.assign({Authorization:this.token?"Bearer "+this.token:""},a.getHeaders())}).then((e=>e.data)).catch((e=>{throw new r.default(e.response.data,e.response.status)}))}))}find(e){return i(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new r.default(e.response.data,e.response.status)}))}))}}a.default=p}));n(Hr);var $r=a((function(n,a){var i=e&&e.__createBinding||(Object.create?function(e,n,a,i){void 0===i&&(i=a),Object.defineProperty(e,i,{enumerable:!0,get:function(){return n[a]}})}:function(e,n,a,i){void 0===i&&(i=a),e[i]=n[a]}),o=e&&e.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),s=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&i(n,e,a);return o(n,e),n},r=e&&e.__awaiter||function(e,n,a,i){return new(a||(a=Promise))((function(t,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function r(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((i=i.apply(e,n||[])).next())}))},c=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const p=s(or),l=c(t);a.default=class{constructor(e){this.url=e,this.request=new p.Request}login(e){return r(this,void 0,void 0,(function*(){return this.request.post(this.url+"/auth",e).then((e=>e.data)).catch((e=>{throw console.log(e),new l.default(e.response.data,e.response.status)}))}))}refresh(e){return r(this,void 0,void 0,(function*(){return this.request.post(this.url+"/auth/refresh",e).then((e=>e.data)).catch((e=>{throw new l.default(e.response.data,e.response.status)}))}))}}}));n($r);var Yr=a((function(n,a){var i=e&&e.__awaiter||function(e,n,a,i){return new(a||(a=Promise))((function(t,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function r(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((i=i.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(t),r=o(sr);class c extends r.default{constructor(e,n){super(e,n),this.url=this.url+"/users"}create(e){return i(this,void 0,void 0,(function*(){return this.request.post(""+this.url,e,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e){return i(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(){return i(this,void 0,void 0,(function*(){return this.request.get(""+this.url,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return i(this,void 0,void 0,(function*(){return this.request.put(`${this.url}/${e}`,n,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return i(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}a.default=c}));n(Yr);var Wr=a((function(n,a){var i=e&&e.__awaiter||function(e,n,a,i){return new(a||(a=Promise))((function(t,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function r(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((i=i.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(t),r=o(sr);class c extends r.default{constructor(e,n){super(e,n),this.url=this.url+"/prescriptions"}create(e){return i(this,void 0,void 0,(function*(){return this.request.post(""+this.url,e,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e){return i(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}list(e){return i(this,void 0,void 0,(function*(){return this.request.get(""+this.url,{params:e,headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return i(this,void 0,void 0,(function*(){return this.request.patch(`${this.url}/${e}`,n,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return i(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}sign(e,n){return i(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/${e}`,n,{headers:{Authorization:this.token?"Bearer "+this.token:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}a.default=c}));n(Wr);var Vr=a((function(n,a){var i=e&&e.__awaiter||function(e,n,a,i){return new(a||(a=Promise))((function(t,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function r(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((i=i.apply(e,n||[])).next())}))},t=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const o=t(lr),s=t(ur),r=t(dr),c=t(Hr),p=t($r),l=t(Yr),u=t(Wr),d=t(rr);a.default=class{setup(e){return i(this,void 0,void 0,(function*(){e&&e.token&&(this.token=e.token),e&&e.login&&e.password&&(yield this.login(e.login,e.password)),this.baseUrl=e&&e.baseUrl?e.baseUrl:d.default.App.baseUrl,this.org=new s.default(this.token,this.baseUrl),this.orgUnit=new r.default(this.token,this.baseUrl),this.session=new o.default(this.token,this.baseUrl,e.domain),this.archive=new c.default(this.token,this.baseUrl),this.user=new l.default(this.token,this.baseUrl),this.prescription=new u.default(this.token,this.baseUrl)}))}login(e,n){return i(this,void 0,void 0,(function*(){const a=new p.default(this.baseUrl),i=yield a.login({login:e,password:n});this.token=i.accessToken}))}}}));return n(Vr),n(a((function(n,a){var i=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const t=i(Vr);a.default=t.default})))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2lzZUFQSS5taW4uanMiLCJzb3VyY2VzIjpbIi4uL2Rpc3QvY29tbW9uL2Vycm9ycy9BcHBFcnJvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1wb2x5ZmlsbHMvcG9seWZpbGxzL2dsb2JhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy9wcm9jZXNzLWVzNi5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy9idWZmZXItZXM2LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1wb2x5ZmlsbHMvcG9seWZpbGxzL2h0dHAtbGliL2NhcGFiaWxpdHkuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvaW5oZXJpdHMuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvdXRpbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy9ldmVudHMuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvcmVhZGFibGUtc3RyZWFtL2J1ZmZlci1saXN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1wb2x5ZmlsbHMvcG9seWZpbGxzL3N0cmluZy1kZWNvZGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1wb2x5ZmlsbHMvcG9seWZpbGxzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy9yZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvcmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy9yZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1wb2x5ZmlsbHMvcG9seWZpbGxzL3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy9zdHJlYW0uanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvaHR0cC1saWIvcmVzcG9uc2UuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvaHR0cC1saWIvcmVxdWVzdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy9odHRwLWxpYi90by1hcnJheWJ1ZmZlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy9wdW55Y29kZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy9xcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy91cmwuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvaHR0cC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy9hc3NlcnQuanMiLCIuLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2RlYnVnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2ZvbGxvdy1yZWRpcmVjdHMvZGVidWcuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvdHR5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1wb2x5ZmlsbHMvcG9seWZpbGxzL2VtcHR5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9ub2RlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9mb2xsb3ctcmVkaXJlY3RzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1wb2x5ZmlsbHMvcG9seWZpbGxzL3psaWItbGliL21lc3NhZ2VzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1wb2x5ZmlsbHMvcG9seWZpbGxzL3psaWItbGliL3pzdHJlYW0uanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvemxpYi1saWIvdXRpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvemxpYi1saWIvdHJlZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvemxpYi1saWIvYWRsZXIzMi5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy96bGliLWxpYi9jcmMzMi5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy96bGliLWxpYi9kZWZsYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1wb2x5ZmlsbHMvcG9seWZpbGxzL3psaWItbGliL2luZmZhc3QuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvemxpYi1saWIvaW5mdHJlZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvemxpYi1saWIvaW5mbGF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtcG9seWZpbGxzL3BvbHlmaWxscy96bGliLWxpYi9iaW5kaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1wb2x5ZmlsbHMvcG9seWZpbGxzL3psaWIuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2h0dHAuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIi4uL2Rpc3QvdXRpbC9odHRwL3JlcXVlc3QuanMiLCIuLi9kaXN0L2NvbW1vbi9yZXNvdXJjZS9pbmRleC5qcyIsIi4uL2Rpc3QvY29uZmlnL2RlZmF1bHQuanMiLCIuLi9kaXN0L3V0aWwvaml0c2kvSW1wb3J0Sml0c2lGaWxlLmpzIiwiLi4vZGlzdC91dGlsL2ppdHNpL0ppdHNpTWVldC5qcyIsIi4uL2Rpc3QvcmVzb3VyY2VzL3Nlc3Npb24vYWN0aW9ucy9TZXNzaW9uQWN0aW9ucy5qcyIsIi4uL2Rpc3QvcmVzb3VyY2VzL29yZy9hY3Rpb25zL09yZ0FjdGlvbnMuanMiLCIuLi9kaXN0L3Jlc291cmNlcy9vcmdVbml0L2FjdGlvbnMvT3JnVW5pdEFjdGlvbnMuanMiLCIuLi9ub2RlX21vZHVsZXMvZGVsYXllZC1zdHJlYW0vbGliL2RlbGF5ZWRfc3RyZWFtLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvbWJpbmVkLXN0cmVhbS9saWIvY29tYmluZWRfc3RyZWFtLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1wb2x5ZmlsbHMvcG9seWZpbGxzL3BhdGguanMiLCIuLi9ub2RlX21vZHVsZXMvbWltZS10eXBlcy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvZGVmZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvbGliL2FzeW5jLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L2xpYi9hYm9ydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvaXRlcmF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvc3RhdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvbGliL3Rlcm1pbmF0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvc2VyaWFsT3JkZXJlZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9wYXJhbGxlbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL3BvcHVsYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2Zvcm0tZGF0YS9saWIvZm9ybV9kYXRhLmpzIiwiLi4vZGlzdC9yZXNvdXJjZXMvYXJjaGl2ZS9hY3Rpb25zL0FyY2hpdmVBY3Rpb25zLmpzIiwiLi4vZGlzdC9yZXNvdXJjZXMvQXV0aC9yZXNvdXJjZXMvQXV0aFJlc291cmNlLmpzIiwiLi4vZGlzdC9yZXNvdXJjZXMvdXNlci9hY3Rpb25zL1VzZXJBY3Rpb25zLmpzIiwiLi4vZGlzdC9yZXNvdXJjZXMvcHJlc2NyaXB0aW9uL2FjdGlvbnMvUHJlc2NyaXB0aW9uQWN0aW9uLmpzIiwiLi4vZGlzdC9BcHAuanMiLCIuLi9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgQXBwRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgY29kZSA9IDUwMCwgaW50ZXJuYWwgPSBmYWxzZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbCA9IGludGVybmFsO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB0aGlzLmludGVybmFsID0gaW50ZXJuYWw7XG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEFwcEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDpcbiAgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KTsiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbi8vIGJhc2VkIG9mZiBodHRwczovL2dpdGh1Yi5jb20vZGVmdW5jdHpvbWJpZS9ub2RlLXByb2Nlc3MvYmxvYi9tYXN0ZXIvYnJvd3Nlci5qc1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbnZhciBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuaWYgKHR5cGVvZiBnbG9iYWwuc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xufVxuaWYgKHR5cGVvZiBnbG9iYWwuY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xufVxuXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5mdW5jdGlvbiBuZXh0VGljayhmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufVxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnZhciB0aXRsZSA9ICdicm93c2VyJztcbnZhciBwbGF0Zm9ybSA9ICdicm93c2VyJztcbnZhciBicm93c2VyID0gdHJ1ZTtcbnZhciBlbnYgPSB7fTtcbnZhciBhcmd2ID0gW107XG52YXIgdmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xudmFyIHZlcnNpb25zID0ge307XG52YXIgcmVsZWFzZSA9IHt9O1xudmFyIGNvbmZpZyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIG9uID0gbm9vcDtcbnZhciBhZGRMaXN0ZW5lciA9IG5vb3A7XG52YXIgb25jZSA9IG5vb3A7XG52YXIgb2ZmID0gbm9vcDtcbnZhciByZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG52YXIgcmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnZhciBlbWl0ID0gbm9vcDtcblxuZnVuY3Rpb24gYmluZGluZyhuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufVxuXG5mdW5jdGlvbiBjd2QgKCkgeyByZXR1cm4gJy8nIH1cbmZ1bmN0aW9uIGNoZGlyIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufWZ1bmN0aW9uIHVtYXNrKCkgeyByZXR1cm4gMDsgfVxuXG4vLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9rdW1hdmlzL2Jyb3dzZXItcHJvY2Vzcy1ocnRpbWUvYmxvYi9tYXN0ZXIvaW5kZXguanNcbnZhciBwZXJmb3JtYW5jZSA9IGdsb2JhbC5wZXJmb3JtYW5jZSB8fCB7fTtcbnZhciBwZXJmb3JtYW5jZU5vdyA9XG4gIHBlcmZvcm1hbmNlLm5vdyAgICAgICAgfHxcbiAgcGVyZm9ybWFuY2UubW96Tm93ICAgICB8fFxuICBwZXJmb3JtYW5jZS5tc05vdyAgICAgIHx8XG4gIHBlcmZvcm1hbmNlLm9Ob3cgICAgICAgfHxcbiAgcGVyZm9ybWFuY2Uud2Via2l0Tm93ICB8fFxuICBmdW5jdGlvbigpeyByZXR1cm4gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSB9O1xuXG4vLyBnZW5lcmF0ZSB0aW1lc3RhbXAgb3IgZGVsdGFcbi8vIHNlZSBodHRwOi8vbm9kZWpzLm9yZy9hcGkvcHJvY2Vzcy5odG1sI3Byb2Nlc3NfcHJvY2Vzc19ocnRpbWVcbmZ1bmN0aW9uIGhydGltZShwcmV2aW91c1RpbWVzdGFtcCl7XG4gIHZhciBjbG9ja3RpbWUgPSBwZXJmb3JtYW5jZU5vdy5jYWxsKHBlcmZvcm1hbmNlKSoxZS0zO1xuICB2YXIgc2Vjb25kcyA9IE1hdGguZmxvb3IoY2xvY2t0aW1lKTtcbiAgdmFyIG5hbm9zZWNvbmRzID0gTWF0aC5mbG9vcigoY2xvY2t0aW1lJTEpKjFlOSk7XG4gIGlmIChwcmV2aW91c1RpbWVzdGFtcCkge1xuICAgIHNlY29uZHMgPSBzZWNvbmRzIC0gcHJldmlvdXNUaW1lc3RhbXBbMF07XG4gICAgbmFub3NlY29uZHMgPSBuYW5vc2Vjb25kcyAtIHByZXZpb3VzVGltZXN0YW1wWzFdO1xuICAgIGlmIChuYW5vc2Vjb25kczwwKSB7XG4gICAgICBzZWNvbmRzLS07XG4gICAgICBuYW5vc2Vjb25kcyArPSAxZTk7XG4gICAgfVxuICB9XG4gIHJldHVybiBbc2Vjb25kcyxuYW5vc2Vjb25kc11cbn1cblxudmFyIHN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XG5mdW5jdGlvbiB1cHRpbWUoKSB7XG4gIHZhciBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCk7XG4gIHZhciBkaWYgPSBjdXJyZW50VGltZSAtIHN0YXJ0VGltZTtcbiAgcmV0dXJuIGRpZiAvIDEwMDA7XG59XG5cbnZhciBicm93c2VyJDEgPSB7XG4gIG5leHRUaWNrOiBuZXh0VGljayxcbiAgdGl0bGU6IHRpdGxlLFxuICBicm93c2VyOiBicm93c2VyLFxuICBlbnY6IGVudixcbiAgYXJndjogYXJndixcbiAgdmVyc2lvbjogdmVyc2lvbixcbiAgdmVyc2lvbnM6IHZlcnNpb25zLFxuICBvbjogb24sXG4gIGFkZExpc3RlbmVyOiBhZGRMaXN0ZW5lcixcbiAgb25jZTogb25jZSxcbiAgb2ZmOiBvZmYsXG4gIHJlbW92ZUxpc3RlbmVyOiByZW1vdmVMaXN0ZW5lcixcbiAgcmVtb3ZlQWxsTGlzdGVuZXJzOiByZW1vdmVBbGxMaXN0ZW5lcnMsXG4gIGVtaXQ6IGVtaXQsXG4gIGJpbmRpbmc6IGJpbmRpbmcsXG4gIGN3ZDogY3dkLFxuICBjaGRpcjogY2hkaXIsXG4gIHVtYXNrOiB1bWFzayxcbiAgaHJ0aW1lOiBocnRpbWUsXG4gIHBsYXRmb3JtOiBwbGF0Zm9ybSxcbiAgcmVsZWFzZTogcmVsZWFzZSxcbiAgY29uZmlnOiBjb25maWcsXG4gIHVwdGltZTogdXB0aW1lXG59O1xuXG5leHBvcnQgZGVmYXVsdCBicm93c2VyJDE7XG5leHBvcnQgeyBhZGRMaXN0ZW5lciwgYXJndiwgYmluZGluZywgYnJvd3NlciwgY2hkaXIsIGNvbmZpZywgY3dkLCBlbWl0LCBlbnYsIGhydGltZSwgbmV4dFRpY2ssIG9mZiwgb24sIG9uY2UsIHBsYXRmb3JtLCByZWxlYXNlLCByZW1vdmVBbGxMaXN0ZW5lcnMsIHJlbW92ZUxpc3RlbmVyLCB0aXRsZSwgdW1hc2ssIHVwdGltZSwgdmVyc2lvbiwgdmVyc2lvbnMgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsInZhciBsb29rdXAgPSBbXTtcbnZhciByZXZMb29rdXAgPSBbXTtcbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXk7XG52YXIgaW5pdGVkID0gZmFsc2U7XG5mdW5jdGlvbiBpbml0ICgpIHtcbiAgaW5pdGVkID0gdHJ1ZTtcbiAgdmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgbG9va3VwW2ldID0gY29kZVtpXTtcbiAgICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGk7XG4gIH1cblxuICByZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjI7XG4gIHJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2Mztcbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICBpZiAoIWluaXRlZCkge1xuICAgIGluaXQoKTtcbiAgfVxuICB2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFycjtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGg7XG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIHRoZSBudW1iZXIgb2YgZXF1YWwgc2lnbnMgKHBsYWNlIGhvbGRlcnMpXG4gIC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcbiAgLy8gcmVwcmVzZW50IG9uZSBieXRlXG4gIC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lLCB0aGVuIHRoZSB0aHJlZSBjaGFyYWN0ZXJzIGJlZm9yZSBpdCByZXByZXNlbnQgMiBieXRlc1xuICAvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG4gIHBsYWNlSG9sZGVycyA9IGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDA7XG5cbiAgLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG4gIGFyciA9IG5ldyBBcnIobGVuICogMyAvIDQgLSBwbGFjZUhvbGRlcnMpO1xuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgbCA9IHBsYWNlSG9sZGVycyA+IDAgPyBsZW4gLSA0IDogbGVuO1xuXG4gIHZhciBMID0gMDtcblxuICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGw7IGkgKz0gNCwgaiArPSAzKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldO1xuICAgIGFycltMKytdID0gKHRtcCA+PiAxNikgJiAweEZGO1xuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkY7XG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGO1xuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpO1xuICAgIGFycltMKytdID0gdG1wICYgMHhGRjtcbiAgfSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMik7XG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRjtcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkY7XG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gKyBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gKyBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcDtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9ICh1aW50OFtpXSA8PCAxNikgKyAodWludDhbaSArIDFdIDw8IDgpICsgKHVpbnQ4W2kgKyAyXSk7XG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpO1xuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgaWYgKCFpbml0ZWQpIHtcbiAgICBpbml0KCk7XG4gIH1cbiAgdmFyIHRtcDtcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aDtcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzOyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIHZhciBwYXJ0cyA9IFtdO1xuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MzsgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSk7XG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV07XG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMl07XG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl07XG4gICAgb3V0cHV0ICs9ICc9PSc7XG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArICh1aW50OFtsZW4gLSAxXSk7XG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMTBdO1xuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdO1xuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdO1xuICAgIG91dHB1dCArPSAnPSc7XG4gIH1cblxuICBwYXJ0cy5wdXNoKG91dHB1dCk7XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIHJlYWQgKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG07XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSAtNztcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMDtcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxO1xuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXTtcblxuICBpICs9IGQ7XG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSk7XG4gIHMgPj49ICgtbkJpdHMpO1xuICBuQml0cyArPSBlTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpO1xuICBlID4+PSAoLW5CaXRzKTtcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5mdW5jdGlvbiB3cml0ZSAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApO1xuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpO1xuICB2YXIgZCA9IGlzTEUgPyAxIDogLTE7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwO1xuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpO1xuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyODtcbn1cblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxudmFyIElOU1BFQ1RfTUFYX0JZVEVTID0gNTA7XG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHJ1ZTtcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xudmFyIF9rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpO1xuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aCk7XG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyOyAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZTtcbiAgcmV0dXJuIGFyclxufTtcblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59O1xuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZTtcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKTtcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufTtcblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKTtcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMCk7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDA7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn07XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59O1xuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnO1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDA7XG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKTtcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKTtcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbCk7XG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwO1xuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTU7XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGg7IC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSk7XG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KTtcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5O1xuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoaW50ZXJuYWxJc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwO1xuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKTtcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pO1xuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwO1xuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cbkJ1ZmZlci5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuZnVuY3Rpb24gaW50ZXJuYWxJc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGEpIHx8ICFpbnRlcm5hbElzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoO1xuICB2YXIgeSA9IGIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldO1xuICAgICAgeSA9IGJbaV07XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn07XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59O1xuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpO1xuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpO1xuICB2YXIgcG9zID0gMDtcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXTtcbiAgICBpZiAoIWludGVybmFsSXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpO1xuICAgIHBvcyArPSBidWYubGVuZ3RoO1xuICB9XG4gIHJldHVybiBidWZmZXJcbn07XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKGludGVybmFsSXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nO1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGg7XG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlO1xuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWU7XG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2U7XG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGg7XG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDA7XG4gIHN0YXJ0ID4+Pj0gMDtcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4JztcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWU7XG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dO1xuICBiW25dID0gYlttXTtcbiAgYlttXSA9IGk7XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoO1xuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpO1xuICB9XG4gIHJldHVybiB0aGlzXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aDtcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKTtcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMik7XG4gIH1cbiAgcmV0dXJuIHRoaXNcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoO1xuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpO1xuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KTtcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSk7XG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpO1xuICB9XG4gIHJldHVybiB0aGlzXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwO1xuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghaW50ZXJuYWxJc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJyc7XG4gIHZhciBtYXggPSBJTlNQRUNUX01BWF9CWVRFUztcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICc7XG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghaW50ZXJuYWxJc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMDtcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwO1xuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGg7XG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwO1xuICBlbmQgPj4+PSAwO1xuICB0aGlzU3RhcnQgPj4+PSAwO1xuICB0aGlzRW5kID4+Pj0gMDtcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydDtcbiAgdmFyIHkgPSBlbmQgLSBzdGFydDtcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpO1xuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKTtcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldO1xuICAgICAgeSA9IHRhcmdldENvcHlbaV07XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn07XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldDtcbiAgICBieXRlT2Zmc2V0ID0gMDtcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmO1xuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMDtcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQ7ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSk7XG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldDtcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxO1xuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDA7XG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZyk7XG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoaW50ZXJuYWxJc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkY7IC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDE7XG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoO1xuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aDtcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDI7XG4gICAgICBhcnJMZW5ndGggLz0gMjtcbiAgICAgIHZhbExlbmd0aCAvPSAyO1xuICAgICAgYnl0ZU9mZnNldCAvPSAyO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaTtcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTE7XG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGk7XG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleDtcbiAgICAgICAgZm91bmRJbmRleCA9IC0xO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aDtcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufTtcblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwO1xuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmc7XG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aCk7XG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nO1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoO1xuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDI7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpO1xuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZDtcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4JztcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBvZmZzZXQgPSAwO1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0O1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIG9mZnNldCA9IDA7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDA7XG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDA7XG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoO1xuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXQ7XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZztcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4JztcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZTtcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufTtcblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpO1xuICB2YXIgcmVzID0gW107XG5cbiAgdmFyIGkgPSBzdGFydDtcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldO1xuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsO1xuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMTtcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnQ7XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdO1xuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRik7XG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdO1xuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl07XG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRik7XG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXTtcbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdO1xuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdO1xuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRik7XG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEO1xuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDE7XG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMDtcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRjtcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpO1xuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZTtcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMDtcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aDtcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJyc7XG4gIHZhciBpID0gMDtcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJztcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKTtcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJyc7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZCk7XG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aDtcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwO1xuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuO1xuXG4gIHZhciBvdXQgPSAnJztcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKTtcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKTtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aDtcbiAgc3RhcnQgPSB+fnN0YXJ0O1xuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kO1xuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW47XG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwO1xuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW47XG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW47XG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDA7XG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuO1xuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydDtcblxuICB2YXIgbmV3QnVmO1xuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpO1xuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlO1xuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0O1xuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufTtcblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKTtcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdO1xuICB2YXIgbXVsID0gMTtcbiAgdmFyIGkgPSAwO1xuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsO1xuICB9XG5cbiAgcmV0dXJuIHZhbFxufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDA7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF07XG4gIHZhciBtdWwgPSAxO1xuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsO1xuICB9XG5cbiAgcmV0dXJuIHZhbFxufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aCk7XG4gIHJldHVybiB0aGlzW29mZnNldF1cbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpO1xuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpO1xuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpO1xuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpO1xuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDA7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpO1xuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF07XG4gIHZhciBtdWwgPSAxO1xuICB2YXIgaSA9IDA7XG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWw7XG4gIH1cbiAgbXVsICo9IDB4ODA7XG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCk7XG5cbiAgcmV0dXJuIHZhbFxufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKTtcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGg7XG4gIHZhciBtdWwgPSAxO1xuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldO1xuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsO1xuICB9XG4gIG11bCAqPSAweDgwO1xuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpO1xuXG4gIHJldHVybiB2YWxcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKTtcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKTtcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpO1xuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCk7XG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KTtcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpO1xuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCk7XG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTtcbiAgcmV0dXJuIHJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTtcbiAgcmV0dXJuIHJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKTtcbiAgcmV0dXJuIHJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpO1xuICByZXR1cm4gcmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn07XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDA7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxO1xuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKTtcbiAgfVxuXG4gIHZhciBtdWwgPSAxO1xuICB2YXIgaSA9IDA7XG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRjtcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkY7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufTtcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMTtcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMCk7XG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxO1xuICB2YXIgbXVsID0gMTtcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRjtcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKTtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKTtcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZik7XG4gIHJldHVybiBvZmZzZXQgKyAxXG59O1xuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDE7XG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4O1xuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApO1xuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKTtcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKTtcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufTtcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWU7XG4gIG9mZnNldCA9IG9mZnNldCB8IDA7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMCk7XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOCk7XG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKTtcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufTtcblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMTtcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmY7XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWU7XG4gIG9mZnNldCA9IG9mZnNldCB8IDA7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApO1xuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNCk7XG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpO1xuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpO1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpO1xuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMCk7XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpO1xuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KTtcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KTtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZik7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpO1xuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSk7XG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdCk7XG4gIH1cblxuICB2YXIgaSA9IDA7XG4gIHZhciBtdWwgPSAxO1xuICB2YXIgc3ViID0gMDtcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGO1xuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxO1xuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKTtcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KTtcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDE7XG4gIHZhciBtdWwgPSAxO1xuICB2YXIgc3ViID0gMDtcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRjtcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDE7XG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkY7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufTtcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MCk7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMTtcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZik7XG4gIHJldHVybiBvZmZzZXQgKyAxXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWU7XG4gIG9mZnNldCA9IG9mZnNldCB8IDA7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMCk7XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpO1xuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpO1xuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWU7XG4gIG9mZnNldCA9IG9mZnNldCB8IDA7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMCk7XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOCk7XG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKTtcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufTtcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMCk7XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpO1xuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpO1xuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KTtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNCk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApO1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDE7XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpO1xuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KTtcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KTtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZik7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpO1xuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59O1xuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0KTtcbiAgfVxuICB3cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpO1xuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufTtcblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCk7XG4gIH1cbiAgd3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KTtcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufTtcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn07XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwO1xuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoO1xuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoO1xuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDA7XG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydDtcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGg7XG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0O1xuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0O1xuICB2YXIgaTtcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF07XG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGxlblxufTtcblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0O1xuICAgICAgc3RhcnQgPSAwO1xuICAgICAgZW5kID0gdGhpcy5sZW5ndGg7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmQ7XG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMCk7XG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NTtcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMDtcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMDtcblxuICBpZiAoIXZhbCkgdmFsID0gMDtcblxuICB2YXIgaTtcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gaW50ZXJuYWxJc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpO1xuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59O1xuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZztcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKTtcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nO1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5O1xuICB2YXIgY29kZVBvaW50O1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsO1xuICB2YXIgYnl0ZXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCk7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50O1xuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpO1xuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50O1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKTtcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbDtcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpO1xuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpO1xuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsbztcbiAgdmFyIGJ5dGVBcnJheSA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIGhpID0gYyA+PiA4O1xuICAgIGxvID0gYyAlIDI1NjtcbiAgICBieXRlQXJyYXkucHVzaChsbyk7XG4gICAgYnl0ZUFycmF5LnB1c2goaGkpO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gdG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldO1xuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG5cblxuLy8gdGhlIGZvbGxvd2luZyBpcyBmcm9tIGlzLWJ1ZmZlciwgYWxzbyBieSBGZXJvc3MgQWJvdWtoYWRpamVoIGFuZCB3aXRoIHNhbWUgbGlzZW5jZVxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxuZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoISFvYmouX2lzQnVmZmVyIHx8IGlzRmFzdEJ1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopKVxufVxuXG5mdW5jdGlvbiBpc0Zhc3RCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0Zhc3RCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuXG5leHBvcnQgeyBCdWZmZXIsIElOU1BFQ1RfTUFYX0JZVEVTLCBTbG93QnVmZmVyLCBpc0J1ZmZlciwgX2tNYXhMZW5ndGggYXMga01heExlbmd0aCB9O1xuIiwiZXhwb3J0IHZhciBoYXNGZXRjaCA9IGlzRnVuY3Rpb24oZ2xvYmFsLmZldGNoKSAmJiBpc0Z1bmN0aW9uKGdsb2JhbC5SZWFkYWJsZVN0cmVhbSlcblxudmFyIF9ibG9iQ29uc3RydWN0b3I7XG5leHBvcnQgZnVuY3Rpb24gYmxvYkNvbnN0cnVjdG9yKCkge1xuICBpZiAodHlwZW9mIF9ibG9iQ29uc3RydWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIF9ibG9iQ29uc3RydWN0b3I7XG4gIH1cbiAgdHJ5IHtcbiAgICBuZXcgZ2xvYmFsLkJsb2IoW25ldyBBcnJheUJ1ZmZlcigxKV0pXG4gICAgX2Jsb2JDb25zdHJ1Y3RvciA9IHRydWVcbiAgfSBjYXRjaCAoZSkge1xuICAgIF9ibG9iQ29uc3RydWN0b3IgPSBmYWxzZVxuICB9XG4gIHJldHVybiBfYmxvYkNvbnN0cnVjdG9yXG59XG52YXIgeGhyO1xuXG5mdW5jdGlvbiBjaGVja1R5cGVTdXBwb3J0KHR5cGUpIHtcbiAgaWYgKCF4aHIpIHtcbiAgICB4aHIgPSBuZXcgZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0KClcbiAgICAvLyBJZiBsb2NhdGlvbi5ob3N0IGlzIGVtcHR5LCBlLmcuIGlmIHRoaXMgcGFnZS93b3JrZXIgd2FzIGxvYWRlZFxuICAgIC8vIGZyb20gYSBCbG9iLCB0aGVuIHVzZSBleGFtcGxlLmNvbSB0byBhdm9pZCBhbiBlcnJvclxuICAgIHhoci5vcGVuKCdHRVQnLCBnbG9iYWwubG9jYXRpb24uaG9zdCA/ICcvJyA6ICdodHRwczovL2V4YW1wbGUuY29tJylcbiAgfVxuICB0cnkge1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSB0eXBlXG4gICAgcmV0dXJuIHhoci5yZXNwb25zZVR5cGUgPT09IHR5cGVcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbn1cblxuLy8gRm9yIHNvbWUgc3RyYW5nZSByZWFzb24sIFNhZmFyaSA3LjAgcmVwb3J0cyB0eXBlb2YgZ2xvYmFsLkFycmF5QnVmZmVyID09PSAnb2JqZWN0Jy5cbi8vIFNhZmFyaSA3LjEgYXBwZWFycyB0byBoYXZlIGZpeGVkIHRoaXMgYnVnLlxudmFyIGhhdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnXG52YXIgaGF2ZVNsaWNlID0gaGF2ZUFycmF5QnVmZmVyICYmIGlzRnVuY3Rpb24oZ2xvYmFsLkFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSlcblxuZXhwb3J0IHZhciBhcnJheWJ1ZmZlciA9IGhhdmVBcnJheUJ1ZmZlciAmJiBjaGVja1R5cGVTdXBwb3J0KCdhcnJheWJ1ZmZlcicpXG4gIC8vIFRoZXNlIG5leHQgdHdvIHRlc3RzIHVuYXZvaWRhYmx5IHNob3cgd2FybmluZ3MgaW4gQ2hyb21lLiBTaW5jZSBmZXRjaCB3aWxsIGFsd2F5c1xuICAvLyBiZSB1c2VkIGlmIGl0J3MgYXZhaWxhYmxlLCBqdXN0IHJldHVybiBmYWxzZSBmb3IgdGhlc2UgdG8gYXZvaWQgdGhlIHdhcm5pbmdzLlxuZXhwb3J0IHZhciBtc3N0cmVhbSA9ICFoYXNGZXRjaCAmJiBoYXZlU2xpY2UgJiYgY2hlY2tUeXBlU3VwcG9ydCgnbXMtc3RyZWFtJylcbmV4cG9ydCB2YXIgbW96Y2h1bmtlZGFycmF5YnVmZmVyID0gIWhhc0ZldGNoICYmIGhhdmVBcnJheUJ1ZmZlciAmJlxuICBjaGVja1R5cGVTdXBwb3J0KCdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcicpXG5leHBvcnQgdmFyIG92ZXJyaWRlTWltZVR5cGUgPSBpc0Z1bmN0aW9uKHhoci5vdmVycmlkZU1pbWVUeXBlKVxuZXhwb3J0IHZhciB2YkFycmF5ID0gaXNGdW5jdGlvbihnbG9iYWwuVkJBcnJheSlcblxuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nXG59XG5cbnhociA9IG51bGwgLy8gSGVscCBnY1xuIiwiXG52YXIgaW5oZXJpdHM7XG5pZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpe1xuICBpbmhlcml0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICBpbmhlcml0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBpbmhlcml0cztcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuaW1wb3J0IHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7XG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXQoZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnQgZnVuY3Rpb24gZGVwcmVjYXRlKGZuLCBtc2cpIHtcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0Vudmlyb247XG5leHBvcnQgZnVuY3Rpb24gZGVidWdsb2coc2V0KSB7XG4gIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKVxuICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG4gICAgICB2YXIgcGlkID0gMDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBmb3JtYXQuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBfZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQnVmZmVyKG1heWJlQnVmKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIobWF5YmVCdWYpO1xufVxuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnQgZnVuY3Rpb24gbG9nKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBmb3JtYXQuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG59XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmltcG9ydCBpbmhlcml0cyBmcm9tICcuL2luaGVyaXRzJztcbmV4cG9ydCB7aW5oZXJpdHN9XG5cbmV4cG9ydCBmdW5jdGlvbiBfZXh0ZW5kKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaGVyaXRzOiBpbmhlcml0cyxcbiAgX2V4dGVuZDogX2V4dGVuZCxcbiAgbG9nOiBsb2csXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNQcmltaXRpdmU6IGlzUHJpbWl0aXZlLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc0Vycm9yOiBpc0Vycm9yLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1JlZ0V4cDogaXNSZWdFeHAsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNTeW1ib2w6IGlzU3ltYm9sLFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNOdWxsT3JVbmRlZmluZWQ6IGlzTnVsbE9yVW5kZWZpbmVkLFxuICBpc051bGw6IGlzTnVsbCxcbiAgaXNCb29sZWFuOiBpc0Jvb2xlYW4sXG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGluc3BlY3Q6IGluc3BlY3QsXG4gIGRlcHJlY2F0ZTogZGVwcmVjYXRlLFxuICBmb3JtYXQ6IGZvcm1hdCxcbiAgZGVidWdsb2c6IGRlYnVnbG9nXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkb21haW47XG5cbi8vIFRoaXMgY29uc3RydWN0b3IgaXMgdXNlZCB0byBzdG9yZSBldmVudCBoYW5kbGVycy4gSW5zdGFudGlhdGluZyB0aGlzIGlzXG4vLyBmYXN0ZXIgdGhhbiBleHBsaWNpdGx5IGNhbGxpbmcgYE9iamVjdC5jcmVhdGUobnVsbClgIHRvIGdldCBhIFwiY2xlYW5cIiBlbXB0eVxuLy8gb2JqZWN0ICh0ZXN0ZWQgd2l0aCB2OCB2NC45KS5cbmZ1bmN0aW9uIEV2ZW50SGFuZGxlcnMoKSB7fVxuRXZlbnRIYW5kbGVycy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXI7XG5leHBvcnQge0V2ZW50RW1pdHRlcn07XG5cbi8vIG5vZGVqcyBvZGRpdHlcbi8vIHJlcXVpcmUoJ2V2ZW50cycpID09PSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXJcblxuRXZlbnRFbWl0dGVyLnVzaW5nRG9tYWlucyA9IGZhbHNlO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmRvbWFpbiA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kb21haW4gPSBudWxsO1xuICBpZiAoRXZlbnRFbWl0dGVyLnVzaW5nRG9tYWlucykge1xuICAgIC8vIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSBkb21haW4sIHRoZW4gYXR0YWNoIHRvIGl0LlxuICAgIGlmIChkb21haW4uYWN0aXZlICYmICEodGhpcyBpbnN0YW5jZW9mIGRvbWFpbi5Eb21haW4pKSB7XG4gICAgICB0aGlzLmRvbWFpbiA9IGRvbWFpbi5hY3RpdmU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJuXCIgYXJndW1lbnQgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG4vLyBUaGVzZSBzdGFuZGFsb25lIGVtaXQqIGZ1bmN0aW9ucyBhcmUgdXNlZCB0byBvcHRpbWl6ZSBjYWxsaW5nIG9mIGV2ZW50XG4vLyBoYW5kbGVycyBmb3IgZmFzdCBjYXNlcyBiZWNhdXNlIGVtaXQoKSBpdHNlbGYgb2Z0ZW4gaGFzIGEgdmFyaWFibGUgbnVtYmVyIG9mXG4vLyBhcmd1bWVudHMgYW5kIGNhbiBiZSBkZW9wdGltaXplZCBiZWNhdXNlIG9mIHRoYXQuIFRoZXNlIGZ1bmN0aW9ucyBhbHdheXMgaGF2ZVxuLy8gdGhlIHNhbWUgbnVtYmVyIG9mIGFyZ3VtZW50cyBhbmQgdGh1cyBkbyBub3QgZ2V0IGRlb3B0aW1pemVkLCBzbyB0aGUgY29kZVxuLy8gaW5zaWRlIHRoZW0gY2FuIGV4ZWN1dGUgZmFzdGVyLlxuZnVuY3Rpb24gZW1pdE5vbmUoaGFuZGxlciwgaXNGbiwgc2VsZikge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmNhbGwoc2VsZik7XG4gIGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmKTtcbiAgfVxufVxuZnVuY3Rpb24gZW1pdE9uZShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmcxKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYsIGFyZzEpO1xuICB9XG59XG5mdW5jdGlvbiBlbWl0VHdvKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEsIGFyZzIpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEsIGFyZzIpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSwgYXJnMik7XG4gIH1cbn1cbmZ1bmN0aW9uIGVtaXRUaHJlZShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRNYW55KGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZ3MpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGV2ZW50cywgZG9tYWluO1xuICB2YXIgbmVlZERvbWFpbkV4aXQgPSBmYWxzZTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT0gbnVsbCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBkb21haW4gPSB0aGlzLmRvbWFpbjtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgaWYgKGRvbWFpbikge1xuICAgICAgaWYgKCFlcilcbiAgICAgICAgZXIgPSBuZXcgRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQnKTtcbiAgICAgIGVyLmRvbWFpbkVtaXR0ZXIgPSB0aGlzO1xuICAgICAgZXIuZG9tYWluID0gZG9tYWluO1xuICAgICAgZXIuZG9tYWluVGhyb3duID0gZmFsc2U7XG4gICAgICBkb21haW4uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgfSBlbHNlIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4gKCcgKyBlciArICcpJyk7XG4gICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmICghaGFuZGxlcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGlzRm4gPSB0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJztcbiAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgc3dpdGNoIChsZW4pIHtcbiAgICAvLyBmYXN0IGNhc2VzXG4gICAgY2FzZSAxOlxuICAgICAgZW1pdE5vbmUoaGFuZGxlciwgaXNGbiwgdGhpcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICBlbWl0T25lKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICBlbWl0VHdvKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIGVtaXRUaHJlZShoYW5kbGVyLCBpc0ZuLCB0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgYXJndW1lbnRzWzNdKTtcbiAgICAgIGJyZWFrO1xuICAgIC8vIHNsb3dlclxuICAgIGRlZmF1bHQ6XG4gICAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGVtaXRNYW55KGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgaWYgKG5lZWREb21haW5FeGl0KVxuICAgIGRvbWFpbi5leGl0KCk7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoIWV2ZW50cykge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKCFleGlzdGluZykge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICAgIGlmIChwcmVwZW5kKSB7XG4gICAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBpZiAoIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgbSA9ICRnZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICAgIGlmIChtICYmIG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0pIHtcbiAgICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgdHlwZSArICcgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgICAgZW1pdFdhcm5pbmcodyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIGVtaXRXYXJuaW5nKGUpIHtcbiAgdHlwZW9mIGNvbnNvbGUud2FybiA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnNvbGUud2FybihlKSA6IGNvbnNvbGUubG9nKGUpO1xufVxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgZmlyZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0YXJnZXQucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHJldHVybiBnO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmICghZXZlbnRzKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmICghbGlzdClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCAobGlzdC5saXN0ZW5lciAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGxpc3RbMF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cztcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKCFldmVudHMpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoIWV2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGtleTsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBkbyB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgfSB3aGlsZSAobGlzdGVuZXJzWzBdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICB2YXIgZXZsaXN0ZW5lcjtcbiAgdmFyIHJldDtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoIWV2ZW50cylcbiAgICByZXQgPSBbXTtcbiAgZWxzZSB7XG4gICAgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgICBpZiAoIWV2bGlzdGVuZXIpXG4gICAgICByZXQgPSBbXTtcbiAgICBlbHNlIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIHJldCA9IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdO1xuICAgIGVsc2VcbiAgICAgIHJldCA9IHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdC5vd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKS5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpXG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBpKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiaW1wb3J0IHtCdWZmZXJ9IGZyb20gJ2J1ZmZlcic7XG5cbmV4cG9ydCBkZWZhdWx0IEJ1ZmZlckxpc3Q7XG5cbmZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gIHRoaXMuaGVhZCA9IG51bGw7XG4gIHRoaXMudGFpbCA9IG51bGw7XG4gIHRoaXMubGVuZ3RoID0gMDtcbn1cblxuQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICh2KSB7XG4gIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogbnVsbCB9O1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gIHRoaXMudGFpbCA9IGVudHJ5O1xuICArK3RoaXMubGVuZ3RoO1xufTtcblxuQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uICh2KSB7XG4gIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gIHRoaXMuaGVhZCA9IGVudHJ5O1xuICArK3RoaXMubGVuZ3RoO1xufTtcblxuQnVmZmVyTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAtLXRoaXMubGVuZ3RoO1xuICByZXR1cm4gcmV0O1xufTtcblxuQnVmZmVyTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gIHRoaXMubGVuZ3RoID0gMDtcbn07XG5cbkJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiAocykge1xuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gIHZhciByZXQgPSAnJyArIHAuZGF0YTtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICByZXQgKz0gcyArIHAuZGF0YTtcbiAgfXJldHVybiByZXQ7XG59O1xuXG5CdWZmZXJMaXN0LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAobikge1xuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApO1xuICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgdmFyIGkgPSAwO1xuICB3aGlsZSAocCkge1xuICAgIHAuZGF0YS5jb3B5KHJldCwgaSk7XG4gICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgIHAgPSBwLm5leHQ7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtCdWZmZXJ9IGZyb20gJ2J1ZmZlcic7XG52YXIgaXNCdWZmZXJFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nXG4gIHx8IGZ1bmN0aW9uKGVuY29kaW5nKSB7XG4gICAgICAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICBjYXNlICdoZXgnOiBjYXNlICd1dGY4JzogY2FzZSAndXRmLTgnOiBjYXNlICdhc2NpaSc6IGNhc2UgJ2JpbmFyeSc6IGNhc2UgJ2Jhc2U2NCc6IGNhc2UgJ3VjczInOiBjYXNlICd1Y3MtMic6IGNhc2UgJ3V0ZjE2bGUnOiBjYXNlICd1dGYtMTZsZSc6IGNhc2UgJ3Jhdyc6IHJldHVybiB0cnVlO1xuICAgICAgICAgZGVmYXVsdDogcmV0dXJuIGZhbHNlO1xuICAgICAgIH1cbiAgICAgfVxuXG5cbmZ1bmN0aW9uIGFzc2VydEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIGlmIChlbmNvZGluZyAmJiAhaXNCdWZmZXJFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIH1cbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLiBDRVNVLTggaXMgaGFuZGxlZCBhcyBwYXJ0IG9mIHRoZSBVVEYtOCBlbmNvZGluZy5cbi8vXG4vLyBAVE9ETyBIYW5kbGluZyBhbGwgZW5jb2RpbmdzIGluc2lkZSBhIHNpbmdsZSBvYmplY3QgbWFrZXMgaXQgdmVyeSBkaWZmaWN1bHRcbi8vIHRvIHJlYXNvbiBhYm91dCB0aGlzIGNvZGUsIHNvIGl0IHNob3VsZCBiZSBzcGxpdCB1cCBpbiB0aGUgZnV0dXJlLlxuLy8gQFRPRE8gVGhlcmUgc2hvdWxkIGJlIGEgdXRmOC1zdHJpY3QgZW5jb2RpbmcgdGhhdCByZWplY3RzIGludmFsaWQgVVRGLTggY29kZVxuLy8gcG9pbnRzIGFzIHVzZWQgYnkgQ0VTVS04LlxuZXhwb3J0IGZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IChlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXS8sICcnKTtcbiAgYXNzZXJ0RW5jb2RpbmcoZW5jb2RpbmcpO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIC8vIENFU1UtOCByZXByZXNlbnRzIGVhY2ggb2YgU3Vycm9nYXRlIFBhaXIgYnkgMy1ieXRlc1xuICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgLy8gVVRGLTE2IHJlcHJlc2VudHMgZWFjaCBvZiBTdXJyb2dhdGUgUGFpciBieSAyLWJ5dGVzXG4gICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAyO1xuICAgICAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IHV0ZjE2RGV0ZWN0SW5jb21wbGV0ZUNoYXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgLy8gQmFzZS02NCBzdG9yZXMgMyBieXRlcyBpbiA0IGNoYXJzLCBhbmQgcGFkcyB0aGUgcmVtYWluZGVyLlxuICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMztcbiAgICAgIHRoaXMuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSBiYXNlNjREZXRlY3RJbmNvbXBsZXRlQ2hhcjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gcGFzc1Rocm91Z2hXcml0ZTtcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEVub3VnaCBzcGFjZSB0byBzdG9yZSBhbGwgYnl0ZXMgb2YgYSBzaW5nbGUgY2hhcmFjdGVyLiBVVEYtOCBuZWVkcyA0XG4gIC8vIGJ5dGVzLCBidXQgQ0VTVS04IG1heSByZXF1aXJlIHVwIHRvIDYgKDMgYnl0ZXMgcGVyIHN1cnJvZ2F0ZSkuXG4gIHRoaXMuY2hhckJ1ZmZlciA9IG5ldyBCdWZmZXIoNik7XG4gIC8vIE51bWJlciBvZiBieXRlcyByZWNlaXZlZCBmb3IgdGhlIGN1cnJlbnQgaW5jb21wbGV0ZSBtdWx0aS1ieXRlIGNoYXJhY3Rlci5cbiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSAwO1xuICAvLyBOdW1iZXIgb2YgYnl0ZXMgZXhwZWN0ZWQgZm9yIHRoZSBjdXJyZW50IGluY29tcGxldGUgbXVsdGktYnl0ZSBjaGFyYWN0ZXIuXG4gIHRoaXMuY2hhckxlbmd0aCA9IDA7XG59O1xuXG5cbi8vIHdyaXRlIGRlY29kZXMgdGhlIGdpdmVuIGJ1ZmZlciBhbmQgcmV0dXJucyBpdCBhcyBKUyBzdHJpbmcgdGhhdCBpc1xuLy8gZ3VhcmFudGVlZCB0byBub3QgY29udGFpbiBhbnkgcGFydGlhbCBtdWx0aS1ieXRlIGNoYXJhY3RlcnMuIEFueSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIgZm91bmQgYXQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyIGlzIGJ1ZmZlcmVkIHVwLCBhbmQgd2lsbCBiZVxuLy8gcmV0dXJuZWQgd2hlbiBjYWxsaW5nIHdyaXRlIGFnYWluIHdpdGggdGhlIHJlbWFpbmluZyBieXRlcy5cbi8vXG4vLyBOb3RlOiBDb252ZXJ0aW5nIGEgQnVmZmVyIGNvbnRhaW5pbmcgYW4gb3JwaGFuIHN1cnJvZ2F0ZSB0byBhIFN0cmluZ1xuLy8gY3VycmVudGx5IHdvcmtzLCBidXQgY29udmVydGluZyBhIFN0cmluZyB0byBhIEJ1ZmZlciAodmlhIGBuZXcgQnVmZmVyYCwgb3Jcbi8vIEJ1ZmZlciN3cml0ZSkgd2lsbCByZXBsYWNlIGluY29tcGxldGUgc3Vycm9nYXRlcyB3aXRoIHRoZSB1bmljb2RlXG4vLyByZXBsYWNlbWVudCBjaGFyYWN0ZXIuIFNlZSBodHRwczovL2NvZGVyZXZpZXcuY2hyb21pdW0ub3JnLzEyMTE3MzAwOS8gLlxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgdmFyIGNoYXJTdHIgPSAnJztcbiAgLy8gaWYgb3VyIGxhc3Qgd3JpdGUgZW5kZWQgd2l0aCBhbiBpbmNvbXBsZXRlIG11bHRpYnl0ZSBjaGFyYWN0ZXJcbiAgd2hpbGUgKHRoaXMuY2hhckxlbmd0aCkge1xuICAgIC8vIGRldGVybWluZSBob3cgbWFueSByZW1haW5pbmcgYnl0ZXMgdGhpcyBidWZmZXIgaGFzIHRvIG9mZmVyIGZvciB0aGlzIGNoYXJcbiAgICB2YXIgYXZhaWxhYmxlID0gKGJ1ZmZlci5sZW5ndGggPj0gdGhpcy5jaGFyTGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQpID9cbiAgICAgICAgdGhpcy5jaGFyTGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQgOlxuICAgICAgICBidWZmZXIubGVuZ3RoO1xuXG4gICAgLy8gYWRkIHRoZSBuZXcgYnl0ZXMgdG8gdGhlIGNoYXIgYnVmZmVyXG4gICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCB0aGlzLmNoYXJSZWNlaXZlZCwgMCwgYXZhaWxhYmxlKTtcbiAgICB0aGlzLmNoYXJSZWNlaXZlZCArPSBhdmFpbGFibGU7XG5cbiAgICBpZiAodGhpcy5jaGFyUmVjZWl2ZWQgPCB0aGlzLmNoYXJMZW5ndGgpIHtcbiAgICAgIC8vIHN0aWxsIG5vdCBlbm91Z2ggY2hhcnMgaW4gdGhpcyBidWZmZXI/IHdhaXQgZm9yIG1vcmUgLi4uXG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGJ5dGVzIGJlbG9uZ2luZyB0byB0aGUgY3VycmVudCBjaGFyYWN0ZXIgZnJvbSB0aGUgYnVmZmVyXG4gICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKGF2YWlsYWJsZSwgYnVmZmVyLmxlbmd0aCk7XG5cbiAgICAvLyBnZXQgdGhlIGNoYXJhY3RlciB0aGF0IHdhcyBzcGxpdFxuICAgIGNoYXJTdHIgPSB0aGlzLmNoYXJCdWZmZXIuc2xpY2UoMCwgdGhpcy5jaGFyTGVuZ3RoKS50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcblxuICAgIC8vIENFU1UtODogbGVhZCBzdXJyb2dhdGUgKEQ4MDAtREJGRikgaXMgYWxzbyB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXJcbiAgICB2YXIgY2hhckNvZGUgPSBjaGFyU3RyLmNoYXJDb2RlQXQoY2hhclN0ci5sZW5ndGggLSAxKTtcbiAgICBpZiAoY2hhckNvZGUgPj0gMHhEODAwICYmIGNoYXJDb2RlIDw9IDB4REJGRikge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoICs9IHRoaXMuc3Vycm9nYXRlU2l6ZTtcbiAgICAgIGNoYXJTdHIgPSAnJztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0aGlzLmNoYXJSZWNlaXZlZCA9IHRoaXMuY2hhckxlbmd0aCA9IDA7XG5cbiAgICAvLyBpZiB0aGVyZSBhcmUgbm8gbW9yZSBieXRlcyBpbiB0aGlzIGJ1ZmZlciwganVzdCBlbWl0IG91ciBjaGFyXG4gICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBjaGFyU3RyO1xuICAgIH1cbiAgICBicmVhaztcbiAgfVxuXG4gIC8vIGRldGVybWluZSBhbmQgc2V0IGNoYXJMZW5ndGggLyBjaGFyUmVjZWl2ZWRcbiAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpO1xuXG4gIHZhciBlbmQgPSBidWZmZXIubGVuZ3RoO1xuICBpZiAodGhpcy5jaGFyTGVuZ3RoKSB7XG4gICAgLy8gYnVmZmVyIHRoZSBpbmNvbXBsZXRlIGNoYXJhY3RlciBieXRlcyB3ZSBnb3RcbiAgICBidWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIDAsIGJ1ZmZlci5sZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCwgZW5kKTtcbiAgICBlbmQgLT0gdGhpcy5jaGFyUmVjZWl2ZWQ7XG4gIH1cblxuICBjaGFyU3RyICs9IGJ1ZmZlci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCBlbmQpO1xuXG4gIHZhciBlbmQgPSBjaGFyU3RyLmxlbmd0aCAtIDE7XG4gIHZhciBjaGFyQ29kZSA9IGNoYXJTdHIuY2hhckNvZGVBdChlbmQpO1xuICAvLyBDRVNVLTg6IGxlYWQgc3Vycm9nYXRlIChEODAwLURCRkYpIGlzIGFsc28gdGhlIGluY29tcGxldGUgY2hhcmFjdGVyXG4gIGlmIChjaGFyQ29kZSA+PSAweEQ4MDAgJiYgY2hhckNvZGUgPD0gMHhEQkZGKSB7XG4gICAgdmFyIHNpemUgPSB0aGlzLnN1cnJvZ2F0ZVNpemU7XG4gICAgdGhpcy5jaGFyTGVuZ3RoICs9IHNpemU7XG4gICAgdGhpcy5jaGFyUmVjZWl2ZWQgKz0gc2l6ZTtcbiAgICB0aGlzLmNoYXJCdWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIHNpemUsIDAsIHNpemUpO1xuICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgMCwgMCwgc2l6ZSk7XG4gICAgcmV0dXJuIGNoYXJTdHIuc3Vic3RyaW5nKDAsIGVuZCk7XG4gIH1cblxuICAvLyBvciBqdXN0IGVtaXQgdGhlIGNoYXJTdHJcbiAgcmV0dXJuIGNoYXJTdHI7XG59O1xuXG4vLyBkZXRlY3RJbmNvbXBsZXRlQ2hhciBkZXRlcm1pbmVzIGlmIHRoZXJlIGlzIGFuIGluY29tcGxldGUgVVRGLTggY2hhcmFjdGVyIGF0XG4vLyB0aGUgZW5kIG9mIHRoZSBnaXZlbiBidWZmZXIuIElmIHNvLCBpdCBzZXRzIHRoaXMuY2hhckxlbmd0aCB0byB0aGUgYnl0ZVxuLy8gbGVuZ3RoIHRoYXQgY2hhcmFjdGVyLCBhbmQgc2V0cyB0aGlzLmNoYXJSZWNlaXZlZCB0byB0aGUgbnVtYmVyIG9mIGJ5dGVzXG4vLyB0aGF0IGFyZSBhdmFpbGFibGUgZm9yIHRoaXMgY2hhcmFjdGVyLlxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgLy8gZGV0ZXJtaW5lIGhvdyBtYW55IGJ5dGVzIHdlIGhhdmUgdG8gY2hlY2sgYXQgdGhlIGVuZCBvZiB0aGlzIGJ1ZmZlclxuICB2YXIgaSA9IChidWZmZXIubGVuZ3RoID49IDMpID8gMyA6IGJ1ZmZlci5sZW5ndGg7XG5cbiAgLy8gRmlndXJlIG91dCBpZiBvbmUgb2YgdGhlIGxhc3QgaSBieXRlcyBvZiBvdXIgYnVmZmVyIGFubm91bmNlcyBhblxuICAvLyBpbmNvbXBsZXRlIGNoYXIuXG4gIGZvciAoOyBpID4gMDsgaS0tKSB7XG4gICAgdmFyIGMgPSBidWZmZXJbYnVmZmVyLmxlbmd0aCAtIGldO1xuXG4gICAgLy8gU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVVRGLTgjRGVzY3JpcHRpb25cblxuICAgIC8vIDExMFhYWFhYXG4gICAgaWYgKGkgPT0gMSAmJiBjID4+IDUgPT0gMHgwNikge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIDExMTBYWFhYXG4gICAgaWYgKGkgPD0gMiAmJiBjID4+IDQgPT0gMHgwRSkge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gMztcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIDExMTEwWFhYXG4gICAgaWYgKGkgPD0gMyAmJiBjID4+IDMgPT0gMHgxRSkge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB0aGlzLmNoYXJSZWNlaXZlZCA9IGk7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBpZiAoYnVmZmVyICYmIGJ1ZmZlci5sZW5ndGgpXG4gICAgcmVzID0gdGhpcy53cml0ZShidWZmZXIpO1xuXG4gIGlmICh0aGlzLmNoYXJSZWNlaXZlZCkge1xuICAgIHZhciBjciA9IHRoaXMuY2hhclJlY2VpdmVkO1xuICAgIHZhciBidWYgPSB0aGlzLmNoYXJCdWZmZXI7XG4gICAgdmFyIGVuYyA9IHRoaXMuZW5jb2Rpbmc7XG4gICAgcmVzICs9IGJ1Zi5zbGljZSgwLCBjcikudG9TdHJpbmcoZW5jKTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBwYXNzVGhyb3VnaFdyaXRlKGJ1ZmZlcikge1xuICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiB1dGYxNkRldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcikge1xuICB0aGlzLmNoYXJSZWNlaXZlZCA9IGJ1ZmZlci5sZW5ndGggJSAyO1xuICB0aGlzLmNoYXJMZW5ndGggPSB0aGlzLmNoYXJSZWNlaXZlZCA/IDIgOiAwO1xufVxuXG5mdW5jdGlvbiBiYXNlNjREZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpIHtcbiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSBidWZmZXIubGVuZ3RoICUgMztcbiAgdGhpcy5jaGFyTGVuZ3RoID0gdGhpcy5jaGFyUmVjZWl2ZWQgPyAzIDogMDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7aW5oZXJpdHMsIGRlYnVnbG9nfSBmcm9tICd1dGlsJztcbmltcG9ydCBCdWZmZXJMaXN0IGZyb20gJy4vYnVmZmVyLWxpc3QnO1xuaW1wb3J0IHtTdHJpbmdEZWNvZGVyfSBmcm9tICdzdHJpbmdfZGVjb2Rlcic7XG5pbXBvcnQge0R1cGxleH0gZnJvbSAnLi9kdXBsZXgnO1xuaW1wb3J0IHtuZXh0VGlja30gZnJvbSAncHJvY2Vzcyc7XG5cbnZhciBkZWJ1ZyA9IGRlYnVnbG9nKCdzdHJlYW0nKTtcbmluaGVyaXRzKFJlYWRhYmxlLCBFdmVudEVtaXR0ZXIpO1xuXG5mdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7XG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXG4gIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLlxuICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAgIC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkc1xuICAgIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGVcbiAgICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gICAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pXG4gICAgICBlbWl0dGVyLm9uKGV2ZW50LCBmbik7XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSlcbiAgICAgIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0udW5zaGlmdChmbik7XG4gICAgZWxzZVxuICAgICAgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07XG4gIH1cbn1cbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQgKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod20gfHwgaHdtID09PSAwID8gaHdtIDogZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IH4gfnRoaXMuaGlnaFdhdGVyTWFyaztcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55XG4gIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXlcbiAgLy8gdGhhdCB3ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uXG4gIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGVMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyB3aGVuIHBpcGluZywgd2Ugb25seSBjYXJlIGFib3V0ICdyZWFkYWJsZScgZXZlbnRzIHRoYXQgaGFwcGVuXG4gIC8vIGFmdGVyIHJlYWQoKWluZyBhbGwgdGhlIGJ5dGVzIGFuZCBub3QgZ2V0dGluZyBhbnkgcHVzaGJhY2suXG4gIHRoaXMucmFuT3V0ID0gZmFsc2U7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgUmVhZGFibGU7XG5leHBvcnQgZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xuXG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xufVxuXG4vLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgZmFsc2UpO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgJycsIHRydWUpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250KSB7XG4gIHZhciBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICBpZiAoZXIpIHtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIH0gZWxzZSBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoc3RhdGUuZW5kZWQgJiYgIWFkZFRvRnJvbnQpIHtcbiAgICAgIHZhciBlID0gbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpO1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRFbWl0dGVkICYmIGFkZFRvRnJvbnQpIHtcbiAgICAgIHZhciBfZSA9IG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKTtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIF9lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNraXBBZGQ7XG4gICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhYWRkVG9Gcm9udCAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgc2tpcEFkZCA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIGNodW5rLmxlbmd0aCA9PT0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhZGRUb0Zyb250KSBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG5cbiAgICAgIC8vIERvbid0IGFkZCB0byB0aGUgYnVmZmVyIGlmIHdlJ3ZlIGRlY29kZWQgdG8gYW4gZW1wdHkgc3RyaW5nIGNodW5rIGFuZFxuICAgICAgLy8gd2UncmUgbm90IGluIG9iamVjdCBtb2RlXG4gICAgICBpZiAoIXNraXBBZGQpIHtcbiAgICAgICAgLy8gaWYgd2Ugd2FudCB0aGUgZGF0YSBub3csIGp1c3QgZW1pdCBpdC5cbiAgICAgICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgICAgICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICAgICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgICAgICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgICAgICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIG5lZWRNb3JlRGF0YShzdGF0ZSk7XG59XG5cbi8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG4vLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZVxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXG4vLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0XG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxuLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cbmZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkge1xuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApO1xufVxuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAgIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXIgPSBudWxsO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmVuZGVkKSByZXR1cm47XG4gIGlmIChzdGF0ZS5kZWNvZGVyKSB7XG4gICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG4gICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgfVxuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblxuICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC5cbiAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG59XG5cbi8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgaWYgKHN0YXRlLnN5bmMpIG5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgZGVidWcoJ2VtaXQgcmVhZGFibGUnKTtcbiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gIGZsb3coc3RyZWFtKTtcbn1cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBuZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcblxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpO1xuXG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiBjbGVhbnVwO1xuICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgbmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcblxuICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG4gICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBkZWJ1Zygnb25lbmQnKTtcbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cbiAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlclxuICAvLyBvbiB0aGUgc291cmNlLiAgVGhpcyB3b3VsZCBiZSBtb3JlIGVsZWdhbnQgd2l0aCBhIC5vbmNlKClcbiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXNcbiAgLy8gdG9vIHNsb3cuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKGxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgc3JjLmxpc3RlbmVycygnZGF0YScpLmxlbmd0aCkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGVuOyBfaSsrKSB7XG4gICAgICBkZXN0c1tfaV0uZW1pdCgndW5waXBlJywgdGhpcyk7XG4gICAgfXJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGkgPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGkgPT09IC0xKSByZXR1cm4gdGhpcztcblxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaSwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIFN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7XG4gICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBuZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzLCBzdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cbmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikge1xuICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7XG4gIHNlbGYucmVhZCgwKTtcbn1cblxuLy8gcGF1c2UoKSBhbmQgcmVzdW1lKCkgYXJlIHJlbW5hbnRzIG9mIHRoZSBsZWdhY3kgcmVhZGFibGUgc3RyZWFtIEFQSVxuLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLlxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZScpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgbmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgc2VsZi5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBzZWxmLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBzZWxmLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIHZhciBldmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG4gIGZvckVhY2goZXZlbnRzLCBmdW5jdGlvbiAoZXYpIHtcbiAgICBzdHJlYW0ub24oZXYsIHNlbGYuZW1pdC5iaW5kKHNlbGYsIGV2KSk7XG4gIH0pO1xuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHNlbGYuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7XG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzZWxmO1xufTtcblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIC8vIG5vdGhpbmcgYnVmZmVyZWRcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHJldDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBsaXN0XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtlbHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gZnJvbUxpc3RQYXJ0aWFsKG4sIHN0YXRlLmJ1ZmZlciwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBFeHRyYWN0cyBvbmx5IGVub3VnaCBidWZmZXJlZCBkYXRhIHRvIHNhdGlzZnkgdGhlIGFtb3VudCByZXF1ZXN0ZWQuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7XG4gIHZhciByZXQ7XG4gIGlmIChuIDwgbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3NcbiAgICByZXQgPSBsaXN0LmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICBsaXN0LmhlYWQuZGF0YSA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKG4pO1xuICB9IGVsc2UgaWYgKG4gPT09IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIGZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaFxuICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXJcbiAgICByZXQgPSBoYXNTdHJpbmdzID8gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkgOiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhXG4vLyBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIHtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgdmFyIHJldCA9IHAuZGF0YTtcbiAgbiAtPSByZXQubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpIHtcbiAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuKTtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgcC5kYXRhLmNvcHkocmV0KTtcbiAgbiAtPSBwLmRhdGEubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBidWYgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IGJ1Zi5sZW5ndGggPyBidWYubGVuZ3RoIDogbjtcbiAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgYmVmb3JlIGNvbnN1bWluZyBhbGwgdGhlIGJ5dGVzLCB0aGVuIHRoYXQgaXMgYVxuICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKSB0aHJvdyBuZXcgRXJyb3IoJ1wiZW5kUmVhZGFibGUoKVwiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIG5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JFYWNoKHhzLCBmKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZih4c1tpXSwgaSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuIiwiLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuXG4vLyBJbXBsZW1lbnQgYW4gYXN5bmMgLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNiKSwgYW5kIGl0J2xsIGhhbmRsZSBhbGxcbi8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLlxuXG5cbmltcG9ydCB7aW5oZXJpdHMsIGRlcHJlY2F0ZX0gZnJvbSAndXRpbCc7XG5pbXBvcnQge0J1ZmZlcn0gZnJvbSAnYnVmZmVyJztcbldyaXRhYmxlLldyaXRhYmxlU3RhdGUgPSBXcml0YWJsZVN0YXRlO1xuaW1wb3J0IHtFdmVudEVtaXR0ZXJ9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQge0R1cGxleH0gZnJvbSAnLi9kdXBsZXgnO1xuaW1wb3J0IHtuZXh0VGlja30gZnJvbSAncHJvY2Vzcyc7XG5pbmhlcml0cyhXcml0YWJsZSwgRXZlbnRFbWl0dGVyKTtcblxuZnVuY3Rpb24gbm9wKCkge31cblxuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2J1ZmZlcicsIHtcbiAgICBnZXQ6IGRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTtcbiAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicpXG4gIH0pO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cbiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLlxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtIHx8IGh3bSA9PT0gMCA/IGh3bSA6IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSB+IH50aGlzLmhpZ2hXYXRlck1hcms7XG5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG5cbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG5cbiAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIHdyaXRhYmxlU3RhdGVHZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBXcml0YWJsZTtcbmV4cG9ydCBmdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0aG91Z2ggdGhleSdyZSBub3RcbiAgLy8gaW5zdGFuY2VvZiBXcml0YWJsZSwgdGhleSdyZSBpbnN0YW5jZW9mIFJlYWRhYmxlLlxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgV3JpdGFibGUpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeS5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGUgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRlID0gb3B0aW9ucy53cml0ZTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZXYgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRldiA9IG9wdGlvbnMud3JpdGV2O1xuICB9XG5cbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG59XG5cbi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJykpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgbmV4dFRpY2soY2IsIGVyKTtcbn1cblxuLy8gSWYgd2UgZ2V0IHNvbWV0aGluZyB0aGF0IGlzIG5vdCBhIGJ1ZmZlciwgc3RyaW5nLCBudWxsLCBvciB1bmRlZmluZWQsXG4vLyBhbmQgd2UncmUgbm90IGluIG9iamVjdE1vZGUsIHRoZW4gdGhhdCdzIGFuIGVycm9yLlxuLy8gT3RoZXJ3aXNlIHN0cmVhbSBjaHVua3MgYXJlIGFsbCBjb25zaWRlcmVkIHRvIGJlIG9mIGxlbmd0aD0xLCBhbmQgdGhlXG4vLyB3YXRlcm1hcmtzIGRldGVybWluZSBob3cgbWFueSBvYmplY3RzIHRvIGtlZXAgaW4gdGhlIGJ1ZmZlciwgcmF0aGVyIHRoYW5cbi8vIGhvdyBtYW55IGJ5dGVzIG9yIGNoYXJhY3RlcnMuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICB2YXIgZXIgPSBmYWxzZTtcbiAgLy8gQWx3YXlzIHRocm93IGVycm9yIGlmIGEgbnVsbCBpcyB3cml0dGVuXG4gIC8vIGlmIHdlIGFyZSBub3QgaW4gb2JqZWN0IG1vZGUgdGhlbiB0aHJvd1xuICAvLyBpZiBpdCBpcyBub3QgYSBidWZmZXIsIHN0cmluZywgb3IgdW5kZWZpbmVkLlxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJyk7XG4gIH0gZWxzZSBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIG5leHRUaWNrKGNiLCBlcik7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wO1xuXG4gIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAodmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkge1xuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG5cbiAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG5cbiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLlxuICBpZiAoIXJldCkgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHtcbiAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG5ldyBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICBpZiAobGFzdCkge1xuICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIC0tc3RhdGUucGVuZGluZ2NiO1xuICBpZiAoc3luYykgbmV4dFRpY2soY2IsIGVyKTtlbHNlIGNiKGVyKTtcblxuICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgICBuZXh0VGljayhhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKSB7XG4gIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgc3RhdGUucGVuZGluZ2NiLS07XG4gIGNiKCk7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn1cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG4gIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDtcblxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcbiAgICB2YXIgbCA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XG4gICAgdmFyIGhvbGRlciA9IHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICBob2xkZXIuZW50cnkgPSBlbnRyeTtcblxuICAgIHZhciBjb3VudCA9IDA7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cblxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTtcblxuICAgIC8vIGRvV3JpdGUgaXMgYWxtb3N0IGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTtcblxuICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9XG5cbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQpIHtcbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBpZiAoc3RhdGUucGVuZGluZ2NiID09PSAwKSB7XG4gICAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gICAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgnZmluaXNoJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIG5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTtcbn1cblxuLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90XG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW1cbmZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB0aGlzLm5leHQgPSBudWxsO1xuICB0aGlzLmVudHJ5ID0gbnVsbDtcblxuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICB2YXIgZW50cnkgPSBfdGhpcy5lbnRyeTtcbiAgICBfdGhpcy5lbnRyeSA9IG51bGw7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgICAgY2IoZXJyKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICB9XG4gICAgaWYgKHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBfdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gX3RoaXM7XG4gICAgfVxuICB9O1xufVxuIiwiXG5pbXBvcnQge2luaGVyaXRzfSBmcm9tICd1dGlsJztcbmltcG9ydCB7bmV4dFRpY2t9IGZyb20gJ3Byb2Nlc3MnO1xuaW1wb3J0IHtSZWFkYWJsZX0gZnJvbSAnLi9yZWFkYWJsZSc7XG5pbXBvcnQge1dyaXRhYmxlfSBmcm9tICcuL3dyaXRhYmxlJztcblxuXG5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxudmFyIGtleXMgPSBPYmplY3Qua2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG59XG5leHBvcnQgZGVmYXVsdCBEdXBsZXg7XG5leHBvcnQgZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgbmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuIiwiLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG5cbmltcG9ydCB7RHVwbGV4fSBmcm9tICcuL2R1cGxleCc7XG5cblxuaW1wb3J0IHtpbmhlcml0c30gZnJvbSAndXRpbCc7XG5pbmhlcml0cyhUcmFuc2Zvcm0sIER1cGxleCk7XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybVN0YXRlKHN0cmVhbSkge1xuICB0aGlzLmFmdGVyVHJhbnNmb3JtID0gZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgcmV0dXJuIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpO1xuICB9O1xuXG4gIHRoaXMubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICB0aGlzLnRyYW5zZm9ybWluZyA9IGZhbHNlO1xuICB0aGlzLndyaXRlY2IgPSBudWxsO1xuICB0aGlzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0aGlzLndyaXRlZW5jb2RpbmcgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShzdHJlYW0sIGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHN0cmVhbS5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLnRyYW5zZm9ybWluZyA9IGZhbHNlO1xuXG4gIHZhciBjYiA9IHRzLndyaXRlY2I7XG5cbiAgaWYgKCFjYikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignbm8gd3JpdGVjYiBpbiBUcmFuc2Zvcm0gY2xhc3MnKSk7XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuXG4gIGlmIChkYXRhICE9PSBudWxsICYmIGRhdGEgIT09IHVuZGVmaW5lZCkgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICBzdHJlYW0uX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFRyYW5zZm9ybTtcbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSBuZXcgVHJhbnNmb3JtU3RhdGUodGhpcyk7XG5cbiAgLy8gd2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB2YXIgc3RyZWFtID0gdGhpcztcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9XG5cbiAgdGhpcy5vbmNlKCdwcmVmaW5pc2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyKSB7XG4gICAgICBkb25lKHN0cmVhbSwgZXIpO1xuICAgIH0pO2Vsc2UgZG9uZShzdHJlYW0pO1xuICB9KTtcbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpO1xufTtcblxuLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuLy9cbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxuLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cbi8vXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xuLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIHZhciB3cyA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAod3MubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmICh0cy50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn1cbiIsIlxuaW1wb3J0IHtUcmFuc2Zvcm19IGZyb20gJy4vdHJhbnNmb3JtJztcblxuaW1wb3J0IHtpbmhlcml0c30gZnJvbSAndXRpbCc7XG5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcbmV4cG9ydCBkZWZhdWx0IFBhc3NUaHJvdWdoO1xuZXhwb3J0IGZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSkgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRpb25zKTtcblxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59O1xuIiwiaW1wb3J0IEVFIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQge2luaGVyaXRzfSBmcm9tICd1dGlsJztcblxuaW1wb3J0IHtEdXBsZXh9IGZyb20gJy4vcmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcyc7XG5pbXBvcnQge1JlYWRhYmxlfSBmcm9tICcuL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcyc7XG5pbXBvcnQge1dyaXRhYmxlfSBmcm9tICcuL3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS5qcyc7XG5pbXBvcnQge1RyYW5zZm9ybX0gZnJvbSAnLi9yZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzJztcbmltcG9ydCB7UGFzc1Rocm91Z2h9IGZyb20gJy4vcmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJztcbmluaGVyaXRzKFN0cmVhbSwgRUUpO1xuU3RyZWFtLlJlYWRhYmxlID0gUmVhZGFibGU7XG5TdHJlYW0uV3JpdGFibGUgPSBXcml0YWJsZTtcblN0cmVhbS5EdXBsZXggPSBEdXBsZXg7XG5TdHJlYW0uVHJhbnNmb3JtID0gVHJhbnNmb3JtO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gUGFzc1Rocm91Z2g7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5leHBvcnQgZGVmYXVsdCBTdHJlYW07XG5leHBvcnQge1JlYWRhYmxlLFdyaXRhYmxlLER1cGxleCxUcmFuc2Zvcm0sUGFzc1Rocm91Z2gsU3RyZWFtfVxuXG4vLyBvbGQtc3R5bGUgc3RyZWFtcy4gIE5vdGUgdGhhdCB0aGUgcGlwZSBtZXRob2QgKHRoZSBvbmx5IHJlbGV2YW50XG4vLyBwYXJ0IG9mIHRoaXMgY2xhc3MpIGlzIG92ZXJyaWRkZW4gaW4gdGhlIFJlYWRhYmxlIGNsYXNzLlxuXG5mdW5jdGlvbiBTdHJlYW0oKSB7XG4gIEVFLmNhbGwodGhpcyk7XG59XG5cblN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgaWYgKGRlc3Qud3JpdGFibGUpIHtcbiAgICAgIGlmIChmYWxzZSA9PT0gZGVzdC53cml0ZShjaHVuaykgJiYgc291cmNlLnBhdXNlKSB7XG4gICAgICAgIHNvdXJjZS5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZGF0YScsIG9uZGF0YSk7XG5cbiAgZnVuY3Rpb24gb25kcmFpbigpIHtcbiAgICBpZiAoc291cmNlLnJlYWRhYmxlICYmIHNvdXJjZS5yZXN1bWUpIHtcbiAgICAgIHNvdXJjZS5yZXN1bWUoKTtcbiAgICB9XG4gIH1cblxuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIC8vIElmIHRoZSAnZW5kJyBvcHRpb24gaXMgbm90IHN1cHBsaWVkLCBkZXN0LmVuZCgpIHdpbGwgYmUgY2FsbGVkIHdoZW5cbiAgLy8gc291cmNlIGdldHMgdGhlICdlbmQnIG9yICdjbG9zZScgZXZlbnRzLiAgT25seSBkZXN0LmVuZCgpIG9uY2UuXG4gIGlmICghZGVzdC5faXNTdGRpbyAmJiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5lbmQgIT09IGZhbHNlKSkge1xuICAgIHNvdXJjZS5vbignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5vbignY2xvc2UnLCBvbmNsb3NlKTtcbiAgfVxuXG4gIHZhciBkaWRPbkVuZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cblxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgZGVzdC5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSBkZXN0LmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8vIGRvbid0IGxlYXZlIGRhbmdsaW5nIHBpcGVzIHdoZW4gdGhlcmUgYXJlIGVycm9ycy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGNsZWFudXAoKTtcbiAgICBpZiAoRUUubGlzdGVuZXJDb3VudCh0aGlzLCAnZXJyb3InKSA9PT0gMCkge1xuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCBzdHJlYW0gZXJyb3IgaW4gcGlwZS5cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gcmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZC5cbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcbiAgfVxuXG4gIHNvdXJjZS5vbignZW5kJywgY2xlYW51cCk7XG4gIHNvdXJjZS5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0Lm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3QuZW1pdCgncGlwZScsIHNvdXJjZSk7XG5cbiAgLy8gQWxsb3cgZm9yIHVuaXgtbGlrZSB1c2FnZTogQS5waXBlKEIpLnBpcGUoQylcbiAgcmV0dXJuIGRlc3Q7XG59O1xuIiwiaW1wb3J0IHtvdmVycmlkZU1pbWVUeXBlfSBmcm9tICcuL2NhcGFiaWxpdHknO1xuaW1wb3J0IHtpbmhlcml0c30gZnJvbSAndXRpbCc7XG5pbXBvcnQge1JlYWRhYmxlfSBmcm9tICdzdHJlYW0nO1xuXG52YXIgclN0YXRlcyA9IHtcbiAgVU5TRU5UOiAwLFxuICBPUEVORUQ6IDEsXG4gIEhFQURFUlNfUkVDRUlWRUQ6IDIsXG4gIExPQURJTkc6IDMsXG4gIERPTkU6IDRcbn1cbmV4cG9ydCB7XG4gIHJTdGF0ZXMgYXMgcmVhZHlTdGF0ZXNcbn07XG5leHBvcnQgZnVuY3Rpb24gSW5jb21pbmdNZXNzYWdlKHhociwgcmVzcG9uc2UsIG1vZGUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIFJlYWRhYmxlLmNhbGwoc2VsZilcblxuICBzZWxmLl9tb2RlID0gbW9kZVxuICBzZWxmLmhlYWRlcnMgPSB7fVxuICBzZWxmLnJhd0hlYWRlcnMgPSBbXVxuICBzZWxmLnRyYWlsZXJzID0ge31cbiAgc2VsZi5yYXdUcmFpbGVycyA9IFtdXG5cbiAgLy8gRmFrZSB0aGUgJ2Nsb3NlJyBldmVudCwgYnV0IG9ubHkgb25jZSAnZW5kJyBmaXJlc1xuICBzZWxmLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAvLyBUaGUgbmV4dFRpY2sgaXMgbmVjZXNzYXJ5IHRvIHByZXZlbnQgdGhlICdyZXF1ZXN0JyBtb2R1bGUgZnJvbSBjYXVzaW5nIGFuIGluZmluaXRlIGxvb3BcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5lbWl0KCdjbG9zZScpXG4gICAgfSlcbiAgfSlcbiAgdmFyIHJlYWQ7XG4gIGlmIChtb2RlID09PSAnZmV0Y2gnKSB7XG4gICAgc2VsZi5fZmV0Y2hSZXNwb25zZSA9IHJlc3BvbnNlXG5cbiAgICBzZWxmLnVybCA9IHJlc3BvbnNlLnVybFxuICAgIHNlbGYuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c1xuICAgIHNlbGYuc3RhdHVzTWVzc2FnZSA9IHJlc3BvbnNlLnN0YXR1c1RleHRcbiAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXRpYmxlIHZlcnNpb24gb2YgZm9yICg8aXRlbT4gb2YgPGl0ZXJhYmxlPik6XG4gICAgICAvLyBmb3IgKHZhciA8aXRlbT4sX2ksX2l0ID0gPGl0ZXJhYmxlPltTeW1ib2wuaXRlcmF0b3JdKCk7IDxpdGVtPiA9IChfaSA9IF9pdC5uZXh0KCkpLnZhbHVlLCFfaS5kb25lOylcbiAgICBmb3IgKHZhciBoZWFkZXIsIF9pLCBfaXQgPSByZXNwb25zZS5oZWFkZXJzW1N5bWJvbC5pdGVyYXRvcl0oKTsgaGVhZGVyID0gKF9pID0gX2l0Lm5leHQoKSkudmFsdWUsICFfaS5kb25lOykge1xuICAgICAgc2VsZi5oZWFkZXJzW2hlYWRlclswXS50b0xvd2VyQ2FzZSgpXSA9IGhlYWRlclsxXVxuICAgICAgc2VsZi5yYXdIZWFkZXJzLnB1c2goaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgfVxuXG4gICAgLy8gVE9ETzogdGhpcyBkb2Vzbid0IHJlc3BlY3QgYmFja3ByZXNzdXJlLiBPbmNlIFdyaXRhYmxlU3RyZWFtIGlzIGF2YWlsYWJsZSwgdGhpcyBjYW4gYmUgZml4ZWRcbiAgICB2YXIgcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKVxuXG4gICAgcmVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgaWYgKHNlbGYuX2Rlc3Ryb3llZClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgc2VsZi5wdXNoKG51bGwpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5wdXNoKG5ldyBCdWZmZXIocmVzdWx0LnZhbHVlKSlcbiAgICAgICAgcmVhZCgpXG4gICAgICB9KVxuICAgIH1cbiAgICByZWFkKClcblxuICB9IGVsc2Uge1xuICAgIHNlbGYuX3hociA9IHhoclxuICAgIHNlbGYuX3BvcyA9IDBcblxuICAgIHNlbGYudXJsID0geGhyLnJlc3BvbnNlVVJMXG4gICAgc2VsZi5zdGF0dXNDb2RlID0geGhyLnN0YXR1c1xuICAgIHNlbGYuc3RhdHVzTWVzc2FnZSA9IHhoci5zdGF0dXNUZXh0XG4gICAgdmFyIGhlYWRlcnMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkuc3BsaXQoL1xccj9cXG4vKVxuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHZhciBtYXRjaGVzID0gaGVhZGVyLm1hdGNoKC9eKFteOl0rKTpcXHMqKC4qKS8pXG4gICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICB2YXIga2V5ID0gbWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICAgIGlmIChzZWxmLmhlYWRlcnNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZWxmLmhlYWRlcnNba2V5XSA9IFtdXG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYuaGVhZGVyc1trZXldLnB1c2gobWF0Y2hlc1syXSlcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmhlYWRlcnNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2VsZi5oZWFkZXJzW2tleV0gKz0gJywgJyArIG1hdGNoZXNbMl1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLmhlYWRlcnNba2V5XSA9IG1hdGNoZXNbMl1cbiAgICAgICAgfVxuICAgICAgICBzZWxmLnJhd0hlYWRlcnMucHVzaChtYXRjaGVzWzFdLCBtYXRjaGVzWzJdKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBzZWxmLl9jaGFyc2V0ID0gJ3gtdXNlci1kZWZpbmVkJ1xuICAgIGlmICghb3ZlcnJpZGVNaW1lVHlwZSkge1xuICAgICAgdmFyIG1pbWVUeXBlID0gc2VsZi5yYXdIZWFkZXJzWydtaW1lLXR5cGUnXVxuICAgICAgaWYgKG1pbWVUeXBlKSB7XG4gICAgICAgIHZhciBjaGFyc2V0TWF0Y2ggPSBtaW1lVHlwZS5tYXRjaCgvO1xccypjaGFyc2V0PShbXjtdKSg7fCQpLylcbiAgICAgICAgaWYgKGNoYXJzZXRNYXRjaCkge1xuICAgICAgICAgIHNlbGYuX2NoYXJzZXQgPSBjaGFyc2V0TWF0Y2hbMV0udG9Mb3dlckNhc2UoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIXNlbGYuX2NoYXJzZXQpXG4gICAgICAgIHNlbGYuX2NoYXJzZXQgPSAndXRmLTgnIC8vIGJlc3QgZ3Vlc3NcbiAgICB9XG4gIH1cbn1cblxuaW5oZXJpdHMoSW5jb21pbmdNZXNzYWdlLCBSZWFkYWJsZSlcblxuSW5jb21pbmdNZXNzYWdlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uKCkge31cblxuSW5jb21pbmdNZXNzYWdlLnByb3RvdHlwZS5fb25YSFJQcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICB2YXIgeGhyID0gc2VsZi5feGhyXG5cbiAgdmFyIHJlc3BvbnNlID0gbnVsbFxuICBzd2l0Y2ggKHNlbGYuX21vZGUpIHtcbiAgY2FzZSAndGV4dDp2YmFycmF5JzogLy8gRm9yIElFOVxuICAgIGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5ET05FKVxuICAgICAgYnJlYWtcbiAgICB0cnkge1xuICAgICAgLy8gVGhpcyBmYWlscyBpbiBJRThcbiAgICAgIHJlc3BvbnNlID0gbmV3IGdsb2JhbC5WQkFycmF5KHhoci5yZXNwb25zZUJvZHkpLnRvQXJyYXkoKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHBhc3NcbiAgICB9XG4gICAgaWYgKHJlc3BvbnNlICE9PSBudWxsKSB7XG4gICAgICBzZWxmLnB1c2gobmV3IEJ1ZmZlcihyZXNwb25zZSkpXG4gICAgICBicmVha1xuICAgIH1cbiAgICAvLyBGYWxscyB0aHJvdWdoIGluIElFOFxuICBjYXNlICd0ZXh0JzpcbiAgICB0cnkgeyAvLyBUaGlzIHdpbGwgZmFpbCB3aGVuIHJlYWR5U3RhdGUgPSAzIGluIElFOS4gU3dpdGNoIG1vZGUgYW5kIHdhaXQgZm9yIHJlYWR5U3RhdGUgPSA0XG4gICAgICByZXNwb25zZSA9IHhoci5yZXNwb25zZVRleHRcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBzZWxmLl9tb2RlID0gJ3RleHQ6dmJhcnJheSdcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChyZXNwb25zZS5sZW5ndGggPiBzZWxmLl9wb3MpIHtcbiAgICAgIHZhciBuZXdEYXRhID0gcmVzcG9uc2Uuc3Vic3RyKHNlbGYuX3BvcylcbiAgICAgIGlmIChzZWxmLl9jaGFyc2V0ID09PSAneC11c2VyLWRlZmluZWQnKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKG5ld0RhdGEubGVuZ3RoKVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0RhdGEubGVuZ3RoOyBpKyspXG4gICAgICAgICAgYnVmZmVyW2ldID0gbmV3RGF0YS5jaGFyQ29kZUF0KGkpICYgMHhmZlxuXG4gICAgICAgIHNlbGYucHVzaChidWZmZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLnB1c2gobmV3RGF0YSwgc2VsZi5fY2hhcnNldClcbiAgICAgIH1cbiAgICAgIHNlbGYuX3BvcyA9IHJlc3BvbnNlLmxlbmd0aFxuICAgIH1cbiAgICBicmVha1xuICBjYXNlICdhcnJheWJ1ZmZlcic6XG4gICAgaWYgKHhoci5yZWFkeVN0YXRlICE9PSByU3RhdGVzLkRPTkUgfHwgIXhoci5yZXNwb25zZSlcbiAgICAgIGJyZWFrXG4gICAgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2VcbiAgICBzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZXNwb25zZSkpKVxuICAgIGJyZWFrXG4gIGNhc2UgJ21vei1jaHVua2VkLWFycmF5YnVmZmVyJzogLy8gdGFrZSB3aG9sZVxuICAgIHJlc3BvbnNlID0geGhyLnJlc3BvbnNlXG4gICAgaWYgKHhoci5yZWFkeVN0YXRlICE9PSByU3RhdGVzLkxPQURJTkcgfHwgIXJlc3BvbnNlKVxuICAgICAgYnJlYWtcbiAgICBzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZXNwb25zZSkpKVxuICAgIGJyZWFrXG4gIGNhc2UgJ21zLXN0cmVhbSc6XG4gICAgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2VcbiAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IHJTdGF0ZXMuTE9BRElORylcbiAgICAgIGJyZWFrXG4gICAgdmFyIHJlYWRlciA9IG5ldyBnbG9iYWwuTVNTdHJlYW1SZWFkZXIoKVxuICAgIHJlYWRlci5vbnByb2dyZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocmVhZGVyLnJlc3VsdC5ieXRlTGVuZ3RoID4gc2VsZi5fcG9zKSB7XG4gICAgICAgIHNlbGYucHVzaChuZXcgQnVmZmVyKG5ldyBVaW50OEFycmF5KHJlYWRlci5yZXN1bHQuc2xpY2Uoc2VsZi5fcG9zKSkpKVxuICAgICAgICBzZWxmLl9wb3MgPSByZWFkZXIucmVzdWx0LmJ5dGVMZW5ndGhcbiAgICAgIH1cbiAgICB9XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5wdXNoKG51bGwpXG4gICAgfVxuICAgICAgLy8gcmVhZGVyLm9uZXJyb3IgPSA/Pz8gLy8gVE9ETzogdGhpc1xuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihyZXNwb25zZSlcbiAgICBicmVha1xuICB9XG5cbiAgLy8gVGhlIG1zLXN0cmVhbSBjYXNlIGhhbmRsZXMgZW5kIHNlcGFyYXRlbHkgaW4gcmVhZGVyLm9ubG9hZCgpXG4gIGlmIChzZWxmLl94aHIucmVhZHlTdGF0ZSA9PT0gclN0YXRlcy5ET05FICYmIHNlbGYuX21vZGUgIT09ICdtcy1zdHJlYW0nKSB7XG4gICAgc2VsZi5wdXNoKG51bGwpXG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIGNhcGFiaWxpdHkgZnJvbSAnLi9jYXBhYmlsaXR5JztcbmltcG9ydCB7aW5oZXJpdHN9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IHtJbmNvbWluZ01lc3NhZ2UsIHJlYWR5U3RhdGVzIGFzIHJTdGF0ZXN9IGZyb20gJy4vcmVzcG9uc2UnO1xuaW1wb3J0IHtXcml0YWJsZX0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB0b0FycmF5QnVmZmVyIGZyb20gJy4vdG8tYXJyYXlidWZmZXInO1xuXG5mdW5jdGlvbiBkZWNpZGVNb2RlKHByZWZlckJpbmFyeSwgdXNlRmV0Y2gpIHtcbiAgaWYgKGNhcGFiaWxpdHkuaGFzRmV0Y2ggJiYgdXNlRmV0Y2gpIHtcbiAgICByZXR1cm4gJ2ZldGNoJ1xuICB9IGVsc2UgaWYgKGNhcGFiaWxpdHkubW96Y2h1bmtlZGFycmF5YnVmZmVyKSB7XG4gICAgcmV0dXJuICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcidcbiAgfSBlbHNlIGlmIChjYXBhYmlsaXR5Lm1zc3RyZWFtKSB7XG4gICAgcmV0dXJuICdtcy1zdHJlYW0nXG4gIH0gZWxzZSBpZiAoY2FwYWJpbGl0eS5hcnJheWJ1ZmZlciAmJiBwcmVmZXJCaW5hcnkpIHtcbiAgICByZXR1cm4gJ2FycmF5YnVmZmVyJ1xuICB9IGVsc2UgaWYgKGNhcGFiaWxpdHkudmJBcnJheSAmJiBwcmVmZXJCaW5hcnkpIHtcbiAgICByZXR1cm4gJ3RleHQ6dmJhcnJheSdcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJ3RleHQnXG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IENsaWVudFJlcXVlc3Q7XG5cbmZ1bmN0aW9uIENsaWVudFJlcXVlc3Qob3B0cykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgV3JpdGFibGUuY2FsbChzZWxmKVxuXG4gIHNlbGYuX29wdHMgPSBvcHRzXG4gIHNlbGYuX2JvZHkgPSBbXVxuICBzZWxmLl9oZWFkZXJzID0ge31cbiAgaWYgKG9wdHMuYXV0aClcbiAgICBzZWxmLnNldEhlYWRlcignQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgbmV3IEJ1ZmZlcihvcHRzLmF1dGgpLnRvU3RyaW5nKCdiYXNlNjQnKSlcbiAgT2JqZWN0LmtleXMob3B0cy5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBzZWxmLnNldEhlYWRlcihuYW1lLCBvcHRzLmhlYWRlcnNbbmFtZV0pXG4gIH0pXG5cbiAgdmFyIHByZWZlckJpbmFyeVxuICB2YXIgdXNlRmV0Y2ggPSB0cnVlXG4gIGlmIChvcHRzLm1vZGUgPT09ICdkaXNhYmxlLWZldGNoJykge1xuICAgIC8vIElmIHRoZSB1c2Ugb2YgWEhSIHNob3VsZCBiZSBwcmVmZXJyZWQgYW5kIGluY2x1ZGVzIHByZXNlcnZpbmcgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlclxuICAgIHVzZUZldGNoID0gZmFsc2VcbiAgICBwcmVmZXJCaW5hcnkgPSB0cnVlXG4gIH0gZWxzZSBpZiAob3B0cy5tb2RlID09PSAncHJlZmVyLXN0cmVhbWluZycpIHtcbiAgICAvLyBJZiBzdHJlYW1pbmcgaXMgYSBoaWdoIHByaW9yaXR5IGJ1dCBiaW5hcnkgY29tcGF0aWJpbGl0eSBhbmRcbiAgICAvLyB0aGUgYWNjdXJhY3kgb2YgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlciBhcmVuJ3RcbiAgICBwcmVmZXJCaW5hcnkgPSBmYWxzZVxuICB9IGVsc2UgaWYgKG9wdHMubW9kZSA9PT0gJ2FsbG93LXdyb25nLWNvbnRlbnQtdHlwZScpIHtcbiAgICAvLyBJZiBzdHJlYW1pbmcgaXMgbW9yZSBpbXBvcnRhbnQgdGhhbiBwcmVzZXJ2aW5nIHRoZSAnY29udGVudC10eXBlJyBoZWFkZXJcbiAgICBwcmVmZXJCaW5hcnkgPSAhY2FwYWJpbGl0eS5vdmVycmlkZU1pbWVUeXBlXG4gIH0gZWxzZSBpZiAoIW9wdHMubW9kZSB8fCBvcHRzLm1vZGUgPT09ICdkZWZhdWx0JyB8fCBvcHRzLm1vZGUgPT09ICdwcmVmZXItZmFzdCcpIHtcbiAgICAvLyBVc2UgYmluYXJ5IGlmIHRleHQgc3RyZWFtaW5nIG1heSBjb3JydXB0IGRhdGEgb3IgdGhlIGNvbnRlbnQtdHlwZSBoZWFkZXIsIG9yIGZvciBzcGVlZFxuICAgIHByZWZlckJpbmFyeSA9IHRydWVcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIG9wdHMubW9kZScpXG4gIH1cbiAgc2VsZi5fbW9kZSA9IGRlY2lkZU1vZGUocHJlZmVyQmluYXJ5LCB1c2VGZXRjaClcblxuICBzZWxmLm9uKCdmaW5pc2gnLCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLl9vbkZpbmlzaCgpXG4gIH0pXG59XG5cbmluaGVyaXRzKENsaWVudFJlcXVlc3QsIFdyaXRhYmxlKVxuLy8gVGFrZW4gZnJvbSBodHRwOi8vd3d3LnczLm9yZy9UUi9YTUxIdHRwUmVxdWVzdC8jdGhlLXNldHJlcXVlc3RoZWFkZXIlMjglMjktbWV0aG9kXG52YXIgdW5zYWZlSGVhZGVycyA9IFtcbiAgJ2FjY2VwdC1jaGFyc2V0JyxcbiAgJ2FjY2VwdC1lbmNvZGluZycsXG4gICdhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LWhlYWRlcnMnLFxuICAnYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1tZXRob2QnLFxuICAnY29ubmVjdGlvbicsXG4gICdjb250ZW50LWxlbmd0aCcsXG4gICdjb29raWUnLFxuICAnY29va2llMicsXG4gICdkYXRlJyxcbiAgJ2RudCcsXG4gICdleHBlY3QnLFxuICAnaG9zdCcsXG4gICdrZWVwLWFsaXZlJyxcbiAgJ29yaWdpbicsXG4gICdyZWZlcmVyJyxcbiAgJ3RlJyxcbiAgJ3RyYWlsZXInLFxuICAndHJhbnNmZXItZW5jb2RpbmcnLFxuICAndXBncmFkZScsXG4gICd1c2VyLWFnZW50JyxcbiAgJ3ZpYSdcbl1cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldEhlYWRlciA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgbG93ZXJOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgLy8gVGhpcyBjaGVjayBpcyBub3QgbmVjZXNzYXJ5LCBidXQgaXQgcHJldmVudHMgd2FybmluZ3MgZnJvbSBicm93c2VycyBhYm91dCBzZXR0aW5nIHVuc2FmZVxuICAgIC8vIGhlYWRlcnMuIFRvIGJlIGhvbmVzdCBJJ20gbm90IGVudGlyZWx5IHN1cmUgaGlkaW5nIHRoZXNlIHdhcm5pbmdzIGlzIGEgZ29vZCB0aGluZywgYnV0XG4gICAgLy8gaHR0cC1icm93c2VyaWZ5IGRpZCBpdCwgc28gSSB3aWxsIHRvby5cbiAgaWYgKHVuc2FmZUhlYWRlcnMuaW5kZXhPZihsb3dlck5hbWUpICE9PSAtMSlcbiAgICByZXR1cm5cblxuICBzZWxmLl9oZWFkZXJzW2xvd2VyTmFtZV0gPSB7XG4gICAgbmFtZTogbmFtZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5nZXRIZWFkZXIgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICByZXR1cm4gc2VsZi5faGVhZGVyc1tuYW1lLnRvTG93ZXJDYXNlKCldLnZhbHVlXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnJlbW92ZUhlYWRlciA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGRlbGV0ZSBzZWxmLl9oZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV1cbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX29uRmluaXNoID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIGlmIChzZWxmLl9kZXN0cm95ZWQpXG4gICAgcmV0dXJuXG4gIHZhciBvcHRzID0gc2VsZi5fb3B0c1xuXG4gIHZhciBoZWFkZXJzT2JqID0gc2VsZi5faGVhZGVyc1xuICB2YXIgYm9keVxuICBpZiAob3B0cy5tZXRob2QgPT09ICdQT1NUJyB8fCBvcHRzLm1ldGhvZCA9PT0gJ1BVVCcgfHwgb3B0cy5tZXRob2QgPT09ICdQQVRDSCcpIHtcbiAgICBpZiAoY2FwYWJpbGl0eS5ibG9iQ29uc3RydWN0b3IoKSkge1xuICAgICAgYm9keSA9IG5ldyBnbG9iYWwuQmxvYihzZWxmLl9ib2R5Lm1hcChmdW5jdGlvbihidWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIHRvQXJyYXlCdWZmZXIoYnVmZmVyKVxuICAgICAgfSksIHtcbiAgICAgICAgdHlwZTogKGhlYWRlcnNPYmpbJ2NvbnRlbnQtdHlwZSddIHx8IHt9KS52YWx1ZSB8fCAnJ1xuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZ2V0IHV0Zjggc3RyaW5nXG4gICAgICBib2R5ID0gQnVmZmVyLmNvbmNhdChzZWxmLl9ib2R5KS50b1N0cmluZygpXG4gICAgfVxuICB9XG5cbiAgaWYgKHNlbGYuX21vZGUgPT09ICdmZXRjaCcpIHtcbiAgICB2YXIgaGVhZGVycyA9IE9iamVjdC5rZXlzKGhlYWRlcnNPYmopLm1hcChmdW5jdGlvbihuYW1lKSB7XG4gICAgICByZXR1cm4gW2hlYWRlcnNPYmpbbmFtZV0ubmFtZSwgaGVhZGVyc09ialtuYW1lXS52YWx1ZV1cbiAgICB9KVxuXG4gICAgZ2xvYmFsLmZldGNoKHNlbGYuX29wdHMudXJsLCB7XG4gICAgICBtZXRob2Q6IHNlbGYuX29wdHMubWV0aG9kLFxuICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgIGJvZHk6IGJvZHksXG4gICAgICBtb2RlOiAnY29ycycsXG4gICAgICBjcmVkZW50aWFsczogb3B0cy53aXRoQ3JlZGVudGlhbHMgPyAnaW5jbHVkZScgOiAnc2FtZS1vcmlnaW4nXG4gICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgc2VsZi5fZmV0Y2hSZXNwb25zZSA9IHJlc3BvbnNlXG4gICAgICBzZWxmLl9jb25uZWN0KClcbiAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCByZWFzb24pXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICB2YXIgeGhyID0gc2VsZi5feGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpXG4gICAgdHJ5IHtcbiAgICAgIHhoci5vcGVuKHNlbGYuX29wdHMubWV0aG9kLCBzZWxmLl9vcHRzLnVybCwgdHJ1ZSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gQ2FuJ3Qgc2V0IHJlc3BvbnNlVHlwZSBvbiByZWFsbHkgb2xkIGJyb3dzZXJzXG4gICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhocilcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBzZWxmLl9tb2RlLnNwbGl0KCc6JylbMF1cblxuICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpXG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gISFvcHRzLndpdGhDcmVkZW50aWFsc1xuXG4gICAgaWYgKHNlbGYuX21vZGUgPT09ICd0ZXh0JyAmJiAnb3ZlcnJpZGVNaW1lVHlwZScgaW4geGhyKVxuICAgICAgeGhyLm92ZXJyaWRlTWltZVR5cGUoJ3RleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWQnKVxuXG4gICAgT2JqZWN0LmtleXMoaGVhZGVyc09iaikuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXJzT2JqW25hbWVdLm5hbWUsIGhlYWRlcnNPYmpbbmFtZV0udmFsdWUpXG4gICAgfSlcblxuICAgIHNlbGYuX3Jlc3BvbnNlID0gbnVsbFxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHN3aXRjaCAoeGhyLnJlYWR5U3RhdGUpIHtcbiAgICAgIGNhc2UgclN0YXRlcy5MT0FESU5HOlxuICAgICAgY2FzZSByU3RhdGVzLkRPTkU6XG4gICAgICAgIHNlbGYuX29uWEhSUHJvZ3Jlc3MoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAgIC8vIE5lY2Vzc2FyeSBmb3Igc3RyZWFtaW5nIGluIEZpcmVmb3gsIHNpbmNlIHhoci5yZXNwb25zZSBpcyBPTkxZIGRlZmluZWRcbiAgICAgIC8vIGluIG9ucHJvZ3Jlc3MsIG5vdCBpbiBvbnJlYWR5c3RhdGVjaGFuZ2Ugd2l0aCB4aHIucmVhZHlTdGF0ZSA9IDNcbiAgICBpZiAoc2VsZi5fbW9kZSA9PT0gJ21vei1jaHVua2VkLWFycmF5YnVmZmVyJykge1xuICAgICAgeGhyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5fb25YSFJQcm9ncmVzcygpXG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLl9kZXN0cm95ZWQpXG4gICAgICAgIHJldHVyblxuICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignWEhSIGVycm9yJykpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHhoci5zZW5kKGJvZHkpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuICAgICAgfSlcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiB4aHIuc3RhdHVzIGlzIHJlYWRhYmxlIGFuZCBub24temVybywgaW5kaWNhdGluZyBubyBlcnJvci5cbiAqIEV2ZW4gdGhvdWdoIHRoZSBzcGVjIHNheXMgaXQgc2hvdWxkIGJlIGF2YWlsYWJsZSBpbiByZWFkeVN0YXRlIDMsXG4gKiBhY2Nlc3NpbmcgaXQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBpbiBJRThcbiAqL1xuZnVuY3Rpb24gc3RhdHVzVmFsaWQoeGhyKSB7XG4gIHRyeSB7XG4gICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXNcbiAgICByZXR1cm4gKHN0YXR1cyAhPT0gbnVsbCAmJiBzdGF0dXMgIT09IDApXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fb25YSFJQcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBpZiAoIXN0YXR1c1ZhbGlkKHNlbGYuX3hocikgfHwgc2VsZi5fZGVzdHJveWVkKVxuICAgIHJldHVyblxuXG4gIGlmICghc2VsZi5fcmVzcG9uc2UpXG4gICAgc2VsZi5fY29ubmVjdCgpXG5cbiAgc2VsZi5fcmVzcG9uc2UuX29uWEhSUHJvZ3Jlc3MoKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBpZiAoc2VsZi5fZGVzdHJveWVkKVxuICAgIHJldHVyblxuXG4gIHNlbGYuX3Jlc3BvbnNlID0gbmV3IEluY29taW5nTWVzc2FnZShzZWxmLl94aHIsIHNlbGYuX2ZldGNoUmVzcG9uc2UsIHNlbGYuX21vZGUpXG4gIHNlbGYuZW1pdCgncmVzcG9uc2UnLCBzZWxmLl9yZXNwb25zZSlcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBzZWxmLl9ib2R5LnB1c2goY2h1bmspXG4gIGNiKClcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBzZWxmLl9kZXN0cm95ZWQgPSB0cnVlXG4gIGlmIChzZWxmLl9yZXNwb25zZSlcbiAgICBzZWxmLl9yZXNwb25zZS5fZGVzdHJveWVkID0gdHJ1ZVxuICBpZiAoc2VsZi5feGhyKVxuICAgIHNlbGYuX3hoci5hYm9ydCgpXG4gICAgLy8gQ3VycmVudGx5LCB0aGVyZSBpc24ndCBhIHdheSB0byB0cnVseSBhYm9ydCBhIGZldGNoLlxuICAgIC8vIElmIHlvdSBsaWtlIGJpa2VzaGVkZGluZywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvZmV0Y2gvaXNzdWVzLzI3XG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGRhdGEsIGVuY29kaW5nLCBjYikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBkYXRhXG4gICAgZGF0YSA9IHVuZGVmaW5lZFxuICB9XG5cbiAgV3JpdGFibGUucHJvdG90eXBlLmVuZC5jYWxsKHNlbGYsIGRhdGEsIGVuY29kaW5nLCBjYilcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZmx1c2hIZWFkZXJzID0gZnVuY3Rpb24oKSB7fVxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge31cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldE5vRGVsYXkgPSBmdW5jdGlvbigpIHt9XG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRTb2NrZXRLZWVwQWxpdmUgPSBmdW5jdGlvbigpIHt9XG4iLCIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qaGllc2V5L3RvLWFycmF5YnVmZmVyL2Jsb2IvNjUwMmQ5ODUwZTcwYmE3OTM1YTdkZjRhZDg2YjM1OGZjMjE2ZjlmMC9pbmRleC5qc1xuXG4vLyBNSVQgTGljZW5zZVxuLy8gQ29weXJpZ2h0IChjKSAyMDE2IEpvaG4gSGllc2V5XG5pbXBvcnQge2lzQnVmZmVyfSBmcm9tICdidWZmZXInO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGJ1Zikge1xuICAvLyBJZiB0aGUgYnVmZmVyIGlzIGJhY2tlZCBieSBhIFVpbnQ4QXJyYXksIGEgZmFzdGVyIHZlcnNpb24gd2lsbCB3b3JrXG4gIGlmIChidWYgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgLy8gSWYgdGhlIGJ1ZmZlciBpc24ndCBhIHN1YmFycmF5LCByZXR1cm4gdGhlIHVuZGVybHlpbmcgQXJyYXlCdWZmZXJcbiAgICBpZiAoYnVmLmJ5dGVPZmZzZXQgPT09IDAgJiYgYnVmLmJ5dGVMZW5ndGggPT09IGJ1Zi5idWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJ1Zi5idWZmZXJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBidWYuYnVmZmVyLnNsaWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBPdGhlcndpc2Ugd2UgbmVlZCB0byBnZXQgYSBwcm9wZXIgY29weVxuICAgICAgcmV0dXJuIGJ1Zi5idWZmZXIuc2xpY2UoYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5ieXRlT2Zmc2V0ICsgYnVmLmJ5dGVMZW5ndGgpXG4gICAgfVxuICB9XG5cbiAgaWYgKGlzQnVmZmVyKGJ1ZikpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBzbG93IHZlcnNpb24gdGhhdCB3aWxsIHdvcmsgd2l0aCBhbnkgQnVmZmVyXG4gICAgLy8gaW1wbGVtZW50YXRpb24gKGV2ZW4gaW4gb2xkIGJyb3dzZXJzKVxuICAgIHZhciBhcnJheUNvcHkgPSBuZXcgVWludDhBcnJheShidWYubGVuZ3RoKVxuICAgIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJyYXlDb3B5W2ldID0gYnVmW2ldXG4gICAgfVxuICAgIHJldHVybiBhcnJheUNvcHkuYnVmZmVyXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxufVxuIiwiLyohIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZSB2MS40LjEgYnkgQG1hdGhpYXMgKi9cblxuXG4vKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG52YXIgbWF4SW50ID0gMjE0NzQ4MzY0NzsgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG4vKiogQm9vdHN0cmluZyBwYXJhbWV0ZXJzICovXG52YXIgYmFzZSA9IDM2O1xudmFyIHRNaW4gPSAxO1xudmFyIHRNYXggPSAyNjtcbnZhciBza2V3ID0gMzg7XG52YXIgZGFtcCA9IDcwMDtcbnZhciBpbml0aWFsQmlhcyA9IDcyO1xudmFyIGluaXRpYWxOID0gMTI4OyAvLyAweDgwXG52YXIgZGVsaW1pdGVyID0gJy0nOyAvLyAnXFx4MkQnXG5cbi8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG52YXIgcmVnZXhQdW55Y29kZSA9IC9eeG4tLS87XG52YXIgcmVnZXhOb25BU0NJSSA9IC9bXlxceDIwLVxceDdFXS87IC8vIHVucHJpbnRhYmxlIEFTQ0lJIGNoYXJzICsgbm9uLUFTQ0lJIGNoYXJzXG52YXIgcmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZzsgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG4vKiogRXJyb3IgbWVzc2FnZXMgKi9cbnZhciBlcnJvcnMgPSB7XG4gICdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsXG4gICdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsXG4gICdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG59O1xuXG4vKiogQ29udmVuaWVuY2Ugc2hvcnRjdXRzICovXG52YXIgYmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuLyoqXG4gKiBBIGdlbmVyaWMgZXJyb3IgdXRpbGl0eSBmdW5jdGlvbi5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXJyb3IgdHlwZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhyb3dzIGEgYFJhbmdlRXJyb3JgIHdpdGggdGhlIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gZXJyb3IodHlwZSkge1xuICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xufVxuXG4vKipcbiAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcbiAqIGl0ZW0uXG4gKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IGFycmF5IG9mIHZhbHVlcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICByZXN1bHRbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG4gKiBhZGRyZXNzZXMuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeVxuICogY2hhcmFjdGVyLlxuICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuICB2YXIgcGFydHMgPSBzdHJpbmcuc3BsaXQoJ0AnKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgIC8vIEluIGVtYWlsIGFkZHJlc3Nlcywgb25seSB0aGUgZG9tYWluIG5hbWUgc2hvdWxkIGJlIHB1bnljb2RlZC4gTGVhdmVcbiAgICAvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuICAgIHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuICAgIHN0cmluZyA9IHBhcnRzWzFdO1xuICB9XG4gIC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cbiAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx4MkUnKTtcbiAgdmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuICB2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG4gIHJldHVybiByZXN1bHQgKyBlbmNvZGVkO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcbiAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG4gKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcbiAqIG1hdGNoaW5nIFVURi0xNi5cbiAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG4gKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuICogQG5hbWUgZGVjb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuICovXG5mdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuICB2YXIgb3V0cHV0ID0gW10sXG4gICAgY291bnRlciA9IDAsXG4gICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICB2YWx1ZSxcbiAgICBleHRyYTtcbiAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICB2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG4gICAgaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuICAgICAgLy8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG4gICAgICBleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG4gICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuICAgICAgICBvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcbiAgICAgICAgLy8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgICAgY291bnRlci0tO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0cmluZyBiYXNlZCBvbiBhbiBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG4gKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuICogQG5hbWUgZW5jb2RlXG4gKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuICovXG5mdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG4gIHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIG91dHB1dCA9ICcnO1xuICAgIGlmICh2YWx1ZSA+IDB4RkZGRikge1xuICAgICAgdmFsdWUgLT0gMHgxMDAwMDtcbiAgICAgIG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuICAgICAgdmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuICAgIH1cbiAgICBvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9KS5qb2luKCcnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG4gKiBAc2VlIGBkaWdpdFRvQmFzaWMoKWBcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQgKGZvciB1c2UgaW5cbiAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcbiAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG4gIGlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7XG4gICAgcmV0dXJuIGNvZGVQb2ludCAtIDIyO1xuICB9XG4gIGlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7XG4gICAgcmV0dXJuIGNvZGVQb2ludCAtIDY1O1xuICB9XG4gIGlmIChjb2RlUG9pbnQgLSA5NyA8IDI2KSB7XG4gICAgcmV0dXJuIGNvZGVQb2ludCAtIDk3O1xuICB9XG4gIHJldHVybiBiYXNlO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cbiAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvclxuICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2VcbiAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWRcbiAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG4gKi9cbmZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykge1xuICAvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuICAvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcbiAgcmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTtcbn1cblxuLyoqXG4gKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuICB2YXIgayA9IDA7XG4gIGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG4gIGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcbiAgZm9yICggLyogbm8gaW5pdGlhbGl6YXRpb24gKi8gOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuICAgIGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcbiAgfVxuICByZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZVxuICogc3ltYm9scy5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG4gIC8vIERvbid0IHVzZSBVQ1MtMlxuICB2YXIgb3V0cHV0ID0gW10sXG4gICAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsXG4gICAgb3V0LFxuICAgIGkgPSAwLFxuICAgIG4gPSBpbml0aWFsTixcbiAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG4gICAgYmFzaWMsXG4gICAgaixcbiAgICBpbmRleCxcbiAgICBvbGRpLFxuICAgIHcsXG4gICAgayxcbiAgICBkaWdpdCxcbiAgICB0LFxuICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuICAgIGJhc2VNaW51c1Q7XG5cbiAgLy8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG4gIC8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5XG4gIC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG4gIGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcbiAgaWYgKGJhc2ljIDwgMCkge1xuICAgIGJhc2ljID0gMDtcbiAgfVxuXG4gIGZvciAoaiA9IDA7IGogPCBiYXNpYzsgKytqKSB7XG4gICAgLy8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50XG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuICAgICAgZXJyb3IoJ25vdC1iYXNpYycpO1xuICAgIH1cbiAgICBvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcbiAgfVxuXG4gIC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcbiAgLy8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuICBmb3IgKGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDsgLyogbm8gZmluYWwgZXhwcmVzc2lvbiAqLyApIHtcblxuICAgIC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cbiAgICAvLyBEZWNvZGUgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlciBpbnRvIGBkZWx0YWAsXG4gICAgLy8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcbiAgICAvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuICAgIC8vIHZhbHVlIGF0IHRoZSBlbmQgdG8gb2J0YWluIGBkZWx0YWAuXG4gICAgZm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi8gOyBrICs9IGJhc2UpIHtcblxuICAgICAgaWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7XG4gICAgICAgIGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG4gICAgICB9XG5cbiAgICAgIGRpZ2l0ID0gYmFzaWNUb0RpZ2l0KGlucHV0LmNoYXJDb2RlQXQoaW5kZXgrKykpO1xuXG4gICAgICBpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7XG4gICAgICAgIGVycm9yKCdvdmVyZmxvdycpO1xuICAgICAgfVxuXG4gICAgICBpICs9IGRpZ2l0ICogdztcbiAgICAgIHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG4gICAgICBpZiAoZGlnaXQgPCB0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBiYXNlTWludXNUID0gYmFzZSAtIHQ7XG4gICAgICBpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG4gICAgICAgIGVycm9yKCdvdmVyZmxvdycpO1xuICAgICAgfVxuXG4gICAgICB3ICo9IGJhc2VNaW51c1Q7XG5cbiAgICB9XG5cbiAgICBvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTtcbiAgICBiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTtcblxuICAgIC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG4gICAgLy8gaW5jcmVtZW50aW5nIGBuYCBlYWNoIHRpbWUsIHNvIHdlJ2xsIGZpeCB0aGF0IG5vdzpcbiAgICBpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7XG4gICAgICBlcnJvcignb3ZlcmZsb3cnKTtcbiAgICB9XG5cbiAgICBuICs9IGZsb29yKGkgLyBvdXQpO1xuICAgIGkgJT0gb3V0O1xuXG4gICAgLy8gSW5zZXJ0IGBuYCBhdCBwb3NpdGlvbiBgaWAgb2YgdGhlIG91dHB1dFxuICAgIG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuICB9XG5cbiAgcmV0dXJuIHVjczJlbmNvZGUob3V0cHV0KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gIHZhciBuLFxuICAgIGRlbHRhLFxuICAgIGhhbmRsZWRDUENvdW50LFxuICAgIGJhc2ljTGVuZ3RoLFxuICAgIGJpYXMsXG4gICAgaixcbiAgICBtLFxuICAgIHEsXG4gICAgayxcbiAgICB0LFxuICAgIGN1cnJlbnRWYWx1ZSxcbiAgICBvdXRwdXQgPSBbXSxcbiAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuICAgIGlucHV0TGVuZ3RoLFxuICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcbiAgICBiYXNlTWludXNULFxuICAgIHFNaW51c1Q7XG5cbiAgLy8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZVxuICBpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG4gIC8vIENhY2hlIHRoZSBsZW5ndGhcbiAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcbiAgbiA9IGluaXRpYWxOO1xuICBkZWx0YSA9IDA7XG4gIGJpYXMgPSBpbml0aWFsQmlhcztcblxuICAvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzXG4gIGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG4gICAgY3VycmVudFZhbHVlID0gaW5wdXRbal07XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcbiAgICAgIG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblxuICAvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcbiAgLy8gYGJhc2ljTGVuZ3RoYCBpcyB0aGUgbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuXG4gIC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlclxuICBpZiAoYmFzaWNMZW5ndGgpIHtcbiAgICBvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuICB9XG5cbiAgLy8gTWFpbiBlbmNvZGluZyBsb29wOlxuICB3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuXG4gICAgLy8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuICAgIC8vIGxhcmdlciBvbmU6XG4gICAgZm9yIChtID0gbWF4SW50LCBqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcbiAgICAgICAgbSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sXG4gICAgLy8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3dcbiAgICBoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG4gICAgaWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcbiAgICAgIGVycm9yKCdvdmVyZmxvdycpO1xuICAgIH1cblxuICAgIGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG4gICAgbiA9IG07XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcbiAgICAgICAgZXJyb3IoJ292ZXJmbG93Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuICAgICAgICAvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuICAgICAgICBmb3IgKHEgPSBkZWx0YSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLyA7IGsgKz0gYmFzZSkge1xuICAgICAgICAgIHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuICAgICAgICAgIGlmIChxIDwgdCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHFNaW51c1QgPSBxIC0gdDtcbiAgICAgICAgICBiYXNlTWludXNUID0gYmFzZSAtIHQ7XG4gICAgICAgICAgb3V0cHV0LnB1c2goXG4gICAgICAgICAgICBzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuICAgICAgICBiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuICAgICAgICBkZWx0YSA9IDA7XG4gICAgICAgICsraGFuZGxlZENQQ291bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgKytkZWx0YTtcbiAgICArK247XG5cbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3NcbiAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS5cbiAqIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlblxuICogY29udmVydGVkIHRvIFVuaWNvZGUuXG4gKiBAbWVtYmVyT2YgcHVueWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGVkIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG9cbiAqIGNvbnZlcnQgdG8gVW5pY29kZS5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZVxuICogc3RyaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7XG4gIHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKSA/XG4gICAgICBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpIDpcbiAgICAgIHN0cmluZztcbiAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG4gKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcbiAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuICogQVNDSUkuXG4gKiBAbWVtYmVyT2YgcHVueWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG4gKiBVbmljb2RlIHN0cmluZy5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3JcbiAqIGVtYWlsIGFkZHJlc3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7XG4gIHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKSA/XG4gICAgICAneG4tLScgKyBlbmNvZGUoc3RyaW5nKSA6XG4gICAgICBzdHJpbmc7XG4gIH0pO1xufVxuZXhwb3J0IHZhciB2ZXJzaW9uID0gJzEuNC4xJztcbi8qKlxuICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcbiAqIHJlcHJlc2VudGF0aW9uIChVQ1MtMikgdG8gVW5pY29kZSBjb2RlIHBvaW50cywgYW5kIGJhY2suXG4gKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICogQHR5cGUgT2JqZWN0XG4gKi9cblxuZXhwb3J0IHZhciB1Y3MyID0ge1xuICBkZWNvZGU6IHVjczJkZWNvZGUsXG4gIGVuY29kZTogdWNzMmVuY29kZVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgdmVyc2lvbjogdmVyc2lvbixcbiAgdWNzMjogdWNzMixcbiAgdG9BU0NJSTogdG9BU0NJSSxcbiAgdG9Vbmljb2RlOiB0b1VuaWNvZGUsXG4gIGVuY29kZTogZW5jb2RlLFxuICBkZWNvZGU6IGRlY29kZVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cblxuLy8gSWYgb2JqLmhhc093blByb3BlcnR5IGhhcyBiZWVuIG92ZXJyaWRkZW4sIHRoZW4gY2FsbGluZ1xuLy8gb2JqLmhhc093blByb3BlcnR5KHByb3ApIHdpbGwgYnJlYWsuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwN1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuZnVuY3Rpb24gc3RyaW5naWZ5UHJpbWl0aXZlKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSAob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG1hcChvYmplY3RLZXlzKG9iaiksIGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBtYXAob2JqW2tdLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG5cbmZ1bmN0aW9uIG1hcCAoeHMsIGYpIHtcbiAgaWYgKHhzLm1hcCkgcmV0dXJuIHhzLm1hcChmKTtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzLnB1c2goZih4c1tpXSwgaSkpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgcmVzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGVuY29kZTogc3RyaW5naWZ5LFxuICBzdHJpbmdpZnk6IHN0cmluZ2lmeSxcbiAgZGVjb2RlOiBwYXJzZSxcbiAgcGFyc2U6IHBhcnNlXG59XG5leHBvcnQge3N0cmluZ2lmeSBhcyBlbmNvZGUsIHBhcnNlIGFzIGRlY29kZX07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuXG5pbXBvcnQge3RvQVNDSUl9IGZyb20gJ3B1bnljb2RlJztcbmltcG9ydCB7aXNPYmplY3QsaXNTdHJpbmcsaXNOdWxsT3JVbmRlZmluZWQsaXNOdWxsfSBmcm9tICd1dGlsJztcbmltcG9ydCB7cGFyc2UgYXMgcXNQYXJzZSxzdHJpbmdpZnkgYXMgcXNTdHJpbmdpZnl9IGZyb20gJ3F1ZXJ5c3RyaW5nJztcbmV4cG9ydCB7XG4gIHVybFBhcnNlIGFzIHBhcnNlLFxuICB1cmxSZXNvbHZlIGFzIHJlc29sdmUsXG4gIHVybFJlc29sdmVPYmplY3QgYXMgcmVzb2x2ZU9iamVjdCxcbiAgdXJsRm9ybWF0IGFzIGZvcm1hdFxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcGFyc2U6IHVybFBhcnNlLFxuICByZXNvbHZlOiB1cmxSZXNvbHZlLFxuICByZXNvbHZlT2JqZWN0OiB1cmxSZXNvbHZlT2JqZWN0LFxuICBmb3JtYXQ6IHVybEZvcm1hdCxcbiAgVXJsOiBVcmxcbn1cbmV4cG9ydCBmdW5jdGlvbiBVcmwoKSB7XG4gIHRoaXMucHJvdG9jb2wgPSBudWxsO1xuICB0aGlzLnNsYXNoZXMgPSBudWxsO1xuICB0aGlzLmF1dGggPSBudWxsO1xuICB0aGlzLmhvc3QgPSBudWxsO1xuICB0aGlzLnBvcnQgPSBudWxsO1xuICB0aGlzLmhvc3RuYW1lID0gbnVsbDtcbiAgdGhpcy5oYXNoID0gbnVsbDtcbiAgdGhpcy5zZWFyY2ggPSBudWxsO1xuICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgdGhpcy5wYXRobmFtZSA9IG51bGw7XG4gIHRoaXMucGF0aCA9IG51bGw7XG4gIHRoaXMuaHJlZiA9IG51bGw7XG59XG5cbi8vIFJlZmVyZW5jZTogUkZDIDM5ODYsIFJGQyAxODA4LCBSRkMgMjM5NlxuXG4vLyBkZWZpbmUgdGhlc2UgaGVyZSBzbyBhdCBsZWFzdCB0aGV5IG9ubHkgaGF2ZSB0byBiZVxuLy8gY29tcGlsZWQgb25jZSBvbiB0aGUgZmlyc3QgbW9kdWxlIGxvYWQuXG52YXIgcHJvdG9jb2xQYXR0ZXJuID0gL14oW2EtejAtOS4rLV0rOikvaSxcbiAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gIC8vIFNwZWNpYWwgY2FzZSBmb3IgYSBzaW1wbGUgcGF0aCBVUkxcbiAgc2ltcGxlUGF0aFBhdHRlcm4gPSAvXihcXC9cXC8/KD8hXFwvKVteXFw/XFxzXSopKFxcP1teXFxzXSopPyQvLFxuXG4gIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuXG4gIC8vIFdlIGFjdHVhbGx5IGp1c3QgYXV0by1lc2NhcGUgdGhlc2UuXG4gIGRlbGltcyA9IFsnPCcsICc+JywgJ1wiJywgJ2AnLCAnICcsICdcXHInLCAnXFxuJywgJ1xcdCddLFxuXG4gIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuXG4gIHVud2lzZSA9IFsneycsICd9JywgJ3wnLCAnXFxcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSxcblxuICAvLyBBbGxvd2VkIGJ5IFJGQ3MsIGJ1dCBjYXVzZSBvZiBYU1MgYXR0YWNrcy4gIEFsd2F5cyBlc2NhcGUgdGhlc2UuXG4gIGF1dG9Fc2NhcGUgPSBbJ1xcJyddLmNvbmNhdCh1bndpc2UpLFxuICAvLyBDaGFyYWN0ZXJzIHRoYXQgYXJlIG5ldmVyIGV2ZXIgYWxsb3dlZCBpbiBhIGhvc3RuYW1lLlxuICAvLyBOb3RlIHRoYXQgYW55IGludmFsaWQgY2hhcnMgYXJlIGFsc28gaGFuZGxlZCwgYnV0IHRoZXNlXG4gIC8vIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aFxuICAvLyB0aGVtLlxuICBub25Ib3N0Q2hhcnMgPSBbJyUnLCAnLycsICc/JywgJzsnLCAnIyddLmNvbmNhdChhdXRvRXNjYXBlKSxcbiAgaG9zdEVuZGluZ0NoYXJzID0gWycvJywgJz8nLCAnIyddLFxuICBob3N0bmFtZU1heExlbiA9IDI1NSxcbiAgaG9zdG5hbWVQYXJ0UGF0dGVybiA9IC9eWythLXowLTlBLVpfLV17MCw2M30kLyxcbiAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sXG4gIC8vIHByb3RvY29scyB0aGF0IGNhbiBhbGxvdyBcInVuc2FmZVwiIGFuZCBcInVud2lzZVwiIGNoYXJzLlxuICB1bnNhZmVQcm90b2NvbCA9IHtcbiAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICB9LFxuICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gIGhvc3RsZXNzUHJvdG9jb2wgPSB7XG4gICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgfSxcbiAgLy8gcHJvdG9jb2xzIHRoYXQgYWx3YXlzIGNvbnRhaW4gYSAvLyBiaXQuXG4gIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICAnaHR0cCc6IHRydWUsXG4gICAgJ2h0dHBzJzogdHJ1ZSxcbiAgICAnZnRwJzogdHJ1ZSxcbiAgICAnZ29waGVyJzogdHJ1ZSxcbiAgICAnZmlsZSc6IHRydWUsXG4gICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAnaHR0cHM6JzogdHJ1ZSxcbiAgICAnZnRwOic6IHRydWUsXG4gICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICdmaWxlOic6IHRydWVcbiAgfTtcblxuZnVuY3Rpb24gdXJsUGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAodXJsICYmIGlzT2JqZWN0KHVybCkgJiYgdXJsIGluc3RhbmNlb2YgVXJsKSByZXR1cm4gdXJsO1xuXG4gIHZhciB1ID0gbmV3IFVybDtcbiAgdS5wYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KTtcbiAgcmV0dXJuIHU7XG59XG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICByZXR1cm4gcGFyc2UodGhpcywgdXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKHNlbGYsIHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKCFpc1N0cmluZyh1cmwpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGFyYW1ldGVyIFxcJ3VybFxcJyBtdXN0IGJlIGEgc3RyaW5nLCBub3QgJyArIHR5cGVvZiB1cmwpO1xuICB9XG5cbiAgLy8gQ29weSBjaHJvbWUsIElFLCBvcGVyYSBiYWNrc2xhc2gtaGFuZGxpbmcgYmVoYXZpb3IuXG4gIC8vIEJhY2sgc2xhc2hlcyBiZWZvcmUgdGhlIHF1ZXJ5IHN0cmluZyBnZXQgY29udmVydGVkIHRvIGZvcndhcmQgc2xhc2hlc1xuICAvLyBTZWU6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yNTkxNlxuICB2YXIgcXVlcnlJbmRleCA9IHVybC5pbmRleE9mKCc/JyksXG4gICAgc3BsaXR0ZXIgPVxuICAgIChxdWVyeUluZGV4ICE9PSAtMSAmJiBxdWVyeUluZGV4IDwgdXJsLmluZGV4T2YoJyMnKSkgPyAnPycgOiAnIycsXG4gICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSxcbiAgICBzbGFzaFJlZ2V4ID0gL1xcXFwvZztcbiAgdVNwbGl0WzBdID0gdVNwbGl0WzBdLnJlcGxhY2Uoc2xhc2hSZWdleCwgJy8nKTtcbiAgdXJsID0gdVNwbGl0LmpvaW4oc3BsaXR0ZXIpO1xuXG4gIHZhciByZXN0ID0gdXJsO1xuXG4gIC8vIHRyaW0gYmVmb3JlIHByb2NlZWRpbmcuXG4gIC8vIFRoaXMgaXMgdG8gc3VwcG9ydCBwYXJzZSBzdHVmZiBsaWtlIFwiICBodHRwOi8vZm9vLmNvbSAgXFxuXCJcbiAgcmVzdCA9IHJlc3QudHJpbSgpO1xuXG4gIGlmICghc2xhc2hlc0Rlbm90ZUhvc3QgJiYgdXJsLnNwbGl0KCcjJykubGVuZ3RoID09PSAxKSB7XG4gICAgLy8gVHJ5IGZhc3QgcGF0aCByZWdleHBcbiAgICB2YXIgc2ltcGxlUGF0aCA9IHNpbXBsZVBhdGhQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gICAgaWYgKHNpbXBsZVBhdGgpIHtcbiAgICAgIHNlbGYucGF0aCA9IHJlc3Q7XG4gICAgICBzZWxmLmhyZWYgPSByZXN0O1xuICAgICAgc2VsZi5wYXRobmFtZSA9IHNpbXBsZVBhdGhbMV07XG4gICAgICBpZiAoc2ltcGxlUGF0aFsyXSkge1xuICAgICAgICBzZWxmLnNlYXJjaCA9IHNpbXBsZVBhdGhbMl07XG4gICAgICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgc2VsZi5xdWVyeSA9IHFzUGFyc2Uoc2VsZi5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnF1ZXJ5ID0gc2VsZi5zZWFyY2guc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgc2VsZi5zZWFyY2ggPSAnJztcbiAgICAgICAgc2VsZi5xdWVyeSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHNlbGYucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICBzZWxmLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuICB2YXIgaSwgaGVjLCBsLCBwO1xuICBpZiAoIWhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dICYmXG4gICAgKHNsYXNoZXMgfHwgKHByb3RvICYmICFzbGFzaGVkUHJvdG9jb2xbcHJvdG9dKSkpIHtcblxuICAgIC8vIHRoZXJlJ3MgYSBob3N0bmFtZS5cbiAgICAvLyB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgLywgPywgOywgb3IgIyBlbmRzIHRoZSBob3N0LlxuICAgIC8vXG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gQCBpbiB0aGUgaG9zdG5hbWUsIHRoZW4gbm9uLWhvc3QgY2hhcnMgKmFyZSogYWxsb3dlZFxuICAgIC8vIHRvIHRoZSBsZWZ0IG9mIHRoZSBsYXN0IEAgc2lnbiwgdW5sZXNzIHNvbWUgaG9zdC1lbmRpbmcgY2hhcmFjdGVyXG4gICAgLy8gY29tZXMgKmJlZm9yZSogdGhlIEAtc2lnbi5cbiAgICAvLyBVUkxzIGFyZSBvYm5veGlvdXMuXG4gICAgLy9cbiAgICAvLyBleDpcbiAgICAvLyBodHRwOi8vYUBiQGMvID0+IHVzZXI6YUBiIGhvc3Q6Y1xuICAgIC8vIGh0dHA6Ly9hQGI/QGMgPT4gdXNlcjphIGhvc3Q6YyBwYXRoOi8/QGNcblxuICAgIC8vIHYwLjEyIFRPRE8oaXNhYWNzKTogVGhpcyBpcyBub3QgcXVpdGUgaG93IENocm9tZSBkb2VzIHRoaW5ncy5cbiAgICAvLyBSZXZpZXcgb3VyIHRlc3QgY2FzZSBhZ2FpbnN0IGJyb3dzZXJzIG1vcmUgY29tcHJlaGVuc2l2ZWx5LlxuXG4gICAgLy8gZmluZCB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYW55IGhvc3RFbmRpbmdDaGFyc1xuICAgIHZhciBob3N0RW5kID0gLTE7XG4gICAgZm9yIChpID0gMDsgaSA8IGhvc3RFbmRpbmdDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgc2VsZi5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yIChpID0gMDsgaSA8IG5vbkhvc3RDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgaGVjID0gcmVzdC5pbmRleE9mKG5vbkhvc3RDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuICAgIC8vIGlmIHdlIHN0aWxsIGhhdmUgbm90IGhpdCBpdCwgdGhlbiB0aGUgZW50aXJlIHRoaW5nIGlzIGEgaG9zdC5cbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpXG4gICAgICBob3N0RW5kID0gcmVzdC5sZW5ndGg7XG5cbiAgICBzZWxmLmhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKGhvc3RFbmQpO1xuXG4gICAgLy8gcHVsbCBvdXQgcG9ydC5cbiAgICBwYXJzZUhvc3Qoc2VsZik7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgc2VsZi5ob3N0bmFtZSA9IHNlbGYuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSBzZWxmLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgIHNlbGYuaG9zdG5hbWVbc2VsZi5ob3N0bmFtZS5sZW5ndGggLSAxXSA9PT0gJ10nO1xuXG4gICAgLy8gdmFsaWRhdGUgYSBsaXR0bGUuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHZhciBob3N0cGFydHMgPSBzZWxmLmhvc3RuYW1lLnNwbGl0KC9cXC4vKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHNlbGYuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHNlbGYuaG9zdG5hbWUgPSBzZWxmLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiBcImRvbWFpblwiLlxuICAgICAgLy8gSXQgb25seSBjb252ZXJ0cyBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgdGhhdFxuICAgICAgLy8gaGF2ZSBub24tQVNDSUkgY2hhcmFjdGVycywgaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZlxuICAgICAgLy8geW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS5cbiAgICAgIHNlbGYuaG9zdG5hbWUgPSB0b0FTQ0lJKHNlbGYuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHAgPSBzZWxmLnBvcnQgPyAnOicgKyBzZWxmLnBvcnQgOiAnJztcbiAgICB2YXIgaCA9IHNlbGYuaG9zdG5hbWUgfHwgJyc7XG4gICAgc2VsZi5ob3N0ID0gaCArIHA7XG4gICAgc2VsZi5ocmVmICs9IHNlbGYuaG9zdDtcblxuICAgIC8vIHN0cmlwIFsgYW5kIF0gZnJvbSB0aGUgaG9zdG5hbWVcbiAgICAvLyB0aGUgaG9zdCBmaWVsZCBzdGlsbCByZXRhaW5zIHRoZW0sIHRob3VnaFxuICAgIGlmIChpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHNlbGYuaG9zdG5hbWUgPSBzZWxmLmhvc3RuYW1lLnN1YnN0cigxLCBzZWxmLmhvc3RuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgaWYgKHJlc3RbMF0gIT09ICcvJykge1xuICAgICAgICByZXN0ID0gJy8nICsgcmVzdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBub3cgcmVzdCBpcyBzZXQgdG8gdGhlIHBvc3QtaG9zdCBzdHVmZi5cbiAgLy8gY2hvcCBvZmYgYW55IGRlbGltIGNoYXJzLlxuICBpZiAoIXVuc2FmZVByb3RvY29sW2xvd2VyUHJvdG9dKSB7XG5cbiAgICAvLyBGaXJzdCwgbWFrZSAxMDAlIHN1cmUgdGhhdCBhbnkgXCJhdXRvRXNjYXBlXCIgY2hhcnMgZ2V0XG4gICAgLy8gZXNjYXBlZCwgZXZlbiBpZiBlbmNvZGVVUklDb21wb25lbnQgZG9lc24ndCB0aGluayB0aGV5XG4gICAgLy8gbmVlZCB0byBiZS5cbiAgICBmb3IgKGkgPSAwLCBsID0gYXV0b0VzY2FwZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhZSA9IGF1dG9Fc2NhcGVbaV07XG4gICAgICBpZiAocmVzdC5pbmRleE9mKGFlKSA9PT0gLTEpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgdmFyIGVzYyA9IGVuY29kZVVSSUNvbXBvbmVudChhZSk7XG4gICAgICBpZiAoZXNjID09PSBhZSkge1xuICAgICAgICBlc2MgPSBlc2NhcGUoYWUpO1xuICAgICAgfVxuICAgICAgcmVzdCA9IHJlc3Quc3BsaXQoYWUpLmpvaW4oZXNjKTtcbiAgICB9XG4gIH1cblxuXG4gIC8vIGNob3Agb2ZmIGZyb20gdGhlIHRhaWwgZmlyc3QuXG4gIHZhciBoYXNoID0gcmVzdC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoICE9PSAtMSkge1xuICAgIC8vIGdvdCBhIGZyYWdtZW50IHN0cmluZy5cbiAgICBzZWxmLmhhc2ggPSByZXN0LnN1YnN0cihoYXNoKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBoYXNoKTtcbiAgfVxuICB2YXIgcW0gPSByZXN0LmluZGV4T2YoJz8nKTtcbiAgaWYgKHFtICE9PSAtMSkge1xuICAgIHNlbGYuc2VhcmNoID0gcmVzdC5zdWJzdHIocW0pO1xuICAgIHNlbGYucXVlcnkgPSByZXN0LnN1YnN0cihxbSArIDEpO1xuICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICBzZWxmLnF1ZXJ5ID0gcXNQYXJzZShzZWxmLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHNlbGYuc2VhcmNoID0gJyc7XG4gICAgc2VsZi5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSBzZWxmLnBhdGhuYW1lID0gcmVzdDtcbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgIHNlbGYuaG9zdG5hbWUgJiYgIXNlbGYucGF0aG5hbWUpIHtcbiAgICBzZWxmLnBhdGhuYW1lID0gJy8nO1xuICB9XG5cbiAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICBpZiAoc2VsZi5wYXRobmFtZSB8fCBzZWxmLnNlYXJjaCkge1xuICAgIHAgPSBzZWxmLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gc2VsZi5zZWFyY2ggfHwgJyc7XG4gICAgc2VsZi5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgc2VsZi5ocmVmID0gZm9ybWF0KHNlbGYpO1xuICByZXR1cm4gc2VsZjtcbn1cblxuLy8gZm9ybWF0IGEgcGFyc2VkIG9iamVjdCBpbnRvIGEgdXJsIHN0cmluZ1xuZnVuY3Rpb24gdXJsRm9ybWF0KG9iaikge1xuICAvLyBlbnN1cmUgaXQncyBhbiBvYmplY3QsIGFuZCBub3QgYSBzdHJpbmcgdXJsLlxuICAvLyBJZiBpdCdzIGFuIG9iaiwgdGhpcyBpcyBhIG5vLW9wLlxuICAvLyB0aGlzIHdheSwgeW91IGNhbiBjYWxsIHVybF9mb3JtYXQoKSBvbiBzdHJpbmdzXG4gIC8vIHRvIGNsZWFuIHVwIHBvdGVudGlhbGx5IHdvbmt5IHVybHMuXG4gIGlmIChpc1N0cmluZyhvYmopKSBvYmogPSBwYXJzZSh7fSwgb2JqKTtcbiAgcmV0dXJuIGZvcm1hdChvYmopO1xufVxuXG5mdW5jdGlvbiBmb3JtYXQoc2VsZikge1xuICB2YXIgYXV0aCA9IHNlbGYuYXV0aCB8fCAnJztcbiAgaWYgKGF1dGgpIHtcbiAgICBhdXRoID0gZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIGF1dGggPSBhdXRoLnJlcGxhY2UoLyUzQS9pLCAnOicpO1xuICAgIGF1dGggKz0gJ0AnO1xuICB9XG5cbiAgdmFyIHByb3RvY29sID0gc2VsZi5wcm90b2NvbCB8fCAnJyxcbiAgICBwYXRobmFtZSA9IHNlbGYucGF0aG5hbWUgfHwgJycsXG4gICAgaGFzaCA9IHNlbGYuaGFzaCB8fCAnJyxcbiAgICBob3N0ID0gZmFsc2UsXG4gICAgcXVlcnkgPSAnJztcblxuICBpZiAoc2VsZi5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyBzZWxmLmhvc3Q7XG4gIH0gZWxzZSBpZiAoc2VsZi5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHNlbGYuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICBzZWxmLmhvc3RuYW1lIDpcbiAgICAgICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScpO1xuICAgIGlmIChzZWxmLnBvcnQpIHtcbiAgICAgIGhvc3QgKz0gJzonICsgc2VsZi5wb3J0O1xuICAgIH1cbiAgfVxuXG4gIGlmIChzZWxmLnF1ZXJ5ICYmXG4gICAgaXNPYmplY3Qoc2VsZi5xdWVyeSkgJiZcbiAgICBPYmplY3Qua2V5cyhzZWxmLnF1ZXJ5KS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9IHFzU3RyaW5naWZ5KHNlbGYucXVlcnkpO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHNlbGYuc2VhcmNoIHx8IChxdWVyeSAmJiAoJz8nICsgcXVlcnkpKSB8fCAnJztcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7XG5cbiAgLy8gb25seSB0aGUgc2xhc2hlZFByb3RvY29scyBnZXQgdGhlIC8vLiAgTm90IG1haWx0bzosIHhtcHA6LCBldGMuXG4gIC8vIHVubGVzcyB0aGV5IGhhZCB0aGVtIHRvIGJlZ2luIHdpdGguXG4gIGlmIChzZWxmLnNsYXNoZXMgfHxcbiAgICAoIXByb3RvY29sIHx8IHNsYXNoZWRQcm90b2NvbFtwcm90b2NvbF0pICYmIGhvc3QgIT09IGZhbHNlKSB7XG4gICAgaG9zdCA9ICcvLycgKyAoaG9zdCB8fCAnJyk7XG4gICAgaWYgKHBhdGhuYW1lICYmIHBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSBwYXRobmFtZSA9ICcvJyArIHBhdGhuYW1lO1xuICB9IGVsc2UgaWYgKCFob3N0KSB7XG4gICAgaG9zdCA9ICcnO1xuICB9XG5cbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgaGFzaCA9ICcjJyArIGhhc2g7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBzZWFyY2ggPSAnPycgKyBzZWFyY2g7XG5cbiAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7XG4gIH0pO1xuICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZSgnIycsICclMjMnKTtcblxuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xufVxuXG5VcmwucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZm9ybWF0KHRoaXMpO1xufVxuXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmUocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICByZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KHVybFBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSkpLmZvcm1hdCgpO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZU9iamVjdChzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIGlmICghc291cmNlKSByZXR1cm4gcmVsYXRpdmU7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlT2JqZWN0KHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0ID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgaWYgKGlzU3RyaW5nKHJlbGF0aXZlKSkge1xuICAgIHZhciByZWwgPSBuZXcgVXJsKCk7XG4gICAgcmVsLnBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgcmVsYXRpdmUgPSByZWw7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gbmV3IFVybCgpO1xuICB2YXIgdGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgZm9yICh2YXIgdGsgPSAwOyB0ayA8IHRrZXlzLmxlbmd0aDsgdGsrKykge1xuICAgIHZhciB0a2V5ID0gdGtleXNbdGtdO1xuICAgIHJlc3VsdFt0a2V5XSA9IHRoaXNbdGtleV07XG4gIH1cblxuICAvLyBoYXNoIGlzIGFsd2F5cyBvdmVycmlkZGVuLCBubyBtYXR0ZXIgd2hhdC5cbiAgLy8gZXZlbiBocmVmPVwiXCIgd2lsbCByZW1vdmUgaXQuXG4gIHJlc3VsdC5oYXNoID0gcmVsYXRpdmUuaGFzaDtcblxuICAvLyBpZiB0aGUgcmVsYXRpdmUgdXJsIGlzIGVtcHR5LCB0aGVuIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIGRvIGhlcmUuXG4gIGlmIChyZWxhdGl2ZS5ocmVmID09PSAnJykge1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBocmVmcyBsaWtlIC8vZm9vL2JhciBhbHdheXMgY3V0IHRvIHRoZSBwcm90b2NvbC5cbiAgaWYgKHJlbGF0aXZlLnNsYXNoZXMgJiYgIXJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgLy8gdGFrZSBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgcHJvdG9jb2wgZnJvbSByZWxhdGl2ZVxuICAgIHZhciBya2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICBmb3IgKHZhciByayA9IDA7IHJrIDwgcmtleXMubGVuZ3RoOyByaysrKSB7XG4gICAgICB2YXIgcmtleSA9IHJrZXlzW3JrXTtcbiAgICAgIGlmIChya2V5ICE9PSAncHJvdG9jb2wnKVxuICAgICAgICByZXN1bHRbcmtleV0gPSByZWxhdGl2ZVtya2V5XTtcbiAgICB9XG5cbiAgICAvL3VybFBhcnNlIGFwcGVuZHMgdHJhaWxpbmcgLyB0byB1cmxzIGxpa2UgaHR0cDovL3d3dy5leGFtcGxlLmNvbVxuICAgIGlmIChzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXSAmJlxuICAgICAgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGhuYW1lID0gJy8nO1xuICAgIH1cblxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgdmFyIHJlbFBhdGg7XG4gIGlmIChyZWxhdGl2ZS5wcm90b2NvbCAmJiByZWxhdGl2ZS5wcm90b2NvbCAhPT0gcmVzdWx0LnByb3RvY29sKSB7XG4gICAgLy8gaWYgaXQncyBhIGtub3duIHVybCBwcm90b2NvbCwgdGhlbiBjaGFuZ2luZ1xuICAgIC8vIHRoZSBwcm90b2NvbCBkb2VzIHdlaXJkIHRoaW5nc1xuICAgIC8vIGZpcnN0LCBpZiBpdCdzIG5vdCBmaWxlOiwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBob3N0LFxuICAgIC8vIGFuZCBpZiB0aGVyZSB3YXMgYSBwYXRoXG4gICAgLy8gdG8gYmVnaW4gd2l0aCwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBwYXRoLlxuICAgIC8vIGlmIGl0IGlzIGZpbGU6LCB0aGVuIHRoZSBob3N0IGlzIGRyb3BwZWQsXG4gICAgLy8gYmVjYXVzZSB0aGF0J3Mga25vd24gdG8gYmUgaG9zdGxlc3MuXG4gICAgLy8gYW55dGhpbmcgZWxzZSBpcyBhc3N1bWVkIHRvIGJlIGFic29sdXRlLlxuICAgIGlmICghc2xhc2hlZFByb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICAgICAgdmFyIGsgPSBrZXlzW3ZdO1xuICAgICAgICByZXN1bHRba10gPSByZWxhdGl2ZVtrXTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXN1bHQucHJvdG9jb2wgPSByZWxhdGl2ZS5wcm90b2NvbDtcbiAgICBpZiAoIXJlbGF0aXZlLmhvc3QgJiYgIWhvc3RsZXNzUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICByZWxQYXRoID0gKHJlbGF0aXZlLnBhdGhuYW1lIHx8ICcnKS5zcGxpdCgnLycpO1xuICAgICAgd2hpbGUgKHJlbFBhdGgubGVuZ3RoICYmICEocmVsYXRpdmUuaG9zdCA9IHJlbFBhdGguc2hpZnQoKSkpO1xuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0KSByZWxhdGl2ZS5ob3N0ID0gJyc7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3RuYW1lKSByZWxhdGl2ZS5ob3N0bmFtZSA9ICcnO1xuICAgICAgaWYgKHJlbFBhdGhbMF0gIT09ICcnKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgaWYgKHJlbFBhdGgubGVuZ3RoIDwgMikgcmVsUGF0aC51bnNoaWZ0KCcnKTtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbFBhdGguam9pbignLycpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxhdGl2ZS5wYXRobmFtZTtcbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICByZXN1bHQuaG9zdCA9IHJlbGF0aXZlLmhvc3QgfHwgJyc7XG4gICAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoO1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3Q7XG4gICAgcmVzdWx0LnBvcnQgPSByZWxhdGl2ZS5wb3J0O1xuICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5wYXRobmFtZSB8fCByZXN1bHQuc2VhcmNoKSB7XG4gICAgICB2YXIgcCA9IHJlc3VsdC5wYXRobmFtZSB8fCAnJztcbiAgICAgIHZhciBzID0gcmVzdWx0LnNlYXJjaCB8fCAnJztcbiAgICAgIHJlc3VsdC5wYXRoID0gcCArIHM7XG4gICAgfVxuICAgIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIGlzU291cmNlQWJzID0gKHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpLFxuICAgIGlzUmVsQWJzID0gKFxuICAgICAgcmVsYXRpdmUuaG9zdCB8fFxuICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICApLFxuICAgIG11c3RFbmRBYnMgPSAoaXNSZWxBYnMgfHwgaXNTb3VyY2VBYnMgfHxcbiAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgIHJlbW92ZUFsbERvdHMgPSBtdXN0RW5kQWJzLFxuICAgIHNyY1BhdGggPSByZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgcHN5Y2hvdGljID0gcmVzdWx0LnByb3RvY29sICYmICFzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXTtcbiAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW107XG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cbiAgdmFyIGF1dGhJbkhvc3Q7XG4gIGlmIChpc1JlbEFicykge1xuICAgIC8vIGl0J3MgYWJzb2x1dGUuXG4gICAgcmVzdWx0Lmhvc3QgPSAocmVsYXRpdmUuaG9zdCB8fCByZWxhdGl2ZS5ob3N0ID09PSAnJykgP1xuICAgICAgcmVsYXRpdmUuaG9zdCA6IHJlc3VsdC5ob3N0O1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IChyZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0bmFtZSA9PT0gJycpID9cbiAgICAgIHJlbGF0aXZlLmhvc3RuYW1lIDogcmVzdWx0Lmhvc3RuYW1lO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgc3JjUGF0aCA9IHJlbFBhdGg7XG4gICAgLy8gZmFsbCB0aHJvdWdoIHRvIHRoZSBkb3QtaGFuZGxpbmcgYmVsb3cuXG4gIH0gZWxzZSBpZiAocmVsUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBpdCdzIHJlbGF0aXZlXG4gICAgLy8gdGhyb3cgYXdheSB0aGUgZXhpc3RpbmcgZmlsZSwgYW5kIHRha2UgdGhlIG5ldyBwYXRoIGluc3RlYWQuXG4gICAgaWYgKCFzcmNQYXRoKSBzcmNQYXRoID0gW107XG4gICAgc3JjUGF0aC5wb3AoKTtcbiAgICBzcmNQYXRoID0gc3JjUGF0aC5jb25jYXQocmVsUGF0aCk7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgfSBlbHNlIGlmICghaXNOdWxsT3JVbmRlZmluZWQocmVsYXRpdmUuc2VhcmNoKSkge1xuICAgIC8vIGp1c3QgcHVsbCBvdXQgdGhlIHNlYXJjaC5cbiAgICAvLyBsaWtlIGhyZWY9Jz9mb28nLlxuICAgIC8vIFB1dCB0aGlzIGFmdGVyIHRoZSBvdGhlciB0d28gY2FzZXMgYmVjYXVzZSBpdCBzaW1wbGlmaWVzIHRoZSBib29sZWFuc1xuICAgIGlmIChwc3ljaG90aWMpIHtcbiAgICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gc3JjUGF0aC5zaGlmdCgpO1xuICAgICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgICAgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmICghaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIWlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoXG4gICAgKHJlc3VsdC5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgfHwgc3JjUGF0aC5sZW5ndGggPiAxKSAmJlxuICAgIChsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJykgfHwgbGFzdCA9PT0gJycpO1xuXG4gIC8vIHN0cmlwIHNpbmdsZSBkb3RzLCByZXNvbHZlIGRvdWJsZSBkb3RzIHRvIHBhcmVudCBkaXJcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHNyY1BhdGgubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIGxhc3QgPSBzcmNQYXRoW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmICghbXVzdEVuZEFicyAmJiAhcmVtb3ZlQWxsRG90cykge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgc3JjUGF0aC51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtdXN0RW5kQWJzICYmIHNyY1BhdGhbMF0gIT09ICcnICYmXG4gICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAoc3JjUGF0aFswXSAmJiBzcmNQYXRoWzBdLmNoYXJBdCgwKSA9PT0gJy8nKTtcblxuICAvLyBwdXQgdGhlIGhvc3QgYmFja1xuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBpc0Fic29sdXRlID8gJycgOlxuICAgICAgc3JjUGF0aC5sZW5ndGggPyBzcmNQYXRoLnNoaWZ0KCkgOiAnJztcbiAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmICghaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIWlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArXG4gICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gIH1cbiAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoIHx8IHJlc3VsdC5hdXRoO1xuICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuVXJsLnByb3RvdHlwZS5wYXJzZUhvc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHBhcnNlSG9zdCh0aGlzKTtcbn07XG5cbmZ1bmN0aW9uIHBhcnNlSG9zdChzZWxmKSB7XG4gIHZhciBob3N0ID0gc2VsZi5ob3N0O1xuICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7XG4gIGlmIChwb3J0KSB7XG4gICAgcG9ydCA9IHBvcnRbMF07XG4gICAgaWYgKHBvcnQgIT09ICc6Jykge1xuICAgICAgc2VsZi5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTtcbiAgfVxuICBpZiAoaG9zdCkgc2VsZi5ob3N0bmFtZSA9IGhvc3Q7XG59XG4iLCIvKlxudGhpcyBhbmQgaHR0cC1saWIgZm9sZGVyXG5cblRoZSBNSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMTUgSm9obiBIaWVzZXlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsXG50byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmRcbmFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvXG5kZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxubWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbVxudGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbnN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZVxuc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG5FWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVNcbk9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbklOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1JcbkFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcblNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4qL1xuaW1wb3J0IENsaWVudFJlcXVlc3QgZnJvbSAnLi9odHRwLWxpYi9yZXF1ZXN0JztcbmltcG9ydCB7cGFyc2V9IGZyb20gJ3VybCc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXF1ZXN0KG9wdHMsIGNiKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpXG4gICAgb3B0cyA9IHBhcnNlKG9wdHMpXG5cblxuICAvLyBOb3JtYWxseSwgdGhlIHBhZ2UgaXMgbG9hZGVkIGZyb20gaHR0cCBvciBodHRwcywgc28gbm90IHNwZWNpZnlpbmcgYSBwcm90b2NvbFxuICAvLyB3aWxsIHJlc3VsdCBpbiBhICh2YWxpZCkgcHJvdG9jb2wtcmVsYXRpdmUgdXJsLiBIb3dldmVyLCB0aGlzIHdvbid0IHdvcmsgaWZcbiAgLy8gdGhlIHByb3RvY29sIGlzIHNvbWV0aGluZyBlbHNlLCBsaWtlICdmaWxlOidcbiAgdmFyIGRlZmF1bHRQcm90b2NvbCA9IGdsb2JhbC5sb2NhdGlvbi5wcm90b2NvbC5zZWFyY2goL15odHRwcz86JC8pID09PSAtMSA/ICdodHRwOicgOiAnJ1xuXG4gIHZhciBwcm90b2NvbCA9IG9wdHMucHJvdG9jb2wgfHwgZGVmYXVsdFByb3RvY29sXG4gIHZhciBob3N0ID0gb3B0cy5ob3N0bmFtZSB8fCBvcHRzLmhvc3RcbiAgdmFyIHBvcnQgPSBvcHRzLnBvcnRcbiAgdmFyIHBhdGggPSBvcHRzLnBhdGggfHwgJy8nXG5cbiAgLy8gTmVjZXNzYXJ5IGZvciBJUHY2IGFkZHJlc3Nlc1xuICBpZiAoaG9zdCAmJiBob3N0LmluZGV4T2YoJzonKSAhPT0gLTEpXG4gICAgaG9zdCA9ICdbJyArIGhvc3QgKyAnXSdcblxuICAvLyBUaGlzIG1heSBiZSBhIHJlbGF0aXZlIHVybC4gVGhlIGJyb3dzZXIgc2hvdWxkIGFsd2F5cyBiZSBhYmxlIHRvIGludGVycHJldCBpdCBjb3JyZWN0bHkuXG4gIG9wdHMudXJsID0gKGhvc3QgPyAocHJvdG9jb2wgKyAnLy8nICsgaG9zdCkgOiAnJykgKyAocG9ydCA/ICc6JyArIHBvcnQgOiAnJykgKyBwYXRoXG4gIG9wdHMubWV0aG9kID0gKG9wdHMubWV0aG9kIHx8ICdHRVQnKS50b1VwcGVyQ2FzZSgpXG4gIG9wdHMuaGVhZGVycyA9IG9wdHMuaGVhZGVycyB8fCB7fVxuXG4gIC8vIEFsc28gdmFsaWQgb3B0cy5hdXRoLCBvcHRzLm1vZGVcblxuICB2YXIgcmVxID0gbmV3IENsaWVudFJlcXVlc3Qob3B0cylcbiAgaWYgKGNiKVxuICAgIHJlcS5vbigncmVzcG9uc2UnLCBjYilcbiAgcmV0dXJuIHJlcVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KG9wdHMsIGNiKSB7XG4gIHZhciByZXEgPSByZXF1ZXN0KG9wdHMsIGNiKVxuICByZXEuZW5kKClcbiAgcmV0dXJuIHJlcVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQWdlbnQoKSB7fVxuQWdlbnQuZGVmYXVsdE1heFNvY2tldHMgPSA0XG5cbmV4cG9ydCB2YXIgTUVUSE9EUyA9IFtcbiAgJ0NIRUNLT1VUJyxcbiAgJ0NPTk5FQ1QnLFxuICAnQ09QWScsXG4gICdERUxFVEUnLFxuICAnR0VUJyxcbiAgJ0hFQUQnLFxuICAnTE9DSycsXG4gICdNLVNFQVJDSCcsXG4gICdNRVJHRScsXG4gICdNS0FDVElWSVRZJyxcbiAgJ01LQ09MJyxcbiAgJ01PVkUnLFxuICAnTk9USUZZJyxcbiAgJ09QVElPTlMnLFxuICAnUEFUQ0gnLFxuICAnUE9TVCcsXG4gICdQUk9QRklORCcsXG4gICdQUk9QUEFUQ0gnLFxuICAnUFVSR0UnLFxuICAnUFVUJyxcbiAgJ1JFUE9SVCcsXG4gICdTRUFSQ0gnLFxuICAnU1VCU0NSSUJFJyxcbiAgJ1RSQUNFJyxcbiAgJ1VOTE9DSycsXG4gICdVTlNVQlNDUklCRSdcbl1cbmV4cG9ydCB2YXIgU1RBVFVTX0NPREVTID0ge1xuICAxMDA6ICdDb250aW51ZScsXG4gIDEwMTogJ1N3aXRjaGluZyBQcm90b2NvbHMnLFxuICAxMDI6ICdQcm9jZXNzaW5nJywgLy8gUkZDIDI1MTgsIG9ic29sZXRlZCBieSBSRkMgNDkxOFxuICAyMDA6ICdPSycsXG4gIDIwMTogJ0NyZWF0ZWQnLFxuICAyMDI6ICdBY2NlcHRlZCcsXG4gIDIwMzogJ05vbi1BdXRob3JpdGF0aXZlIEluZm9ybWF0aW9uJyxcbiAgMjA0OiAnTm8gQ29udGVudCcsXG4gIDIwNTogJ1Jlc2V0IENvbnRlbnQnLFxuICAyMDY6ICdQYXJ0aWFsIENvbnRlbnQnLFxuICAyMDc6ICdNdWx0aS1TdGF0dXMnLCAvLyBSRkMgNDkxOFxuICAzMDA6ICdNdWx0aXBsZSBDaG9pY2VzJyxcbiAgMzAxOiAnTW92ZWQgUGVybWFuZW50bHknLFxuICAzMDI6ICdNb3ZlZCBUZW1wb3JhcmlseScsXG4gIDMwMzogJ1NlZSBPdGhlcicsXG4gIDMwNDogJ05vdCBNb2RpZmllZCcsXG4gIDMwNTogJ1VzZSBQcm94eScsXG4gIDMwNzogJ1RlbXBvcmFyeSBSZWRpcmVjdCcsXG4gIDQwMDogJ0JhZCBSZXF1ZXN0JyxcbiAgNDAxOiAnVW5hdXRob3JpemVkJyxcbiAgNDAyOiAnUGF5bWVudCBSZXF1aXJlZCcsXG4gIDQwMzogJ0ZvcmJpZGRlbicsXG4gIDQwNDogJ05vdCBGb3VuZCcsXG4gIDQwNTogJ01ldGhvZCBOb3QgQWxsb3dlZCcsXG4gIDQwNjogJ05vdCBBY2NlcHRhYmxlJyxcbiAgNDA3OiAnUHJveHkgQXV0aGVudGljYXRpb24gUmVxdWlyZWQnLFxuICA0MDg6ICdSZXF1ZXN0IFRpbWUtb3V0JyxcbiAgNDA5OiAnQ29uZmxpY3QnLFxuICA0MTA6ICdHb25lJyxcbiAgNDExOiAnTGVuZ3RoIFJlcXVpcmVkJyxcbiAgNDEyOiAnUHJlY29uZGl0aW9uIEZhaWxlZCcsXG4gIDQxMzogJ1JlcXVlc3QgRW50aXR5IFRvbyBMYXJnZScsXG4gIDQxNDogJ1JlcXVlc3QtVVJJIFRvbyBMYXJnZScsXG4gIDQxNTogJ1Vuc3VwcG9ydGVkIE1lZGlhIFR5cGUnLFxuICA0MTY6ICdSZXF1ZXN0ZWQgUmFuZ2UgTm90IFNhdGlzZmlhYmxlJyxcbiAgNDE3OiAnRXhwZWN0YXRpb24gRmFpbGVkJyxcbiAgNDE4OiAnSVxcJ20gYSB0ZWFwb3QnLCAvLyBSRkMgMjMyNFxuICA0MjI6ICdVbnByb2Nlc3NhYmxlIEVudGl0eScsIC8vIFJGQyA0OTE4XG4gIDQyMzogJ0xvY2tlZCcsIC8vIFJGQyA0OTE4XG4gIDQyNDogJ0ZhaWxlZCBEZXBlbmRlbmN5JywgLy8gUkZDIDQ5MThcbiAgNDI1OiAnVW5vcmRlcmVkIENvbGxlY3Rpb24nLCAvLyBSRkMgNDkxOFxuICA0MjY6ICdVcGdyYWRlIFJlcXVpcmVkJywgLy8gUkZDIDI4MTdcbiAgNDI4OiAnUHJlY29uZGl0aW9uIFJlcXVpcmVkJywgLy8gUkZDIDY1ODVcbiAgNDI5OiAnVG9vIE1hbnkgUmVxdWVzdHMnLCAvLyBSRkMgNjU4NVxuICA0MzE6ICdSZXF1ZXN0IEhlYWRlciBGaWVsZHMgVG9vIExhcmdlJywgLy8gUkZDIDY1ODVcbiAgNTAwOiAnSW50ZXJuYWwgU2VydmVyIEVycm9yJyxcbiAgNTAxOiAnTm90IEltcGxlbWVudGVkJyxcbiAgNTAyOiAnQmFkIEdhdGV3YXknLFxuICA1MDM6ICdTZXJ2aWNlIFVuYXZhaWxhYmxlJyxcbiAgNTA0OiAnR2F0ZXdheSBUaW1lLW91dCcsXG4gIDUwNTogJ0hUVFAgVmVyc2lvbiBOb3QgU3VwcG9ydGVkJyxcbiAgNTA2OiAnVmFyaWFudCBBbHNvIE5lZ290aWF0ZXMnLCAvLyBSRkMgMjI5NVxuICA1MDc6ICdJbnN1ZmZpY2llbnQgU3RvcmFnZScsIC8vIFJGQyA0OTE4XG4gIDUwOTogJ0JhbmR3aWR0aCBMaW1pdCBFeGNlZWRlZCcsXG4gIDUxMDogJ05vdCBFeHRlbmRlZCcsIC8vIFJGQyAyNzc0XG4gIDUxMTogJ05ldHdvcmsgQXV0aGVudGljYXRpb24gUmVxdWlyZWQnIC8vIFJGQyA2NTg1XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJlcXVlc3QsXG4gIGdldCxcbiAgQWdlbnQsXG4gIE1FVEhPRFMsXG4gIFNUQVRVU19DT0RFU1xufVxuIiwiXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciB4ID0gYS5sZW5ndGg7XG4gIHZhciB5ID0gYi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV07XG4gICAgICB5ID0gYltpXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoeSA8IHgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChoYXNPd24uY2FsbChvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufTtcbi8vIGJhc2VkIG9uIG5vZGUgYXNzZXJ0LCBvcmlnaW5hbCBub3RpY2U6XG5cbi8vIGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1VuaXRfVGVzdGluZy8xLjBcbi8vXG4vLyBUSElTIElTIE5PVCBURVNURUQgTk9SIExJS0VMWSBUTyBXT1JLIE9VVFNJREUgVjghXG4vL1xuLy8gT3JpZ2luYWxseSBmcm9tIG5hcndoYWwuanMgKGh0dHA6Ly9uYXJ3aGFsanMub3JnKVxuLy8gQ29weXJpZ2h0IChjKSAyMDA5IFRob21hcyBSb2JpbnNvbiA8Mjgwbm9ydGguY29tPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0b1xuLy8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGVcbi8vIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxuLy8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU5cbi8vIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuaW1wb3J0IHtpc0J1ZmZlcn0gZnJvbSAnYnVmZmVyJztcbmltcG9ydCB7aXNQcmltaXRpdmUsIGluaGVyaXRzLCBpc0Vycm9yLCBpc0Z1bmN0aW9uLCBpc1JlZ0V4cCwgaXNEYXRlLCBpbnNwZWN0IGFzIHV0aWxJbnNwZWN0fSBmcm9tICd1dGlsJztcbnZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgX2Z1bmN0aW9uc0hhdmVOYW1lcztcbmZ1bmN0aW9uIGZ1bmN0aW9uc0hhdmVOYW1lcygpIHtcbiAgaWYgKHR5cGVvZiBfZnVuY3Rpb25zSGF2ZU5hbWVzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBfZnVuY3Rpb25zSGF2ZU5hbWVzO1xuICB9XG4gIHJldHVybiBfZnVuY3Rpb25zSGF2ZU5hbWVzID0gKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZm9vKCkge30ubmFtZSA9PT0gJ2Zvbyc7XG4gIH0oKSk7XG59XG5mdW5jdGlvbiBwVG9TdHJpbmcgKG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaik7XG59XG5mdW5jdGlvbiBpc1ZpZXcoYXJyYnVmKSB7XG4gIGlmIChpc0J1ZmZlcihhcnJidWYpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0eXBlb2YgZ2xvYmFsLkFycmF5QnVmZmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyhhcnJidWYpO1xuICB9XG4gIGlmICghYXJyYnVmKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChhcnJidWYgaW5zdGFuY2VvZiBEYXRhVmlldykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChhcnJidWYuYnVmZmVyICYmIGFycmJ1Zi5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbi8vIDEuIFRoZSBhc3NlcnQgbW9kdWxlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0aGF0IHRocm93XG4vLyBBc3NlcnRpb25FcnJvcidzIHdoZW4gcGFydGljdWxhciBjb25kaXRpb25zIGFyZSBub3QgbWV0LiBUaGVcbi8vIGFzc2VydCBtb2R1bGUgbXVzdCBjb25mb3JtIHRvIHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlLlxuXG5mdW5jdGlvbiBhc3NlcnQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKCF2YWx1ZSkgZmFpbCh2YWx1ZSwgdHJ1ZSwgbWVzc2FnZSwgJz09Jywgb2spO1xufVxuZXhwb3J0IGRlZmF1bHQgYXNzZXJ0O1xuXG4vLyAyLiBUaGUgQXNzZXJ0aW9uRXJyb3IgaXMgZGVmaW5lZCBpbiBhc3NlcnQuXG4vLyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHsgbWVzc2FnZTogbWVzc2FnZSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWw6IGFjdHVhbCxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogZXhwZWN0ZWQgfSlcblxudmFyIHJlZ2V4ID0gL1xccypmdW5jdGlvblxccysoW15cXChcXHNdKilcXHMqLztcbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvYmxvYi9hZGVlZWVjOGJmY2M2MDY4YjE4N2Q3ZDlmYjNkNWJiMWQzYTMwODk5L2ltcGxlbWVudGF0aW9uLmpzXG5mdW5jdGlvbiBnZXROYW1lKGZ1bmMpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChmdW5jdGlvbnNIYXZlTmFtZXMoKSkge1xuICAgIHJldHVybiBmdW5jLm5hbWU7XG4gIH1cbiAgdmFyIHN0ciA9IGZ1bmMudG9TdHJpbmcoKTtcbiAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4KTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdO1xufVxuYXNzZXJ0LkFzc2VydGlvbkVycm9yID0gQXNzZXJ0aW9uRXJyb3I7XG5leHBvcnQgZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykge1xuICB0aGlzLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuICB0aGlzLmFjdHVhbCA9IG9wdGlvbnMuYWN0dWFsO1xuICB0aGlzLmV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcbiAgdGhpcy5vcGVyYXRvciA9IG9wdGlvbnMub3BlcmF0b3I7XG4gIGlmIChvcHRpb25zLm1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7XG4gICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5tZXNzYWdlID0gZ2V0TWVzc2FnZSh0aGlzKTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSB0cnVlO1xuICB9XG4gIHZhciBzdGFja1N0YXJ0RnVuY3Rpb24gPSBvcHRpb25zLnN0YWNrU3RhcnRGdW5jdGlvbiB8fCBmYWlsO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBzdGFja1N0YXJ0RnVuY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIG5vbiB2OCBicm93c2VycyBzbyB3ZSBjYW4gaGF2ZSBhIHN0YWNrdHJhY2VcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7XG4gICAgaWYgKGVyci5zdGFjaykge1xuICAgICAgdmFyIG91dCA9IGVyci5zdGFjaztcblxuICAgICAgLy8gdHJ5IHRvIHN0cmlwIHVzZWxlc3MgZnJhbWVzXG4gICAgICB2YXIgZm5fbmFtZSA9IGdldE5hbWUoc3RhY2tTdGFydEZ1bmN0aW9uKTtcbiAgICAgIHZhciBpZHggPSBvdXQuaW5kZXhPZignXFxuJyArIGZuX25hbWUpO1xuICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIC8vIG9uY2Ugd2UgaGF2ZSBsb2NhdGVkIHRoZSBmdW5jdGlvbiBmcmFtZVxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHN0cmlwIG91dCBldmVyeXRoaW5nIGJlZm9yZSBpdCAoYW5kIGl0cyBsaW5lKVxuICAgICAgICB2YXIgbmV4dF9saW5lID0gb3V0LmluZGV4T2YoJ1xcbicsIGlkeCArIDEpO1xuICAgICAgICBvdXQgPSBvdXQuc3Vic3RyaW5nKG5leHRfbGluZSArIDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YWNrID0gb3V0O1xuICAgIH1cbiAgfVxufVxuXG4vLyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IgaW5zdGFuY2VvZiBFcnJvclxuaW5oZXJpdHMoQXNzZXJ0aW9uRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gdHJ1bmNhdGUocywgbikge1xuICBpZiAodHlwZW9mIHMgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoIDwgbiA/IHMgOiBzLnNsaWNlKDAsIG4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59XG5mdW5jdGlvbiBpbnNwZWN0KHNvbWV0aGluZykge1xuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzKCkgfHwgIWlzRnVuY3Rpb24oc29tZXRoaW5nKSkge1xuICAgIHJldHVybiB1dGlsSW5zcGVjdChzb21ldGhpbmcpO1xuICB9XG4gIHZhciByYXduYW1lID0gZ2V0TmFtZShzb21ldGhpbmcpO1xuICB2YXIgbmFtZSA9IHJhd25hbWUgPyAnOiAnICsgcmF3bmFtZSA6ICcnO1xuICByZXR1cm4gJ1tGdW5jdGlvbicgKyAgbmFtZSArICddJztcbn1cbmZ1bmN0aW9uIGdldE1lc3NhZ2Uoc2VsZikge1xuICByZXR1cm4gdHJ1bmNhdGUoaW5zcGVjdChzZWxmLmFjdHVhbCksIDEyOCkgKyAnICcgK1xuICAgICAgICAgc2VsZi5vcGVyYXRvciArICcgJyArXG4gICAgICAgICB0cnVuY2F0ZShpbnNwZWN0KHNlbGYuZXhwZWN0ZWQpLCAxMjgpO1xufVxuXG4vLyBBdCBwcmVzZW50IG9ubHkgdGhlIHRocmVlIGtleXMgbWVudGlvbmVkIGFib3ZlIGFyZSB1c2VkIGFuZFxuLy8gdW5kZXJzdG9vZCBieSB0aGUgc3BlYy4gSW1wbGVtZW50YXRpb25zIG9yIHN1YiBtb2R1bGVzIGNhbiBwYXNzXG4vLyBvdGhlciBrZXlzIHRvIHRoZSBBc3NlcnRpb25FcnJvcidzIGNvbnN0cnVjdG9yIC0gdGhleSB3aWxsIGJlXG4vLyBpZ25vcmVkLlxuXG4vLyAzLiBBbGwgb2YgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgbXVzdCB0aHJvdyBhbiBBc3NlcnRpb25FcnJvclxuLy8gd2hlbiBhIGNvcnJlc3BvbmRpbmcgY29uZGl0aW9uIGlzIG5vdCBtZXQsIHdpdGggYSBtZXNzYWdlIHRoYXRcbi8vIG1heSBiZSB1bmRlZmluZWQgaWYgbm90IHByb3ZpZGVkLiAgQWxsIGFzc2VydGlvbiBtZXRob2RzIHByb3ZpZGVcbi8vIGJvdGggdGhlIGFjdHVhbCBhbmQgZXhwZWN0ZWQgdmFsdWVzIHRvIHRoZSBhc3NlcnRpb24gZXJyb3IgZm9yXG4vLyBkaXNwbGF5IHB1cnBvc2VzLlxuXG5leHBvcnQgZnVuY3Rpb24gZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvciwgc3RhY2tTdGFydEZ1bmN0aW9uKSB7XG4gIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcih7XG4gICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxuICAgIHN0YWNrU3RhcnRGdW5jdGlvbjogc3RhY2tTdGFydEZ1bmN0aW9uXG4gIH0pO1xufVxuXG4vLyBFWFRFTlNJT04hIGFsbG93cyBmb3Igd2VsbCBiZWhhdmVkIGVycm9ycyBkZWZpbmVkIGVsc2V3aGVyZS5cbmFzc2VydC5mYWlsID0gZmFpbDtcblxuLy8gNC4gUHVyZSBhc3NlcnRpb24gdGVzdHMgd2hldGhlciBhIHZhbHVlIGlzIHRydXRoeSwgYXMgZGV0ZXJtaW5lZFxuLy8gYnkgISFndWFyZC5cbi8vIGFzc2VydC5vayhndWFyZCwgbWVzc2FnZV9vcHQpO1xuLy8gVGhpcyBzdGF0ZW1lbnQgaXMgZXF1aXZhbGVudCB0byBhc3NlcnQuZXF1YWwodHJ1ZSwgISFndWFyZCxcbi8vIG1lc3NhZ2Vfb3B0KTsuIFRvIHRlc3Qgc3RyaWN0bHkgZm9yIHRoZSB2YWx1ZSB0cnVlLCB1c2Vcbi8vIGFzc2VydC5zdHJpY3RFcXVhbCh0cnVlLCBndWFyZCwgbWVzc2FnZV9vcHQpOy5cblxuZXhwb3J0IGZ1bmN0aW9uIG9rKHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsdWUpIGZhaWwodmFsdWUsIHRydWUsIG1lc3NhZ2UsICc9PScsIG9rKTtcbn1cbmFzc2VydC5vayA9IG9rO1xuZXhwb3J0IHtvayBhcyBhc3NlcnR9O1xuXG4vLyA1LiBUaGUgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHNoYWxsb3csIGNvZXJjaXZlIGVxdWFsaXR5IHdpdGhcbi8vID09LlxuLy8gYXNzZXJ0LmVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcbmFzc2VydC5lcXVhbCA9IGVxdWFsO1xuZXhwb3J0IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPSBleHBlY3RlZCkgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT0nLCBlcXVhbCk7XG59XG5cbi8vIDYuIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3QgZXF1YWxcbi8vIHdpdGggIT0gYXNzZXJ0Lm5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcbmFzc2VydC5ub3RFcXVhbCA9IG5vdEVxdWFsO1xuZXhwb3J0IGZ1bmN0aW9uIG5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCA9PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9Jywgbm90RXF1YWwpO1xuICB9XG59XG5cbi8vIDcuIFRoZSBlcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgYSBkZWVwIGVxdWFsaXR5IHJlbGF0aW9uLlxuLy8gYXNzZXJ0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5hc3NlcnQuZGVlcEVxdWFsID0gZGVlcEVxdWFsO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmICghX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBmYWxzZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwRXF1YWwnLCBkZWVwRXF1YWwpO1xuICB9XG59XG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsID0gZGVlcFN0cmljdEVxdWFsO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmICghX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCB0cnVlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ2RlZXBTdHJpY3RFcXVhbCcsIGRlZXBTdHJpY3RFcXVhbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBzdHJpY3QsIG1lbW9zKSB7XG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgJiYgaXNCdWZmZXIoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCkgPT09IDA7XG5cbiAgLy8gNy4yLiBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBEYXRlIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBEYXRlIG9iamVjdCB0aGF0IHJlZmVycyB0byB0aGUgc2FtZSB0aW1lLlxuICB9IGVsc2UgaWYgKGlzRGF0ZShhY3R1YWwpICYmIGlzRGF0ZShleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsLmdldFRpbWUoKSA9PT0gZXhwZWN0ZWQuZ2V0VGltZSgpO1xuXG4gIC8vIDcuMyBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCB0aGUgYWN0dWFsIHZhbHVlIGlzXG4gIC8vIGVxdWl2YWxlbnQgaWYgaXQgaXMgYWxzbyBhIFJlZ0V4cCBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzb3VyY2UgYW5kXG4gIC8vIHByb3BlcnRpZXMgKGBnbG9iYWxgLCBgbXVsdGlsaW5lYCwgYGxhc3RJbmRleGAsIGBpZ25vcmVDYXNlYCkuXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAoYWN0dWFsKSAmJiBpc1JlZ0V4cChleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsLnNvdXJjZSA9PT0gZXhwZWN0ZWQuc291cmNlICYmXG4gICAgICAgICAgIGFjdHVhbC5nbG9iYWwgPT09IGV4cGVjdGVkLmdsb2JhbCAmJlxuICAgICAgICAgICBhY3R1YWwubXVsdGlsaW5lID09PSBleHBlY3RlZC5tdWx0aWxpbmUgJiZcbiAgICAgICAgICAgYWN0dWFsLmxhc3RJbmRleCA9PT0gZXhwZWN0ZWQubGFzdEluZGV4ICYmXG4gICAgICAgICAgIGFjdHVhbC5pZ25vcmVDYXNlID09PSBleHBlY3RlZC5pZ25vcmVDYXNlO1xuXG4gIC8vIDcuNC4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyxcbiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS5cbiAgfSBlbHNlIGlmICgoYWN0dWFsID09PSBudWxsIHx8IHR5cGVvZiBhY3R1YWwgIT09ICdvYmplY3QnKSAmJlxuICAgICAgICAgICAgIChleHBlY3RlZCA9PT0gbnVsbCB8fCB0eXBlb2YgZXhwZWN0ZWQgIT09ICdvYmplY3QnKSkge1xuICAgIHJldHVybiBzdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIElmIGJvdGggdmFsdWVzIGFyZSBpbnN0YW5jZXMgb2YgdHlwZWQgYXJyYXlzLCB3cmFwIHRoZWlyIHVuZGVybHlpbmdcbiAgLy8gQXJyYXlCdWZmZXJzIGluIGEgQnVmZmVyIGVhY2ggdG8gaW5jcmVhc2UgcGVyZm9ybWFuY2VcbiAgLy8gVGhpcyBvcHRpbWl6YXRpb24gcmVxdWlyZXMgdGhlIGFycmF5cyB0byBoYXZlIHRoZSBzYW1lIHR5cGUgYXMgY2hlY2tlZCBieVxuICAvLyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nIChha2EgcFRvU3RyaW5nKS4gTmV2ZXIgcGVyZm9ybSBiaW5hcnlcbiAgLy8gY29tcGFyaXNvbnMgZm9yIEZsb2F0KkFycmF5cywgdGhvdWdoLCBzaW5jZSBlLmcuICswID09PSAtMCBidXQgdGhlaXJcbiAgLy8gYml0IHBhdHRlcm5zIGFyZSBub3QgaWRlbnRpY2FsLlxuICB9IGVsc2UgaWYgKGlzVmlldyhhY3R1YWwpICYmIGlzVmlldyhleHBlY3RlZCkgJiZcbiAgICAgICAgICAgICBwVG9TdHJpbmcoYWN0dWFsKSA9PT0gcFRvU3RyaW5nKGV4cGVjdGVkKSAmJlxuICAgICAgICAgICAgICEoYWN0dWFsIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XG4gICAgICAgICAgICAgICBhY3R1YWwgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkpKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUobmV3IFVpbnQ4QXJyYXkoYWN0dWFsLmJ1ZmZlciksXG4gICAgICAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoZXhwZWN0ZWQuYnVmZmVyKSkgPT09IDA7XG5cbiAgLy8gNy41IEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgLy8gKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgfSBlbHNlIGlmIChpc0J1ZmZlcihhY3R1YWwpICE9PSBpc0J1ZmZlcihleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgbWVtb3MgPSBtZW1vcyB8fCB7YWN0dWFsOiBbXSwgZXhwZWN0ZWQ6IFtdfTtcblxuICAgIHZhciBhY3R1YWxJbmRleCA9IG1lbW9zLmFjdHVhbC5pbmRleE9mKGFjdHVhbCk7XG4gICAgaWYgKGFjdHVhbEluZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKGFjdHVhbEluZGV4ID09PSBtZW1vcy5leHBlY3RlZC5pbmRleE9mKGV4cGVjdGVkKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vcy5hY3R1YWwucHVzaChhY3R1YWwpO1xuICAgIG1lbW9zLmV4cGVjdGVkLnB1c2goZXhwZWN0ZWQpO1xuXG4gICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQsIHN0cmljdCwgbWVtb3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIHN0cmljdCwgYWN0dWFsVmlzaXRlZE9iamVjdHMpIHtcbiAgaWYgKGEgPT09IG51bGwgfHwgYSA9PT0gdW5kZWZpbmVkIHx8IGIgPT09IG51bGwgfHwgYiA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy8gaWYgb25lIGlzIGEgcHJpbWl0aXZlLCB0aGUgb3RoZXIgbXVzdCBiZSBzYW1lXG4gIGlmIChpc1ByaW1pdGl2ZShhKSB8fCBpc1ByaW1pdGl2ZShiKSlcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgaWYgKHN0cmljdCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYSkgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZihiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIHZhciBhSXNBcmdzID0gaXNBcmd1bWVudHMoYSk7XG4gIHZhciBiSXNBcmdzID0gaXNBcmd1bWVudHMoYik7XG4gIGlmICgoYUlzQXJncyAmJiAhYklzQXJncykgfHwgKCFhSXNBcmdzICYmIGJJc0FyZ3MpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGFJc0FyZ3MpIHtcbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBfZGVlcEVxdWFsKGEsIGIsIHN0cmljdCk7XG4gIH1cbiAgdmFyIGthID0gb2JqZWN0S2V5cyhhKTtcbiAgdmFyIGtiID0gb2JqZWN0S2V5cyhiKTtcbiAgdmFyIGtleSwgaTtcbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlc1xuICAvLyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPT0ga2IubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT09IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFfZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBzdHJpY3QsIGFjdHVhbFZpc2l0ZWRPYmplY3RzKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gOC4gVGhlIG5vbi1lcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgZm9yIGFueSBkZWVwIGluZXF1YWxpdHkuXG4vLyBhc3NlcnQubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcbmFzc2VydC5ub3REZWVwRXF1YWwgPSBub3REZWVwRXF1YWw7XG5leHBvcnQgZnVuY3Rpb24gbm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgZmFsc2UpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnbm90RGVlcEVxdWFsJywgbm90RGVlcEVxdWFsKTtcbiAgfVxufVxuXG5hc3NlcnQubm90RGVlcFN0cmljdEVxdWFsID0gbm90RGVlcFN0cmljdEVxdWFsO1xuZXhwb3J0IGZ1bmN0aW9uIG5vdERlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnbm90RGVlcFN0cmljdEVxdWFsJywgbm90RGVlcFN0cmljdEVxdWFsKTtcbiAgfVxufVxuXG5cbi8vIDkuIFRoZSBzdHJpY3QgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHN0cmljdCBlcXVhbGl0eSwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuYXNzZXJ0LnN0cmljdEVxdWFsID0gc3RyaWN0RXF1YWw7XG5leHBvcnQgZnVuY3Rpb24gc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09PScsIHN0cmljdEVxdWFsKTtcbiAgfVxufVxuXG4vLyAxMC4gVGhlIHN0cmljdCBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciBzdHJpY3QgaW5lcXVhbGl0eSwgYXNcbi8vIGRldGVybWluZWQgYnkgIT09LiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcbmFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IG5vdFN0cmljdEVxdWFsO1xuZXhwb3J0IGZ1bmN0aW9uIG5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPT0nLCBub3RTdHJpY3RFcXVhbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkge1xuICBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGV4cGVjdGVkKSA9PSAnW29iamVjdCBSZWdFeHBdJykge1xuICAgIHJldHVybiBleHBlY3RlZC50ZXN0KGFjdHVhbCk7XG4gIH1cblxuICB0cnkge1xuICAgIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBleHBlY3RlZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSWdub3JlLiAgVGhlIGluc3RhbmNlb2YgY2hlY2sgZG9lc24ndCB3b3JrIGZvciBhcnJvdyBmdW5jdGlvbnMuXG4gIH1cblxuICBpZiAoRXJyb3IuaXNQcm90b3R5cGVPZihleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZXhwZWN0ZWQuY2FsbCh7fSwgYWN0dWFsKSA9PT0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gX3RyeUJsb2NrKGJsb2NrKSB7XG4gIHZhciBlcnJvcjtcbiAgdHJ5IHtcbiAgICBibG9jaygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyb3IgPSBlO1xuICB9XG4gIHJldHVybiBlcnJvcjtcbn1cblxuZnVuY3Rpb24gX3Rocm93cyhzaG91bGRUaHJvdywgYmxvY2ssIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIHZhciBhY3R1YWw7XG5cbiAgaWYgKHR5cGVvZiBibG9jayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYmxvY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZXhwZWN0ZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgbWVzc2FnZSA9IGV4cGVjdGVkO1xuICAgIGV4cGVjdGVkID0gbnVsbDtcbiAgfVxuXG4gIGFjdHVhbCA9IF90cnlCbG9jayhibG9jayk7XG5cbiAgbWVzc2FnZSA9IChleHBlY3RlZCAmJiBleHBlY3RlZC5uYW1lID8gJyAoJyArIGV4cGVjdGVkLm5hbWUgKyAnKS4nIDogJy4nKSArXG4gICAgICAgICAgICAobWVzc2FnZSA/ICcgJyArIG1lc3NhZ2UgOiAnLicpO1xuXG4gIGlmIChzaG91bGRUaHJvdyAmJiAhYWN0dWFsKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCAnTWlzc2luZyBleHBlY3RlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7XG4gIH1cblxuICB2YXIgdXNlclByb3ZpZGVkTWVzc2FnZSA9IHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJztcbiAgdmFyIGlzVW53YW50ZWRFeGNlcHRpb24gPSAhc2hvdWxkVGhyb3cgJiYgaXNFcnJvcihhY3R1YWwpO1xuICB2YXIgaXNVbmV4cGVjdGVkRXhjZXB0aW9uID0gIXNob3VsZFRocm93ICYmIGFjdHVhbCAmJiAhZXhwZWN0ZWQ7XG5cbiAgaWYgKChpc1Vud2FudGVkRXhjZXB0aW9uICYmXG4gICAgICB1c2VyUHJvdmlkZWRNZXNzYWdlICYmXG4gICAgICBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHxcbiAgICAgIGlzVW5leHBlY3RlZEV4Y2VwdGlvbikge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ0dvdCB1bndhbnRlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7XG4gIH1cblxuICBpZiAoKHNob3VsZFRocm93ICYmIGFjdHVhbCAmJiBleHBlY3RlZCAmJlxuICAgICAgIWV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpKSB8fCAoIXNob3VsZFRocm93ICYmIGFjdHVhbCkpIHtcbiAgICB0aHJvdyBhY3R1YWw7XG4gIH1cbn1cblxuLy8gMTEuIEV4cGVjdGVkIHRvIHRocm93IGFuIGVycm9yOlxuLy8gYXNzZXJ0LnRocm93cyhibG9jaywgRXJyb3Jfb3B0LCBtZXNzYWdlX29wdCk7XG5hc3NlcnQudGhyb3dzID0gdGhyb3dzO1xuZXhwb3J0IGZ1bmN0aW9uIHRocm93cyhibG9jaywgLypvcHRpb25hbCovZXJyb3IsIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHtcbiAgX3Rocm93cyh0cnVlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xufVxuXG4vLyBFWFRFTlNJT04hIFRoaXMgaXMgYW5ub3lpbmcgdG8gd3JpdGUgb3V0c2lkZSB0aGlzIG1vZHVsZS5cbmFzc2VydC5kb2VzTm90VGhyb3cgPSBkb2VzTm90VGhyb3c7XG5leHBvcnQgZnVuY3Rpb24gZG9lc05vdFRocm93KGJsb2NrLCAvKm9wdGlvbmFsKi9lcnJvciwgLypvcHRpb25hbCovbWVzc2FnZSkge1xuICBfdGhyb3dzKGZhbHNlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xufVxuXG5hc3NlcnQuaWZFcnJvciA9IGlmRXJyb3I7XG5leHBvcnQgZnVuY3Rpb24gaWZFcnJvcihlcnIpIHtcbiAgaWYgKGVycikgdGhyb3cgZXJyO1xufVxuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtcyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKSB8fFxuICAgIHBsdXJhbChtcywgaCwgJ2hvdXInKSB8fFxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XG4gICAgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJykgfHxcbiAgICBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtcyA8IG4gKiAxLjUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIG4pICsgJyAnICsgbmFtZTtcbiAgfVxuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWdbJ2RlZmF1bHQnXSA9IGNyZWF0ZURlYnVnO1xuZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2U7XG5leHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO1xuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5leHBvcnRzLmVuYWJsZWQgPSBlbmFibGVkO1xuZXhwb3J0cy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogUHJldmlvdXMgbG9nIHRpbWVzdGFtcC5cbiAqL1xuXG52YXIgcHJldlRpbWU7XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXG4gIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZXhwb3J0cy5pbml0KSB7XG4gICAgZXhwb3J0cy5pbml0KGRlYnVnKTtcbiAgfVxuXG4gIHJldHVybiBkZWJ1Zztcbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZVxuICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlXG4gICAgICAgICAgICAgICAgICA/IGNocm9tZS5zdG9yYWdlLmxvY2FsXG4gICAgICAgICAgICAgICAgICA6IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcbiAgJ2xpZ2h0c2VhZ3JlZW4nLFxuICAnZm9yZXN0Z3JlZW4nLFxuICAnZ29sZGVucm9kJyxcbiAgJ2RvZGdlcmJsdWUnLFxuICAnZGFya29yY2hpZCcsXG4gICdjcmltc29uJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcbiAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgLy8gZXhwbGljaXRseVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgd2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsInZhciBkZWJ1ZztcbnRyeSB7XG4gIC8qIGVzbGludCBnbG9iYWwtcmVxdWlyZTogb2ZmICovXG4gIGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwiZm9sbG93LXJlZGlyZWN0c1wiKTtcbn1cbmNhdGNoIChlcnJvcikge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHsgLyogKi8gfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZGVidWc7XG4iLCIvLyBNSVQgbGlzZW5jZVxuLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vc3Vic3RhY2svdHR5LWJyb3dzZXJpZnkvYmxvYi8xYmE3NjlhNjQyOWQyNDJmMzYyMjY1Mzg4MzViNDAzNGJmNmI3ODg2L2luZGV4LmpzXG5cbmV4cG9ydCBmdW5jdGlvbiBpc2F0dHkoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlYWRTdHJlYW0oKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHR5LlJlYWRTdHJlYW0gaXMgbm90IGltcGxlbWVudGVkJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBXcml0ZVN0cmVhbSgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0dHkuUmVhZFN0cmVhbSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc2F0dHk6IGlzYXR0eSxcbiAgUmVhZFN0cmVhbTogUmVhZFN0cmVhbSxcbiAgV3JpdGVTdHJlYW06IFdyaXRlU3RyZWFtXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7fTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdHR5ID0gcmVxdWlyZSgndHR5Jyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBOb2RlLmpzIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gWzYsIDIsIDMsIDQsIDUsIDFdO1xuXG4vKipcbiAqIEJ1aWxkIHVwIHRoZSBkZWZhdWx0IGBpbnNwZWN0T3B0c2Agb2JqZWN0IGZyb20gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAqXG4gKiAgICQgREVCVUdfQ09MT1JTPW5vIERFQlVHX0RFUFRIPTEwIERFQlVHX1NIT1dfSElEREVOPWVuYWJsZWQgbm9kZSBzY3JpcHQuanNcbiAqL1xuXG5leHBvcnRzLmluc3BlY3RPcHRzID0gT2JqZWN0LmtleXMocHJvY2Vzcy5lbnYpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAvXmRlYnVnXy9pLnRlc3Qoa2V5KTtcbn0pLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgLy8gY2FtZWwtY2FzZVxuICB2YXIgcHJvcCA9IGtleVxuICAgIC5zdWJzdHJpbmcoNilcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5yZXBsYWNlKC9fKFthLXpdKS9nLCBmdW5jdGlvbiAoXywgaykgeyByZXR1cm4gay50b1VwcGVyQ2FzZSgpIH0pO1xuXG4gIC8vIGNvZXJjZSBzdHJpbmcgdmFsdWUgaW50byBKUyB2YWx1ZVxuICB2YXIgdmFsID0gcHJvY2Vzcy5lbnZba2V5XTtcbiAgaWYgKC9eKHllc3xvbnx0cnVlfGVuYWJsZWQpJC9pLnRlc3QodmFsKSkgdmFsID0gdHJ1ZTtcbiAgZWxzZSBpZiAoL14obm98b2ZmfGZhbHNlfGRpc2FibGVkKSQvaS50ZXN0KHZhbCkpIHZhbCA9IGZhbHNlO1xuICBlbHNlIGlmICh2YWwgPT09ICdudWxsJykgdmFsID0gbnVsbDtcbiAgZWxzZSB2YWwgPSBOdW1iZXIodmFsKTtcblxuICBvYmpbcHJvcF0gPSB2YWw7XG4gIHJldHVybiBvYmo7XG59LCB7fSk7XG5cbi8qKlxuICogVGhlIGZpbGUgZGVzY3JpcHRvciB0byB3cml0ZSB0aGUgYGRlYnVnKClgIGNhbGxzIHRvLlxuICogU2V0IHRoZSBgREVCVUdfRkRgIGVudiB2YXJpYWJsZSB0byBvdmVycmlkZSB3aXRoIGFub3RoZXIgdmFsdWUuIGkuZS46XG4gKlxuICogICAkIERFQlVHX0ZEPTMgbm9kZSBzY3JpcHQuanMgMz5kZWJ1Zy5sb2dcbiAqL1xuXG52YXIgZmQgPSBwYXJzZUludChwcm9jZXNzLmVudi5ERUJVR19GRCwgMTApIHx8IDI7XG5cbmlmICgxICE9PSBmZCAmJiAyICE9PSBmZCkge1xuICB1dGlsLmRlcHJlY2F0ZShmdW5jdGlvbigpe30sICdleGNlcHQgZm9yIHN0ZGVycigyKSBhbmQgc3Rkb3V0KDEpLCBhbnkgb3RoZXIgdXNhZ2Ugb2YgREVCVUdfRkQgaXMgZGVwcmVjYXRlZC4gT3ZlcnJpZGUgZGVidWcubG9nIGlmIHlvdSB3YW50IHRvIHVzZSBhIGRpZmZlcmVudCBsb2cgZnVuY3Rpb24gKGh0dHBzOi8vZ2l0LmlvL2RlYnVnX2ZkKScpKClcbn1cblxudmFyIHN0cmVhbSA9IDEgPT09IGZkID8gcHJvY2Vzcy5zdGRvdXQgOlxuICAgICAgICAgICAgIDIgPT09IGZkID8gcHJvY2Vzcy5zdGRlcnIgOlxuICAgICAgICAgICAgIGNyZWF0ZVdyaXRhYmxlU3RkaW9TdHJlYW0oZmQpO1xuXG4vKipcbiAqIElzIHN0ZG91dCBhIFRUWT8gQ29sb3JlZCBvdXRwdXQgaXMgZW5hYmxlZCB3aGVuIGB0cnVlYC5cbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIHJldHVybiAnY29sb3JzJyBpbiBleHBvcnRzLmluc3BlY3RPcHRzXG4gICAgPyBCb29sZWFuKGV4cG9ydHMuaW5zcGVjdE9wdHMuY29sb3JzKVxuICAgIDogdHR5LmlzYXR0eShmZCk7XG59XG5cbi8qKlxuICogTWFwICVvIHRvIGB1dGlsLmluc3BlY3QoKWAsIGFsbCBvbiBhIHNpbmdsZSBsaW5lLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5vID0gZnVuY3Rpb24odikge1xuICB0aGlzLmluc3BlY3RPcHRzLmNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuICByZXR1cm4gdXRpbC5pbnNwZWN0KHYsIHRoaXMuaW5zcGVjdE9wdHMpXG4gICAgLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24oc3RyKSB7XG4gICAgICByZXR1cm4gc3RyLnRyaW0oKVxuICAgIH0pLmpvaW4oJyAnKTtcbn07XG5cbi8qKlxuICogTWFwICVvIHRvIGB1dGlsLmluc3BlY3QoKWAsIGFsbG93aW5nIG11bHRpcGxlIGxpbmVzIGlmIG5lZWRlZC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuTyA9IGZ1bmN0aW9uKHYpIHtcbiAgdGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcbiAgcmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKTtcbn07XG5cbi8qKlxuICogQWRkcyBBTlNJIGNvbG9yIGVzY2FwZSBjb2RlcyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciBuYW1lID0gdGhpcy5uYW1lc3BhY2U7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBpZiAodXNlQ29sb3JzKSB7XG4gICAgdmFyIGMgPSB0aGlzLmNvbG9yO1xuICAgIHZhciBwcmVmaXggPSAnICBcXHUwMDFiWzMnICsgYyArICc7MW0nICsgbmFtZSArICcgJyArICdcXHUwMDFiWzBtJztcblxuICAgIGFyZ3NbMF0gPSBwcmVmaXggKyBhcmdzWzBdLnNwbGl0KCdcXG4nKS5qb2luKCdcXG4nICsgcHJlZml4KTtcbiAgICBhcmdzLnB1c2goJ1xcdTAwMWJbMycgKyBjICsgJ20rJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKSArICdcXHUwMDFiWzBtJyk7XG4gIH0gZWxzZSB7XG4gICAgYXJnc1swXSA9IG5ldyBEYXRlKCkudG9VVENTdHJpbmcoKVxuICAgICAgKyAnICcgKyBuYW1lICsgJyAnICsgYXJnc1swXTtcbiAgfVxufVxuXG4vKipcbiAqIEludm9rZXMgYHV0aWwuZm9ybWF0KClgIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMgYW5kIHdyaXRlcyB0byBgc3RyZWFtYC5cbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIHJldHVybiBzdHJlYW0ud3JpdGUodXRpbC5mb3JtYXQuYXBwbHkodXRpbCwgYXJndW1lbnRzKSArICdcXG4nKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAvLyBJZiB5b3Ugc2V0IGEgcHJvY2Vzcy5lbnYgZmllbGQgdG8gbnVsbCBvciB1bmRlZmluZWQsIGl0IGdldHMgY2FzdCB0byB0aGVcbiAgICAvLyBzdHJpbmcgJ251bGwnIG9yICd1bmRlZmluZWQnLiBKdXN0IGRlbGV0ZSBpbnN0ZWFkLlxuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfSBlbHNlIHtcbiAgICBwcm9jZXNzLmVudi5ERUJVRyA9IG5hbWVzcGFjZXM7XG4gIH1cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICByZXR1cm4gcHJvY2Vzcy5lbnYuREVCVUc7XG59XG5cbi8qKlxuICogQ29waWVkIGZyb20gYG5vZGUvc3JjL25vZGUuanNgLlxuICpcbiAqIFhYWDogSXQncyBsYW1lIHRoYXQgbm9kZSBkb2Vzbid0IGV4cG9zZSB0aGlzIEFQSSBvdXQtb2YtdGhlLWJveC4gSXQgYWxzb1xuICogcmVsaWVzIG9uIHRoZSB1bmRvY3VtZW50ZWQgYHR0eV93cmFwLmd1ZXNzSGFuZGxlVHlwZSgpYCB3aGljaCBpcyBhbHNvIGxhbWUuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlV3JpdGFibGVTdGRpb1N0cmVhbSAoZmQpIHtcbiAgdmFyIHN0cmVhbTtcbiAgdmFyIHR0eV93cmFwID0gcHJvY2Vzcy5iaW5kaW5nKCd0dHlfd3JhcCcpO1xuXG4gIC8vIE5vdGUgc3RyZWFtLl90eXBlIGlzIHVzZWQgZm9yIHRlc3QtbW9kdWxlLWxvYWQtbGlzdC5qc1xuXG4gIHN3aXRjaCAodHR5X3dyYXAuZ3Vlc3NIYW5kbGVUeXBlKGZkKSkge1xuICAgIGNhc2UgJ1RUWSc6XG4gICAgICBzdHJlYW0gPSBuZXcgdHR5LldyaXRlU3RyZWFtKGZkKTtcbiAgICAgIHN0cmVhbS5fdHlwZSA9ICd0dHknO1xuXG4gICAgICAvLyBIYWNrIHRvIGhhdmUgc3RyZWFtIG5vdCBrZWVwIHRoZSBldmVudCBsb29wIGFsaXZlLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcyNlxuICAgICAgaWYgKHN0cmVhbS5faGFuZGxlICYmIHN0cmVhbS5faGFuZGxlLnVucmVmKSB7XG4gICAgICAgIHN0cmVhbS5faGFuZGxlLnVucmVmKCk7XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ0ZJTEUnOlxuICAgICAgdmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgICAgIHN0cmVhbSA9IG5ldyBmcy5TeW5jV3JpdGVTdHJlYW0oZmQsIHsgYXV0b0Nsb3NlOiBmYWxzZSB9KTtcbiAgICAgIHN0cmVhbS5fdHlwZSA9ICdmcyc7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BJUEUnOlxuICAgIGNhc2UgJ1RDUCc6XG4gICAgICB2YXIgbmV0ID0gcmVxdWlyZSgnbmV0Jyk7XG4gICAgICBzdHJlYW0gPSBuZXcgbmV0LlNvY2tldCh7XG4gICAgICAgIGZkOiBmZCxcbiAgICAgICAgcmVhZGFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEZJWE1FIFNob3VsZCBwcm9iYWJseSBoYXZlIGFuIG9wdGlvbiBpbiBuZXQuU29ja2V0IHRvIGNyZWF0ZSBhXG4gICAgICAvLyBzdHJlYW0gZnJvbSBhbiBleGlzdGluZyBmZCB3aGljaCBpcyB3cml0YWJsZSBvbmx5LiBCdXQgZm9yIG5vd1xuICAgICAgLy8gd2UnbGwganVzdCBhZGQgdGhpcyBoYWNrIGFuZCBzZXQgdGhlIGByZWFkYWJsZWAgbWVtYmVyIHRvIGZhbHNlLlxuICAgICAgLy8gVGVzdDogLi9ub2RlIHRlc3QvZml4dHVyZXMvZWNoby5qcyA8IC9ldGMvcGFzc3dkXG4gICAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZWFkID0gbnVsbDtcbiAgICAgIHN0cmVhbS5fdHlwZSA9ICdwaXBlJztcblxuICAgICAgLy8gRklYTUUgSGFjayB0byBoYXZlIHN0cmVhbSBub3Qga2VlcCB0aGUgZXZlbnQgbG9vcCBhbGl2ZS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MjZcbiAgICAgIGlmIChzdHJlYW0uX2hhbmRsZSAmJiBzdHJlYW0uX2hhbmRsZS51bnJlZikge1xuICAgICAgICBzdHJlYW0uX2hhbmRsZS51bnJlZigpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgLy8gUHJvYmFibHkgYW4gZXJyb3Igb24gaW4gdXZfZ3Vlc3NfaGFuZGxlKClcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW1wbGVtZW50IG1lLiBVbmtub3duIHN0cmVhbSBmaWxlIHR5cGUhJyk7XG4gIH1cblxuICAvLyBGb3Igc3VwcG9ydGluZyBsZWdhY3kgQVBJIHdlIHB1dCB0aGUgRkQgaGVyZS5cbiAgc3RyZWFtLmZkID0gZmQ7XG5cbiAgc3RyZWFtLl9pc1N0ZGlvID0gdHJ1ZTtcblxuICByZXR1cm4gc3RyZWFtO1xufVxuXG4vKipcbiAqIEluaXQgbG9naWMgZm9yIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICpcbiAqIENyZWF0ZSBhIG5ldyBgaW5zcGVjdE9wdHNgIG9iamVjdCBpbiBjYXNlIGB1c2VDb2xvcnNgIGlzIHNldFxuICogZGlmZmVyZW50bHkgZm9yIGEgcGFydGljdWxhciBgZGVidWdgIGluc3RhbmNlLlxuICovXG5cbmZ1bmN0aW9uIGluaXQgKGRlYnVnKSB7XG4gIGRlYnVnLmluc3BlY3RPcHRzID0ge307XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhleHBvcnRzLmluc3BlY3RPcHRzKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVidWcuaW5zcGVjdE9wdHNba2V5c1tpXV0gPSBleHBvcnRzLmluc3BlY3RPcHRzW2tleXNbaV1dO1xuICB9XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBwcm9jZXNzLmVudi5ERUJVR2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG4iLCIvKipcbiAqIERldGVjdCBFbGVjdHJvbiByZW5kZXJlciBwcm9jZXNzLCB3aGljaCBpcyBub2RlLCBidXQgd2Ugc2hvdWxkXG4gKiB0cmVhdCBhcyBhIGJyb3dzZXIuXG4gKi9cblxuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Jyb3dzZXIuanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9ub2RlLmpzJyk7XG59XG4iLCJ2YXIgdXJsID0gcmVxdWlyZShcInVybFwiKTtcbnZhciBVUkwgPSB1cmwuVVJMO1xudmFyIGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcbnZhciBodHRwcyA9IHJlcXVpcmUoXCJodHRwc1wiKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoXCJzdHJlYW1cIikuV3JpdGFibGU7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoXCIuL2RlYnVnXCIpO1xuXG4vLyBDcmVhdGUgaGFuZGxlcnMgdGhhdCBwYXNzIGV2ZW50cyBmcm9tIG5hdGl2ZSByZXF1ZXN0c1xudmFyIGV2ZW50SGFuZGxlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuW1wiYWJvcnRcIiwgXCJhYm9ydGVkXCIsIFwiY29ubmVjdFwiLCBcImVycm9yXCIsIFwic29ja2V0XCIsIFwidGltZW91dFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICBldmVudEhhbmRsZXJzW2V2ZW50XSA9IGZ1bmN0aW9uIChhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgdGhpcy5fcmVkaXJlY3RhYmxlLmVtaXQoZXZlbnQsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICB9O1xufSk7XG5cbi8vIEVycm9yIHR5cGVzIHdpdGggY29kZXNcbnZhciBSZWRpcmVjdGlvbkVycm9yID0gY3JlYXRlRXJyb3JUeXBlKFxuICBcIkVSUl9GUl9SRURJUkVDVElPTl9GQUlMVVJFXCIsXG4gIFwiXCJcbik7XG52YXIgVG9vTWFueVJlZGlyZWN0c0Vycm9yID0gY3JlYXRlRXJyb3JUeXBlKFxuICBcIkVSUl9GUl9UT09fTUFOWV9SRURJUkVDVFNcIixcbiAgXCJNYXhpbXVtIG51bWJlciBvZiByZWRpcmVjdHMgZXhjZWVkZWRcIlxuKTtcbnZhciBNYXhCb2R5TGVuZ3RoRXhjZWVkZWRFcnJvciA9IGNyZWF0ZUVycm9yVHlwZShcbiAgXCJFUlJfRlJfTUFYX0JPRFlfTEVOR1RIX0VYQ0VFREVEXCIsXG4gIFwiUmVxdWVzdCBib2R5IGxhcmdlciB0aGFuIG1heEJvZHlMZW5ndGggbGltaXRcIlxuKTtcbnZhciBXcml0ZUFmdGVyRW5kRXJyb3IgPSBjcmVhdGVFcnJvclR5cGUoXG4gIFwiRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkRcIixcbiAgXCJ3cml0ZSBhZnRlciBlbmRcIlxuKTtcblxuLy8gQW4gSFRUUChTKSByZXF1ZXN0IHRoYXQgY2FuIGJlIHJlZGlyZWN0ZWRcbmZ1bmN0aW9uIFJlZGlyZWN0YWJsZVJlcXVlc3Qob3B0aW9ucywgcmVzcG9uc2VDYWxsYmFjaykge1xuICAvLyBJbml0aWFsaXplIHRoZSByZXF1ZXN0XG4gIFdyaXRhYmxlLmNhbGwodGhpcyk7XG4gIHRoaXMuX3Nhbml0aXplT3B0aW9ucyhvcHRpb25zKTtcbiAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMuX2VuZGVkID0gZmFsc2U7XG4gIHRoaXMuX2VuZGluZyA9IGZhbHNlO1xuICB0aGlzLl9yZWRpcmVjdENvdW50ID0gMDtcbiAgdGhpcy5fcmVkaXJlY3RzID0gW107XG4gIHRoaXMuX3JlcXVlc3RCb2R5TGVuZ3RoID0gMDtcbiAgdGhpcy5fcmVxdWVzdEJvZHlCdWZmZXJzID0gW107XG5cbiAgLy8gQXR0YWNoIGEgY2FsbGJhY2sgaWYgcGFzc2VkXG4gIGlmIChyZXNwb25zZUNhbGxiYWNrKSB7XG4gICAgdGhpcy5vbihcInJlc3BvbnNlXCIsIHJlc3BvbnNlQ2FsbGJhY2spO1xuICB9XG5cbiAgLy8gUmVhY3QgdG8gcmVzcG9uc2VzIG9mIG5hdGl2ZSByZXF1ZXN0c1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuX29uTmF0aXZlUmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICBzZWxmLl9wcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9O1xuXG4gIC8vIFBlcmZvcm0gdGhlIGZpcnN0IHJlcXVlc3RcbiAgdGhpcy5fcGVyZm9ybVJlcXVlc3QoKTtcbn1cblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShXcml0YWJsZS5wcm90b3R5cGUpO1xuXG4vLyBXcml0ZXMgYnVmZmVyZWQgZGF0YSB0byB0aGUgY3VycmVudCBuYXRpdmUgcmVxdWVzdFxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIC8vIFdyaXRpbmcgaXMgbm90IGFsbG93ZWQgaWYgZW5kIGhhcyBiZWVuIGNhbGxlZFxuICBpZiAodGhpcy5fZW5kaW5nKSB7XG4gICAgdGhyb3cgbmV3IFdyaXRlQWZ0ZXJFbmRFcnJvcigpO1xuICB9XG5cbiAgLy8gVmFsaWRhdGUgaW5wdXQgYW5kIHNoaWZ0IHBhcmFtZXRlcnMgaWYgbmVjZXNzYXJ5XG4gIGlmICghKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmIChcImxlbmd0aFwiIGluIGRhdGEpKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJkYXRhIHNob3VsZCBiZSBhIHN0cmluZywgQnVmZmVyIG9yIFVpbnQ4QXJyYXlcIik7XG4gIH1cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2FsbGJhY2sgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICAvLyBJZ25vcmUgZW1wdHkgYnVmZmVycywgc2luY2Ugd3JpdGluZyB0aGVtIGRvZXNuJ3QgaW52b2tlIHRoZSBjYWxsYmFja1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzIyMDY2XG4gIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIE9ubHkgd3JpdGUgd2hlbiB3ZSBkb24ndCBleGNlZWQgdGhlIG1heGltdW0gYm9keSBsZW5ndGhcbiAgaWYgKHRoaXMuX3JlcXVlc3RCb2R5TGVuZ3RoICsgZGF0YS5sZW5ndGggPD0gdGhpcy5fb3B0aW9ucy5tYXhCb2R5TGVuZ3RoKSB7XG4gICAgdGhpcy5fcmVxdWVzdEJvZHlMZW5ndGggKz0gZGF0YS5sZW5ndGg7XG4gICAgdGhpcy5fcmVxdWVzdEJvZHlCdWZmZXJzLnB1c2goeyBkYXRhOiBkYXRhLCBlbmNvZGluZzogZW5jb2RpbmcgfSk7XG4gICAgdGhpcy5fY3VycmVudFJlcXVlc3Qud3JpdGUoZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKTtcbiAgfVxuICAvLyBFcnJvciB3aGVuIHdlIGV4Y2VlZCB0aGUgbWF4aW11bSBib2R5IGxlbmd0aFxuICBlbHNlIHtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBuZXcgTWF4Qm9keUxlbmd0aEV4Y2VlZGVkRXJyb3IoKSk7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG59O1xuXG4vLyBFbmRzIHRoZSBjdXJyZW50IG5hdGl2ZSByZXF1ZXN0XG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIC8vIFNoaWZ0IHBhcmFtZXRlcnMgaWYgbmVjZXNzYXJ5XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2FsbGJhY2sgPSBkYXRhO1xuICAgIGRhdGEgPSBlbmNvZGluZyA9IG51bGw7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjYWxsYmFjayA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIC8vIFdyaXRlIGRhdGEgaWYgbmVlZGVkIGFuZCBlbmRcbiAgaWYgKCFkYXRhKSB7XG4gICAgdGhpcy5fZW5kZWQgPSB0aGlzLl9lbmRpbmcgPSB0cnVlO1xuICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0LmVuZChudWxsLCBudWxsLCBjYWxsYmFjayk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBjdXJyZW50UmVxdWVzdCA9IHRoaXMuX2N1cnJlbnRSZXF1ZXN0O1xuICAgIHRoaXMud3JpdGUoZGF0YSwgZW5jb2RpbmcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuX2VuZGVkID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRSZXF1ZXN0LmVuZChudWxsLCBudWxsLCBjYWxsYmFjayk7XG4gICAgfSk7XG4gICAgdGhpcy5fZW5kaW5nID0gdHJ1ZTtcbiAgfVxufTtcblxuLy8gU2V0cyBhIGhlYWRlciB2YWx1ZSBvbiB0aGUgY3VycmVudCBuYXRpdmUgcmVxdWVzdFxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuc2V0SGVhZGVyID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX29wdGlvbnMuaGVhZGVyc1tuYW1lXSA9IHZhbHVlO1xuICB0aGlzLl9jdXJyZW50UmVxdWVzdC5zZXRIZWFkZXIobmFtZSwgdmFsdWUpO1xufTtcblxuLy8gQ2xlYXJzIGEgaGVhZGVyIHZhbHVlIG9uIHRoZSBjdXJyZW50IG5hdGl2ZSByZXF1ZXN0XG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5yZW1vdmVIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWxldGUgdGhpcy5fb3B0aW9ucy5oZWFkZXJzW25hbWVdO1xuICB0aGlzLl9jdXJyZW50UmVxdWVzdC5yZW1vdmVIZWFkZXIobmFtZSk7XG59O1xuXG4vLyBHbG9iYWwgdGltZW91dCBmb3IgYWxsIHVuZGVybHlpbmcgcmVxdWVzdHNcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLnNldFRpbWVvdXQgPSBmdW5jdGlvbiAobXNlY3MsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjaykge1xuICAgIHRoaXMub25jZShcInRpbWVvdXRcIiwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKHRoaXMuc29ja2V0KSB7XG4gICAgc3RhcnRUaW1lcih0aGlzLCBtc2Vjcyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0Lm9uY2UoXCJzb2NrZXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgc3RhcnRUaW1lcihzZWxmLCBtc2Vjcyk7XG4gICAgfSk7XG4gIH1cblxuICB0aGlzLm9uY2UoXCJyZXNwb25zZVwiLCBjbGVhclRpbWVyKTtcbiAgdGhpcy5vbmNlKFwiZXJyb3JcIiwgY2xlYXJUaW1lcik7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBzdGFydFRpbWVyKHJlcXVlc3QsIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChyZXF1ZXN0Ll90aW1lb3V0KTtcbiAgcmVxdWVzdC5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHJlcXVlc3QuZW1pdChcInRpbWVvdXRcIik7XG4gIH0sIG1zZWNzKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJUaW1lcigpIHtcbiAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xufVxuXG4vLyBQcm94eSBhbGwgb3RoZXIgcHVibGljIENsaWVudFJlcXVlc3QgbWV0aG9kc1xuW1xuICBcImFib3J0XCIsIFwiZmx1c2hIZWFkZXJzXCIsIFwiZ2V0SGVhZGVyXCIsXG4gIFwic2V0Tm9EZWxheVwiLCBcInNldFNvY2tldEtlZXBBbGl2ZVwiLFxuXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRSZXF1ZXN0W21ldGhvZF0oYSwgYik7XG4gIH07XG59KTtcblxuLy8gUHJveHkgYWxsIHB1YmxpYyBDbGllbnRSZXF1ZXN0IHByb3BlcnRpZXNcbltcImFib3J0ZWRcIiwgXCJjb25uZWN0aW9uXCIsIFwic29ja2V0XCJdLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZSwgcHJvcGVydHksIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2N1cnJlbnRSZXF1ZXN0W3Byb3BlcnR5XTsgfSxcbiAgfSk7XG59KTtcblxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuX3Nhbml0aXplT3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIC8vIEVuc3VyZSBoZWFkZXJzIGFyZSBhbHdheXMgcHJlc2VudFxuICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgIG9wdGlvbnMuaGVhZGVycyA9IHt9O1xuICB9XG5cbiAgLy8gU2luY2UgaHR0cC5yZXF1ZXN0IHRyZWF0cyBob3N0IGFzIGFuIGFsaWFzIG9mIGhvc3RuYW1lLFxuICAvLyBidXQgdGhlIHVybCBtb2R1bGUgaW50ZXJwcmV0cyBob3N0IGFzIGhvc3RuYW1lIHBsdXMgcG9ydCxcbiAgLy8gZWxpbWluYXRlIHRoZSBob3N0IHByb3BlcnR5IHRvIGF2b2lkIGNvbmZ1c2lvbi5cbiAgaWYgKG9wdGlvbnMuaG9zdCkge1xuICAgIC8vIFVzZSBob3N0bmFtZSBpZiBzZXQsIGJlY2F1c2UgaXQgaGFzIHByZWNlZGVuY2VcbiAgICBpZiAoIW9wdGlvbnMuaG9zdG5hbWUpIHtcbiAgICAgIG9wdGlvbnMuaG9zdG5hbWUgPSBvcHRpb25zLmhvc3Q7XG4gICAgfVxuICAgIGRlbGV0ZSBvcHRpb25zLmhvc3Q7XG4gIH1cblxuICAvLyBDb21wbGV0ZSB0aGUgVVJMIG9iamVjdCB3aGVuIG5lY2Vzc2FyeVxuICBpZiAoIW9wdGlvbnMucGF0aG5hbWUgJiYgb3B0aW9ucy5wYXRoKSB7XG4gICAgdmFyIHNlYXJjaFBvcyA9IG9wdGlvbnMucGF0aC5pbmRleE9mKFwiP1wiKTtcbiAgICBpZiAoc2VhcmNoUG9zIDwgMCkge1xuICAgICAgb3B0aW9ucy5wYXRobmFtZSA9IG9wdGlvbnMucGF0aDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBvcHRpb25zLnBhdGhuYW1lID0gb3B0aW9ucy5wYXRoLnN1YnN0cmluZygwLCBzZWFyY2hQb3MpO1xuICAgICAgb3B0aW9ucy5zZWFyY2ggPSBvcHRpb25zLnBhdGguc3Vic3RyaW5nKHNlYXJjaFBvcyk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIEV4ZWN1dGVzIHRoZSBuZXh0IG5hdGl2ZSByZXF1ZXN0IChpbml0aWFsIG9yIHJlZGlyZWN0KVxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuX3BlcmZvcm1SZXF1ZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBMb2FkIHRoZSBuYXRpdmUgcHJvdG9jb2xcbiAgdmFyIHByb3RvY29sID0gdGhpcy5fb3B0aW9ucy5wcm90b2NvbDtcbiAgdmFyIG5hdGl2ZVByb3RvY29sID0gdGhpcy5fb3B0aW9ucy5uYXRpdmVQcm90b2NvbHNbcHJvdG9jb2xdO1xuICBpZiAoIW5hdGl2ZVByb3RvY29sKSB7XG4gICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgbmV3IFR5cGVFcnJvcihcIlVuc3VwcG9ydGVkIHByb3RvY29sIFwiICsgcHJvdG9jb2wpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBJZiBzcGVjaWZpZWQsIHVzZSB0aGUgYWdlbnQgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvdG9jb2xcbiAgLy8gKEhUVFAgYW5kIEhUVFBTIHVzZSBkaWZmZXJlbnQgdHlwZXMgb2YgYWdlbnRzKVxuICBpZiAodGhpcy5fb3B0aW9ucy5hZ2VudHMpIHtcbiAgICB2YXIgc2NoZW1lID0gcHJvdG9jb2wuc3Vic3RyKDAsIHByb3RvY29sLmxlbmd0aCAtIDEpO1xuICAgIHRoaXMuX29wdGlvbnMuYWdlbnQgPSB0aGlzLl9vcHRpb25zLmFnZW50c1tzY2hlbWVdO1xuICB9XG5cbiAgLy8gQ3JlYXRlIHRoZSBuYXRpdmUgcmVxdWVzdFxuICB2YXIgcmVxdWVzdCA9IHRoaXMuX2N1cnJlbnRSZXF1ZXN0ID1cbiAgICAgICAgbmF0aXZlUHJvdG9jb2wucmVxdWVzdCh0aGlzLl9vcHRpb25zLCB0aGlzLl9vbk5hdGl2ZVJlc3BvbnNlKTtcbiAgdGhpcy5fY3VycmVudFVybCA9IHVybC5mb3JtYXQodGhpcy5fb3B0aW9ucyk7XG5cbiAgLy8gU2V0IHVwIGV2ZW50IGhhbmRsZXJzXG4gIHJlcXVlc3QuX3JlZGlyZWN0YWJsZSA9IHRoaXM7XG4gIGZvciAodmFyIGV2ZW50IGluIGV2ZW50SGFuZGxlcnMpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChldmVudCkge1xuICAgICAgcmVxdWVzdC5vbihldmVudCwgZXZlbnRIYW5kbGVyc1tldmVudF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEVuZCBhIHJlZGlyZWN0ZWQgcmVxdWVzdFxuICAvLyAoVGhlIGZpcnN0IHJlcXVlc3QgbXVzdCBiZSBlbmRlZCBleHBsaWNpdGx5IHdpdGggUmVkaXJlY3RhYmxlUmVxdWVzdCNlbmQpXG4gIGlmICh0aGlzLl9pc1JlZGlyZWN0KSB7XG4gICAgLy8gV3JpdGUgdGhlIHJlcXVlc3QgZW50aXR5IGFuZCBlbmQuXG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgYnVmZmVycyA9IHRoaXMuX3JlcXVlc3RCb2R5QnVmZmVycztcbiAgICAoZnVuY3Rpb24gd3JpdGVOZXh0KGVycm9yKSB7XG4gICAgICAvLyBPbmx5IHdyaXRlIGlmIHRoaXMgcmVxdWVzdCBoYXMgbm90IGJlZW4gcmVkaXJlY3RlZCB5ZXRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocmVxdWVzdCA9PT0gc2VsZi5fY3VycmVudFJlcXVlc3QpIHtcbiAgICAgICAgLy8gUmVwb3J0IGFueSB3cml0ZSBlcnJvcnNcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXcml0ZSB0aGUgbmV4dCBidWZmZXIgaWYgdGhlcmUgYXJlIHN0aWxsIGxlZnRcbiAgICAgICAgZWxzZSBpZiAoaSA8IGJ1ZmZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlcnNbaSsrXTtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgIGlmICghcmVxdWVzdC5maW5pc2hlZCkge1xuICAgICAgICAgICAgcmVxdWVzdC53cml0ZShidWZmZXIuZGF0YSwgYnVmZmVyLmVuY29kaW5nLCB3cml0ZU5leHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBFbmQgdGhlIHJlcXVlc3QgaWYgYGVuZGAgaGFzIGJlZW4gY2FsbGVkIG9uIHVzXG4gICAgICAgIGVsc2UgaWYgKHNlbGYuX2VuZGVkKSB7XG4gICAgICAgICAgcmVxdWVzdC5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0oKSk7XG4gIH1cbn07XG5cbi8vIFByb2Nlc3NlcyBhIHJlc3BvbnNlIGZyb20gdGhlIGN1cnJlbnQgbmF0aXZlIHJlcXVlc3RcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLl9wcm9jZXNzUmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgLy8gU3RvcmUgdGhlIHJlZGlyZWN0ZWQgcmVzcG9uc2VcbiAgdmFyIHN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXNDb2RlO1xuICBpZiAodGhpcy5fb3B0aW9ucy50cmFja1JlZGlyZWN0cykge1xuICAgIHRoaXMuX3JlZGlyZWN0cy5wdXNoKHtcbiAgICAgIHVybDogdGhpcy5fY3VycmVudFVybCxcbiAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gUkZDNzIzMcKnNi40OiBUaGUgM3h4IChSZWRpcmVjdGlvbikgY2xhc3Mgb2Ygc3RhdHVzIGNvZGUgaW5kaWNhdGVzXG4gIC8vIHRoYXQgZnVydGhlciBhY3Rpb24gbmVlZHMgdG8gYmUgdGFrZW4gYnkgdGhlIHVzZXIgYWdlbnQgaW4gb3JkZXIgdG9cbiAgLy8gZnVsZmlsbCB0aGUgcmVxdWVzdC4gSWYgYSBMb2NhdGlvbiBoZWFkZXIgZmllbGQgaXMgcHJvdmlkZWQsXG4gIC8vIHRoZSB1c2VyIGFnZW50IE1BWSBhdXRvbWF0aWNhbGx5IHJlZGlyZWN0IGl0cyByZXF1ZXN0IHRvIHRoZSBVUklcbiAgLy8gcmVmZXJlbmNlZCBieSB0aGUgTG9jYXRpb24gZmllbGQgdmFsdWUsXG4gIC8vIGV2ZW4gaWYgdGhlIHNwZWNpZmljIHN0YXR1cyBjb2RlIGlzIG5vdCB1bmRlcnN0b29kLlxuICB2YXIgbG9jYXRpb24gPSByZXNwb25zZS5oZWFkZXJzLmxvY2F0aW9uO1xuICBpZiAobG9jYXRpb24gJiYgdGhpcy5fb3B0aW9ucy5mb2xsb3dSZWRpcmVjdHMgIT09IGZhbHNlICYmXG4gICAgICBzdGF0dXNDb2RlID49IDMwMCAmJiBzdGF0dXNDb2RlIDwgNDAwKSB7XG4gICAgLy8gQWJvcnQgdGhlIGN1cnJlbnQgcmVxdWVzdFxuICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0Lm9uKFwiZXJyb3JcIiwgbm9vcCk7XG4gICAgdGhpcy5fY3VycmVudFJlcXVlc3QuYWJvcnQoKTtcbiAgICAvLyBEaXNjYXJkIHRoZSByZW1haW5kZXIgb2YgdGhlIHJlc3BvbnNlIHRvIGF2b2lkIHdhaXRpbmcgZm9yIGRhdGFcbiAgICByZXNwb25zZS5kZXN0cm95KCk7XG5cbiAgICAvLyBSRkM3MjMxwqc2LjQ6IEEgY2xpZW50IFNIT1VMRCBkZXRlY3QgYW5kIGludGVydmVuZVxuICAgIC8vIGluIGN5Y2xpY2FsIHJlZGlyZWN0aW9ucyAoaS5lLiwgXCJpbmZpbml0ZVwiIHJlZGlyZWN0aW9uIGxvb3BzKS5cbiAgICBpZiAoKyt0aGlzLl9yZWRpcmVjdENvdW50ID4gdGhpcy5fb3B0aW9ucy5tYXhSZWRpcmVjdHMpIHtcbiAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIG5ldyBUb29NYW55UmVkaXJlY3RzRXJyb3IoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUkZDNzIzMcKnNi40OiBBdXRvbWF0aWMgcmVkaXJlY3Rpb24gbmVlZHMgdG8gZG9uZSB3aXRoXG4gICAgLy8gY2FyZSBmb3IgbWV0aG9kcyBub3Qga25vd24gdG8gYmUgc2FmZSwgW+KApl1cbiAgICAvLyBSRkM3MjMxwqc2LjQuMuKAkzM6IEZvciBoaXN0b3JpY2FsIHJlYXNvbnMsIGEgdXNlciBhZ2VudCBNQVkgY2hhbmdlXG4gICAgLy8gdGhlIHJlcXVlc3QgbWV0aG9kIGZyb20gUE9TVCB0byBHRVQgZm9yIHRoZSBzdWJzZXF1ZW50IHJlcXVlc3QuXG4gICAgaWYgKChzdGF0dXNDb2RlID09PSAzMDEgfHwgc3RhdHVzQ29kZSA9PT0gMzAyKSAmJiB0aGlzLl9vcHRpb25zLm1ldGhvZCA9PT0gXCJQT1NUXCIgfHxcbiAgICAgICAgLy8gUkZDNzIzMcKnNi40LjQ6IFRoZSAzMDMgKFNlZSBPdGhlcikgc3RhdHVzIGNvZGUgaW5kaWNhdGVzIHRoYXRcbiAgICAgICAgLy8gdGhlIHNlcnZlciBpcyByZWRpcmVjdGluZyB0aGUgdXNlciBhZ2VudCB0byBhIGRpZmZlcmVudCByZXNvdXJjZSBb4oCmXVxuICAgICAgICAvLyBBIHVzZXIgYWdlbnQgY2FuIHBlcmZvcm0gYSByZXRyaWV2YWwgcmVxdWVzdCB0YXJnZXRpbmcgdGhhdCBVUklcbiAgICAgICAgLy8gKGEgR0VUIG9yIEhFQUQgcmVxdWVzdCBpZiB1c2luZyBIVFRQKSBb4oCmXVxuICAgICAgICAoc3RhdHVzQ29kZSA9PT0gMzAzKSAmJiAhL14oPzpHRVR8SEVBRCkkLy50ZXN0KHRoaXMuX29wdGlvbnMubWV0aG9kKSkge1xuICAgICAgdGhpcy5fb3B0aW9ucy5tZXRob2QgPSBcIkdFVFwiO1xuICAgICAgLy8gRHJvcCBhIHBvc3NpYmxlIGVudGl0eSBhbmQgaGVhZGVycyByZWxhdGVkIHRvIGl0XG4gICAgICB0aGlzLl9yZXF1ZXN0Qm9keUJ1ZmZlcnMgPSBbXTtcbiAgICAgIHJlbW92ZU1hdGNoaW5nSGVhZGVycygvXmNvbnRlbnQtL2ksIHRoaXMuX29wdGlvbnMuaGVhZGVycyk7XG4gICAgfVxuXG4gICAgLy8gRHJvcCB0aGUgSG9zdCBoZWFkZXIsIGFzIHRoZSByZWRpcmVjdCBtaWdodCBsZWFkIHRvIGEgZGlmZmVyZW50IGhvc3RcbiAgICB2YXIgcHJldmlvdXNIb3N0TmFtZSA9IHJlbW92ZU1hdGNoaW5nSGVhZGVycygvXmhvc3QkL2ksIHRoaXMuX29wdGlvbnMuaGVhZGVycykgfHxcbiAgICAgIHVybC5wYXJzZSh0aGlzLl9jdXJyZW50VXJsKS5ob3N0bmFtZTtcblxuICAgIC8vIENyZWF0ZSB0aGUgcmVkaXJlY3RlZCByZXF1ZXN0XG4gICAgdmFyIHJlZGlyZWN0VXJsID0gdXJsLnJlc29sdmUodGhpcy5fY3VycmVudFVybCwgbG9jYXRpb24pO1xuICAgIGRlYnVnKFwicmVkaXJlY3RpbmcgdG9cIiwgcmVkaXJlY3RVcmwpO1xuICAgIHRoaXMuX2lzUmVkaXJlY3QgPSB0cnVlO1xuICAgIHZhciByZWRpcmVjdFVybFBhcnRzID0gdXJsLnBhcnNlKHJlZGlyZWN0VXJsKTtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMuX29wdGlvbnMsIHJlZGlyZWN0VXJsUGFydHMpO1xuXG4gICAgLy8gRHJvcCB0aGUgQXV0aG9yaXphdGlvbiBoZWFkZXIgaWYgcmVkaXJlY3RpbmcgdG8gYW5vdGhlciBob3N0XG4gICAgaWYgKHJlZGlyZWN0VXJsUGFydHMuaG9zdG5hbWUgIT09IHByZXZpb3VzSG9zdE5hbWUpIHtcbiAgICAgIHJlbW92ZU1hdGNoaW5nSGVhZGVycygvXmF1dGhvcml6YXRpb24kL2ksIHRoaXMuX29wdGlvbnMuaGVhZGVycyk7XG4gICAgfVxuXG4gICAgLy8gRXZhbHVhdGUgdGhlIGJlZm9yZVJlZGlyZWN0IGNhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLmJlZm9yZVJlZGlyZWN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHZhciByZXNwb25zZURldGFpbHMgPSB7IGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMuYmVmb3JlUmVkaXJlY3QuY2FsbChudWxsLCB0aGlzLl9vcHRpb25zLCByZXNwb25zZURldGFpbHMpO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9zYW5pdGl6ZU9wdGlvbnModGhpcy5fb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSB0aGUgcmVkaXJlY3RlZCByZXF1ZXN0XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX3BlcmZvcm1SZXF1ZXN0KCk7XG4gICAgfVxuICAgIGNhdGNoIChjYXVzZSkge1xuICAgICAgdmFyIGVycm9yID0gbmV3IFJlZGlyZWN0aW9uRXJyb3IoXCJSZWRpcmVjdGVkIHJlcXVlc3QgZmFpbGVkOiBcIiArIGNhdXNlLm1lc3NhZ2UpO1xuICAgICAgZXJyb3IuY2F1c2UgPSBjYXVzZTtcbiAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gVGhlIHJlc3BvbnNlIGlzIG5vdCBhIHJlZGlyZWN0OyByZXR1cm4gaXQgYXMtaXNcbiAgICByZXNwb25zZS5yZXNwb25zZVVybCA9IHRoaXMuX2N1cnJlbnRVcmw7XG4gICAgcmVzcG9uc2UucmVkaXJlY3RzID0gdGhpcy5fcmVkaXJlY3RzO1xuICAgIHRoaXMuZW1pdChcInJlc3BvbnNlXCIsIHJlc3BvbnNlKTtcblxuICAgIC8vIENsZWFuIHVwXG4gICAgdGhpcy5fcmVxdWVzdEJvZHlCdWZmZXJzID0gW107XG4gIH1cbn07XG5cbi8vIFdyYXBzIHRoZSBrZXkvdmFsdWUgb2JqZWN0IG9mIHByb3RvY29scyB3aXRoIHJlZGlyZWN0IGZ1bmN0aW9uYWxpdHlcbmZ1bmN0aW9uIHdyYXAocHJvdG9jb2xzKSB7XG4gIC8vIERlZmF1bHQgc2V0dGluZ3NcbiAgdmFyIGV4cG9ydHMgPSB7XG4gICAgbWF4UmVkaXJlY3RzOiAyMSxcbiAgICBtYXhCb2R5TGVuZ3RoOiAxMCAqIDEwMjQgKiAxMDI0LFxuICB9O1xuXG4gIC8vIFdyYXAgZWFjaCBwcm90b2NvbFxuICB2YXIgbmF0aXZlUHJvdG9jb2xzID0ge307XG4gIE9iamVjdC5rZXlzKHByb3RvY29scykuZm9yRWFjaChmdW5jdGlvbiAoc2NoZW1lKSB7XG4gICAgdmFyIHByb3RvY29sID0gc2NoZW1lICsgXCI6XCI7XG4gICAgdmFyIG5hdGl2ZVByb3RvY29sID0gbmF0aXZlUHJvdG9jb2xzW3Byb3RvY29sXSA9IHByb3RvY29sc1tzY2hlbWVdO1xuICAgIHZhciB3cmFwcGVkUHJvdG9jb2wgPSBleHBvcnRzW3NjaGVtZV0gPSBPYmplY3QuY3JlYXRlKG5hdGl2ZVByb3RvY29sKTtcblxuICAgIC8vIEV4ZWN1dGVzIGEgcmVxdWVzdCwgZm9sbG93aW5nIHJlZGlyZWN0c1xuICAgIHdyYXBwZWRQcm90b2NvbC5yZXF1ZXN0ID0gZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgLy8gUGFyc2UgcGFyYW1ldGVyc1xuICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YXIgdXJsU3RyID0gaW5wdXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaW5wdXQgPSB1cmxUb09wdGlvbnMobmV3IFVSTCh1cmxTdHIpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICBpbnB1dCA9IHVybC5wYXJzZSh1cmxTdHIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChVUkwgJiYgKGlucHV0IGluc3RhbmNlb2YgVVJMKSkge1xuICAgICAgICBpbnB1dCA9IHVybFRvT3B0aW9ucyhpbnB1dCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gaW5wdXQ7XG4gICAgICAgIGlucHV0ID0geyBwcm90b2NvbDogcHJvdG9jb2wgfTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCBkZWZhdWx0c1xuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBtYXhSZWRpcmVjdHM6IGV4cG9ydHMubWF4UmVkaXJlY3RzLFxuICAgICAgICBtYXhCb2R5TGVuZ3RoOiBleHBvcnRzLm1heEJvZHlMZW5ndGgsXG4gICAgICB9LCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLm5hdGl2ZVByb3RvY29scyA9IG5hdGl2ZVByb3RvY29scztcblxuICAgICAgYXNzZXJ0LmVxdWFsKG9wdGlvbnMucHJvdG9jb2wsIHByb3RvY29sLCBcInByb3RvY29sIG1pc21hdGNoXCIpO1xuICAgICAgZGVidWcoXCJvcHRpb25zXCIsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIG5ldyBSZWRpcmVjdGFibGVSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLy8gRXhlY3V0ZXMgYSBHRVQgcmVxdWVzdCwgZm9sbG93aW5nIHJlZGlyZWN0c1xuICAgIHdyYXBwZWRQcm90b2NvbC5nZXQgPSBmdW5jdGlvbiAoaW5wdXQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IHdyYXBwZWRQcm90b2NvbC5yZXF1ZXN0KGlucHV0LCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICByZXF1ZXN0LmVuZCgpO1xuICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBleHBvcnRzO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gbm9vcCgpIHsgLyogZW1wdHkgKi8gfVxuXG4vLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL21hc3Rlci9saWIvaW50ZXJuYWwvdXJsLmpzXG5mdW5jdGlvbiB1cmxUb09wdGlvbnModXJsT2JqZWN0KSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIHByb3RvY29sOiB1cmxPYmplY3QucHJvdG9jb2wsXG4gICAgaG9zdG5hbWU6IHVybE9iamVjdC5ob3N0bmFtZS5zdGFydHNXaXRoKFwiW1wiKSA/XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdXJsT2JqZWN0Lmhvc3RuYW1lLnNsaWNlKDEsIC0xKSA6XG4gICAgICB1cmxPYmplY3QuaG9zdG5hbWUsXG4gICAgaGFzaDogdXJsT2JqZWN0Lmhhc2gsXG4gICAgc2VhcmNoOiB1cmxPYmplY3Quc2VhcmNoLFxuICAgIHBhdGhuYW1lOiB1cmxPYmplY3QucGF0aG5hbWUsXG4gICAgcGF0aDogdXJsT2JqZWN0LnBhdGhuYW1lICsgdXJsT2JqZWN0LnNlYXJjaCxcbiAgICBocmVmOiB1cmxPYmplY3QuaHJlZixcbiAgfTtcbiAgaWYgKHVybE9iamVjdC5wb3J0ICE9PSBcIlwiKSB7XG4gICAgb3B0aW9ucy5wb3J0ID0gTnVtYmVyKHVybE9iamVjdC5wb3J0KTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTWF0Y2hpbmdIZWFkZXJzKHJlZ2V4LCBoZWFkZXJzKSB7XG4gIHZhciBsYXN0VmFsdWU7XG4gIGZvciAodmFyIGhlYWRlciBpbiBoZWFkZXJzKSB7XG4gICAgaWYgKHJlZ2V4LnRlc3QoaGVhZGVyKSkge1xuICAgICAgbGFzdFZhbHVlID0gaGVhZGVyc1toZWFkZXJdO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbaGVhZGVyXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxhc3RWYWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXJyb3JUeXBlKGNvZGUsIGRlZmF1bHRNZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIEN1c3RvbUVycm9yKG1lc3NhZ2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlIHx8IGRlZmF1bHRNZXNzYWdlO1xuICB9XG4gIEN1c3RvbUVycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuICBDdXN0b21FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdXN0b21FcnJvcjtcbiAgQ3VzdG9tRXJyb3IucHJvdG90eXBlLm5hbWUgPSBcIkVycm9yIFtcIiArIGNvZGUgKyBcIl1cIjtcbiAgQ3VzdG9tRXJyb3IucHJvdG90eXBlLmNvZGUgPSBjb2RlO1xuICByZXR1cm4gQ3VzdG9tRXJyb3I7XG59XG5cbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gd3JhcCh7IGh0dHA6IGh0dHAsIGh0dHBzOiBodHRwcyB9KTtcbm1vZHVsZS5leHBvcnRzLndyYXAgPSB3cmFwO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAyOiAgICAgICduZWVkIGRpY3Rpb25hcnknLCAgICAgLyogWl9ORUVEX0RJQ1QgICAgICAgMiAgKi9cbiAgMTogICAgICAnc3RyZWFtIGVuZCcsICAgICAgICAgIC8qIFpfU1RSRUFNX0VORCAgICAgIDEgICovXG4gIDA6ICAgICAgJycsICAgICAgICAgICAgICAgICAgICAvKiBaX09LICAgICAgICAgICAgICAwICAqL1xuICAnLTEnOiAgICdmaWxlIGVycm9yJywgICAgICAgICAgLyogWl9FUlJOTyAgICAgICAgICgtMSkgKi9cbiAgJy0yJzogICAnc3RyZWFtIGVycm9yJywgICAgICAgIC8qIFpfU1RSRUFNX0VSUk9SICAoLTIpICovXG4gICctMyc6ICAgJ2RhdGEgZXJyb3InLCAgICAgICAgICAvKiBaX0RBVEFfRVJST1IgICAgKC0zKSAqL1xuICAnLTQnOiAgICdpbnN1ZmZpY2llbnQgbWVtb3J5JywgLyogWl9NRU1fRVJST1IgICAgICgtNCkgKi9cbiAgJy01JzogICAnYnVmZmVyIGVycm9yJywgICAgICAgIC8qIFpfQlVGX0VSUk9SICAgICAoLTUpICovXG4gICctNic6ICAgJ2luY29tcGF0aWJsZSB2ZXJzaW9uJyAvKiBaX1ZFUlNJT05fRVJST1IgKC02KSAqL1xufTtcbiIsIlxuXG5mdW5jdGlvbiBaU3RyZWFtKCkge1xuICAvKiBuZXh0IGlucHV0IGJ5dGUgKi9cbiAgdGhpcy5pbnB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcbiAgdGhpcy5uZXh0X2luID0gMDtcbiAgLyogbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSBhdCBpbnB1dCAqL1xuICB0aGlzLmF2YWlsX2luID0gMDtcbiAgLyogdG90YWwgbnVtYmVyIG9mIGlucHV0IGJ5dGVzIHJlYWQgc28gZmFyICovXG4gIHRoaXMudG90YWxfaW4gPSAwO1xuICAvKiBuZXh0IG91dHB1dCBieXRlIHNob3VsZCBiZSBwdXQgdGhlcmUgKi9cbiAgdGhpcy5vdXRwdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gIHRoaXMubmV4dF9vdXQgPSAwO1xuICAvKiByZW1haW5pbmcgZnJlZSBzcGFjZSBhdCBvdXRwdXQgKi9cbiAgdGhpcy5hdmFpbF9vdXQgPSAwO1xuICAvKiB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgb3V0cHV0IHNvIGZhciAqL1xuICB0aGlzLnRvdGFsX291dCA9IDA7XG4gIC8qIGxhc3QgZXJyb3IgbWVzc2FnZSwgTlVMTCBpZiBubyBlcnJvciAqL1xuICB0aGlzLm1zZyA9ICcnLypaX05VTEwqLztcbiAgLyogbm90IHZpc2libGUgYnkgYXBwbGljYXRpb25zICovXG4gIHRoaXMuc3RhdGUgPSBudWxsO1xuICAvKiBiZXN0IGd1ZXNzIGFib3V0IHRoZSBkYXRhIHR5cGU6IGJpbmFyeSBvciB0ZXh0ICovXG4gIHRoaXMuZGF0YV90eXBlID0gMi8qWl9VTktOT1dOKi87XG4gIC8qIGFkbGVyMzIgdmFsdWUgb2YgdGhlIHVuY29tcHJlc3NlZCBkYXRhICovXG4gIHRoaXMuYWRsZXIgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBaU3RyZWFtO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBUWVBFRF9PSyA9ICAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2YgVWludDE2QXJyYXkgIT09ICd1bmRlZmluZWQnKSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2YgSW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcpO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24ob2JqIC8qZnJvbTEsIGZyb20yLCBmcm9tMywgLi4uKi8pIHtcbiAgdmFyIHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB3aGlsZSAoc291cmNlcy5sZW5ndGgpIHtcbiAgICB2YXIgc291cmNlID0gc291cmNlcy5zaGlmdCgpO1xuICAgIGlmICghc291cmNlKSB7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc291cmNlICsgJ211c3QgYmUgbm9uLW9iamVjdCcpO1xuICAgIH1cblxuICAgIGZvciAodmFyIHAgaW4gc291cmNlKSB7XG4gICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICAgIG9ialtwXSA9IHNvdXJjZVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5cbi8vIHJlZHVjZSBidWZmZXIgc2l6ZSwgYXZvaWRpbmcgbWVtIGNvcHlcbmV4cG9ydCBmdW5jdGlvbiBzaHJpbmtCdWYoYnVmLCBzaXplKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSBzaXplKSB7IHJldHVybiBidWY7IH1cbiAgaWYgKGJ1Zi5zdWJhcnJheSkgeyByZXR1cm4gYnVmLnN1YmFycmF5KDAsIHNpemUpOyB9XG4gIGJ1Zi5sZW5ndGggPSBzaXplO1xuICByZXR1cm4gYnVmO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5U2V0KGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7XG4gIGlmIChzcmMuc3ViYXJyYXkgJiYgZGVzdC5zdWJhcnJheSkge1xuICAgIGRlc3Quc2V0KHNyYy5zdWJhcnJheShzcmNfb2Zmcywgc3JjX29mZnMgKyBsZW4pLCBkZXN0X29mZnMpO1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBGYWxsYmFjayB0byBvcmRpbmFyeSBhcnJheVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgZGVzdFtkZXN0X29mZnMgKyBpXSA9IHNyY1tzcmNfb2ZmcyArIGldO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbkNodW5rcyhjaHVua3MpIHtcbiAgdmFyIGksIGwsIGxlbiwgcG9zLCBjaHVuaywgcmVzdWx0O1xuXG4gIC8vIGNhbGN1bGF0ZSBkYXRhIGxlbmd0aFxuICBsZW4gPSAwO1xuICBmb3IgKGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGxlbiArPSBjaHVua3NbaV0ubGVuZ3RoO1xuICB9XG5cbiAgLy8gam9pbiBjaHVua3NcbiAgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcbiAgcG9zID0gMDtcbiAgZm9yIChpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjaHVuayA9IGNodW5rc1tpXTtcbiAgICByZXN1bHQuc2V0KGNodW5rLCBwb3MpO1xuICAgIHBvcyArPSBjaHVuay5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbmV4cG9ydCB2YXIgQnVmOCA9IFVpbnQ4QXJyYXk7XG5leHBvcnQgdmFyIEJ1ZjE2ID0gVWludDE2QXJyYXk7XG5leHBvcnQgdmFyIEJ1ZjMyID0gSW50MzJBcnJheTtcbi8vIEVuYWJsZS9EaXNhYmxlIHR5cGVkIGFycmF5cyB1c2UsIGZvciB0ZXN0aW5nXG4vL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge2FycmF5U2V0fSBmcm9tICcuL3V0aWxzJztcblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLy92YXIgWl9GSUxURVJFRCAgICAgICAgICA9IDE7XG4vL3ZhciBaX0hVRkZNQU5fT05MWSAgICAgID0gMjtcbi8vdmFyIFpfUkxFICAgICAgICAgICAgICAgPSAzO1xudmFyIFpfRklYRUQgPSA0O1xuLy92YXIgWl9ERUZBVUxUX1NUUkFURUdZICA9IDA7XG5cbi8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbnZhciBaX0JJTkFSWSA9IDA7XG52YXIgWl9URVhUID0gMTtcbi8vdmFyIFpfQVNDSUkgICAgICAgICAgICAgPSAxOyAvLyA9IFpfVEVYVFxudmFyIFpfVU5LTk9XTiA9IDI7XG5cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuZnVuY3Rpb24gemVybyhidWYpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7XG4gIHdoaWxlICgtLWxlbiA+PSAwKSB7XG4gICAgYnVmW2xlbl0gPSAwO1xuICB9XG59XG5cbi8vIEZyb20genV0aWwuaFxuXG52YXIgU1RPUkVEX0JMT0NLID0gMDtcbnZhciBTVEFUSUNfVFJFRVMgPSAxO1xudmFyIERZTl9UUkVFUyA9IDI7XG4vKiBUaGUgdGhyZWUga2luZHMgb2YgYmxvY2sgdHlwZSAqL1xuXG52YXIgTUlOX01BVENIID0gMztcbnZhciBNQVhfTUFUQ0ggPSAyNTg7XG4vKiBUaGUgbWluaW11bSBhbmQgbWF4aW11bSBtYXRjaCBsZW5ndGhzICovXG5cbi8vIEZyb20gZGVmbGF0ZS5oXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEludGVybmFsIGNvbXByZXNzaW9uIHN0YXRlLlxuICovXG5cbnZhciBMRU5HVEhfQ09ERVMgPSAyOTtcbi8qIG51bWJlciBvZiBsZW5ndGggY29kZXMsIG5vdCBjb3VudGluZyB0aGUgc3BlY2lhbCBFTkRfQkxPQ0sgY29kZSAqL1xuXG52YXIgTElURVJBTFMgPSAyNTY7XG4vKiBudW1iZXIgb2YgbGl0ZXJhbCBieXRlcyAwLi4yNTUgKi9cblxudmFyIExfQ09ERVMgPSBMSVRFUkFMUyArIDEgKyBMRU5HVEhfQ09ERVM7XG4vKiBudW1iZXIgb2YgTGl0ZXJhbCBvciBMZW5ndGggY29kZXMsIGluY2x1ZGluZyB0aGUgRU5EX0JMT0NLIGNvZGUgKi9cblxudmFyIERfQ09ERVMgPSAzMDtcbi8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuXG52YXIgQkxfQ09ERVMgPSAxOTtcbi8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqL1xuXG52YXIgSEVBUF9TSVpFID0gMiAqIExfQ09ERVMgKyAxO1xuLyogbWF4aW11bSBoZWFwIHNpemUgKi9cblxudmFyIE1BWF9CSVRTID0gMTU7XG4vKiBBbGwgY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CSVRTIGJpdHMgKi9cblxudmFyIEJ1Zl9zaXplID0gMTY7XG4vKiBzaXplIG9mIGJpdCBidWZmZXIgaW4gYmlfYnVmICovXG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdGFudHNcbiAqL1xuXG52YXIgTUFYX0JMX0JJVFMgPSA3O1xuLyogQml0IGxlbmd0aCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JMX0JJVFMgYml0cyAqL1xuXG52YXIgRU5EX0JMT0NLID0gMjU2O1xuLyogZW5kIG9mIGJsb2NrIGxpdGVyYWwgY29kZSAqL1xuXG52YXIgUkVQXzNfNiA9IDE2O1xuLyogcmVwZWF0IHByZXZpb3VzIGJpdCBsZW5ndGggMy02IHRpbWVzICgyIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG52YXIgUkVQWl8zXzEwID0gMTc7XG4vKiByZXBlYXQgYSB6ZXJvIGxlbmd0aCAzLTEwIHRpbWVzICAoMyBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi9cblxudmFyIFJFUFpfMTFfMTM4ID0gMTg7XG4vKiByZXBlYXQgYSB6ZXJvIGxlbmd0aCAxMS0xMzggdGltZXMgICg3IGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21tYS1zcGFjaW5nLGFycmF5LWJyYWNrZXQtc3BhY2luZyAqL1xudmFyIGV4dHJhX2xiaXRzID0gLyogZXh0cmEgYml0cyBmb3IgZWFjaCBsZW5ndGggY29kZSAqLyBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMSwgMSwgMSwgMiwgMiwgMiwgMiwgMywgMywgMywgMywgNCwgNCwgNCwgNCwgNSwgNSwgNSwgNSwgMF07XG5cbnZhciBleHRyYV9kYml0cyA9IC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggZGlzdGFuY2UgY29kZSAqLyBbMCwgMCwgMCwgMCwgMSwgMSwgMiwgMiwgMywgMywgNCwgNCwgNSwgNSwgNiwgNiwgNywgNywgOCwgOCwgOSwgOSwgMTAsIDEwLCAxMSwgMTEsIDEyLCAxMiwgMTMsIDEzXTtcblxudmFyIGV4dHJhX2JsYml0cyA9IC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggYml0IGxlbmd0aCBjb2RlICovIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAyLCAzLCA3XTtcblxudmFyIGJsX29yZGVyID0gWzE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTVdO1xuLyogZXNsaW50LWVuYWJsZSBjb21tYS1zcGFjaW5nLGFycmF5LWJyYWNrZXQtc3BhY2luZyAqL1xuXG4vKiBUaGUgbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aCBjb2RlcyBhcmUgc2VudCBpbiBvcmRlciBvZiBkZWNyZWFzaW5nXG4gKiBwcm9iYWJpbGl0eSwgdG8gYXZvaWQgdHJhbnNtaXR0aW5nIHRoZSBsZW5ndGhzIGZvciB1bnVzZWQgYml0IGxlbmd0aCBjb2Rlcy5cbiAqL1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIExvY2FsIGRhdGEuIFRoZXNlIGFyZSBpbml0aWFsaXplZCBvbmx5IG9uY2UuXG4gKi9cblxuLy8gV2UgcHJlLWZpbGwgYXJyYXlzIHdpdGggMCB0byBhdm9pZCB1bmluaXRpYWxpemVkIGdhcHNcblxudmFyIERJU1RfQ09ERV9MRU4gPSA1MTI7IC8qIHNlZSBkZWZpbml0aW9uIG9mIGFycmF5IGRpc3RfY29kZSBiZWxvdyAqL1xuXG4vLyAhISEhIFVzZSBmbGF0IGFycmF5IGluc2RlYWQgb2Ygc3RydWN0dXJlLCBGcmVxID0gaSoyLCBMZW4gPSBpKjIrMVxudmFyIHN0YXRpY19sdHJlZSA9IG5ldyBBcnJheSgoTF9DT0RFUyArIDIpICogMik7XG56ZXJvKHN0YXRpY19sdHJlZSk7XG4vKiBUaGUgc3RhdGljIGxpdGVyYWwgdHJlZS4gU2luY2UgdGhlIGJpdCBsZW5ndGhzIGFyZSBpbXBvc2VkLCB0aGVyZSBpcyBub1xuICogbmVlZCBmb3IgdGhlIExfQ09ERVMgZXh0cmEgY29kZXMgdXNlZCBkdXJpbmcgaGVhcCBjb25zdHJ1Y3Rpb24uIEhvd2V2ZXJcbiAqIFRoZSBjb2RlcyAyODYgYW5kIDI4NyBhcmUgbmVlZGVkIHRvIGJ1aWxkIGEgY2Fub25pY2FsIHRyZWUgKHNlZSBfdHJfaW5pdFxuICogYmVsb3cpLlxuICovXG5cbnZhciBzdGF0aWNfZHRyZWUgPSBuZXcgQXJyYXkoRF9DT0RFUyAqIDIpO1xuemVybyhzdGF0aWNfZHRyZWUpO1xuLyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlLiAoQWN0dWFsbHkgYSB0cml2aWFsIHRyZWUgc2luY2UgYWxsIGNvZGVzIHVzZVxuICogNSBiaXRzLilcbiAqL1xuXG52YXIgX2Rpc3RfY29kZSA9IG5ldyBBcnJheShESVNUX0NPREVfTEVOKTtcbnplcm8oX2Rpc3RfY29kZSk7XG4vKiBEaXN0YW5jZSBjb2Rlcy4gVGhlIGZpcnN0IDI1NiB2YWx1ZXMgY29ycmVzcG9uZCB0byB0aGUgZGlzdGFuY2VzXG4gKiAzIC4uIDI1OCwgdGhlIGxhc3QgMjU2IHZhbHVlcyBjb3JyZXNwb25kIHRvIHRoZSB0b3AgOCBiaXRzIG9mXG4gKiB0aGUgMTUgYml0IGRpc3RhbmNlcy5cbiAqL1xuXG52YXIgX2xlbmd0aF9jb2RlID0gbmV3IEFycmF5KE1BWF9NQVRDSCAtIE1JTl9NQVRDSCArIDEpO1xuemVybyhfbGVuZ3RoX2NvZGUpO1xuLyogbGVuZ3RoIGNvZGUgZm9yIGVhY2ggbm9ybWFsaXplZCBtYXRjaCBsZW5ndGggKDAgPT0gTUlOX01BVENIKSAqL1xuXG52YXIgYmFzZV9sZW5ndGggPSBuZXcgQXJyYXkoTEVOR1RIX0NPREVTKTtcbnplcm8oYmFzZV9sZW5ndGgpO1xuLyogRmlyc3Qgbm9ybWFsaXplZCBsZW5ndGggZm9yIGVhY2ggY29kZSAoMCA9IE1JTl9NQVRDSCkgKi9cblxudmFyIGJhc2VfZGlzdCA9IG5ldyBBcnJheShEX0NPREVTKTtcbnplcm8oYmFzZV9kaXN0KTtcbi8qIEZpcnN0IG5vcm1hbGl6ZWQgZGlzdGFuY2UgZm9yIGVhY2ggY29kZSAoMCA9IGRpc3RhbmNlIG9mIDEpICovXG5cblxuZnVuY3Rpb24gU3RhdGljVHJlZURlc2Moc3RhdGljX3RyZWUsIGV4dHJhX2JpdHMsIGV4dHJhX2Jhc2UsIGVsZW1zLCBtYXhfbGVuZ3RoKSB7XG5cbiAgdGhpcy5zdGF0aWNfdHJlZSA9IHN0YXRpY190cmVlOyAvKiBzdGF0aWMgdHJlZSBvciBOVUxMICovXG4gIHRoaXMuZXh0cmFfYml0cyA9IGV4dHJhX2JpdHM7IC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggY29kZSBvciBOVUxMICovXG4gIHRoaXMuZXh0cmFfYmFzZSA9IGV4dHJhX2Jhc2U7IC8qIGJhc2UgaW5kZXggZm9yIGV4dHJhX2JpdHMgKi9cbiAgdGhpcy5lbGVtcyA9IGVsZW1zOyAvKiBtYXggbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSB0cmVlICovXG4gIHRoaXMubWF4X2xlbmd0aCA9IG1heF9sZW5ndGg7IC8qIG1heCBiaXQgbGVuZ3RoIGZvciB0aGUgY29kZXMgKi9cblxuICAvLyBzaG93IGlmIGBzdGF0aWNfdHJlZWAgaGFzIGRhdGEgb3IgZHVtbXkgLSBuZWVkZWQgZm9yIG1vbm9tb3JwaGljIG9iamVjdHNcbiAgdGhpcy5oYXNfc3RyZWUgPSBzdGF0aWNfdHJlZSAmJiBzdGF0aWNfdHJlZS5sZW5ndGg7XG59XG5cblxudmFyIHN0YXRpY19sX2Rlc2M7XG52YXIgc3RhdGljX2RfZGVzYztcbnZhciBzdGF0aWNfYmxfZGVzYztcblxuXG5mdW5jdGlvbiBUcmVlRGVzYyhkeW5fdHJlZSwgc3RhdF9kZXNjKSB7XG4gIHRoaXMuZHluX3RyZWUgPSBkeW5fdHJlZTsgLyogdGhlIGR5bmFtaWMgdHJlZSAqL1xuICB0aGlzLm1heF9jb2RlID0gMDsgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXG4gIHRoaXMuc3RhdF9kZXNjID0gc3RhdF9kZXNjOyAvKiB0aGUgY29ycmVzcG9uZGluZyBzdGF0aWMgdHJlZSAqL1xufVxuXG5cblxuZnVuY3Rpb24gZF9jb2RlKGRpc3QpIHtcbiAgcmV0dXJuIGRpc3QgPCAyNTYgPyBfZGlzdF9jb2RlW2Rpc3RdIDogX2Rpc3RfY29kZVsyNTYgKyAoZGlzdCA+Pj4gNyldO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogT3V0cHV0IGEgc2hvcnQgTFNCIGZpcnN0IG9uIHRoZSBzdHJlYW0uXG4gKiBJTiBhc3NlcnRpb246IHRoZXJlIGlzIGVub3VnaCByb29tIGluIHBlbmRpbmdCdWYuXG4gKi9cbmZ1bmN0aW9uIHB1dF9zaG9ydChzLCB3KSB7XG4gIC8vICAgIHB1dF9ieXRlKHMsICh1Y2gpKCh3KSAmIDB4ZmYpKTtcbiAgLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHVzaCkodykgPj4gOCkpO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKHcgPj4+IDgpICYgMHhmZjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSB2YWx1ZSBvbiBhIGdpdmVuIG51bWJlciBvZiBiaXRzLlxuICogSU4gYXNzZXJ0aW9uOiBsZW5ndGggPD0gMTYgYW5kIHZhbHVlIGZpdHMgaW4gbGVuZ3RoIGJpdHMuXG4gKi9cbmZ1bmN0aW9uIHNlbmRfYml0cyhzLCB2YWx1ZSwgbGVuZ3RoKSB7XG4gIGlmIChzLmJpX3ZhbGlkID4gKEJ1Zl9zaXplIC0gbGVuZ3RoKSkge1xuICAgIHMuYmlfYnVmIHw9ICh2YWx1ZSA8PCBzLmJpX3ZhbGlkKSAmIDB4ZmZmZjtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gdmFsdWUgPj4gKEJ1Zl9zaXplIC0gcy5iaV92YWxpZCk7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGggLSBCdWZfc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGg7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzZW5kX2NvZGUocywgYywgdHJlZSkge1xuICBzZW5kX2JpdHMocywgdHJlZVtjICogMl0gLyouQ29kZSovICwgdHJlZVtjICogMiArIDFdIC8qLkxlbiovICk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZXZlcnNlIHRoZSBmaXJzdCBsZW4gYml0cyBvZiBhIGNvZGUsIHVzaW5nIHN0cmFpZ2h0Zm9yd2FyZCBjb2RlIChhIGZhc3RlclxuICogbWV0aG9kIHdvdWxkIHVzZSBhIHRhYmxlKVxuICogSU4gYXNzZXJ0aW9uOiAxIDw9IGxlbiA8PSAxNVxuICovXG5mdW5jdGlvbiBiaV9yZXZlcnNlKGNvZGUsIGxlbikge1xuICB2YXIgcmVzID0gMDtcbiAgZG8ge1xuICAgIHJlcyB8PSBjb2RlICYgMTtcbiAgICBjb2RlID4+Pj0gMTtcbiAgICByZXMgPDw9IDE7XG4gIH0gd2hpbGUgKC0tbGVuID4gMCk7XG4gIHJldHVybiByZXMgPj4+IDE7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGbHVzaCB0aGUgYml0IGJ1ZmZlciwga2VlcGluZyBhdCBtb3N0IDcgYml0cyBpbiBpdC5cbiAqL1xuZnVuY3Rpb24gYmlfZmx1c2gocykge1xuICBpZiAocy5iaV92YWxpZCA9PT0gMTYpIHtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gMDtcbiAgICBzLmJpX3ZhbGlkID0gMDtcblxuICB9IGVsc2UgaWYgKHMuYmlfdmFsaWQgPj0gOCkge1xuICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gcy5iaV9idWYgJiAweGZmO1xuICAgIHMuYmlfYnVmID4+PSA4O1xuICAgIHMuYmlfdmFsaWQgLT0gODtcbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyBmb3IgYSB0cmVlIGFuZCB1cGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGhcbiAqIGZvciB0aGUgY3VycmVudCBibG9jay5cbiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkcyBmcmVxIGFuZCBkYWQgYXJlIHNldCwgaGVhcFtoZWFwX21heF0gYW5kXG4gKiAgICBhYm92ZSBhcmUgdGhlIHRyZWUgbm9kZXMgc29ydGVkIGJ5IGluY3JlYXNpbmcgZnJlcXVlbmN5LlxuICogT1VUIGFzc2VydGlvbnM6IHRoZSBmaWVsZCBsZW4gaXMgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGgsIHRoZVxuICogICAgIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBmcmVxdWVuY2llcyBmb3IgZWFjaCBiaXQgbGVuZ3RoLlxuICogICAgIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzIGFsc28gdXBkYXRlZCBpZiBzdHJlZSBpc1xuICogICAgIG5vdCBudWxsLlxuICovXG5mdW5jdGlvbiBnZW5fYml0bGVuKHMsIGRlc2MpIHtcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7ICAgIC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cbiAgdmFyIHRyZWUgPSBkZXNjLmR5bl90cmVlO1xuICB2YXIgbWF4X2NvZGUgPSBkZXNjLm1heF9jb2RlO1xuICB2YXIgc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5zdGF0aWNfdHJlZTtcbiAgdmFyIGhhc19zdHJlZSA9IGRlc2Muc3RhdF9kZXNjLmhhc19zdHJlZTtcbiAgdmFyIGV4dHJhID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYml0cztcbiAgdmFyIGJhc2UgPSBkZXNjLnN0YXRfZGVzYy5leHRyYV9iYXNlO1xuICB2YXIgbWF4X2xlbmd0aCA9IGRlc2Muc3RhdF9kZXNjLm1heF9sZW5ndGg7XG4gIHZhciBoOyAvKiBoZWFwIGluZGV4ICovXG4gIHZhciBuLCBtOyAvKiBpdGVyYXRlIG92ZXIgdGhlIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIGJpdHM7IC8qIGJpdCBsZW5ndGggKi9cbiAgdmFyIHhiaXRzOyAvKiBleHRyYSBiaXRzICovXG4gIHZhciBmOyAvKiBmcmVxdWVuY3kgKi9cbiAgdmFyIG92ZXJmbG93ID0gMDsgLyogbnVtYmVyIG9mIGVsZW1lbnRzIHdpdGggYml0IGxlbmd0aCB0b28gbGFyZ2UgKi9cblxuICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBzLmJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIC8qIEluIGEgZmlyc3QgcGFzcywgY29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyAod2hpY2ggbWF5XG4gICAqIG92ZXJmbG93IGluIHRoZSBjYXNlIG9mIHRoZSBiaXQgbGVuZ3RoIHRyZWUpLlxuICAgKi9cbiAgdHJlZVtzLmhlYXBbcy5oZWFwX21heF0gKiAyICsgMV0gLyouTGVuKi8gPSAwOyAvKiByb290IG9mIHRoZSBoZWFwICovXG5cbiAgZm9yIChoID0gcy5oZWFwX21heCArIDE7IGggPCBIRUFQX1NJWkU7IGgrKykge1xuICAgIG4gPSBzLmhlYXBbaF07XG4gICAgYml0cyA9IHRyZWVbdHJlZVtuICogMiArIDFdIC8qLkRhZCovICogMiArIDFdIC8qLkxlbiovICsgMTtcbiAgICBpZiAoYml0cyA+IG1heF9sZW5ndGgpIHtcbiAgICAgIGJpdHMgPSBtYXhfbGVuZ3RoO1xuICAgICAgb3ZlcmZsb3crKztcbiAgICB9XG4gICAgdHJlZVtuICogMiArIDFdIC8qLkxlbiovID0gYml0cztcbiAgICAvKiBXZSBvdmVyd3JpdGUgdHJlZVtuXS5EYWQgd2hpY2ggaXMgbm8gbG9uZ2VyIG5lZWRlZCAqL1xuXG4gICAgaWYgKG4gPiBtYXhfY29kZSkge1xuICAgICAgY29udGludWU7XG4gICAgfSAvKiBub3QgYSBsZWFmIG5vZGUgKi9cblxuICAgIHMuYmxfY291bnRbYml0c10rKztcbiAgICB4Yml0cyA9IDA7XG4gICAgaWYgKG4gPj0gYmFzZSkge1xuICAgICAgeGJpdHMgPSBleHRyYVtuIC0gYmFzZV07XG4gICAgfVxuICAgIGYgPSB0cmVlW24gKiAyXSAvKi5GcmVxKi8gO1xuICAgIHMub3B0X2xlbiArPSBmICogKGJpdHMgKyB4Yml0cyk7XG4gICAgaWYgKGhhc19zdHJlZSkge1xuICAgICAgcy5zdGF0aWNfbGVuICs9IGYgKiAoc3RyZWVbbiAqIDIgKyAxXSAvKi5MZW4qLyArIHhiaXRzKTtcbiAgICB9XG4gIH1cbiAgaWYgKG92ZXJmbG93ID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVHJhY2UoKHN0ZGVycixcIlxcbmJpdCBsZW5ndGggb3ZlcmZsb3dcXG5cIikpO1xuICAvKiBUaGlzIGhhcHBlbnMgZm9yIGV4YW1wbGUgb24gb2JqMiBhbmQgcGljIG9mIHRoZSBDYWxnYXJ5IGNvcnB1cyAqL1xuXG4gIC8qIEZpbmQgdGhlIGZpcnN0IGJpdCBsZW5ndGggd2hpY2ggY291bGQgaW5jcmVhc2U6ICovXG4gIGRvIHtcbiAgICBiaXRzID0gbWF4X2xlbmd0aCAtIDE7XG4gICAgd2hpbGUgKHMuYmxfY291bnRbYml0c10gPT09IDApIHtcbiAgICAgIGJpdHMtLTtcbiAgICB9XG4gICAgcy5ibF9jb3VudFtiaXRzXS0tOyAvKiBtb3ZlIG9uZSBsZWFmIGRvd24gdGhlIHRyZWUgKi9cbiAgICBzLmJsX2NvdW50W2JpdHMgKyAxXSArPSAyOyAvKiBtb3ZlIG9uZSBvdmVyZmxvdyBpdGVtIGFzIGl0cyBicm90aGVyICovXG4gICAgcy5ibF9jb3VudFttYXhfbGVuZ3RoXS0tO1xuICAgIC8qIFRoZSBicm90aGVyIG9mIHRoZSBvdmVyZmxvdyBpdGVtIGFsc28gbW92ZXMgb25lIHN0ZXAgdXAsXG4gICAgICogYnV0IHRoaXMgZG9lcyBub3QgYWZmZWN0IGJsX2NvdW50W21heF9sZW5ndGhdXG4gICAgICovXG4gICAgb3ZlcmZsb3cgLT0gMjtcbiAgfSB3aGlsZSAob3ZlcmZsb3cgPiAwKTtcblxuICAvKiBOb3cgcmVjb21wdXRlIGFsbCBiaXQgbGVuZ3Rocywgc2Nhbm5pbmcgaW4gaW5jcmVhc2luZyBmcmVxdWVuY3kuXG4gICAqIGggaXMgc3RpbGwgZXF1YWwgdG8gSEVBUF9TSVpFLiAoSXQgaXMgc2ltcGxlciB0byByZWNvbnN0cnVjdCBhbGxcbiAgICogbGVuZ3RocyBpbnN0ZWFkIG9mIGZpeGluZyBvbmx5IHRoZSB3cm9uZyBvbmVzLiBUaGlzIGlkZWEgaXMgdGFrZW5cbiAgICogZnJvbSAnYXInIHdyaXR0ZW4gYnkgSGFydWhpa28gT2t1bXVyYS4pXG4gICAqL1xuICBmb3IgKGJpdHMgPSBtYXhfbGVuZ3RoOyBiaXRzICE9PSAwOyBiaXRzLS0pIHtcbiAgICBuID0gcy5ibF9jb3VudFtiaXRzXTtcbiAgICB3aGlsZSAobiAhPT0gMCkge1xuICAgICAgbSA9IHMuaGVhcFstLWhdO1xuICAgICAgaWYgKG0gPiBtYXhfY29kZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0cmVlW20gKiAyICsgMV0gLyouTGVuKi8gIT09IGJpdHMpIHtcbiAgICAgICAgLy8gVHJhY2UoKHN0ZGVycixcImNvZGUgJWQgYml0cyAlZC0+JWRcXG5cIiwgbSwgdHJlZVttXS5MZW4sIGJpdHMpKTtcbiAgICAgICAgcy5vcHRfbGVuICs9IChiaXRzIC0gdHJlZVttICogMiArIDFdIC8qLkxlbiovICkgKiB0cmVlW20gKiAyXSAvKi5GcmVxKi8gO1xuICAgICAgICB0cmVlW20gKiAyICsgMV0gLyouTGVuKi8gPSBiaXRzO1xuICAgICAgfVxuICAgICAgbi0tO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogR2VuZXJhdGUgdGhlIGNvZGVzIGZvciBhIGdpdmVuIHRyZWUgYW5kIGJpdCBjb3VudHMgKHdoaWNoIG5lZWQgbm90IGJlXG4gKiBvcHRpbWFsKS5cbiAqIElOIGFzc2VydGlvbjogdGhlIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBiaXQgbGVuZ3RoIHN0YXRpc3RpY3MgZm9yXG4gKiB0aGUgZ2l2ZW4gdHJlZSBhbmQgdGhlIGZpZWxkIGxlbiBpcyBzZXQgZm9yIGFsbCB0cmVlIGVsZW1lbnRzLlxuICogT1VUIGFzc2VydGlvbjogdGhlIGZpZWxkIGNvZGUgaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cyBvZiBub25cbiAqICAgICB6ZXJvIGNvZGUgbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBnZW5fY29kZXModHJlZSwgbWF4X2NvZGUsIGJsX2NvdW50KSB7XG4vLyAgICBjdF9kYXRhICp0cmVlOyAgICAgICAgICAgICAvKiB0aGUgdHJlZSB0byBkZWNvcmF0ZSAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAgICAgICAgICAgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXG4vLyAgICB1c2hmICpibF9jb3VudDsgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoICovXG5cbiAgdmFyIG5leHRfY29kZSA9IG5ldyBBcnJheShNQVhfQklUUyArIDEpOyAvKiBuZXh0IGNvZGUgdmFsdWUgZm9yIGVhY2ggYml0IGxlbmd0aCAqL1xuICB2YXIgY29kZSA9IDA7IC8qIHJ1bm5pbmcgY29kZSB2YWx1ZSAqL1xuICB2YXIgYml0czsgLyogYml0IGluZGV4ICovXG4gIHZhciBuOyAvKiBjb2RlIGluZGV4ICovXG5cbiAgLyogVGhlIGRpc3RyaWJ1dGlvbiBjb3VudHMgYXJlIGZpcnN0IHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGNvZGUgdmFsdWVzXG4gICAqIHdpdGhvdXQgYml0IHJldmVyc2FsLlxuICAgKi9cbiAgZm9yIChiaXRzID0gMTsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG4gICAgbmV4dF9jb2RlW2JpdHNdID0gY29kZSA9IChjb2RlICsgYmxfY291bnRbYml0cyAtIDFdKSA8PCAxO1xuICB9XG4gIC8qIENoZWNrIHRoYXQgdGhlIGJpdCBjb3VudHMgaW4gYmxfY291bnQgYXJlIGNvbnNpc3RlbnQuIFRoZSBsYXN0IGNvZGVcbiAgICogbXVzdCBiZSBhbGwgb25lcy5cbiAgICovXG4gIC8vQXNzZXJ0IChjb2RlICsgYmxfY291bnRbTUFYX0JJVFNdLTEgPT0gKDE8PE1BWF9CSVRTKS0xLFxuICAvLyAgICAgICAgXCJpbmNvbnNpc3RlbnQgYml0IGNvdW50c1wiKTtcbiAgLy9UcmFjZXYoKHN0ZGVycixcIlxcbmdlbl9jb2RlczogbWF4X2NvZGUgJWQgXCIsIG1heF9jb2RlKSk7XG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgdmFyIGxlbiA9IHRyZWVbbiAqIDIgKyAxXSAvKi5MZW4qLyA7XG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIC8qIE5vdyByZXZlcnNlIHRoZSBiaXRzICovXG4gICAgdHJlZVtuICogMl0gLyouQ29kZSovID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pO1xuXG4gICAgLy9UcmFjZWN2KHRyZWUgIT0gc3RhdGljX2x0cmVlLCAoc3RkZXJyLFwiXFxubiAlM2QgJWMgbCAlMmQgYyAlNHggKCV4KSBcIixcbiAgICAvLyAgICAgbiwgKGlzZ3JhcGgobikgPyBuIDogJyAnKSwgbGVuLCB0cmVlW25dLkNvZGUsIG5leHRfY29kZVtsZW5dLTEpKTtcbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdmFyaW91cyAnY29uc3RhbnQnIHRhYmxlcy5cbiAqL1xuZnVuY3Rpb24gdHJfc3RhdGljX2luaXQoKSB7XG4gIHZhciBuOyAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIGJpdHM7IC8qIGJpdCBjb3VudGVyICovXG4gIHZhciBsZW5ndGg7IC8qIGxlbmd0aCB2YWx1ZSAqL1xuICB2YXIgY29kZTsgLyogY29kZSB2YWx1ZSAqL1xuICB2YXIgZGlzdDsgLyogZGlzdGFuY2UgaW5kZXggKi9cbiAgdmFyIGJsX2NvdW50ID0gbmV3IEFycmF5KE1BWF9CSVRTICsgMSk7XG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xuXG4gIC8vIGRvIGNoZWNrIGluIF90cl9pbml0KClcbiAgLy9pZiAoc3RhdGljX2luaXRfZG9uZSkgcmV0dXJuO1xuXG4gIC8qIEZvciBzb21lIGVtYmVkZGVkIHRhcmdldHMsIGdsb2JhbCB2YXJpYWJsZXMgYXJlIG5vdCBpbml0aWFsaXplZDogKi9cbiAgLyojaWZkZWYgTk9fSU5JVF9HTE9CQUxfUE9JTlRFUlNcbiAgICBzdGF0aWNfbF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2x0cmVlO1xuICAgIHN0YXRpY19sX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2xiaXRzO1xuICAgIHN0YXRpY19kX2Rlc2Muc3RhdGljX3RyZWUgPSBzdGF0aWNfZHRyZWU7XG4gICAgc3RhdGljX2RfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfZGJpdHM7XG4gICAgc3RhdGljX2JsX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2JsYml0cztcbiAgI2VuZGlmKi9cblxuICAvKiBJbml0aWFsaXplIHRoZSBtYXBwaW5nIGxlbmd0aCAoMC4uMjU1KSAtPiBsZW5ndGggY29kZSAoMC4uMjgpICovXG4gIGxlbmd0aCA9IDA7XG4gIGZvciAoY29kZSA9IDA7IGNvZGUgPCBMRU5HVEhfQ09ERVMgLSAxOyBjb2RlKyspIHtcbiAgICBiYXNlX2xlbmd0aFtjb2RlXSA9IGxlbmd0aDtcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfbGJpdHNbY29kZV0pOyBuKyspIHtcbiAgICAgIF9sZW5ndGhfY29kZVtsZW5ndGgrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAobGVuZ3RoID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogbGVuZ3RoICE9IDI1NlwiKTtcbiAgLyogTm90ZSB0aGF0IHRoZSBsZW5ndGggMjU1IChtYXRjaCBsZW5ndGggMjU4KSBjYW4gYmUgcmVwcmVzZW50ZWRcbiAgICogaW4gdHdvIGRpZmZlcmVudCB3YXlzOiBjb2RlIDI4NCArIDUgYml0cyBvciBjb2RlIDI4NSwgc28gd2VcbiAgICogb3ZlcndyaXRlIGxlbmd0aF9jb2RlWzI1NV0gdG8gdXNlIHRoZSBiZXN0IGVuY29kaW5nOlxuICAgKi9cbiAgX2xlbmd0aF9jb2RlW2xlbmd0aCAtIDFdID0gY29kZTtcblxuICAvKiBJbml0aWFsaXplIHRoZSBtYXBwaW5nIGRpc3QgKDAuLjMySykgLT4gZGlzdCBjb2RlICgwLi4yOSkgKi9cbiAgZGlzdCA9IDA7XG4gIGZvciAoY29kZSA9IDA7IGNvZGUgPCAxNjsgY29kZSsrKSB7XG4gICAgYmFzZV9kaXN0W2NvZGVdID0gZGlzdDtcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfZGJpdHNbY29kZV0pOyBuKyspIHtcbiAgICAgIF9kaXN0X2NvZGVbZGlzdCsrXSA9IGNvZGU7XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogZGlzdCAhPSAyNTZcIik7XG4gIGRpc3QgPj49IDc7IC8qIGZyb20gbm93IG9uLCBhbGwgZGlzdGFuY2VzIGFyZSBkaXZpZGVkIGJ5IDEyOCAqL1xuICBmb3IgKDsgY29kZSA8IERfQ09ERVM7IGNvZGUrKykge1xuICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3QgPDwgNztcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgKGV4dHJhX2RiaXRzW2NvZGVdIC0gNykpOyBuKyspIHtcbiAgICAgIF9kaXN0X2NvZGVbMjU2ICsgZGlzdCsrXSA9IGNvZGU7XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogMjU2K2Rpc3QgIT0gNTEyXCIpO1xuXG4gIC8qIENvbnN0cnVjdCB0aGUgY29kZXMgb2YgdGhlIHN0YXRpYyBsaXRlcmFsIHRyZWUgKi9cbiAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG4gICAgYmxfY291bnRbYml0c10gPSAwO1xuICB9XG5cbiAgbiA9IDA7XG4gIHdoaWxlIChuIDw9IDE0Mykge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdIC8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNTUpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXSAvKi5MZW4qLyA9IDk7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzldKys7XG4gIH1cbiAgd2hpbGUgKG4gPD0gMjc5KSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0gLyouTGVuKi8gPSA3O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs3XSsrO1xuICB9XG4gIHdoaWxlIChuIDw9IDI4Nykge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdIC8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICAvKiBDb2RlcyAyODYgYW5kIDI4NyBkbyBub3QgZXhpc3QsIGJ1dCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGVcbiAgICogdHJlZSBjb25zdHJ1Y3Rpb24gdG8gZ2V0IGEgY2Fub25pY2FsIEh1ZmZtYW4gdHJlZSAobG9uZ2VzdCBjb2RlXG4gICAqIGFsbCBvbmVzKVxuICAgKi9cbiAgZ2VuX2NvZGVzKHN0YXRpY19sdHJlZSwgTF9DT0RFUyArIDEsIGJsX2NvdW50KTtcblxuICAvKiBUaGUgc3RhdGljIGRpc3RhbmNlIHRyZWUgaXMgdHJpdmlhbDogKi9cbiAgZm9yIChuID0gMDsgbiA8IERfQ09ERVM7IG4rKykge1xuICAgIHN0YXRpY19kdHJlZVtuICogMiArIDFdIC8qLkxlbiovID0gNTtcbiAgICBzdGF0aWNfZHRyZWVbbiAqIDJdIC8qLkNvZGUqLyA9IGJpX3JldmVyc2UobiwgNSk7XG4gIH1cblxuICAvLyBOb3cgZGF0YSByZWFkeSBhbmQgd2UgY2FuIGluaXQgc3RhdGljIHRyZWVzXG4gIHN0YXRpY19sX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2Moc3RhdGljX2x0cmVlLCBleHRyYV9sYml0cywgTElURVJBTFMgKyAxLCBMX0NPREVTLCBNQVhfQklUUyk7XG4gIHN0YXRpY19kX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2Moc3RhdGljX2R0cmVlLCBleHRyYV9kYml0cywgMCwgRF9DT0RFUywgTUFYX0JJVFMpO1xuICBzdGF0aWNfYmxfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhuZXcgQXJyYXkoMCksIGV4dHJhX2JsYml0cywgMCwgQkxfQ09ERVMsIE1BWF9CTF9CSVRTKTtcblxuICAvL3N0YXRpY19pbml0X2RvbmUgPSB0cnVlO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSBhIG5ldyBibG9jay5cbiAqL1xuZnVuY3Rpb24gaW5pdF9ibG9jayhzKSB7XG4gIHZhciBuOyAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi9cblxuICAvKiBJbml0aWFsaXplIHRoZSB0cmVlcy4gKi9cbiAgZm9yIChuID0gMDsgbiA8IExfQ09ERVM7IG4rKykge1xuICAgIHMuZHluX2x0cmVlW24gKiAyXSAvKi5GcmVxKi8gPSAwO1xuICB9XG4gIGZvciAobiA9IDA7IG4gPCBEX0NPREVTOyBuKyspIHtcbiAgICBzLmR5bl9kdHJlZVtuICogMl0gLyouRnJlcSovID0gMDtcbiAgfVxuICBmb3IgKG4gPSAwOyBuIDwgQkxfQ09ERVM7IG4rKykge1xuICAgIHMuYmxfdHJlZVtuICogMl0gLyouRnJlcSovID0gMDtcbiAgfVxuXG4gIHMuZHluX2x0cmVlW0VORF9CTE9DSyAqIDJdIC8qLkZyZXEqLyA9IDE7XG4gIHMub3B0X2xlbiA9IHMuc3RhdGljX2xlbiA9IDA7XG4gIHMubGFzdF9saXQgPSBzLm1hdGNoZXMgPSAwO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmx1c2ggdGhlIGJpdCBidWZmZXIgYW5kIGFsaWduIHRoZSBvdXRwdXQgb24gYSBieXRlIGJvdW5kYXJ5XG4gKi9cbmZ1bmN0aW9uIGJpX3dpbmR1cChzKSB7XG4gIGlmIChzLmJpX3ZhbGlkID4gOCkge1xuICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+IDApIHtcbiAgICAvL3B1dF9ieXRlKHMsIChCeXRlKXMtPmJpX2J1Zik7XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZjtcbiAgfVxuICBzLmJpX2J1ZiA9IDA7XG4gIHMuYmlfdmFsaWQgPSAwO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHkgYSBzdG9yZWQgYmxvY2ssIHN0b3JpbmcgZmlyc3QgdGhlIGxlbmd0aCBhbmQgaXRzXG4gKiBvbmUncyBjb21wbGVtZW50IGlmIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gY29weV9ibG9jayhzLCBidWYsIGxlbiwgaGVhZGVyKSB7XG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgICAgKmJ1ZjsgICAgLyogdGhlIGlucHV0IGRhdGEgKi9cbi8vdW5zaWduZWQgbGVuOyAgICAgLyogaXRzIGxlbmd0aCAqL1xuLy9pbnQgICAgICBoZWFkZXI7ICAvKiB0cnVlIGlmIGJsb2NrIGhlYWRlciBtdXN0IGJlIHdyaXR0ZW4gKi9cblxuICBiaV93aW5kdXAocyk7IC8qIGFsaWduIG9uIGJ5dGUgYm91bmRhcnkgKi9cblxuICBpZiAoaGVhZGVyKSB7XG4gICAgcHV0X3Nob3J0KHMsIGxlbik7XG4gICAgcHV0X3Nob3J0KHMsIH5sZW4pO1xuICB9XG4gIC8vICB3aGlsZSAobGVuLS0pIHtcbiAgLy8gICAgcHV0X2J5dGUocywgKmJ1ZisrKTtcbiAgLy8gIH1cbiAgYXJyYXlTZXQocy5wZW5kaW5nX2J1Ziwgcy53aW5kb3csIGJ1ZiwgbGVuLCBzLnBlbmRpbmcpO1xuICBzLnBlbmRpbmcgKz0gbGVuO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbXBhcmVzIHRvIHN1YnRyZWVzLCB1c2luZyB0aGUgdHJlZSBkZXB0aCBhcyB0aWUgYnJlYWtlciB3aGVuXG4gKiB0aGUgc3VidHJlZXMgaGF2ZSBlcXVhbCBmcmVxdWVuY3kuIFRoaXMgbWluaW1pemVzIHRoZSB3b3JzdCBjYXNlIGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24gc21hbGxlcih0cmVlLCBuLCBtLCBkZXB0aCkge1xuICB2YXIgX24yID0gbiAqIDI7XG4gIHZhciBfbTIgPSBtICogMjtcbiAgcmV0dXJuICh0cmVlW19uMl0gLyouRnJlcSovIDwgdHJlZVtfbTJdIC8qLkZyZXEqLyB8fFxuICAgICh0cmVlW19uMl0gLyouRnJlcSovID09PSB0cmVlW19tMl0gLyouRnJlcSovICYmIGRlcHRoW25dIDw9IGRlcHRoW21dKSk7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUmVzdG9yZSB0aGUgaGVhcCBwcm9wZXJ0eSBieSBtb3ZpbmcgZG93biB0aGUgdHJlZSBzdGFydGluZyBhdCBub2RlIGssXG4gKiBleGNoYW5naW5nIGEgbm9kZSB3aXRoIHRoZSBzbWFsbGVzdCBvZiBpdHMgdHdvIHNvbnMgaWYgbmVjZXNzYXJ5LCBzdG9wcGluZ1xuICogd2hlbiB0aGUgaGVhcCBwcm9wZXJ0eSBpcyByZS1lc3RhYmxpc2hlZCAoZWFjaCBmYXRoZXIgc21hbGxlciB0aGFuIGl0c1xuICogdHdvIHNvbnMpLlxuICovXG5mdW5jdGlvbiBwcWRvd25oZWFwKHMsIHRyZWUsIGspXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgIC8qIHRoZSB0cmVlIHRvIHJlc3RvcmUgKi9cbi8vICAgIGludCBrOyAgICAgICAgICAgICAgIC8qIG5vZGUgdG8gbW92ZSBkb3duICovXG57XG4gIHZhciB2ID0gcy5oZWFwW2tdO1xuICB2YXIgaiA9IGsgPDwgMTsgLyogbGVmdCBzb24gb2YgayAqL1xuICB3aGlsZSAoaiA8PSBzLmhlYXBfbGVuKSB7XG4gICAgLyogU2V0IGogdG8gdGhlIHNtYWxsZXN0IG9mIHRoZSB0d28gc29uczogKi9cbiAgICBpZiAoaiA8IHMuaGVhcF9sZW4gJiZcbiAgICAgIHNtYWxsZXIodHJlZSwgcy5oZWFwW2ogKyAxXSwgcy5oZWFwW2pdLCBzLmRlcHRoKSkge1xuICAgICAgaisrO1xuICAgIH1cbiAgICAvKiBFeGl0IGlmIHYgaXMgc21hbGxlciB0aGFuIGJvdGggc29ucyAqL1xuICAgIGlmIChzbWFsbGVyKHRyZWUsIHYsIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8qIEV4Y2hhbmdlIHYgd2l0aCB0aGUgc21hbGxlc3Qgc29uICovXG4gICAgcy5oZWFwW2tdID0gcy5oZWFwW2pdO1xuICAgIGsgPSBqO1xuXG4gICAgLyogQW5kIGNvbnRpbnVlIGRvd24gdGhlIHRyZWUsIHNldHRpbmcgaiB0byB0aGUgbGVmdCBzb24gb2YgayAqL1xuICAgIGogPDw9IDE7XG4gIH1cbiAgcy5oZWFwW2tdID0gdjtcbn1cblxuXG4vLyBpbmxpbmVkIG1hbnVhbGx5XG4vLyB2YXIgU01BTExFU1QgPSAxO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgdGhlIGJsb2NrIGRhdGEgY29tcHJlc3NlZCB1c2luZyB0aGUgZ2l2ZW4gSHVmZm1hbiB0cmVlc1xuICovXG5mdW5jdGlvbiBjb21wcmVzc19ibG9jayhzLCBsdHJlZSwgZHRyZWUpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY29uc3QgY3RfZGF0YSAqbHRyZWU7IC8qIGxpdGVyYWwgdHJlZSAqL1xuLy8gICAgY29uc3QgY3RfZGF0YSAqZHRyZWU7IC8qIGRpc3RhbmNlIHRyZWUgKi9cbntcbiAgdmFyIGRpc3Q7IC8qIGRpc3RhbmNlIG9mIG1hdGNoZWQgc3RyaW5nICovXG4gIHZhciBsYzsgLyogbWF0Y2ggbGVuZ3RoIG9yIHVubWF0Y2hlZCBjaGFyIChpZiBkaXN0ID09IDApICovXG4gIHZhciBseCA9IDA7IC8qIHJ1bm5pbmcgaW5kZXggaW4gbF9idWYgKi9cbiAgdmFyIGNvZGU7IC8qIHRoZSBjb2RlIHRvIHNlbmQgKi9cbiAgdmFyIGV4dHJhOyAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyB0byBzZW5kICovXG5cbiAgaWYgKHMubGFzdF9saXQgIT09IDApIHtcbiAgICBkbyB7XG4gICAgICBkaXN0ID0gKHMucGVuZGluZ19idWZbcy5kX2J1ZiArIGx4ICogMl0gPDwgOCkgfCAocy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgbHggKiAyICsgMV0pO1xuICAgICAgbGMgPSBzLnBlbmRpbmdfYnVmW3MubF9idWYgKyBseF07XG4gICAgICBseCsrO1xuXG4gICAgICBpZiAoZGlzdCA9PT0gMCkge1xuICAgICAgICBzZW5kX2NvZGUocywgbGMsIGx0cmVlKTsgLyogc2VuZCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgICAgICAvL1RyYWNlY3YoaXNncmFwaChsYyksIChzdGRlcnIsXCIgJyVjJyBcIiwgbGMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi9cbiAgICAgICAgY29kZSA9IF9sZW5ndGhfY29kZVtsY107XG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlICsgTElURVJBTFMgKyAxLCBsdHJlZSk7IC8qIHNlbmQgdGhlIGxlbmd0aCBjb2RlICovXG4gICAgICAgIGV4dHJhID0gZXh0cmFfbGJpdHNbY29kZV07XG4gICAgICAgIGlmIChleHRyYSAhPT0gMCkge1xuICAgICAgICAgIGxjIC09IGJhc2VfbGVuZ3RoW2NvZGVdO1xuICAgICAgICAgIHNlbmRfYml0cyhzLCBsYywgZXh0cmEpOyAvKiBzZW5kIHRoZSBleHRyYSBsZW5ndGggYml0cyAqL1xuICAgICAgICB9XG4gICAgICAgIGRpc3QtLTsgLyogZGlzdCBpcyBub3cgdGhlIG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xuICAgICAgICBjb2RlID0gZF9jb2RlKGRpc3QpO1xuICAgICAgICAvL0Fzc2VydCAoY29kZSA8IERfQ09ERVMsIFwiYmFkIGRfY29kZVwiKTtcblxuICAgICAgICBzZW5kX2NvZGUocywgY29kZSwgZHRyZWUpOyAvKiBzZW5kIHRoZSBkaXN0YW5jZSBjb2RlICovXG4gICAgICAgIGV4dHJhID0gZXh0cmFfZGJpdHNbY29kZV07XG4gICAgICAgIGlmIChleHRyYSAhPT0gMCkge1xuICAgICAgICAgIGRpc3QgLT0gYmFzZV9kaXN0W2NvZGVdO1xuICAgICAgICAgIHNlbmRfYml0cyhzLCBkaXN0LCBleHRyYSk7IC8qIHNlbmQgdGhlIGV4dHJhIGRpc3RhbmNlIGJpdHMgKi9cbiAgICAgICAgfVxuICAgICAgfSAvKiBsaXRlcmFsIG9yIG1hdGNoIHBhaXIgPyAqL1xuXG4gICAgICAvKiBDaGVjayB0aGF0IHRoZSBvdmVybGF5IGJldHdlZW4gcGVuZGluZ19idWYgYW5kIGRfYnVmK2xfYnVmIGlzIG9rOiAqL1xuICAgICAgLy9Bc3NlcnQoKHVJbnQpKHMtPnBlbmRpbmcpIDwgcy0+bGl0X2J1ZnNpemUgKyAyKmx4LFxuICAgICAgLy8gICAgICAgXCJwZW5kaW5nQnVmIG92ZXJmbG93XCIpO1xuXG4gICAgfSB3aGlsZSAobHggPCBzLmxhc3RfbGl0KTtcbiAgfVxuXG4gIHNlbmRfY29kZShzLCBFTkRfQkxPQ0ssIGx0cmVlKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbnN0cnVjdCBvbmUgSHVmZm1hbiB0cmVlIGFuZCBhc3NpZ25zIHRoZSBjb2RlIGJpdCBzdHJpbmdzIGFuZCBsZW5ndGhzLlxuICogVXBkYXRlIHRoZSB0b3RhbCBiaXQgbGVuZ3RoIGZvciB0aGUgY3VycmVudCBibG9jay5cbiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkIGZyZXEgaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy5cbiAqIE9VVCBhc3NlcnRpb25zOiB0aGUgZmllbGRzIGxlbiBhbmQgY29kZSBhcmUgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhcbiAqICAgICBhbmQgY29ycmVzcG9uZGluZyBjb2RlLiBUaGUgbGVuZ3RoIG9wdF9sZW4gaXMgdXBkYXRlZDsgc3RhdGljX2xlbiBpc1xuICogICAgIGFsc28gdXBkYXRlZCBpZiBzdHJlZSBpcyBub3QgbnVsbC4gVGhlIGZpZWxkIG1heF9jb2RlIGlzIHNldC5cbiAqL1xuZnVuY3Rpb24gYnVpbGRfdHJlZShzLCBkZXNjKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIHRyZWVfZGVzYyAqZGVzYzsgLyogdGhlIHRyZWUgZGVzY3JpcHRvciAqL1xue1xuICB2YXIgdHJlZSA9IGRlc2MuZHluX3RyZWU7XG4gIHZhciBzdHJlZSA9IGRlc2Muc3RhdF9kZXNjLnN0YXRpY190cmVlO1xuICB2YXIgaGFzX3N0cmVlID0gZGVzYy5zdGF0X2Rlc2MuaGFzX3N0cmVlO1xuICB2YXIgZWxlbXMgPSBkZXNjLnN0YXRfZGVzYy5lbGVtcztcbiAgdmFyIG4sIG07IC8qIGl0ZXJhdGUgb3ZlciBoZWFwIGVsZW1lbnRzICovXG4gIHZhciBtYXhfY29kZSA9IC0xOyAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbiAgdmFyIG5vZGU7IC8qIG5ldyBub2RlIGJlaW5nIGNyZWF0ZWQgKi9cblxuICAvKiBDb25zdHJ1Y3QgdGhlIGluaXRpYWwgaGVhcCwgd2l0aCBsZWFzdCBmcmVxdWVudCBlbGVtZW50IGluXG4gICAqIGhlYXBbU01BTExFU1RdLiBUaGUgc29ucyBvZiBoZWFwW25dIGFyZSBoZWFwWzIqbl0gYW5kIGhlYXBbMipuKzFdLlxuICAgKiBoZWFwWzBdIGlzIG5vdCB1c2VkLlxuICAgKi9cbiAgcy5oZWFwX2xlbiA9IDA7XG4gIHMuaGVhcF9tYXggPSBIRUFQX1NJWkU7XG5cbiAgZm9yIChuID0gMDsgbiA8IGVsZW1zOyBuKyspIHtcbiAgICBpZiAodHJlZVtuICogMl0gLyouRnJlcSovICE9PSAwKSB7XG4gICAgICBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IG1heF9jb2RlID0gbjtcbiAgICAgIHMuZGVwdGhbbl0gPSAwO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWVbbiAqIDIgKyAxXSAvKi5MZW4qLyA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyogVGhlIHBremlwIGZvcm1hdCByZXF1aXJlcyB0aGF0IGF0IGxlYXN0IG9uZSBkaXN0YW5jZSBjb2RlIGV4aXN0cyxcbiAgICogYW5kIHRoYXQgYXQgbGVhc3Qgb25lIGJpdCBzaG91bGQgYmUgc2VudCBldmVuIGlmIHRoZXJlIGlzIG9ubHkgb25lXG4gICAqIHBvc3NpYmxlIGNvZGUuIFNvIHRvIGF2b2lkIHNwZWNpYWwgY2hlY2tzIGxhdGVyIG9uIHdlIGZvcmNlIGF0IGxlYXN0XG4gICAqIHR3byBjb2RlcyBvZiBub24gemVybyBmcmVxdWVuY3kuXG4gICAqL1xuICB3aGlsZSAocy5oZWFwX2xlbiA8IDIpIHtcbiAgICBub2RlID0gcy5oZWFwWysrcy5oZWFwX2xlbl0gPSAobWF4X2NvZGUgPCAyID8gKyttYXhfY29kZSA6IDApO1xuICAgIHRyZWVbbm9kZSAqIDJdIC8qLkZyZXEqLyA9IDE7XG4gICAgcy5kZXB0aFtub2RlXSA9IDA7XG4gICAgcy5vcHRfbGVuLS07XG5cbiAgICBpZiAoaGFzX3N0cmVlKSB7XG4gICAgICBzLnN0YXRpY19sZW4gLT0gc3RyZWVbbm9kZSAqIDIgKyAxXSAvKi5MZW4qLyA7XG4gICAgfVxuICAgIC8qIG5vZGUgaXMgMCBvciAxIHNvIGl0IGRvZXMgbm90IGhhdmUgZXh0cmEgYml0cyAqL1xuICB9XG4gIGRlc2MubWF4X2NvZGUgPSBtYXhfY29kZTtcblxuICAvKiBUaGUgZWxlbWVudHMgaGVhcFtoZWFwX2xlbi8yKzEgLi4gaGVhcF9sZW5dIGFyZSBsZWF2ZXMgb2YgdGhlIHRyZWUsXG4gICAqIGVzdGFibGlzaCBzdWItaGVhcHMgb2YgaW5jcmVhc2luZyBsZW5ndGhzOlxuICAgKi9cbiAgZm9yIChuID0gKHMuaGVhcF9sZW4gPj4gMSAvKmludCAvMiovICk7IG4gPj0gMTsgbi0tKSB7XG4gICAgcHFkb3duaGVhcChzLCB0cmVlLCBuKTtcbiAgfVxuXG4gIC8qIENvbnN0cnVjdCB0aGUgSHVmZm1hbiB0cmVlIGJ5IHJlcGVhdGVkbHkgY29tYmluaW5nIHRoZSBsZWFzdCB0d29cbiAgICogZnJlcXVlbnQgbm9kZXMuXG4gICAqL1xuICBub2RlID0gZWxlbXM7IC8qIG5leHQgaW50ZXJuYWwgbm9kZSBvZiB0aGUgdHJlZSAqL1xuICBkbyB7XG4gICAgLy9wcXJlbW92ZShzLCB0cmVlLCBuKTsgIC8qIG4gPSBub2RlIG9mIGxlYXN0IGZyZXF1ZW5jeSAqL1xuICAgIC8qKiogcHFyZW1vdmUgKioqL1xuICAgIG4gPSBzLmhlYXBbMSAvKlNNQUxMRVNUKi8gXTtcbiAgICBzLmhlYXBbMSAvKlNNQUxMRVNUKi8gXSA9IHMuaGVhcFtzLmhlYXBfbGVuLS1dO1xuICAgIHBxZG93bmhlYXAocywgdHJlZSwgMSAvKlNNQUxMRVNUKi8gKTtcbiAgICAvKioqL1xuXG4gICAgbSA9IHMuaGVhcFsxIC8qU01BTExFU1QqLyBdOyAvKiBtID0gbm9kZSBvZiBuZXh0IGxlYXN0IGZyZXF1ZW5jeSAqL1xuXG4gICAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBuOyAvKiBrZWVwIHRoZSBub2RlcyBzb3J0ZWQgYnkgZnJlcXVlbmN5ICovXG4gICAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBtO1xuXG4gICAgLyogQ3JlYXRlIGEgbmV3IG5vZGUgZmF0aGVyIG9mIG4gYW5kIG0gKi9cbiAgICB0cmVlW25vZGUgKiAyXSAvKi5GcmVxKi8gPSB0cmVlW24gKiAyXSAvKi5GcmVxKi8gKyB0cmVlW20gKiAyXSAvKi5GcmVxKi8gO1xuICAgIHMuZGVwdGhbbm9kZV0gPSAocy5kZXB0aFtuXSA+PSBzLmRlcHRoW21dID8gcy5kZXB0aFtuXSA6IHMuZGVwdGhbbV0pICsgMTtcbiAgICB0cmVlW24gKiAyICsgMV0gLyouRGFkKi8gPSB0cmVlW20gKiAyICsgMV0gLyouRGFkKi8gPSBub2RlO1xuXG4gICAgLyogYW5kIGluc2VydCB0aGUgbmV3IG5vZGUgaW4gdGhlIGhlYXAgKi9cbiAgICBzLmhlYXBbMSAvKlNNQUxMRVNUKi8gXSA9IG5vZGUrKztcbiAgICBwcWRvd25oZWFwKHMsIHRyZWUsIDEgLypTTUFMTEVTVCovICk7XG5cbiAgfSB3aGlsZSAocy5oZWFwX2xlbiA+PSAyKTtcblxuICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IHMuaGVhcFsxIC8qU01BTExFU1QqLyBdO1xuXG4gIC8qIEF0IHRoaXMgcG9pbnQsIHRoZSBmaWVsZHMgZnJlcSBhbmQgZGFkIGFyZSBzZXQuIFdlIGNhbiBub3dcbiAgICogZ2VuZXJhdGUgdGhlIGJpdCBsZW5ndGhzLlxuICAgKi9cbiAgZ2VuX2JpdGxlbihzLCBkZXNjKTtcblxuICAvKiBUaGUgZmllbGQgbGVuIGlzIG5vdyBzZXQsIHdlIGNhbiBnZW5lcmF0ZSB0aGUgYml0IGNvZGVzICovXG4gIGdlbl9jb2Rlcyh0cmVlLCBtYXhfY29kZSwgcy5ibF9jb3VudCk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTY2FuIGEgbGl0ZXJhbCBvciBkaXN0YW5jZSB0cmVlIHRvIGRldGVybWluZSB0aGUgZnJlcXVlbmNpZXMgb2YgdGhlIGNvZGVzXG4gKiBpbiB0aGUgYml0IGxlbmd0aCB0cmVlLlxuICovXG5mdW5jdGlvbiBzY2FuX3RyZWUocywgdHJlZSwgbWF4X2NvZGUpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgICAvKiB0aGUgdHJlZSB0byBiZSBzY2FubmVkICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgIC8qIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xue1xuICB2YXIgbjsgLyogaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgcHJldmxlbiA9IC0xOyAvKiBsYXN0IGVtaXR0ZWQgbGVuZ3RoICovXG4gIHZhciBjdXJsZW47IC8qIGxlbmd0aCBvZiBjdXJyZW50IGNvZGUgKi9cblxuICB2YXIgbmV4dGxlbiA9IHRyZWVbMCAqIDIgKyAxXSAvKi5MZW4qLyA7IC8qIGxlbmd0aCBvZiBuZXh0IGNvZGUgKi9cblxuICB2YXIgY291bnQgPSAwOyAvKiByZXBlYXQgY291bnQgb2YgdGhlIGN1cnJlbnQgY29kZSAqL1xuICB2YXIgbWF4X2NvdW50ID0gNzsgLyogbWF4IHJlcGVhdCBjb3VudCAqL1xuICB2YXIgbWluX2NvdW50ID0gNDsgLyogbWluIHJlcGVhdCBjb3VudCAqL1xuXG4gIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgbWF4X2NvdW50ID0gMTM4O1xuICAgIG1pbl9jb3VudCA9IDM7XG4gIH1cbiAgdHJlZVsobWF4X2NvZGUgKyAxKSAqIDIgKyAxXSAvKi5MZW4qLyA9IDB4ZmZmZjsgLyogZ3VhcmQgKi9cblxuICBmb3IgKG4gPSAwOyBuIDw9IG1heF9jb2RlOyBuKyspIHtcbiAgICBjdXJsZW4gPSBuZXh0bGVuO1xuICAgIG5leHRsZW4gPSB0cmVlWyhuICsgMSkgKiAyICsgMV0gLyouTGVuKi8gO1xuXG4gICAgaWYgKCsrY291bnQgPCBtYXhfY291bnQgJiYgY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBjb250aW51ZTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPCBtaW5fY291bnQpIHtcbiAgICAgIHMuYmxfdHJlZVtjdXJsZW4gKiAyXSAvKi5GcmVxKi8gKz0gY291bnQ7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiAhPT0gMCkge1xuXG4gICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7XG4gICAgICAgIHMuYmxfdHJlZVtjdXJsZW4gKiAyXSAvKi5GcmVxKi8gKys7XG4gICAgICB9XG4gICAgICBzLmJsX3RyZWVbUkVQXzNfNiAqIDJdIC8qLkZyZXEqLyArKztcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcbiAgICAgIHMuYmxfdHJlZVtSRVBaXzNfMTAgKiAyXSAvKi5GcmVxKi8gKys7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcy5ibF90cmVlW1JFUFpfMTFfMTM4ICogMl0gLyouRnJlcSovICsrO1xuICAgIH1cblxuICAgIGNvdW50ID0gMDtcbiAgICBwcmV2bGVuID0gY3VybGVuO1xuXG4gICAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICAgIG1heF9jb3VudCA9IDEzODtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiA9PT0gbmV4dGxlbikge1xuICAgICAgbWF4X2NvdW50ID0gNjtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgbWF4X2NvdW50ID0gNztcbiAgICAgIG1pbl9jb3VudCA9IDQ7XG4gICAgfVxuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIGEgbGl0ZXJhbCBvciBkaXN0YW5jZSB0cmVlIGluIGNvbXByZXNzZWQgZm9ybSwgdXNpbmcgdGhlIGNvZGVzIGluXG4gKiBibF90cmVlLlxuICovXG5mdW5jdGlvbiBzZW5kX3RyZWUocywgdHJlZSwgbWF4X2NvZGUpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi9cbntcbiAgdmFyIG47IC8qIGl0ZXJhdGVzIG92ZXIgYWxsIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIHByZXZsZW4gPSAtMTsgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqL1xuICB2YXIgY3VybGVuOyAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovXG5cbiAgdmFyIG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0gLyouTGVuKi8gOyAvKiBsZW5ndGggb2YgbmV4dCBjb2RlICovXG5cbiAgdmFyIGNvdW50ID0gMDsgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi9cbiAgdmFyIG1heF9jb3VudCA9IDc7IC8qIG1heCByZXBlYXQgY291bnQgKi9cbiAgdmFyIG1pbl9jb3VudCA9IDQ7IC8qIG1pbiByZXBlYXQgY291bnQgKi9cblxuICAvKiB0cmVlW21heF9jb2RlKzFdLkxlbiA9IC0xOyAqL1xuICAvKiBndWFyZCBhbHJlYWR5IHNldCAqL1xuICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgIG1heF9jb3VudCA9IDEzODtcbiAgICBtaW5fY291bnQgPSAzO1xuICB9XG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdIC8qLkxlbiovIDtcblxuICAgIGlmICgrK2NvdW50IDwgbWF4X2NvdW50ICYmIGN1cmxlbiA9PT0gbmV4dGxlbikge1xuICAgICAgY29udGludWU7XG5cbiAgICB9IGVsc2UgaWYgKGNvdW50IDwgbWluX2NvdW50KSB7XG4gICAgICBkbyB7XG4gICAgICAgIHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7XG4gICAgICB9IHdoaWxlICgtLWNvdW50ICE9PSAwKTtcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7XG4gICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7XG4gICAgICAgIHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7XG4gICAgICAgIGNvdW50LS07XG4gICAgICB9XG4gICAgICAvL0Fzc2VydChjb3VudCA+PSAzICYmIGNvdW50IDw9IDYsIFwiIDNfNj9cIik7XG4gICAgICBzZW5kX2NvZGUocywgUkVQXzNfNiwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDIpO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUFpfM18xMCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBaXzExXzEzOCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDExLCA3KTtcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcbiAgICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgICAgbWF4X2NvdW50ID0gMTM4O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBtYXhfY291bnQgPSA2O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSB7XG4gICAgICBtYXhfY291bnQgPSA3O1xuICAgICAgbWluX2NvdW50ID0gNDtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbnN0cnVjdCB0aGUgSHVmZm1hbiB0cmVlIGZvciB0aGUgYml0IGxlbmd0aHMgYW5kIHJldHVybiB0aGUgaW5kZXggaW5cbiAqIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxuICovXG5mdW5jdGlvbiBidWlsZF9ibF90cmVlKHMpIHtcbiAgdmFyIG1heF9ibGluZGV4OyAvKiBpbmRleCBvZiBsYXN0IGJpdCBsZW5ndGggY29kZSBvZiBub24gemVybyBmcmVxICovXG5cbiAgLyogRGV0ZXJtaW5lIHRoZSBiaXQgbGVuZ3RoIGZyZXF1ZW5jaWVzIGZvciBsaXRlcmFsIGFuZCBkaXN0YW5jZSB0cmVlcyAqL1xuICBzY2FuX3RyZWUocywgcy5keW5fbHRyZWUsIHMubF9kZXNjLm1heF9jb2RlKTtcbiAgc2Nhbl90cmVlKHMsIHMuZHluX2R0cmVlLCBzLmRfZGVzYy5tYXhfY29kZSk7XG5cbiAgLyogQnVpbGQgdGhlIGJpdCBsZW5ndGggdHJlZTogKi9cbiAgYnVpbGRfdHJlZShzLCBzLmJsX2Rlc2MpO1xuICAvKiBvcHRfbGVuIG5vdyBpbmNsdWRlcyB0aGUgbGVuZ3RoIG9mIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucywgZXhjZXB0XG4gICAqIHRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RocyBjb2RlcyBhbmQgdGhlIDUrNSs0IGJpdHMgZm9yIHRoZSBjb3VudHMuXG4gICAqL1xuXG4gIC8qIERldGVybWluZSB0aGUgbnVtYmVyIG9mIGJpdCBsZW5ndGggY29kZXMgdG8gc2VuZC4gVGhlIHBremlwIGZvcm1hdFxuICAgKiByZXF1aXJlcyB0aGF0IGF0IGxlYXN0IDQgYml0IGxlbmd0aCBjb2RlcyBiZSBzZW50LiAoYXBwbm90ZS50eHQgc2F5c1xuICAgKiAzIGJ1dCB0aGUgYWN0dWFsIHZhbHVlIHVzZWQgaXMgNC4pXG4gICAqL1xuICBmb3IgKG1heF9ibGluZGV4ID0gQkxfQ09ERVMgLSAxOyBtYXhfYmxpbmRleCA+PSAzOyBtYXhfYmxpbmRleC0tKSB7XG4gICAgaWYgKHMuYmxfdHJlZVtibF9vcmRlclttYXhfYmxpbmRleF0gKiAyICsgMV0gLyouTGVuKi8gIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvKiBVcGRhdGUgb3B0X2xlbiB0byBpbmNsdWRlIHRoZSBiaXQgbGVuZ3RoIHRyZWUgYW5kIGNvdW50cyAqL1xuICBzLm9wdF9sZW4gKz0gMyAqIChtYXhfYmxpbmRleCArIDEpICsgNSArIDUgKyA0O1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmR5biB0cmVlczogZHluICVsZCwgc3RhdCAlbGRcIixcbiAgLy8gICAgICAgIHMtPm9wdF9sZW4sIHMtPnN0YXRpY19sZW4pKTtcblxuICByZXR1cm4gbWF4X2JsaW5kZXg7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIHRoZSBoZWFkZXIgZm9yIGEgYmxvY2sgdXNpbmcgZHluYW1pYyBIdWZmbWFuIHRyZWVzOiB0aGUgY291bnRzLCB0aGVcbiAqIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMsIHRoZSBsaXRlcmFsIHRyZWUgYW5kIHRoZSBkaXN0YW5jZSB0cmVlLlxuICogSU4gYXNzZXJ0aW9uOiBsY29kZXMgPj0gMjU3LCBkY29kZXMgPj0gMSwgYmxjb2RlcyA+PSA0LlxuICovXG5mdW5jdGlvbiBzZW5kX2FsbF90cmVlcyhzLCBsY29kZXMsIGRjb2RlcywgYmxjb2Rlcylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBpbnQgbGNvZGVzLCBkY29kZXMsIGJsY29kZXM7IC8qIG51bWJlciBvZiBjb2RlcyBmb3IgZWFjaCB0cmVlICovXG57XG4gIHZhciByYW5rOyAvKiBpbmRleCBpbiBibF9vcmRlciAqL1xuXG4gIC8vQXNzZXJ0IChsY29kZXMgPj0gMjU3ICYmIGRjb2RlcyA+PSAxICYmIGJsY29kZXMgPj0gNCwgXCJub3QgZW5vdWdoIGNvZGVzXCIpO1xuICAvL0Fzc2VydCAobGNvZGVzIDw9IExfQ09ERVMgJiYgZGNvZGVzIDw9IERfQ09ERVMgJiYgYmxjb2RlcyA8PSBCTF9DT0RFUyxcbiAgLy8gICAgICAgIFwidG9vIG1hbnkgY29kZXNcIik7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY291bnRzOiBcIikpO1xuICBzZW5kX2JpdHMocywgbGNvZGVzIC0gMjU3LCA1KTsgLyogbm90ICsyNTUgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0ICovXG4gIHNlbmRfYml0cyhzLCBkY29kZXMgLSAxLCA1KTtcbiAgc2VuZF9iaXRzKHMsIGJsY29kZXMgLSA0LCA0KTsgLyogbm90IC0zIGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dCAqL1xuICBmb3IgKHJhbmsgPSAwOyByYW5rIDwgYmxjb2RlczsgcmFuaysrKSB7XG4gICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCBjb2RlICUyZCBcIiwgYmxfb3JkZXJbcmFua10pKTtcbiAgICBzZW5kX2JpdHMocywgcy5ibF90cmVlW2JsX29yZGVyW3JhbmtdICogMiArIDFdIC8qLkxlbiovICwgMyk7XG4gIH1cbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcblxuICBzZW5kX3RyZWUocywgcy5keW5fbHRyZWUsIGxjb2RlcyAtIDEpOyAvKiBsaXRlcmFsIHRyZWUgKi9cbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgdHJlZTogc2VudCAlbGRcIiwgcy0+Yml0c19zZW50KSk7XG5cbiAgc2VuZF90cmVlKHMsIHMuZHluX2R0cmVlLCBkY29kZXMgLSAxKTsgLyogZGlzdGFuY2UgdHJlZSAqL1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmRpc3QgdHJlZTogc2VudCAlbGRcIiwgcy0+Yml0c19zZW50KSk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDaGVjayBpZiB0aGUgZGF0YSB0eXBlIGlzIFRFWFQgb3IgQklOQVJZLCB1c2luZyB0aGUgZm9sbG93aW5nIGFsZ29yaXRobTpcbiAqIC0gVEVYVCBpZiB0aGUgdHdvIGNvbmRpdGlvbnMgYmVsb3cgYXJlIHNhdGlzZmllZDpcbiAqICAgIGEpIFRoZXJlIGFyZSBubyBub24tcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGJlbG9uZ2luZyB0byB0aGVcbiAqICAgICAgIFwiYmxhY2sgbGlzdFwiICgwLi42LCAxNC4uMjUsIDI4Li4zMSkuXG4gKiAgICBiKSBUaGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJpbnRhYmxlIGNoYXJhY3RlciBiZWxvbmdpbmcgdG8gdGhlXG4gKiAgICAgICBcIndoaXRlIGxpc3RcIiAoOSB7VEFCfSwgMTAge0xGfSwgMTMge0NSfSwgMzIuLjI1NSkuXG4gKiAtIEJJTkFSWSBvdGhlcndpc2UuXG4gKiAtIFRoZSBmb2xsb3dpbmcgcGFydGlhbGx5LXBvcnRhYmxlIGNvbnRyb2wgY2hhcmFjdGVycyBmb3JtIGFcbiAqICAgXCJncmF5IGxpc3RcIiB0aGF0IGlzIGlnbm9yZWQgaW4gdGhpcyBkZXRlY3Rpb24gYWxnb3JpdGhtOlxuICogICAoNyB7QkVMfSwgOCB7QlN9LCAxMSB7VlR9LCAxMiB7RkZ9LCAyNiB7U1VCfSwgMjcge0VTQ30pLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGRzIEZyZXEgb2YgZHluX2x0cmVlIGFyZSBzZXQuXG4gKi9cbmZ1bmN0aW9uIGRldGVjdF9kYXRhX3R5cGUocykge1xuICAvKiBibGFja19tYXNrIGlzIHRoZSBiaXQgbWFzayBvZiBibGFjay1saXN0ZWQgYnl0ZXNcbiAgICogc2V0IGJpdHMgMC4uNiwgMTQuLjI1LCBhbmQgMjguLjMxXG4gICAqIDB4ZjNmZmMwN2YgPSBiaW5hcnkgMTExMTAwMTExMTExMTExMTExMDAwMDAwMDExMTExMTFcbiAgICovXG4gIHZhciBibGFja19tYXNrID0gMHhmM2ZmYzA3ZjtcbiAgdmFyIG47XG5cbiAgLyogQ2hlY2sgZm9yIG5vbi10ZXh0dWFsIChcImJsYWNrLWxpc3RlZFwiKSBieXRlcy4gKi9cbiAgZm9yIChuID0gMDsgbiA8PSAzMTsgbisrLCBibGFja19tYXNrID4+Pj0gMSkge1xuICAgIGlmICgoYmxhY2tfbWFzayAmIDEpICYmIChzLmR5bl9sdHJlZVtuICogMl0gLyouRnJlcSovICE9PSAwKSkge1xuICAgICAgcmV0dXJuIFpfQklOQVJZO1xuICAgIH1cbiAgfVxuXG4gIC8qIENoZWNrIGZvciB0ZXh0dWFsIChcIndoaXRlLWxpc3RlZFwiKSBieXRlcy4gKi9cbiAgaWYgKHMuZHluX2x0cmVlWzkgKiAyXSAvKi5GcmVxKi8gIT09IDAgfHwgcy5keW5fbHRyZWVbMTAgKiAyXSAvKi5GcmVxKi8gIT09IDAgfHxcbiAgICBzLmR5bl9sdHJlZVsxMyAqIDJdIC8qLkZyZXEqLyAhPT0gMCkge1xuICAgIHJldHVybiBaX1RFWFQ7XG4gIH1cbiAgZm9yIChuID0gMzI7IG4gPCBMSVRFUkFMUzsgbisrKSB7XG4gICAgaWYgKHMuZHluX2x0cmVlW24gKiAyXSAvKi5GcmVxKi8gIT09IDApIHtcbiAgICAgIHJldHVybiBaX1RFWFQ7XG4gICAgfVxuICB9XG5cbiAgLyogVGhlcmUgYXJlIG5vIFwiYmxhY2stbGlzdGVkXCIgb3IgXCJ3aGl0ZS1saXN0ZWRcIiBieXRlczpcbiAgICogdGhpcyBzdHJlYW0gZWl0aGVyIGlzIGVtcHR5IG9yIGhhcyB0b2xlcmF0ZWQgKFwiZ3JheS1saXN0ZWRcIikgYnl0ZXMgb25seS5cbiAgICovXG4gIHJldHVybiBaX0JJTkFSWTtcbn1cblxuXG52YXIgc3RhdGljX2luaXRfZG9uZSA9IGZhbHNlO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgdGhlIHRyZWUgZGF0YSBzdHJ1Y3R1cmVzIGZvciBhIG5ldyB6bGliIHN0cmVhbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF90cl9pbml0KHMpIHtcblxuICBpZiAoIXN0YXRpY19pbml0X2RvbmUpIHtcbiAgICB0cl9zdGF0aWNfaW5pdCgpO1xuICAgIHN0YXRpY19pbml0X2RvbmUgPSB0cnVlO1xuICB9XG5cbiAgcy5sX2Rlc2MgPSBuZXcgVHJlZURlc2Mocy5keW5fbHRyZWUsIHN0YXRpY19sX2Rlc2MpO1xuICBzLmRfZGVzYyA9IG5ldyBUcmVlRGVzYyhzLmR5bl9kdHJlZSwgc3RhdGljX2RfZGVzYyk7XG4gIHMuYmxfZGVzYyA9IG5ldyBUcmVlRGVzYyhzLmJsX3RyZWUsIHN0YXRpY19ibF9kZXNjKTtcblxuICBzLmJpX2J1ZiA9IDA7XG4gIHMuYmlfdmFsaWQgPSAwO1xuXG4gIC8qIEluaXRpYWxpemUgdGhlIGZpcnN0IGJsb2NrIG9mIHRoZSBmaXJzdCBmaWxlOiAqL1xuICBpbml0X2Jsb2NrKHMpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIHN0b3JlZCBibG9ja1xuICovXG5leHBvcnQgZnVuY3Rpb24gX3RyX3N0b3JlZF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2sgKi9cbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXG4vL2ludCBsYXN0OyAgICAgICAgIC8qIG9uZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGUgKi9cbntcbiAgc2VuZF9iaXRzKHMsIChTVE9SRURfQkxPQ0sgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7IC8qIHNlbmQgYmxvY2sgdHlwZSAqL1xuICBjb3B5X2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgdHJ1ZSk7IC8qIHdpdGggaGVhZGVyICovXG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIG9uZSBlbXB0eSBzdGF0aWMgYmxvY2sgdG8gZ2l2ZSBlbm91Z2ggbG9va2FoZWFkIGZvciBpbmZsYXRlLlxuICogVGhpcyB0YWtlcyAxMCBiaXRzLCBvZiB3aGljaCA3IG1heSByZW1haW4gaW4gdGhlIGJpdCBidWZmZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfdHJfYWxpZ24ocykge1xuICBzZW5kX2JpdHMocywgU1RBVElDX1RSRUVTIDw8IDEsIDMpO1xuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBzdGF0aWNfbHRyZWUpO1xuICBiaV9mbHVzaChzKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIERldGVybWluZSB0aGUgYmVzdCBlbmNvZGluZyBmb3IgdGhlIGN1cnJlbnQgYmxvY2s6IGR5bmFtaWMgdHJlZXMsIHN0YXRpY1xuICogdHJlZXMgb3Igc3RvcmUsIGFuZCBvdXRwdXQgdGhlIGVuY29kZWQgYmxvY2sgdG8gdGhlIHppcCBmaWxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gX3RyX2ZsdXNoX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdClcbi8vRGVmbGF0ZVN0YXRlICpzO1xuLy9jaGFyZiAqYnVmOyAgICAgICAvKiBpbnB1dCBibG9jaywgb3IgTlVMTCBpZiB0b28gb2xkICovXG4vL3VsZyBzdG9yZWRfbGVuOyAgIC8qIGxlbmd0aCBvZiBpbnB1dCBibG9jayAqL1xuLy9pbnQgbGFzdDsgICAgICAgICAvKiBvbmUgaWYgdGhpcyBpcyB0aGUgbGFzdCBibG9jayBmb3IgYSBmaWxlICovXG57XG4gIHZhciBvcHRfbGVuYiwgc3RhdGljX2xlbmI7IC8qIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gaW4gYnl0ZXMgKi9cbiAgdmFyIG1heF9ibGluZGV4ID0gMDsgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIEJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzIHVubGVzcyBhIHN0b3JlZCBibG9jayBpcyBmb3JjZWQgKi9cbiAgaWYgKHMubGV2ZWwgPiAwKSB7XG5cbiAgICAvKiBDaGVjayBpZiB0aGUgZmlsZSBpcyBiaW5hcnkgb3IgdGV4dCAqL1xuICAgIGlmIChzLnN0cm0uZGF0YV90eXBlID09PSBaX1VOS05PV04pIHtcbiAgICAgIHMuc3RybS5kYXRhX3R5cGUgPSBkZXRlY3RfZGF0YV90eXBlKHMpO1xuICAgIH1cblxuICAgIC8qIENvbnN0cnVjdCB0aGUgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgICBidWlsZF90cmVlKHMsIHMubF9kZXNjKTtcbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xuXG4gICAgYnVpbGRfdHJlZShzLCBzLmRfZGVzYyk7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZFwiLCBzLT5vcHRfbGVuLFxuICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7XG4gICAgLyogQXQgdGhpcyBwb2ludCwgb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBhcmUgdGhlIHRvdGFsIGJpdCBsZW5ndGhzIG9mXG4gICAgICogdGhlIGNvbXByZXNzZWQgYmxvY2sgZGF0YSwgZXhjbHVkaW5nIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucy5cbiAgICAgKi9cblxuICAgIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWUgZm9yIHRoZSBhYm92ZSB0d28gdHJlZXMsIGFuZCBnZXQgdGhlIGluZGV4XG4gICAgICogaW4gYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gICAgICovXG4gICAgbWF4X2JsaW5kZXggPSBidWlsZF9ibF90cmVlKHMpO1xuXG4gICAgLyogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIHRoZSBibG9jayBsZW5ndGhzIGluIGJ5dGVzLiAqL1xuICAgIG9wdF9sZW5iID0gKHMub3B0X2xlbiArIDMgKyA3KSA+Pj4gMztcbiAgICBzdGF0aWNfbGVuYiA9IChzLnN0YXRpY19sZW4gKyAzICsgNykgPj4+IDM7XG5cbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5vcHQgJWx1KCVsdSkgc3RhdCAlbHUoJWx1KSBzdG9yZWQgJWx1IGxpdCAldSBcIixcbiAgICAvLyAgICAgICAgb3B0X2xlbmIsIHMtPm9wdF9sZW4sIHN0YXRpY19sZW5iLCBzLT5zdGF0aWNfbGVuLCBzdG9yZWRfbGVuLFxuICAgIC8vICAgICAgICBzLT5sYXN0X2xpdCkpO1xuXG4gICAgaWYgKHN0YXRpY19sZW5iIDw9IG9wdF9sZW5iKSB7XG4gICAgICBvcHRfbGVuYiA9IHN0YXRpY19sZW5iO1xuICAgIH1cblxuICB9IGVsc2Uge1xuICAgIC8vIEFzc2VydChidWYgIT0gKGNoYXIqKTAsIFwibG9zdCBidWZcIik7XG4gICAgb3B0X2xlbmIgPSBzdGF0aWNfbGVuYiA9IHN0b3JlZF9sZW4gKyA1OyAvKiBmb3JjZSBhIHN0b3JlZCBibG9jayAqL1xuICB9XG5cbiAgaWYgKChzdG9yZWRfbGVuICsgNCA8PSBvcHRfbGVuYikgJiYgKGJ1ZiAhPT0gLTEpKSB7XG4gICAgLyogNDogdHdvIHdvcmRzIGZvciB0aGUgbGVuZ3RocyAqL1xuXG4gICAgLyogVGhlIHRlc3QgYnVmICE9IE5VTEwgaXMgb25seSBuZWNlc3NhcnkgaWYgTElUX0JVRlNJWkUgPiBXU0laRS5cbiAgICAgKiBPdGhlcndpc2Ugd2UgY2FuJ3QgaGF2ZSBwcm9jZXNzZWQgbW9yZSB0aGFuIFdTSVpFIGlucHV0IGJ5dGVzIHNpbmNlXG4gICAgICogdGhlIGxhc3QgYmxvY2sgZmx1c2gsIGJlY2F1c2UgY29tcHJlc3Npb24gd291bGQgaGF2ZSBiZWVuXG4gICAgICogc3VjY2Vzc2Z1bC4gSWYgTElUX0JVRlNJWkUgPD0gV1NJWkUsIGl0IGlzIG5ldmVyIHRvbyBsYXRlIHRvXG4gICAgICogdHJhbnNmb3JtIGEgYmxvY2sgaW50byBhIHN0b3JlZCBibG9jay5cbiAgICAgKi9cbiAgICBfdHJfc3RvcmVkX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCk7XG5cbiAgfSBlbHNlIGlmIChzLnN0cmF0ZWd5ID09PSBaX0ZJWEVEIHx8IHN0YXRpY19sZW5iID09PSBvcHRfbGVuYikge1xuXG4gICAgc2VuZF9iaXRzKHMsIChTVEFUSUNfVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG4gICAgY29tcHJlc3NfYmxvY2socywgc3RhdGljX2x0cmVlLCBzdGF0aWNfZHRyZWUpO1xuXG4gIH0gZWxzZSB7XG4gICAgc2VuZF9iaXRzKHMsIChEWU5fVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG4gICAgc2VuZF9hbGxfdHJlZXMocywgcy5sX2Rlc2MubWF4X2NvZGUgKyAxLCBzLmRfZGVzYy5tYXhfY29kZSArIDEsIG1heF9ibGluZGV4ICsgMSk7XG4gICAgY29tcHJlc3NfYmxvY2socywgcy5keW5fbHRyZWUsIHMuZHluX2R0cmVlKTtcbiAgfVxuICAvLyBBc3NlcnQgKHMtPmNvbXByZXNzZWRfbGVuID09IHMtPmJpdHNfc2VudCwgXCJiYWQgY29tcHJlc3NlZCBzaXplXCIpO1xuICAvKiBUaGUgYWJvdmUgY2hlY2sgaXMgbWFkZSBtb2QgMl4zMiwgZm9yIGZpbGVzIGxhcmdlciB0aGFuIDUxMiBNQlxuICAgKiBhbmQgdUxvbmcgaW1wbGVtZW50ZWQgb24gMzIgYml0cy5cbiAgICovXG4gIGluaXRfYmxvY2socyk7XG5cbiAgaWYgKGxhc3QpIHtcbiAgICBiaV93aW5kdXAocyk7XG4gIH1cbiAgLy8gVHJhY2V2KChzdGRlcnIsXCJcXG5jb21wcmxlbiAlbHUoJWx1KSBcIiwgcy0+Y29tcHJlc3NlZF9sZW4+PjMsXG4gIC8vICAgICAgIHMtPmNvbXByZXNzZWRfbGVuLTcqbGFzdCkpO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNhdmUgdGhlIG1hdGNoIGluZm8gYW5kIHRhbGx5IHRoZSBmcmVxdWVuY3kgY291bnRzLiBSZXR1cm4gdHJ1ZSBpZlxuICogdGhlIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gX3RyX3RhbGx5KHMsIGRpc3QsIGxjKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIHVuc2lnbmVkIGRpc3Q7ICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmluZyAqL1xuLy8gICAgdW5zaWduZWQgbGM7ICAgIC8qIG1hdGNoIGxlbmd0aC1NSU5fTUFUQ0ggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3Q9PTApICovXG57XG4gIC8vdmFyIG91dF9sZW5ndGgsIGluX2xlbmd0aCwgZGNvZGU7XG5cbiAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDJdID0gKGRpc3QgPj4+IDgpICYgMHhmZjtcbiAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDIgKyAxXSA9IGRpc3QgJiAweGZmO1xuXG4gIHMucGVuZGluZ19idWZbcy5sX2J1ZiArIHMubGFzdF9saXRdID0gbGMgJiAweGZmO1xuICBzLmxhc3RfbGl0Kys7XG5cbiAgaWYgKGRpc3QgPT09IDApIHtcbiAgICAvKiBsYyBpcyB0aGUgdW5tYXRjaGVkIGNoYXIgKi9cbiAgICBzLmR5bl9sdHJlZVtsYyAqIDJdIC8qLkZyZXEqLyArKztcbiAgfSBlbHNlIHtcbiAgICBzLm1hdGNoZXMrKztcbiAgICAvKiBIZXJlLCBsYyBpcyB0aGUgbWF0Y2ggbGVuZ3RoIC0gTUlOX01BVENIICovXG4gICAgZGlzdC0tOyAvKiBkaXN0ID0gbWF0Y2ggZGlzdGFuY2UgLSAxICovXG4gICAgLy9Bc3NlcnQoKHVzaClkaXN0IDwgKHVzaClNQVhfRElTVChzKSAmJlxuICAgIC8vICAgICAgICh1c2gpbGMgPD0gKHVzaCkoTUFYX01BVENILU1JTl9NQVRDSCkgJiZcbiAgICAvLyAgICAgICAodXNoKWRfY29kZShkaXN0KSA8ICh1c2gpRF9DT0RFUywgIFwiX3RyX3RhbGx5OiBiYWQgbWF0Y2hcIik7XG5cbiAgICBzLmR5bl9sdHJlZVsoX2xlbmd0aF9jb2RlW2xjXSArIExJVEVSQUxTICsgMSkgKiAyXSAvKi5GcmVxKi8gKys7XG4gICAgcy5keW5fZHRyZWVbZF9jb2RlKGRpc3QpICogMl0gLyouRnJlcSovICsrO1xuICB9XG5cbiAgLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhaWx0cyxcbiAgLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuXG4gIC8vI2lmZGVmIFRSVU5DQVRFX0JMT0NLXG4gIC8vICAvKiBUcnkgdG8gZ3Vlc3MgaWYgaXQgaXMgcHJvZml0YWJsZSB0byBzdG9wIHRoZSBjdXJyZW50IGJsb2NrIGhlcmUgKi9cbiAgLy8gIGlmICgocy5sYXN0X2xpdCAmIDB4MWZmZikgPT09IDAgJiYgcy5sZXZlbCA+IDIpIHtcbiAgLy8gICAgLyogQ29tcHV0ZSBhbiB1cHBlciBib3VuZCBmb3IgdGhlIGNvbXByZXNzZWQgbGVuZ3RoICovXG4gIC8vICAgIG91dF9sZW5ndGggPSBzLmxhc3RfbGl0Kjg7XG4gIC8vICAgIGluX2xlbmd0aCA9IHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0O1xuICAvL1xuICAvLyAgICBmb3IgKGRjb2RlID0gMDsgZGNvZGUgPCBEX0NPREVTOyBkY29kZSsrKSB7XG4gIC8vICAgICAgb3V0X2xlbmd0aCArPSBzLmR5bl9kdHJlZVtkY29kZSoyXS8qLkZyZXEqLyAqICg1ICsgZXh0cmFfZGJpdHNbZGNvZGVdKTtcbiAgLy8gICAgfVxuICAvLyAgICBvdXRfbGVuZ3RoID4+Pj0gMztcbiAgLy8gICAgLy9UcmFjZXYoKHN0ZGVycixcIlxcbmxhc3RfbGl0ICV1LCBpbiAlbGQsIG91dCB+JWxkKCVsZCUlKSBcIixcbiAgLy8gICAgLy8gICAgICAgcy0+bGFzdF9saXQsIGluX2xlbmd0aCwgb3V0X2xlbmd0aCxcbiAgLy8gICAgLy8gICAgICAgMTAwTCAtIG91dF9sZW5ndGgqMTAwTC9pbl9sZW5ndGgpKTtcbiAgLy8gICAgaWYgKHMubWF0Y2hlcyA8IChzLmxhc3RfbGl0Pj4xKS8qaW50IC8yKi8gJiYgb3V0X2xlbmd0aCA8IChpbl9sZW5ndGg+PjEpLyppbnQgLzIqLykge1xuICAvLyAgICAgIHJldHVybiB0cnVlO1xuICAvLyAgICB9XG4gIC8vICB9XG4gIC8vI2VuZGlmXG5cbiAgcmV0dXJuIChzLmxhc3RfbGl0ID09PSBzLmxpdF9idWZzaXplIC0gMSk7XG4gIC8qIFdlIGF2b2lkIGVxdWFsaXR5IHdpdGggbGl0X2J1ZnNpemUgYmVjYXVzZSBvZiB3cmFwYXJvdW5kIGF0IDY0S1xuICAgKiBvbiAxNiBiaXQgbWFjaGluZXMgYW5kIGJlY2F1c2Ugc3RvcmVkIGJsb2NrcyBhcmUgcmVzdHJpY3RlZCB0b1xuICAgKiA2NEstMSBieXRlcy5cbiAgICovXG59XG4iLCJcbi8vIE5vdGU6IGFkbGVyMzIgdGFrZXMgMTIlIGZvciBsZXZlbCAwIGFuZCAyJSBmb3IgbGV2ZWwgNi5cbi8vIEl0IGRvZXNuJ3Qgd29ydGggdG8gbWFrZSBhZGRpdGlvbmFsIG9wdGltaXphdGlvbmEgYXMgaW4gb3JpZ2luYWwuXG4vLyBTbWFsbCBzaXplIGlzIHByZWZlcmFibGUuXG5cbmZ1bmN0aW9uIGFkbGVyMzIoYWRsZXIsIGJ1ZiwgbGVuLCBwb3MpIHtcbiAgdmFyIHMxID0gKGFkbGVyICYgMHhmZmZmKSB8MCxcbiAgICAgIHMyID0gKChhZGxlciA+Pj4gMTYpICYgMHhmZmZmKSB8MCxcbiAgICAgIG4gPSAwO1xuXG4gIHdoaWxlIChsZW4gIT09IDApIHtcbiAgICAvLyBTZXQgbGltaXQgfiB0d2ljZSBsZXNzIHRoYW4gNTU1MiwgdG8ga2VlcFxuICAgIC8vIHMyIGluIDMxLWJpdHMsIGJlY2F1c2Ugd2UgZm9yY2Ugc2lnbmVkIGludHMuXG4gICAgLy8gaW4gb3RoZXIgY2FzZSAlPSB3aWxsIGZhaWwuXG4gICAgbiA9IGxlbiA+IDIwMDAgPyAyMDAwIDogbGVuO1xuICAgIGxlbiAtPSBuO1xuXG4gICAgZG8ge1xuICAgICAgczEgPSAoczEgKyBidWZbcG9zKytdKSB8MDtcbiAgICAgIHMyID0gKHMyICsgczEpIHwwO1xuICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICBzMSAlPSA2NTUyMTtcbiAgICBzMiAlPSA2NTUyMTtcbiAgfVxuXG4gIHJldHVybiAoczEgfCAoczIgPDwgMTYpKSB8MDtcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBhZGxlcjMyO1xuIiwiXG4vLyBOb3RlOiB3ZSBjYW4ndCBnZXQgc2lnbmlmaWNhbnQgc3BlZWQgYm9vc3QgaGVyZS5cbi8vIFNvIHdyaXRlIGNvZGUgdG8gbWluaW1pemUgc2l6ZSAtIG5vIHByZWdlbmVyYXRlZCB0YWJsZXNcbi8vIGFuZCBhcnJheSB0b29scyBkZXBlbmRlbmNpZXMuXG5cblxuLy8gVXNlIG9yZGluYXJ5IGFycmF5LCBzaW5jZSB1bnR5cGVkIG1ha2VzIG5vIGJvb3N0IGhlcmVcbmZ1bmN0aW9uIG1ha2VUYWJsZSgpIHtcbiAgdmFyIGMsIHRhYmxlID0gW107XG5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCAyNTY7IG4rKykge1xuICAgIGMgPSBuO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgODsgaysrKSB7XG4gICAgICBjID0gKChjICYgMSkgPyAoMHhFREI4ODMyMCBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuICAgIH1cbiAgICB0YWJsZVtuXSA9IGM7XG4gIH1cblxuICByZXR1cm4gdGFibGU7XG59XG5cbi8vIENyZWF0ZSB0YWJsZSBvbiBsb2FkLiBKdXN0IDI1NSBzaWduZWQgbG9uZ3MuIE5vdCBhIHByb2JsZW0uXG52YXIgY3JjVGFibGUgPSBtYWtlVGFibGUoKTtcblxuXG5mdW5jdGlvbiBjcmMzMihjcmMsIGJ1ZiwgbGVuLCBwb3MpIHtcbiAgdmFyIHQgPSBjcmNUYWJsZSxcbiAgICAgIGVuZCA9IHBvcyArIGxlbjtcblxuICBjcmMgXj0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IHBvczsgaSA8IGVuZDsgaSsrKSB7XG4gICAgY3JjID0gKGNyYyA+Pj4gOCkgXiB0WyhjcmMgXiBidWZbaV0pICYgMHhGRl07XG4gIH1cblxuICByZXR1cm4gKGNyYyBeICgtMSkpOyAvLyA+Pj4gMDtcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBjcmMzMjtcbiIsIlxuaW1wb3J0IHtCdWY4LEJ1ZjE2LGFycmF5U2V0fSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7X3RyX2ZsdXNoX2Jsb2NrLCBfdHJfdGFsbHksIF90cl9pbml0LCBfdHJfYWxpZ24sIF90cl9zdG9yZWRfYmxvY2t9IGZyb20gJy4vdHJlZXMnO1xuaW1wb3J0IGFkbGVyMzIgZnJvbSAnLi9hZGxlcjMyJztcbmltcG9ydCBjcmMzMiBmcm9tICcuL2NyYzMyJztcbmltcG9ydCBtc2cgZnJvbSAnLi9tZXNzYWdlcyc7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbi8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbnZhciBaX05PX0ZMVVNIID0gMDtcbnZhciBaX1BBUlRJQUxfRkxVU0ggPSAxO1xuLy92YXIgWl9TWU5DX0ZMVVNIICAgID0gMjtcbnZhciBaX0ZVTExfRkxVU0ggPSAzO1xudmFyIFpfRklOSVNIID0gNDtcbnZhciBaX0JMT0NLID0gNTtcbi8vdmFyIFpfVFJFRVMgICAgICAgICA9IDY7XG5cblxuLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlc1xuICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxuICovXG52YXIgWl9PSyA9IDA7XG52YXIgWl9TVFJFQU1fRU5EID0gMTtcbi8vdmFyIFpfTkVFRF9ESUNUICAgICA9IDI7XG4vL3ZhciBaX0VSUk5PICAgICAgICAgPSAtMTtcbnZhciBaX1NUUkVBTV9FUlJPUiA9IC0yO1xudmFyIFpfREFUQV9FUlJPUiA9IC0zO1xuLy92YXIgWl9NRU1fRVJST1IgICAgID0gLTQ7XG52YXIgWl9CVUZfRVJST1IgPSAtNTtcbi8vdmFyIFpfVkVSU0lPTl9FUlJPUiA9IC02O1xuXG5cbi8qIGNvbXByZXNzaW9uIGxldmVscyAqL1xuLy92YXIgWl9OT19DT01QUkVTU0lPTiAgICAgID0gMDtcbi8vdmFyIFpfQkVTVF9TUEVFRCAgICAgICAgICA9IDE7XG4vL3ZhciBaX0JFU1RfQ09NUFJFU1NJT04gICAgPSA5O1xudmFyIFpfREVGQVVMVF9DT01QUkVTU0lPTiA9IC0xO1xuXG5cbnZhciBaX0ZJTFRFUkVEID0gMTtcbnZhciBaX0hVRkZNQU5fT05MWSA9IDI7XG52YXIgWl9STEUgPSAzO1xudmFyIFpfRklYRUQgPSA0O1xudmFyIFpfREVGQVVMVF9TVFJBVEVHWSA9IDA7XG5cbi8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbi8vdmFyIFpfQklOQVJZICAgICAgICAgICAgICA9IDA7XG4vL3ZhciBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xuLy92YXIgWl9BU0NJSSAgICAgICAgICAgICAgID0gMTsgLy8gPSBaX1RFWFRcbnZhciBaX1VOS05PV04gPSAyO1xuXG5cbi8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqL1xudmFyIFpfREVGTEFURUQgPSA4O1xuXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbnZhciBNQVhfTUVNX0xFVkVMID0gOTtcbi8qIE1heGltdW0gdmFsdWUgZm9yIG1lbUxldmVsIGluIGRlZmxhdGVJbml0MiAqL1xudmFyIE1BWF9XQklUUyA9IDE1O1xuLyogMzJLIExaNzcgd2luZG93ICovXG52YXIgREVGX01FTV9MRVZFTCA9IDg7XG5cblxudmFyIExFTkdUSF9DT0RFUyA9IDI5O1xuLyogbnVtYmVyIG9mIGxlbmd0aCBjb2Rlcywgbm90IGNvdW50aW5nIHRoZSBzcGVjaWFsIEVORF9CTE9DSyBjb2RlICovXG52YXIgTElURVJBTFMgPSAyNTY7XG4vKiBudW1iZXIgb2YgbGl0ZXJhbCBieXRlcyAwLi4yNTUgKi9cbnZhciBMX0NPREVTID0gTElURVJBTFMgKyAxICsgTEVOR1RIX0NPREVTO1xuLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovXG52YXIgRF9DT0RFUyA9IDMwO1xuLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGVzICovXG52YXIgQkxfQ09ERVMgPSAxOTtcbi8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqL1xudmFyIEhFQVBfU0laRSA9IDIgKiBMX0NPREVTICsgMTtcbi8qIG1heGltdW0gaGVhcCBzaXplICovXG52YXIgTUFYX0JJVFMgPSAxNTtcbi8qIEFsbCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JJVFMgYml0cyAqL1xuXG52YXIgTUlOX01BVENIID0gMztcbnZhciBNQVhfTUFUQ0ggPSAyNTg7XG52YXIgTUlOX0xPT0tBSEVBRCA9IChNQVhfTUFUQ0ggKyBNSU5fTUFUQ0ggKyAxKTtcblxudmFyIFBSRVNFVF9ESUNUID0gMHgyMDtcblxudmFyIElOSVRfU1RBVEUgPSA0MjtcbnZhciBFWFRSQV9TVEFURSA9IDY5O1xudmFyIE5BTUVfU1RBVEUgPSA3MztcbnZhciBDT01NRU5UX1NUQVRFID0gOTE7XG52YXIgSENSQ19TVEFURSA9IDEwMztcbnZhciBCVVNZX1NUQVRFID0gMTEzO1xudmFyIEZJTklTSF9TVEFURSA9IDY2NjtcblxudmFyIEJTX05FRURfTU9SRSA9IDE7IC8qIGJsb2NrIG5vdCBjb21wbGV0ZWQsIG5lZWQgbW9yZSBpbnB1dCBvciBtb3JlIG91dHB1dCAqL1xudmFyIEJTX0JMT0NLX0RPTkUgPSAyOyAvKiBibG9jayBmbHVzaCBwZXJmb3JtZWQgKi9cbnZhciBCU19GSU5JU0hfU1RBUlRFRCA9IDM7IC8qIGZpbmlzaCBzdGFydGVkLCBuZWVkIG9ubHkgbW9yZSBvdXRwdXQgYXQgbmV4dCBkZWZsYXRlICovXG52YXIgQlNfRklOSVNIX0RPTkUgPSA0OyAvKiBmaW5pc2ggZG9uZSwgYWNjZXB0IG5vIG1vcmUgaW5wdXQgb3Igb3V0cHV0ICovXG5cbnZhciBPU19DT0RFID0gMHgwMzsgLy8gVW5peCA6KSAuIERvbid0IGRldGVjdCwgdXNlIHRoaXMgZGVmYXVsdC5cblxuZnVuY3Rpb24gZXJyKHN0cm0sIGVycm9yQ29kZSkge1xuICBzdHJtLm1zZyA9IG1zZ1tlcnJvckNvZGVdO1xuICByZXR1cm4gZXJyb3JDb2RlO1xufVxuXG5mdW5jdGlvbiByYW5rKGYpIHtcbiAgcmV0dXJuICgoZikgPDwgMSkgLSAoKGYpID4gNCA/IDkgOiAwKTtcbn1cblxuZnVuY3Rpb24gemVybyhidWYpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7XG4gIHdoaWxlICgtLWxlbiA+PSAwKSB7XG4gICAgYnVmW2xlbl0gPSAwO1xuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZS4gQWxsIGRlZmxhdGUoKSBvdXRwdXQgZ29lc1xuICogdGhyb3VnaCB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdFxuICogdG8gYXZvaWQgYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPm91dHB1dCBidWZmZXIgYW5kIGNvcHlpbmcgaW50byBpdC5cbiAqIChTZWUgYWxzbyByZWFkX2J1ZigpKS5cbiAqL1xuZnVuY3Rpb24gZmx1c2hfcGVuZGluZyhzdHJtKSB7XG4gIHZhciBzID0gc3RybS5zdGF0ZTtcblxuICAvL190cl9mbHVzaF9iaXRzKHMpO1xuICB2YXIgbGVuID0gcy5wZW5kaW5nO1xuICBpZiAobGVuID4gc3RybS5hdmFpbF9vdXQpIHtcbiAgICBsZW4gPSBzdHJtLmF2YWlsX291dDtcbiAgfVxuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXJyYXlTZXQoc3RybS5vdXRwdXQsIHMucGVuZGluZ19idWYsIHMucGVuZGluZ19vdXQsIGxlbiwgc3RybS5uZXh0X291dCk7XG4gIHN0cm0ubmV4dF9vdXQgKz0gbGVuO1xuICBzLnBlbmRpbmdfb3V0ICs9IGxlbjtcbiAgc3RybS50b3RhbF9vdXQgKz0gbGVuO1xuICBzdHJtLmF2YWlsX291dCAtPSBsZW47XG4gIHMucGVuZGluZyAtPSBsZW47XG4gIGlmIChzLnBlbmRpbmcgPT09IDApIHtcbiAgICBzLnBlbmRpbmdfb3V0ID0gMDtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGZsdXNoX2Jsb2NrX29ubHkocywgbGFzdCkge1xuICBfdHJfZmx1c2hfYmxvY2socywgKHMuYmxvY2tfc3RhcnQgPj0gMCA/IHMuYmxvY2tfc3RhcnQgOiAtMSksIHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0LCBsYXN0KTtcbiAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7XG4gIGZsdXNoX3BlbmRpbmcocy5zdHJtKTtcbn1cblxuXG5mdW5jdGlvbiBwdXRfYnl0ZShzLCBiKSB7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gYjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBQdXQgYSBzaG9ydCBpbiB0aGUgcGVuZGluZyBidWZmZXIuIFRoZSAxNi1iaXQgdmFsdWUgaXMgcHV0IGluIE1TQiBvcmRlci5cbiAqIElOIGFzc2VydGlvbjogdGhlIHN0cmVhbSBzdGF0ZSBpcyBjb3JyZWN0IGFuZCB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpblxuICogcGVuZGluZ19idWYuXG4gKi9cbmZ1bmN0aW9uIHB1dFNob3J0TVNCKHMsIGIpIHtcbiAgLy8gIHB1dF9ieXRlKHMsIChCeXRlKShiID4+IDgpKTtcbiAgLy8gIHB1dF9ieXRlKHMsIChCeXRlKShiICYgMHhmZikpO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IChiID4+PiA4KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gYiAmIDB4ZmY7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZWFkIGEgbmV3IGJ1ZmZlciBmcm9tIHRoZSBjdXJyZW50IGlucHV0IHN0cmVhbSwgdXBkYXRlIHRoZSBhZGxlcjMyXG4gKiBhbmQgdG90YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuICBBbGwgZGVmbGF0ZSgpIGlucHV0IGdvZXMgdGhyb3VnaFxuICogdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXQgdG8gYXZvaWRcbiAqIGFsbG9jYXRpbmcgYSBsYXJnZSBzdHJtLT5pbnB1dCBidWZmZXIgYW5kIGNvcHlpbmcgZnJvbSBpdC5cbiAqIChTZWUgYWxzbyBmbHVzaF9wZW5kaW5nKCkpLlxuICovXG5mdW5jdGlvbiByZWFkX2J1ZihzdHJtLCBidWYsIHN0YXJ0LCBzaXplKSB7XG4gIHZhciBsZW4gPSBzdHJtLmF2YWlsX2luO1xuXG4gIGlmIChsZW4gPiBzaXplKSB7XG4gICAgbGVuID0gc2l6ZTtcbiAgfVxuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBzdHJtLmF2YWlsX2luIC09IGxlbjtcblxuICAvLyB6bWVtY3B5KGJ1Ziwgc3RybS0+bmV4dF9pbiwgbGVuKTtcbiAgYXJyYXlTZXQoYnVmLCBzdHJtLmlucHV0LCBzdHJtLm5leHRfaW4sIGxlbiwgc3RhcnQpO1xuICBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAxKSB7XG4gICAgc3RybS5hZGxlciA9IGFkbGVyMzIoc3RybS5hZGxlciwgYnVmLCBsZW4sIHN0YXJ0KTtcbiAgfSBlbHNlIGlmIChzdHJtLnN0YXRlLndyYXAgPT09IDIpIHtcbiAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgYnVmLCBsZW4sIHN0YXJ0KTtcbiAgfVxuXG4gIHN0cm0ubmV4dF9pbiArPSBsZW47XG4gIHN0cm0udG90YWxfaW4gKz0gbGVuO1xuXG4gIHJldHVybiBsZW47XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZXQgbWF0Y2hfc3RhcnQgdG8gdGhlIGxvbmdlc3QgbWF0Y2ggc3RhcnRpbmcgYXQgdGhlIGdpdmVuIHN0cmluZyBhbmRcbiAqIHJldHVybiBpdHMgbGVuZ3RoLiBNYXRjaGVzIHNob3J0ZXIgb3IgZXF1YWwgdG8gcHJldl9sZW5ndGggYXJlIGRpc2NhcmRlZCxcbiAqIGluIHdoaWNoIGNhc2UgdGhlIHJlc3VsdCBpcyBlcXVhbCB0byBwcmV2X2xlbmd0aCBhbmQgbWF0Y2hfc3RhcnQgaXNcbiAqIGdhcmJhZ2UuXG4gKiBJTiBhc3NlcnRpb25zOiBjdXJfbWF0Y2ggaXMgdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW4gZm9yIHRoZSBjdXJyZW50XG4gKiAgIHN0cmluZyAoc3Ryc3RhcnQpIGFuZCBpdHMgZGlzdGFuY2UgaXMgPD0gTUFYX0RJU1QsIGFuZCBwcmV2X2xlbmd0aCA+PSAxXG4gKiBPVVQgYXNzZXJ0aW9uOiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdCBncmVhdGVyIHRoYW4gcy0+bG9va2FoZWFkLlxuICovXG5mdW5jdGlvbiBsb25nZXN0X21hdGNoKHMsIGN1cl9tYXRjaCkge1xuICB2YXIgY2hhaW5fbGVuZ3RoID0gcy5tYXhfY2hhaW5fbGVuZ3RoOyAvKiBtYXggaGFzaCBjaGFpbiBsZW5ndGggKi9cbiAgdmFyIHNjYW4gPSBzLnN0cnN0YXJ0OyAvKiBjdXJyZW50IHN0cmluZyAqL1xuICB2YXIgbWF0Y2g7IC8qIG1hdGNoZWQgc3RyaW5nICovXG4gIHZhciBsZW47IC8qIGxlbmd0aCBvZiBjdXJyZW50IG1hdGNoICovXG4gIHZhciBiZXN0X2xlbiA9IHMucHJldl9sZW5ndGg7IC8qIGJlc3QgbWF0Y2ggbGVuZ3RoIHNvIGZhciAqL1xuICB2YXIgbmljZV9tYXRjaCA9IHMubmljZV9tYXRjaDsgLyogc3RvcCBpZiBtYXRjaCBsb25nIGVub3VnaCAqL1xuICB2YXIgbGltaXQgPSAocy5zdHJzdGFydCA+IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSA/XG4gICAgcy5zdHJzdGFydCAtIChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIDogMCAvKk5JTCovIDtcblxuICB2YXIgX3dpbiA9IHMud2luZG93OyAvLyBzaG9ydGN1dFxuXG4gIHZhciB3bWFzayA9IHMud19tYXNrO1xuICB2YXIgcHJldiA9IHMucHJldjtcblxuICAvKiBTdG9wIHdoZW4gY3VyX21hdGNoIGJlY29tZXMgPD0gbGltaXQuIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLFxuICAgKiB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nIG9mIHdpbmRvdyBpbmRleCAwLlxuICAgKi9cblxuICB2YXIgc3RyZW5kID0gcy5zdHJzdGFydCArIE1BWF9NQVRDSDtcbiAgdmFyIHNjYW5fZW5kMSA9IF93aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07XG4gIHZhciBzY2FuX2VuZCA9IF93aW5bc2NhbiArIGJlc3RfbGVuXTtcblxuICAvKiBUaGUgY29kZSBpcyBvcHRpbWl6ZWQgZm9yIEhBU0hfQklUUyA+PSA4IGFuZCBNQVhfTUFUQ0gtMiBtdWx0aXBsZSBvZiAxNi5cbiAgICogSXQgaXMgZWFzeSB0byBnZXQgcmlkIG9mIHRoaXMgb3B0aW1pemF0aW9uIGlmIG5lY2Vzc2FyeS5cbiAgICovXG4gIC8vIEFzc2VydChzLT5oYXNoX2JpdHMgPj0gOCAmJiBNQVhfTUFUQ0ggPT0gMjU4LCBcIkNvZGUgdG9vIGNsZXZlclwiKTtcblxuICAvKiBEbyBub3Qgd2FzdGUgdG9vIG11Y2ggdGltZSBpZiB3ZSBhbHJlYWR5IGhhdmUgYSBnb29kIG1hdGNoOiAqL1xuICBpZiAocy5wcmV2X2xlbmd0aCA+PSBzLmdvb2RfbWF0Y2gpIHtcbiAgICBjaGFpbl9sZW5ndGggPj49IDI7XG4gIH1cbiAgLyogRG8gbm90IGxvb2sgZm9yIG1hdGNoZXMgYmV5b25kIHRoZSBlbmQgb2YgdGhlIGlucHV0LiBUaGlzIGlzIG5lY2Vzc2FyeVxuICAgKiB0byBtYWtlIGRlZmxhdGUgZGV0ZXJtaW5pc3RpYy5cbiAgICovXG4gIGlmIChuaWNlX21hdGNoID4gcy5sb29rYWhlYWQpIHtcbiAgICBuaWNlX21hdGNoID0gcy5sb29rYWhlYWQ7XG4gIH1cblxuICAvLyBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFELCBcIm5lZWQgbG9va2FoZWFkXCIpO1xuXG4gIGRvIHtcbiAgICAvLyBBc3NlcnQoY3VyX21hdGNoIDwgcy0+c3Ryc3RhcnQsIFwibm8gZnV0dXJlXCIpO1xuICAgIG1hdGNoID0gY3VyX21hdGNoO1xuXG4gICAgLyogU2tpcCB0byBuZXh0IG1hdGNoIGlmIHRoZSBtYXRjaCBsZW5ndGggY2Fubm90IGluY3JlYXNlXG4gICAgICogb3IgaWYgdGhlIG1hdGNoIGxlbmd0aCBpcyBsZXNzIHRoYW4gMi4gIE5vdGUgdGhhdCB0aGUgY2hlY2tzIGJlbG93XG4gICAgICogZm9yIGluc3VmZmljaWVudCBsb29rYWhlYWQgb25seSBvY2N1ciBvY2Nhc2lvbmFsbHkgZm9yIHBlcmZvcm1hbmNlXG4gICAgICogcmVhc29ucy4gIFRoZXJlZm9yZSB1bmluaXRpYWxpemVkIG1lbW9yeSB3aWxsIGJlIGFjY2Vzc2VkLCBhbmRcbiAgICAgKiBjb25kaXRpb25hbCBqdW1wcyB3aWxsIGJlIG1hZGUgdGhhdCBkZXBlbmQgb24gdGhvc2UgdmFsdWVzLlxuICAgICAqIEhvd2V2ZXIgdGhlIGxlbmd0aCBvZiB0aGUgbWF0Y2ggaXMgbGltaXRlZCB0byB0aGUgbG9va2FoZWFkLCBzb1xuICAgICAqIHRoZSBvdXRwdXQgb2YgZGVmbGF0ZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhlIHVuaW5pdGlhbGl6ZWQgdmFsdWVzLlxuICAgICAqL1xuXG4gICAgaWYgKF93aW5bbWF0Y2ggKyBiZXN0X2xlbl0gIT09IHNjYW5fZW5kIHx8XG4gICAgICBfd2luW21hdGNoICsgYmVzdF9sZW4gLSAxXSAhPT0gc2Nhbl9lbmQxIHx8XG4gICAgICBfd2luW21hdGNoXSAhPT0gX3dpbltzY2FuXSB8fFxuICAgICAgX3dpblsrK21hdGNoXSAhPT0gX3dpbltzY2FuICsgMV0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qIFRoZSBjaGVjayBhdCBiZXN0X2xlbi0xIGNhbiBiZSByZW1vdmVkIGJlY2F1c2UgaXQgd2lsbCBiZSBtYWRlXG4gICAgICogYWdhaW4gbGF0ZXIuIChUaGlzIGhldXJpc3RpYyBpcyBub3QgYWx3YXlzIGEgd2luLilcbiAgICAgKiBJdCBpcyBub3QgbmVjZXNzYXJ5IHRvIGNvbXBhcmUgc2NhblsyXSBhbmQgbWF0Y2hbMl0gc2luY2UgdGhleVxuICAgICAqIGFyZSBhbHdheXMgZXF1YWwgd2hlbiB0aGUgb3RoZXIgYnl0ZXMgbWF0Y2gsIGdpdmVuIHRoYXRcbiAgICAgKiB0aGUgaGFzaCBrZXlzIGFyZSBlcXVhbCBhbmQgdGhhdCBIQVNIX0JJVFMgPj0gOC5cbiAgICAgKi9cbiAgICBzY2FuICs9IDI7XG4gICAgbWF0Y2grKztcbiAgICAvLyBBc3NlcnQoKnNjYW4gPT0gKm1hdGNoLCBcIm1hdGNoWzJdP1wiKTtcblxuICAgIC8qIFdlIGNoZWNrIGZvciBpbnN1ZmZpY2llbnQgbG9va2FoZWFkIG9ubHkgZXZlcnkgOHRoIGNvbXBhcmlzb247XG4gICAgICogdGhlIDI1NnRoIGNoZWNrIHdpbGwgYmUgbWFkZSBhdCBzdHJzdGFydCsyNTguXG4gICAgICovXG4gICAgZG8ge1xuICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXG4gICAgfSB3aGlsZSAoX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgc2NhbiA8IHN0cmVuZCk7XG5cbiAgICAvLyBBc3NlcnQoc2NhbiA8PSBzLT53aW5kb3crKHVuc2lnbmVkKShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XG5cbiAgICBsZW4gPSBNQVhfTUFUQ0ggLSAoc3RyZW5kIC0gc2Nhbik7XG4gICAgc2NhbiA9IHN0cmVuZCAtIE1BWF9NQVRDSDtcblxuICAgIGlmIChsZW4gPiBiZXN0X2xlbikge1xuICAgICAgcy5tYXRjaF9zdGFydCA9IGN1cl9tYXRjaDtcbiAgICAgIGJlc3RfbGVuID0gbGVuO1xuICAgICAgaWYgKGxlbiA+PSBuaWNlX21hdGNoKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc2Nhbl9lbmQxID0gX3dpbltzY2FuICsgYmVzdF9sZW4gLSAxXTtcbiAgICAgIHNjYW5fZW5kID0gX3dpbltzY2FuICsgYmVzdF9sZW5dO1xuICAgIH1cbiAgfSB3aGlsZSAoKGN1cl9tYXRjaCA9IHByZXZbY3VyX21hdGNoICYgd21hc2tdKSA+IGxpbWl0ICYmIC0tY2hhaW5fbGVuZ3RoICE9PSAwKTtcblxuICBpZiAoYmVzdF9sZW4gPD0gcy5sb29rYWhlYWQpIHtcbiAgICByZXR1cm4gYmVzdF9sZW47XG4gIH1cbiAgcmV0dXJuIHMubG9va2FoZWFkO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmlsbCB0aGUgd2luZG93IHdoZW4gdGhlIGxvb2thaGVhZCBiZWNvbWVzIGluc3VmZmljaWVudC5cbiAqIFVwZGF0ZXMgc3Ryc3RhcnQgYW5kIGxvb2thaGVhZC5cbiAqXG4gKiBJTiBhc3NlcnRpb246IGxvb2thaGVhZCA8IE1JTl9MT09LQUhFQURcbiAqIE9VVCBhc3NlcnRpb25zOiBzdHJzdGFydCA8PSB3aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFEXG4gKiAgICBBdCBsZWFzdCBvbmUgYnl0ZSBoYXMgYmVlbiByZWFkLCBvciBhdmFpbF9pbiA9PSAwOyByZWFkcyBhcmVcbiAqICAgIHBlcmZvcm1lZCBmb3IgYXQgbGVhc3QgdHdvIGJ5dGVzIChyZXF1aXJlZCBmb3IgdGhlIHppcCB0cmFuc2xhdGVfZW9sXG4gKiAgICBvcHRpb24gLS0gbm90IHN1cHBvcnRlZCBoZXJlKS5cbiAqL1xuZnVuY3Rpb24gZmlsbF93aW5kb3cocykge1xuICB2YXIgX3dfc2l6ZSA9IHMud19zaXplO1xuICB2YXIgcCwgbiwgbSwgbW9yZSwgc3RyO1xuXG4gIC8vQXNzZXJ0KHMtPmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQsIFwiYWxyZWFkeSBlbm91Z2ggbG9va2FoZWFkXCIpO1xuXG4gIGRvIHtcbiAgICBtb3JlID0gcy53aW5kb3dfc2l6ZSAtIHMubG9va2FoZWFkIC0gcy5zdHJzdGFydDtcblxuICAgIC8vIEpTIGludHMgaGF2ZSAzMiBiaXQsIGJsb2NrIGJlbG93IG5vdCBuZWVkZWRcbiAgICAvKiBEZWFsIHdpdGggIUAjJCUgNjRLIGxpbWl0OiAqL1xuICAgIC8vaWYgKHNpemVvZihpbnQpIDw9IDIpIHtcbiAgICAvLyAgICBpZiAobW9yZSA9PSAwICYmIHMtPnN0cnN0YXJ0ID09IDAgJiYgcy0+bG9va2FoZWFkID09IDApIHtcbiAgICAvLyAgICAgICAgbW9yZSA9IHdzaXplO1xuICAgIC8vXG4gICAgLy8gIH0gZWxzZSBpZiAobW9yZSA9PSAodW5zaWduZWQpKC0xKSkge1xuICAgIC8vICAgICAgICAvKiBWZXJ5IHVubGlrZWx5LCBidXQgcG9zc2libGUgb24gMTYgYml0IG1hY2hpbmUgaWZcbiAgICAvLyAgICAgICAgICogc3Ryc3RhcnQgPT0gMCAmJiBsb29rYWhlYWQgPT0gMSAoaW5wdXQgZG9uZSBhIGJ5dGUgYXQgdGltZSlcbiAgICAvLyAgICAgICAgICovXG4gICAgLy8gICAgICAgIG1vcmUtLTtcbiAgICAvLyAgICB9XG4gICAgLy99XG5cblxuICAgIC8qIElmIHRoZSB3aW5kb3cgaXMgYWxtb3N0IGZ1bGwgYW5kIHRoZXJlIGlzIGluc3VmZmljaWVudCBsb29rYWhlYWQsXG4gICAgICogbW92ZSB0aGUgdXBwZXIgaGFsZiB0byB0aGUgbG93ZXIgb25lIHRvIG1ha2Ugcm9vbSBpbiB0aGUgdXBwZXIgaGFsZi5cbiAgICAgKi9cbiAgICBpZiAocy5zdHJzdGFydCA+PSBfd19zaXplICsgKF93X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xuXG4gICAgICBhcnJheVNldChzLndpbmRvdywgcy53aW5kb3csIF93X3NpemUsIF93X3NpemUsIDApO1xuICAgICAgcy5tYXRjaF9zdGFydCAtPSBfd19zaXplO1xuICAgICAgcy5zdHJzdGFydCAtPSBfd19zaXplO1xuICAgICAgLyogd2Ugbm93IGhhdmUgc3Ryc3RhcnQgPj0gTUFYX0RJU1QgKi9cbiAgICAgIHMuYmxvY2tfc3RhcnQgLT0gX3dfc2l6ZTtcblxuICAgICAgLyogU2xpZGUgdGhlIGhhc2ggdGFibGUgKGNvdWxkIGJlIGF2b2lkZWQgd2l0aCAzMiBiaXQgdmFsdWVzXG4gICAgICAgYXQgdGhlIGV4cGVuc2Ugb2YgbWVtb3J5IHVzYWdlKS4gV2Ugc2xpZGUgZXZlbiB3aGVuIGxldmVsID09IDBcbiAgICAgICB0byBrZWVwIHRoZSBoYXNoIHRhYmxlIGNvbnNpc3RlbnQgaWYgd2Ugc3dpdGNoIGJhY2sgdG8gbGV2ZWwgPiAwXG4gICAgICAgbGF0ZXIuIChVc2luZyBsZXZlbCAwIHBlcm1hbmVudGx5IGlzIG5vdCBhbiBvcHRpbWFsIHVzYWdlIG9mXG4gICAgICAgemxpYiwgc28gd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGlzIHBhdGhvbG9naWNhbCBjYXNlLilcbiAgICAgICAqL1xuXG4gICAgICBuID0gcy5oYXNoX3NpemU7XG4gICAgICBwID0gbjtcbiAgICAgIGRvIHtcbiAgICAgICAgbSA9IHMuaGVhZFstLXBdO1xuICAgICAgICBzLmhlYWRbcF0gPSAobSA+PSBfd19zaXplID8gbSAtIF93X3NpemUgOiAwKTtcbiAgICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICAgIG4gPSBfd19zaXplO1xuICAgICAgcCA9IG47XG4gICAgICBkbyB7XG4gICAgICAgIG0gPSBzLnByZXZbLS1wXTtcbiAgICAgICAgcy5wcmV2W3BdID0gKG0gPj0gX3dfc2l6ZSA/IG0gLSBfd19zaXplIDogMCk7XG4gICAgICAgIC8qIElmIG4gaXMgbm90IG9uIGFueSBoYXNoIGNoYWluLCBwcmV2W25dIGlzIGdhcmJhZ2UgYnV0XG4gICAgICAgICAqIGl0cyB2YWx1ZSB3aWxsIG5ldmVyIGJlIHVzZWQuXG4gICAgICAgICAqL1xuICAgICAgfSB3aGlsZSAoLS1uKTtcblxuICAgICAgbW9yZSArPSBfd19zaXplO1xuICAgIH1cbiAgICBpZiAocy5zdHJtLmF2YWlsX2luID09PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBJZiB0aGVyZSB3YXMgbm8gc2xpZGluZzpcbiAgICAgKiAgICBzdHJzdGFydCA8PSBXU0laRStNQVhfRElTVC0xICYmIGxvb2thaGVhZCA8PSBNSU5fTE9PS0FIRUFEIC0gMSAmJlxuICAgICAqICAgIG1vcmUgPT0gd2luZG93X3NpemUgLSBsb29rYWhlYWQgLSBzdHJzdGFydFxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAoTUlOX0xPT0tBSEVBRC0xICsgV1NJWkUgKyBNQVhfRElTVC0xKVxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAyKldTSVpFICsgMlxuICAgICAqIEluIHRoZSBCSUdfTUVNIG9yIE1NQVAgY2FzZSAobm90IHlldCBzdXBwb3J0ZWQpLFxuICAgICAqICAgd2luZG93X3NpemUgPT0gaW5wdXRfc2l6ZSArIE1JTl9MT09LQUhFQUQgICYmXG4gICAgICogICBzdHJzdGFydCArIHMtPmxvb2thaGVhZCA8PSBpbnB1dF9zaXplID0+IG1vcmUgPj0gTUlOX0xPT0tBSEVBRC5cbiAgICAgKiBPdGhlcndpc2UsIHdpbmRvd19zaXplID09IDIqV1NJWkUgc28gbW9yZSA+PSAyLlxuICAgICAqIElmIHRoZXJlIHdhcyBzbGlkaW5nLCBtb3JlID49IFdTSVpFLiBTbyBpbiBhbGwgY2FzZXMsIG1vcmUgPj0gMi5cbiAgICAgKi9cbiAgICAvL0Fzc2VydChtb3JlID49IDIsIFwibW9yZSA8IDJcIik7XG4gICAgbiA9IHJlYWRfYnVmKHMuc3RybSwgcy53aW5kb3csIHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZCwgbW9yZSk7XG4gICAgcy5sb29rYWhlYWQgKz0gbjtcblxuICAgIC8qIEluaXRpYWxpemUgdGhlIGhhc2ggdmFsdWUgbm93IHRoYXQgd2UgaGF2ZSBzb21lIGlucHV0OiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0ID49IE1JTl9NQVRDSCkge1xuICAgICAgc3RyID0gcy5zdHJzdGFydCAtIHMuaW5zZXJ0O1xuICAgICAgcy5pbnNfaCA9IHMud2luZG93W3N0cl07XG5cbiAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgMV0pOyAqL1xuICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbc3RyICsgMV0pICYgcy5oYXNoX21hc2s7XG4gICAgICAvLyNpZiBNSU5fTUFUQ0ggIT0gM1xuICAgICAgLy8gICAgICAgIENhbGwgdXBkYXRlX2hhc2goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXG4gICAgICAvLyNlbmRpZlxuICAgICAgd2hpbGUgKHMuaW5zZXJ0KSB7XG4gICAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgTUlOX01BVENILTFdKTsgKi9cbiAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbc3RyICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG5cbiAgICAgICAgcy5wcmV2W3N0ciAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gc3RyO1xuICAgICAgICBzdHIrKztcbiAgICAgICAgcy5pbnNlcnQtLTtcbiAgICAgICAgaWYgKHMubG9va2FoZWFkICsgcy5pbnNlcnQgPCBNSU5fTUFUQ0gpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKiBJZiB0aGUgd2hvbGUgaW5wdXQgaGFzIGxlc3MgdGhhbiBNSU5fTUFUQ0ggYnl0ZXMsIGluc19oIGlzIGdhcmJhZ2UsXG4gICAgICogYnV0IHRoaXMgaXMgbm90IGltcG9ydGFudCBzaW5jZSBvbmx5IGxpdGVyYWwgYnl0ZXMgd2lsbCBiZSBlbWl0dGVkLlxuICAgICAqL1xuXG4gIH0gd2hpbGUgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCAmJiBzLnN0cm0uYXZhaWxfaW4gIT09IDApO1xuXG4gIC8qIElmIHRoZSBXSU5fSU5JVCBieXRlcyBhZnRlciB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGRhdGEgaGF2ZSBuZXZlciBiZWVuXG4gICAqIHdyaXR0ZW4sIHRoZW4gemVybyB0aG9zZSBieXRlcyBpbiBvcmRlciB0byBhdm9pZCBtZW1vcnkgY2hlY2sgcmVwb3J0cyBvZlxuICAgKiB0aGUgdXNlIG9mIHVuaW5pdGlhbGl6ZWQgKG9yIHVuaW5pdGlhbGlzZWQgYXMgSnVsaWFuIHdyaXRlcykgYnl0ZXMgYnlcbiAgICogdGhlIGxvbmdlc3QgbWF0Y2ggcm91dGluZXMuICBVcGRhdGUgdGhlIGhpZ2ggd2F0ZXIgbWFyayBmb3IgdGhlIG5leHRcbiAgICogdGltZSB0aHJvdWdoIGhlcmUuICBXSU5fSU5JVCBpcyBzZXQgdG8gTUFYX01BVENIIHNpbmNlIHRoZSBsb25nZXN0IG1hdGNoXG4gICAqIHJvdXRpbmVzIGFsbG93IHNjYW5uaW5nIHRvIHN0cnN0YXJ0ICsgTUFYX01BVENILCBpZ25vcmluZyBsb29rYWhlYWQuXG4gICAqL1xuICAvLyAgaWYgKHMuaGlnaF93YXRlciA8IHMud2luZG93X3NpemUpIHtcbiAgLy8gICAgdmFyIGN1cnIgPSBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQ7XG4gIC8vICAgIHZhciBpbml0ID0gMDtcbiAgLy9cbiAgLy8gICAgaWYgKHMuaGlnaF93YXRlciA8IGN1cnIpIHtcbiAgLy8gICAgICAvKiBQcmV2aW91cyBoaWdoIHdhdGVyIG1hcmsgYmVsb3cgY3VycmVudCBkYXRhIC0tIHplcm8gV0lOX0lOSVRcbiAgLy8gICAgICAgKiBieXRlcyBvciB1cCB0byBlbmQgb2Ygd2luZG93LCB3aGljaGV2ZXIgaXMgbGVzcy5cbiAgLy8gICAgICAgKi9cbiAgLy8gICAgICBpbml0ID0gcy53aW5kb3dfc2l6ZSAtIGN1cnI7XG4gIC8vICAgICAgaWYgKGluaXQgPiBXSU5fSU5JVClcbiAgLy8gICAgICAgIGluaXQgPSBXSU5fSU5JVDtcbiAgLy8gICAgICB6bWVtemVybyhzLT53aW5kb3cgKyBjdXJyLCAodW5zaWduZWQpaW5pdCk7XG4gIC8vICAgICAgcy0+aGlnaF93YXRlciA9IGN1cnIgKyBpbml0O1xuICAvLyAgICB9XG4gIC8vICAgIGVsc2UgaWYgKHMtPmhpZ2hfd2F0ZXIgPCAodWxnKWN1cnIgKyBXSU5fSU5JVCkge1xuICAvLyAgICAgIC8qIEhpZ2ggd2F0ZXIgbWFyayBhdCBvciBhYm92ZSBjdXJyZW50IGRhdGEsIGJ1dCBiZWxvdyBjdXJyZW50IGRhdGFcbiAgLy8gICAgICAgKiBwbHVzIFdJTl9JTklUIC0tIHplcm8gb3V0IHRvIGN1cnJlbnQgZGF0YSBwbHVzIFdJTl9JTklULCBvciB1cFxuICAvLyAgICAgICAqIHRvIGVuZCBvZiB3aW5kb3csIHdoaWNoZXZlciBpcyBsZXNzLlxuICAvLyAgICAgICAqL1xuICAvLyAgICAgIGluaXQgPSAodWxnKWN1cnIgKyBXSU5fSU5JVCAtIHMtPmhpZ2hfd2F0ZXI7XG4gIC8vICAgICAgaWYgKGluaXQgPiBzLT53aW5kb3dfc2l6ZSAtIHMtPmhpZ2hfd2F0ZXIpXG4gIC8vICAgICAgICBpbml0ID0gcy0+d2luZG93X3NpemUgLSBzLT5oaWdoX3dhdGVyO1xuICAvLyAgICAgIHptZW16ZXJvKHMtPndpbmRvdyArIHMtPmhpZ2hfd2F0ZXIsICh1bnNpZ25lZClpbml0KTtcbiAgLy8gICAgICBzLT5oaWdoX3dhdGVyICs9IGluaXQ7XG4gIC8vICAgIH1cbiAgLy8gIH1cbiAgLy9cbiAgLy8gIEFzc2VydCgodWxnKXMtPnN0cnN0YXJ0IDw9IHMtPndpbmRvd19zaXplIC0gTUlOX0xPT0tBSEVBRCxcbiAgLy8gICAgXCJub3QgZW5vdWdoIHJvb20gZm9yIHNlYXJjaFwiKTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5IHdpdGhvdXQgY29tcHJlc3Npb24gYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVyblxuICogdGhlIGN1cnJlbnQgYmxvY2sgc3RhdGUuXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IGluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgZGljdGlvbmFyeSBzaW5jZVxuICogdW5jb21wcmVzc2libGUgZGF0YSBpcyBwcm9iYWJseSBub3QgdXNlZnVsLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWRcbiAqIG9ubHkgZm9yIHRoZSBsZXZlbD0wIGNvbXByZXNzaW9uIG9wdGlvbi5cbiAqIE5PVEU6IHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIG9wdGltaXplZCB0byBhdm9pZCBleHRyYSBjb3B5aW5nIGZyb21cbiAqIHdpbmRvdyB0byBwZW5kaW5nX2J1Zi5cbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZV9zdG9yZWQocywgZmx1c2gpIHtcbiAgLyogU3RvcmVkIGJsb2NrcyBhcmUgbGltaXRlZCB0byAweGZmZmYgYnl0ZXMsIHBlbmRpbmdfYnVmIGlzIGxpbWl0ZWRcbiAgICogdG8gcGVuZGluZ19idWZfc2l6ZSwgYW5kIGVhY2ggc3RvcmVkIGJsb2NrIGhhcyBhIDUgYnl0ZSBoZWFkZXI6XG4gICAqL1xuICB2YXIgbWF4X2Jsb2NrX3NpemUgPSAweGZmZmY7XG5cbiAgaWYgKG1heF9ibG9ja19zaXplID4gcy5wZW5kaW5nX2J1Zl9zaXplIC0gNSkge1xuICAgIG1heF9ibG9ja19zaXplID0gcy5wZW5kaW5nX2J1Zl9zaXplIC0gNTtcbiAgfVxuXG4gIC8qIENvcHkgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIGlucHV0IHRvIG91dHB1dDogKi9cbiAgZm9yICg7Oykge1xuICAgIC8qIEZpbGwgdGhlIHdpbmRvdyBhcyBtdWNoIGFzIHBvc3NpYmxlOiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8PSAxKSB7XG5cbiAgICAgIC8vQXNzZXJ0KHMtPnN0cnN0YXJ0IDwgcy0+d19zaXplK01BWF9ESVNUKHMpIHx8XG4gICAgICAvLyAgcy0+YmxvY2tfc3RhcnQgPj0gKGxvbmcpcy0+d19zaXplLCBcInNsaWRlIHRvbyBsYXRlXCIpO1xuICAgICAgLy8gICAgICBpZiAoIShzLnN0cnN0YXJ0IDwgcy53X3NpemUgKyAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSB8fFxuICAgICAgLy8gICAgICAgIHMuYmxvY2tfc3RhcnQgPj0gcy53X3NpemUpKSB7XG4gICAgICAvLyAgICAgICAgdGhyb3cgIG5ldyBFcnJvcihcInNsaWRlIHRvbyBsYXRlXCIpO1xuICAgICAgLy8gICAgICB9XG5cbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuICAgIC8vQXNzZXJ0KHMtPmJsb2NrX3N0YXJ0ID49IDBMLCBcImJsb2NrIGdvbmVcIik7XG4gICAgLy8gICAgaWYgKHMuYmxvY2tfc3RhcnQgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJibG9jayBnb25lXCIpO1xuXG4gICAgcy5zdHJzdGFydCArPSBzLmxvb2thaGVhZDtcbiAgICBzLmxvb2thaGVhZCA9IDA7XG5cbiAgICAvKiBFbWl0IGEgc3RvcmVkIGJsb2NrIGlmIHBlbmRpbmdfYnVmIHdpbGwgYmUgZnVsbDogKi9cbiAgICB2YXIgbWF4X3N0YXJ0ID0gcy5ibG9ja19zdGFydCArIG1heF9ibG9ja19zaXplO1xuXG4gICAgaWYgKHMuc3Ryc3RhcnQgPT09IDAgfHwgcy5zdHJzdGFydCA+PSBtYXhfc3RhcnQpIHtcbiAgICAgIC8qIHN0cnN0YXJ0ID09IDAgaXMgcG9zc2libGUgd2hlbiB3cmFwYXJvdW5kIG9uIDE2LWJpdCBtYWNoaW5lICovXG4gICAgICBzLmxvb2thaGVhZCA9IHMuc3Ryc3RhcnQgLSBtYXhfc3RhcnQ7XG4gICAgICBzLnN0cnN0YXJ0ID0gbWF4X3N0YXJ0O1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cblxuXG4gICAgfVxuICAgIC8qIEZsdXNoIGlmIHdlIG1heSBoYXZlIHRvIHNsaWRlLCBvdGhlcndpc2UgYmxvY2tfc3RhcnQgbWF5IGJlY29tZVxuICAgICAqIG5lZ2F0aXZlIGFuZCB0aGUgZGF0YSB3aWxsIGJlIGdvbmU6XG4gICAgICovXG4gICAgaWYgKHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0ID49IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSB7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuICAgIH1cbiAgfVxuXG4gIHMuaW5zZXJ0ID0gMDtcblxuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcbiAgICB9XG4gICAgLyoqKi9cbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG4gIH1cblxuICBpZiAocy5zdHJzdGFydCA+IHMuYmxvY2tfc3RhcnQpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgfVxuICAgIC8qKiovXG4gIH1cblxuICByZXR1cm4gQlNfTkVFRF9NT1JFO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbXByZXNzIGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSB0aGUgaW5wdXQgc3RyZWFtLCByZXR1cm4gdGhlIGN1cnJlbnRcbiAqIGJsb2NrIHN0YXRlLlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBwZXJmb3JtIGxhenkgZXZhbHVhdGlvbiBvZiBtYXRjaGVzIGFuZCBpbnNlcnRzXG4gKiBuZXcgc3RyaW5ncyBpbiB0aGUgZGljdGlvbmFyeSBvbmx5IGZvciB1bm1hdGNoZWQgc3RyaW5ncyBvciBmb3Igc2hvcnRcbiAqIG1hdGNoZXMuIEl0IGlzIHVzZWQgb25seSBmb3IgdGhlIGZhc3QgY29tcHJlc3Npb24gb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZV9mYXN0KHMsIGZsdXNoKSB7XG4gIHZhciBoYXNoX2hlYWQ7IC8qIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW4gKi9cbiAgdmFyIGJmbHVzaDsgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG4gICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBicmVhazsgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBJbnNlcnQgdGhlIHN0cmluZyB3aW5kb3dbc3Ryc3RhcnQgLi4gc3Ryc3RhcnQrMl0gaW4gdGhlXG4gICAgICogZGljdGlvbmFyeSwgYW5kIHNldCBoYXNoX2hlYWQgdG8gdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW46XG4gICAgICovXG4gICAgaGFzaF9oZWFkID0gMCAvKk5JTCovIDtcbiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgLyoqKi9cbiAgICB9XG5cbiAgICAvKiBGaW5kIHRoZSBsb25nZXN0IG1hdGNoLCBkaXNjYXJkaW5nIHRob3NlIDw9IHByZXZfbGVuZ3RoLlxuICAgICAqIEF0IHRoaXMgcG9pbnQgd2UgaGF2ZSBhbHdheXMgbWF0Y2hfbGVuZ3RoIDwgTUlOX01BVENIXG4gICAgICovXG4gICAgaWYgKGhhc2hfaGVhZCAhPT0gMCAvKk5JTCovICYmICgocy5zdHJzdGFydCAtIGhhc2hfaGVhZCkgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpKSB7XG4gICAgICAvKiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZ1xuICAgICAgICogb2Ygd2luZG93IGluZGV4IDAgKGluIHBhcnRpY3VsYXIgd2UgaGF2ZSB0byBhdm9pZCBhIG1hdGNoXG4gICAgICAgKiBvZiB0aGUgc3RyaW5nIHdpdGggaXRzZWxmIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgZmlsZSkuXG4gICAgICAgKi9cbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChzLCBoYXNoX2hlYWQpO1xuICAgICAgLyogbG9uZ2VzdF9tYXRjaCgpIHNldHMgbWF0Y2hfc3RhcnQgKi9cbiAgICB9XG4gICAgaWYgKHMubWF0Y2hfbGVuZ3RoID49IE1JTl9NQVRDSCkge1xuICAgICAgLy8gY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGgpOyAvLyBmb3IgZGVidWcgb25seVxuXG4gICAgICAvKioqIF90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IF90cl90YWxseShzLCBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLm1hdGNoX2xlbmd0aDtcblxuICAgICAgLyogSW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIG9ubHkgaWYgdGhlIG1hdGNoIGxlbmd0aFxuICAgICAgICogaXMgbm90IHRvbyBsYXJnZS4gVGhpcyBzYXZlcyB0aW1lIGJ1dCBkZWdyYWRlcyBjb21wcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IHMubWF4X2xhenlfbWF0Y2ggLyptYXhfaW5zZXJ0X2xlbmd0aCovICYmIHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuICAgICAgICBzLm1hdGNoX2xlbmd0aC0tOyAvKiBzdHJpbmcgYXQgc3Ryc3RhcnQgYWxyZWFkeSBpbiB0YWJsZSAqL1xuICAgICAgICBkbyB7XG4gICAgICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuICAgICAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAgICAgLyoqKi9cbiAgICAgICAgICAvKiBzdHJzdGFydCBuZXZlciBleGNlZWRzIFdTSVpFLU1BWF9NQVRDSCwgc28gdGhlcmUgYXJlXG4gICAgICAgICAgICogYWx3YXlzIE1JTl9NQVRDSCBieXRlcyBhaGVhZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgfSB3aGlsZSAoLS1zLm1hdGNoX2xlbmd0aCAhPT0gMCk7XG4gICAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMuc3Ryc3RhcnQgKz0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICAgICAgcy5pbnNfaCA9IHMud2luZG93W3Muc3Ryc3RhcnRdO1xuICAgICAgICAvKiBVUERBVEVfSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzLnN0cnN0YXJ0KzFdKTsgKi9cbiAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIDFdKSAmIHMuaGFzaF9tYXNrO1xuXG4gICAgICAgIC8vI2lmIE1JTl9NQVRDSCAhPSAzXG4gICAgICAgIC8vICAgICAgICAgICAgICAgIENhbGwgVVBEQVRFX0hBU0goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXG4gICAgICAgIC8vI2VuZGlmXG4gICAgICAgIC8qIElmIGxvb2thaGVhZCA8IE1JTl9NQVRDSCwgaW5zX2ggaXMgZ2FyYmFnZSwgYnV0IGl0IGRvZXMgbm90XG4gICAgICAgICAqIG1hdHRlciBzaW5jZSBpdCB3aWxsIGJlIHJlY29tcHV0ZWQgYXQgbmV4dCBkZWZsYXRlIGNhbGwuXG4gICAgICAgICAqL1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiBObyBtYXRjaCwgb3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMud2luZG93W3Muc3Ryc3RhcnRdKSk7XG4gICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydF0sIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IF90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG5cbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgfVxuICAgIGlmIChiZmx1c2gpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG4gIHMuaW5zZXJ0ID0gKChzLnN0cnN0YXJ0IDwgKE1JTl9NQVRDSCAtIDEpKSA/IHMuc3Ryc3RhcnQgOiBNSU5fTUFUQ0ggLSAxKTtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNhbWUgYXMgYWJvdmUsIGJ1dCBhY2hpZXZlcyBiZXR0ZXIgY29tcHJlc3Npb24uIFdlIHVzZSBhIGxhenlcbiAqIGV2YWx1YXRpb24gZm9yIG1hdGNoZXM6IGEgbWF0Y2ggaXMgZmluYWxseSBhZG9wdGVkIG9ubHkgaWYgdGhlcmUgaXNcbiAqIG5vIGJldHRlciBtYXRjaCBhdCB0aGUgbmV4dCB3aW5kb3cgcG9zaXRpb24uXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVfc2xvdyhzLCBmbHVzaCkge1xuICB2YXIgaGFzaF9oZWFkOyAvKiBoZWFkIG9mIGhhc2ggY2hhaW4gKi9cbiAgdmFyIGJmbHVzaDsgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgdmFyIG1heF9pbnNlcnQ7XG5cbiAgLyogUHJvY2VzcyB0aGUgaW5wdXQgYmxvY2suICovXG4gIGZvciAoOzspIHtcbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBhbHdheXMgaGF2ZSBlbm91Z2ggbG9va2FoZWFkLCBleGNlcHRcbiAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xuICAgICAqIGZvciB0aGUgbmV4dCBtYXRjaCwgcGx1cyBNSU5fTUFUQ0ggYnl0ZXMgdG8gaW5zZXJ0IHRoZVxuICAgICAqIHN0cmluZyBmb2xsb3dpbmcgdGhlIG5leHQgbWF0Y2guXG4gICAgICovXG4gICAgaWYgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuXG4gICAgLyogSW5zZXJ0IHRoZSBzdHJpbmcgd2luZG93W3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZVxuICAgICAqIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOlxuICAgICAqL1xuICAgIGhhc2hfaGVhZCA9IDAgLypOSUwqLyA7XG4gICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcbiAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgIC8qKiovXG4gICAgfVxuXG4gICAgLyogRmluZCB0aGUgbG9uZ2VzdCBtYXRjaCwgZGlzY2FyZGluZyB0aG9zZSA8PSBwcmV2X2xlbmd0aC5cbiAgICAgKi9cbiAgICBzLnByZXZfbGVuZ3RoID0gcy5tYXRjaF9sZW5ndGg7XG4gICAgcy5wcmV2X21hdGNoID0gcy5tYXRjaF9zdGFydDtcbiAgICBzLm1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG5cbiAgICBpZiAoaGFzaF9oZWFkICE9PSAwIC8qTklMKi8gJiYgcy5wcmV2X2xlbmd0aCA8IHMubWF4X2xhenlfbWF0Y2ggJiZcbiAgICAgIHMuc3Ryc3RhcnQgLSBoYXNoX2hlYWQgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkgLypNQVhfRElTVChzKSovICkge1xuICAgICAgLyogVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmdcbiAgICAgICAqIG9mIHdpbmRvdyBpbmRleCAwIChpbiBwYXJ0aWN1bGFyIHdlIGhhdmUgdG8gYXZvaWQgYSBtYXRjaFxuICAgICAgICogb2YgdGhlIHN0cmluZyB3aXRoIGl0c2VsZiBhdCB0aGUgc3RhcnQgb2YgdGhlIGlucHV0IGZpbGUpLlxuICAgICAgICovXG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IGxvbmdlc3RfbWF0Y2gocywgaGFzaF9oZWFkKTtcbiAgICAgIC8qIGxvbmdlc3RfbWF0Y2goKSBzZXRzIG1hdGNoX3N0YXJ0ICovXG5cbiAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA8PSA1ICYmXG4gICAgICAgIChzLnN0cmF0ZWd5ID09PSBaX0ZJTFRFUkVEIHx8IChzLm1hdGNoX2xlbmd0aCA9PT0gTUlOX01BVENIICYmIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0ID4gNDA5NiAvKlRPT19GQVIqLyApKSkge1xuXG4gICAgICAgIC8qIElmIHByZXZfbWF0Y2ggaXMgYWxzbyBNSU5fTUFUQ0gsIG1hdGNoX3N0YXJ0IGlzIGdhcmJhZ2VcbiAgICAgICAgICogYnV0IHdlIHdpbGwgaWdub3JlIHRoZSBjdXJyZW50IG1hdGNoIGFueXdheS5cbiAgICAgICAgICovXG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyogSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHN0ZXAgYW5kIHRoZSBjdXJyZW50XG4gICAgICogbWF0Y2ggaXMgbm90IGJldHRlciwgb3V0cHV0IHRoZSBwcmV2aW91cyBtYXRjaDpcbiAgICAgKi9cbiAgICBpZiAocy5wcmV2X2xlbmd0aCA+PSBNSU5fTUFUQ0ggJiYgcy5tYXRjaF9sZW5ndGggPD0gcy5wcmV2X2xlbmd0aCkge1xuICAgICAgbWF4X2luc2VydCA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZCAtIE1JTl9NQVRDSDtcbiAgICAgIC8qIERvIG5vdCBpbnNlcnQgc3RyaW5ncyBpbiBoYXNoIHRhYmxlIGJleW9uZCB0aGlzLiAqL1xuXG4gICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQtMSwgcy5wcmV2X21hdGNoLCBzLnByZXZfbGVuZ3RoKTtcblxuICAgICAgLyoqKl90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSAxIC0gcy5wcmV2X21hdGNoLFxuICAgICAgICAgICAgICAgICAgICAgcy5wcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsqKiovXG4gICAgICBiZmx1c2ggPSBfdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIDEgLSBzLnByZXZfbWF0Y2gsIHMucHJldl9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuICAgICAgLyogSW5zZXJ0IGluIGhhc2ggdGFibGUgYWxsIHN0cmluZ3MgdXAgdG8gdGhlIGVuZCBvZiB0aGUgbWF0Y2guXG4gICAgICAgKiBzdHJzdGFydC0xIGFuZCBzdHJzdGFydCBhcmUgYWxyZWFkeSBpbnNlcnRlZC4gSWYgdGhlcmUgaXMgbm90XG4gICAgICAgKiBlbm91Z2ggbG9va2FoZWFkLCB0aGUgbGFzdCB0d28gc3RyaW5ncyBhcmUgbm90IGluc2VydGVkIGluXG4gICAgICAgKiB0aGUgaGFzaCB0YWJsZS5cbiAgICAgICAqL1xuICAgICAgcy5sb29rYWhlYWQgLT0gcy5wcmV2X2xlbmd0aCAtIDE7XG4gICAgICBzLnByZXZfbGVuZ3RoIC09IDI7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICgrK3Muc3Ryc3RhcnQgPD0gbWF4X2luc2VydCkge1xuICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuICAgICAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAgICAgLyoqKi9cbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoLS1zLnByZXZfbGVuZ3RoICE9PSAwKTtcbiAgICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcblxuICAgICAgaWYgKGJmbHVzaCkge1xuICAgICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICAgIH1cbiAgICAgICAgLyoqKi9cbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAocy5tYXRjaF9hdmFpbGFibGUpIHtcbiAgICAgIC8qIElmIHRoZXJlIHdhcyBubyBtYXRjaCBhdCB0aGUgcHJldmlvdXMgcG9zaXRpb24sIG91dHB1dCBhXG4gICAgICAgKiBzaW5nbGUgbGl0ZXJhbC4gSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYnV0IHRoZSBjdXJyZW50IG1hdGNoXG4gICAgICAgKiBpcyBsb25nZXIsIHRydW5jYXRlIHRoZSBwcmV2aW91cyBtYXRjaCB0byBhIHNpbmdsZSBsaXRlcmFsLlxuICAgICAgICovXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydC0xXSkpO1xuICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnQtMV0sIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IF90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0IC0gMV0pO1xuXG4gICAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAgIC8qKiogRkxVU0hfQkxPQ0tfT05MWShzLCAwKSAqKiovXG4gICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgICAvKioqL1xuICAgICAgfVxuICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIFRoZXJlIGlzIG5vIHByZXZpb3VzIG1hdGNoIHRvIGNvbXBhcmUgd2l0aCwgd2FpdCBmb3JcbiAgICAgICAqIHRoZSBuZXh0IHN0ZXAgdG8gZGVjaWRlLlxuICAgICAgICovXG4gICAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDE7XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZmx1c2ggIT0gWl9OT19GTFVTSCwgXCJubyBmbHVzaD9cIik7XG4gIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkge1xuICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0LTFdKSk7XG4gICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnQtMV0sIGJmbHVzaCk7ICoqKi9cbiAgICBiZmx1c2ggPSBfdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydCAtIDFdKTtcblxuICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgfVxuICBzLmluc2VydCA9IHMuc3Ryc3RhcnQgPCBNSU5fTUFUQ0ggLSAxID8gcy5zdHJzdGFydCA6IE1JTl9NQVRDSCAtIDE7XG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuXG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRm9yIFpfUkxFLCBzaW1wbHkgbG9vayBmb3IgcnVucyBvZiBieXRlcywgZ2VuZXJhdGUgbWF0Y2hlcyBvbmx5IG9mIGRpc3RhbmNlXG4gKiBvbmUuICBEbyBub3QgbWFpbnRhaW4gYSBoYXNoIHRhYmxlLiAgKEl0IHdpbGwgYmUgcmVnZW5lcmF0ZWQgaWYgdGhpcyBydW4gb2ZcbiAqIGRlZmxhdGUgc3dpdGNoZXMgYXdheSBmcm9tIFpfUkxFLilcbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZV9ybGUocywgZmx1c2gpIHtcbiAgdmFyIGJmbHVzaDsgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG4gIHZhciBwcmV2OyAvKiBieXRlIGF0IGRpc3RhbmNlIG9uZSB0byBtYXRjaCAqL1xuICB2YXIgc2Nhbiwgc3RyZW5kOyAvKiBzY2FuIGdvZXMgdXAgdG8gc3RyZW5kIGZvciBsZW5ndGggb2YgcnVuICovXG5cbiAgdmFyIF93aW4gPSBzLndpbmRvdztcblxuICBmb3IgKDs7KSB7XG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0XG4gICAgICogYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXQgZmlsZS4gV2UgbmVlZCBNQVhfTUFUQ0ggYnl0ZXNcbiAgICAgKiBmb3IgdGhlIGxvbmdlc3QgcnVuLCBwbHVzIG9uZSBmb3IgdGhlIHVucm9sbGVkIGxvb3AuXG4gICAgICovXG4gICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPD0gTUFYX01BVENIICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuXG4gICAgLyogU2VlIGhvdyBtYW55IHRpbWVzIHRoZSBwcmV2aW91cyBieXRlIHJlcGVhdHMgKi9cbiAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCAmJiBzLnN0cnN0YXJ0ID4gMCkge1xuICAgICAgc2NhbiA9IHMuc3Ryc3RhcnQgLSAxO1xuICAgICAgcHJldiA9IF93aW5bc2Nhbl07XG4gICAgICBpZiAocHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0pIHtcbiAgICAgICAgc3RyZW5kID0gcy5zdHJzdGFydCArIE1BWF9NQVRDSDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIC8qanNoaW50IG5vZW1wdHk6ZmFsc2UqL1xuICAgICAgICB9IHdoaWxlIChwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgc2NhbiA8IHN0cmVuZCk7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pO1xuICAgICAgICBpZiAocy5tYXRjaF9sZW5ndGggPiBzLmxvb2thaGVhZCkge1xuICAgICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gcy5sb29rYWhlYWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1SW50KShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XG4gICAgfVxuXG4gICAgLyogRW1pdCBtYXRjaCBpZiBoYXZlIHJ1biBvZiBNSU5fTUFUQ0ggb3IgbG9uZ2VyLCBlbHNlIGVtaXQgbGl0ZXJhbCAqL1xuICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8vY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5zdHJzdGFydCAtIDEsIHMubWF0Y2hfbGVuZ3RoKTtcblxuICAgICAgLyoqKiBfdHJfdGFsbHlfZGlzdChzLCAxLCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDEsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENIKTtcblxuICAgICAgcy5sb29rYWhlYWQgLT0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBObyBtYXRjaCwgb3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydF0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTtcblxuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICB9XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAwO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcbiAgICB9XG4gICAgLyoqKi9cbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG4gIH1cbiAgaWYgKHMubGFzdF9saXQpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgfVxuICAgIC8qKiovXG4gIH1cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRm9yIFpfSFVGRk1BTl9PTkxZLCBkbyBub3QgbG9vayBmb3IgbWF0Y2hlcy4gIERvIG5vdCBtYWludGFpbiBhIGhhc2ggdGFibGUuXG4gKiAoSXQgd2lsbCBiZSByZWdlbmVyYXRlZCBpZiB0aGlzIHJ1biBvZiBkZWZsYXRlIHN3aXRjaGVzIGF3YXkgZnJvbSBIdWZmbWFuLilcbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZV9odWZmKHMsIGZsdXNoKSB7XG4gIHZhciBiZmx1c2g7IC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuXG4gIGZvciAoOzspIHtcbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBoYXZlIGEgbGl0ZXJhbCB0byB3cml0ZS4gKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogT3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpO1xuICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgIGJmbHVzaCA9IF90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG4gICAgcy5sb29rYWhlYWQtLTtcbiAgICBzLnN0cnN0YXJ0Kys7XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAwO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcbiAgICB9XG4gICAgLyoqKi9cbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG4gIH1cbiAgaWYgKHMubGFzdF9saXQpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgfVxuICAgIC8qKiovXG4gIH1cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59XG5cbi8qIFZhbHVlcyBmb3IgbWF4X2xhenlfbWF0Y2gsIGdvb2RfbWF0Y2ggYW5kIG1heF9jaGFpbl9sZW5ndGgsIGRlcGVuZGluZyBvblxuICogdGhlIGRlc2lyZWQgcGFjayBsZXZlbCAoMC4uOSkuIFRoZSB2YWx1ZXMgZ2l2ZW4gYmVsb3cgaGF2ZSBiZWVuIHR1bmVkIHRvXG4gKiBleGNsdWRlIHdvcnN0IGNhc2UgcGVyZm9ybWFuY2UgZm9yIHBhdGhvbG9naWNhbCBmaWxlcy4gQmV0dGVyIHZhbHVlcyBtYXkgYmVcbiAqIGZvdW5kIGZvciBzcGVjaWZpYyBmaWxlcy5cbiAqL1xuZnVuY3Rpb24gQ29uZmlnKGdvb2RfbGVuZ3RoLCBtYXhfbGF6eSwgbmljZV9sZW5ndGgsIG1heF9jaGFpbiwgZnVuYykge1xuICB0aGlzLmdvb2RfbGVuZ3RoID0gZ29vZF9sZW5ndGg7XG4gIHRoaXMubWF4X2xhenkgPSBtYXhfbGF6eTtcbiAgdGhpcy5uaWNlX2xlbmd0aCA9IG5pY2VfbGVuZ3RoO1xuICB0aGlzLm1heF9jaGFpbiA9IG1heF9jaGFpbjtcbiAgdGhpcy5mdW5jID0gZnVuYztcbn1cblxudmFyIGNvbmZpZ3VyYXRpb25fdGFibGU7XG5cbmNvbmZpZ3VyYXRpb25fdGFibGUgPSBbXG4gIC8qICAgICAgZ29vZCBsYXp5IG5pY2UgY2hhaW4gKi9cbiAgbmV3IENvbmZpZygwLCAwLCAwLCAwLCBkZWZsYXRlX3N0b3JlZCksIC8qIDAgc3RvcmUgb25seSAqL1xuICBuZXcgQ29uZmlnKDQsIDQsIDgsIDQsIGRlZmxhdGVfZmFzdCksIC8qIDEgbWF4IHNwZWVkLCBubyBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg0LCA1LCAxNiwgOCwgZGVmbGF0ZV9mYXN0KSwgLyogMiAqL1xuICBuZXcgQ29uZmlnKDQsIDYsIDMyLCAzMiwgZGVmbGF0ZV9mYXN0KSwgLyogMyAqL1xuXG4gIG5ldyBDb25maWcoNCwgNCwgMTYsIDE2LCBkZWZsYXRlX3Nsb3cpLCAvKiA0IGxhenkgbWF0Y2hlcyAqL1xuICBuZXcgQ29uZmlnKDgsIDE2LCAzMiwgMzIsIGRlZmxhdGVfc2xvdyksIC8qIDUgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMTI4LCAxMjgsIGRlZmxhdGVfc2xvdyksIC8qIDYgKi9cbiAgbmV3IENvbmZpZyg4LCAzMiwgMTI4LCAyNTYsIGRlZmxhdGVfc2xvdyksIC8qIDcgKi9cbiAgbmV3IENvbmZpZygzMiwgMTI4LCAyNTgsIDEwMjQsIGRlZmxhdGVfc2xvdyksIC8qIDggKi9cbiAgbmV3IENvbmZpZygzMiwgMjU4LCAyNTgsIDQwOTYsIGRlZmxhdGVfc2xvdykgLyogOSBtYXggY29tcHJlc3Npb24gKi9cbl07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplIHRoZSBcImxvbmdlc3QgbWF0Y2hcIiByb3V0aW5lcyBmb3IgYSBuZXcgemxpYiBzdHJlYW1cbiAqL1xuZnVuY3Rpb24gbG1faW5pdChzKSB7XG4gIHMud2luZG93X3NpemUgPSAyICogcy53X3NpemU7XG5cbiAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcblxuICAvKiBTZXQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzOlxuICAgKi9cbiAgcy5tYXhfbGF6eV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2xhenk7XG4gIHMuZ29vZF9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZ29vZF9sZW5ndGg7XG4gIHMubmljZV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubmljZV9sZW5ndGg7XG4gIHMubWF4X2NoYWluX2xlbmd0aCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2NoYWluO1xuXG4gIHMuc3Ryc3RhcnQgPSAwO1xuICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgcy5sb29rYWhlYWQgPSAwO1xuICBzLmluc2VydCA9IDA7XG4gIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgcy5pbnNfaCA9IDA7XG59XG5cblxuZnVuY3Rpb24gRGVmbGF0ZVN0YXRlKCkge1xuICB0aGlzLnN0cm0gPSBudWxsOyAvKiBwb2ludGVyIGJhY2sgdG8gdGhpcyB6bGliIHN0cmVhbSAqL1xuICB0aGlzLnN0YXR1cyA9IDA7IC8qIGFzIHRoZSBuYW1lIGltcGxpZXMgKi9cbiAgdGhpcy5wZW5kaW5nX2J1ZiA9IG51bGw7IC8qIG91dHB1dCBzdGlsbCBwZW5kaW5nICovXG4gIHRoaXMucGVuZGluZ19idWZfc2l6ZSA9IDA7IC8qIHNpemUgb2YgcGVuZGluZ19idWYgKi9cbiAgdGhpcy5wZW5kaW5nX291dCA9IDA7IC8qIG5leHQgcGVuZGluZyBieXRlIHRvIG91dHB1dCB0byB0aGUgc3RyZWFtICovXG4gIHRoaXMucGVuZGluZyA9IDA7IC8qIG5iIG9mIGJ5dGVzIGluIHRoZSBwZW5kaW5nIGJ1ZmZlciAqL1xuICB0aGlzLndyYXAgPSAwOyAvKiBiaXQgMCB0cnVlIGZvciB6bGliLCBiaXQgMSB0cnVlIGZvciBnemlwICovXG4gIHRoaXMuZ3poZWFkID0gbnVsbDsgLyogZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gdG8gd3JpdGUgKi9cbiAgdGhpcy5nemluZGV4ID0gMDsgLyogd2hlcmUgaW4gZXh0cmEsIG5hbWUsIG9yIGNvbW1lbnQgKi9cbiAgdGhpcy5tZXRob2QgPSBaX0RFRkxBVEVEOyAvKiBjYW4gb25seSBiZSBERUZMQVRFRCAqL1xuICB0aGlzLmxhc3RfZmx1c2ggPSAtMTsgLyogdmFsdWUgb2YgZmx1c2ggcGFyYW0gZm9yIHByZXZpb3VzIGRlZmxhdGUgY2FsbCAqL1xuXG4gIHRoaXMud19zaXplID0gMDsgLyogTFo3NyB3aW5kb3cgc2l6ZSAoMzJLIGJ5IGRlZmF1bHQpICovXG4gIHRoaXMud19iaXRzID0gMDsgLyogbG9nMih3X3NpemUpICAoOC4uMTYpICovXG4gIHRoaXMud19tYXNrID0gMDsgLyogd19zaXplIC0gMSAqL1xuXG4gIHRoaXMud2luZG93ID0gbnVsbDtcbiAgLyogU2xpZGluZyB3aW5kb3cuIElucHV0IGJ5dGVzIGFyZSByZWFkIGludG8gdGhlIHNlY29uZCBoYWxmIG9mIHRoZSB3aW5kb3csXG4gICAqIGFuZCBtb3ZlIHRvIHRoZSBmaXJzdCBoYWxmIGxhdGVyIHRvIGtlZXAgYSBkaWN0aW9uYXJ5IG9mIGF0IGxlYXN0IHdTaXplXG4gICAqIGJ5dGVzLiBXaXRoIHRoaXMgb3JnYW5pemF0aW9uLCBtYXRjaGVzIGFyZSBsaW1pdGVkIHRvIGEgZGlzdGFuY2Ugb2ZcbiAgICogd1NpemUtTUFYX01BVENIIGJ5dGVzLCBidXQgdGhpcyBlbnN1cmVzIHRoYXQgSU8gaXMgYWx3YXlzXG4gICAqIHBlcmZvcm1lZCB3aXRoIGEgbGVuZ3RoIG11bHRpcGxlIG9mIHRoZSBibG9jayBzaXplLlxuICAgKi9cblxuICB0aGlzLndpbmRvd19zaXplID0gMDtcbiAgLyogQWN0dWFsIHNpemUgb2Ygd2luZG93OiAyKndTaXplLCBleGNlcHQgd2hlbiB0aGUgdXNlciBpbnB1dCBidWZmZXJcbiAgICogaXMgZGlyZWN0bHkgdXNlZCBhcyBzbGlkaW5nIHdpbmRvdy5cbiAgICovXG5cbiAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgLyogTGluayB0byBvbGRlciBzdHJpbmcgd2l0aCBzYW1lIGhhc2ggaW5kZXguIFRvIGxpbWl0IHRoZSBzaXplIG9mIHRoaXNcbiAgICogYXJyYXkgdG8gNjRLLCB0aGlzIGxpbmsgaXMgbWFpbnRhaW5lZCBvbmx5IGZvciB0aGUgbGFzdCAzMksgc3RyaW5ncy5cbiAgICogQW4gaW5kZXggaW4gdGhpcyBhcnJheSBpcyB0aHVzIGEgd2luZG93IGluZGV4IG1vZHVsbyAzMksuXG4gICAqL1xuXG4gIHRoaXMuaGVhZCA9IG51bGw7IC8qIEhlYWRzIG9mIHRoZSBoYXNoIGNoYWlucyBvciBOSUwuICovXG5cbiAgdGhpcy5pbnNfaCA9IDA7IC8qIGhhc2ggaW5kZXggb2Ygc3RyaW5nIHRvIGJlIGluc2VydGVkICovXG4gIHRoaXMuaGFzaF9zaXplID0gMDsgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIGhhc2ggdGFibGUgKi9cbiAgdGhpcy5oYXNoX2JpdHMgPSAwOyAvKiBsb2cyKGhhc2hfc2l6ZSkgKi9cbiAgdGhpcy5oYXNoX21hc2sgPSAwOyAvKiBoYXNoX3NpemUtMSAqL1xuXG4gIHRoaXMuaGFzaF9zaGlmdCA9IDA7XG4gIC8qIE51bWJlciBvZiBiaXRzIGJ5IHdoaWNoIGluc19oIG11c3QgYmUgc2hpZnRlZCBhdCBlYWNoIGlucHV0XG4gICAqIHN0ZXAuIEl0IG11c3QgYmUgc3VjaCB0aGF0IGFmdGVyIE1JTl9NQVRDSCBzdGVwcywgdGhlIG9sZGVzdFxuICAgKiBieXRlIG5vIGxvbmdlciB0YWtlcyBwYXJ0IGluIHRoZSBoYXNoIGtleSwgdGhhdCBpczpcbiAgICogICBoYXNoX3NoaWZ0ICogTUlOX01BVENIID49IGhhc2hfYml0c1xuICAgKi9cblxuICB0aGlzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgLyogV2luZG93IHBvc2l0aW9uIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGN1cnJlbnQgb3V0cHV0IGJsb2NrLiBHZXRzXG4gICAqIG5lZ2F0aXZlIHdoZW4gdGhlIHdpbmRvdyBpcyBtb3ZlZCBiYWNrd2FyZHMuXG4gICAqL1xuXG4gIHRoaXMubWF0Y2hfbGVuZ3RoID0gMDsgLyogbGVuZ3RoIG9mIGJlc3QgbWF0Y2ggKi9cbiAgdGhpcy5wcmV2X21hdGNoID0gMDsgLyogcHJldmlvdXMgbWF0Y2ggKi9cbiAgdGhpcy5tYXRjaF9hdmFpbGFibGUgPSAwOyAvKiBzZXQgaWYgcHJldmlvdXMgbWF0Y2ggZXhpc3RzICovXG4gIHRoaXMuc3Ryc3RhcnQgPSAwOyAvKiBzdGFydCBvZiBzdHJpbmcgdG8gaW5zZXJ0ICovXG4gIHRoaXMubWF0Y2hfc3RhcnQgPSAwOyAvKiBzdGFydCBvZiBtYXRjaGluZyBzdHJpbmcgKi9cbiAgdGhpcy5sb29rYWhlYWQgPSAwOyAvKiBudW1iZXIgb2YgdmFsaWQgYnl0ZXMgYWhlYWQgaW4gd2luZG93ICovXG5cbiAgdGhpcy5wcmV2X2xlbmd0aCA9IDA7XG4gIC8qIExlbmd0aCBvZiB0aGUgYmVzdCBtYXRjaCBhdCBwcmV2aW91cyBzdGVwLiBNYXRjaGVzIG5vdCBncmVhdGVyIHRoYW4gdGhpc1xuICAgKiBhcmUgZGlzY2FyZGVkLiBUaGlzIGlzIHVzZWQgaW4gdGhlIGxhenkgbWF0Y2ggZXZhbHVhdGlvbi5cbiAgICovXG5cbiAgdGhpcy5tYXhfY2hhaW5fbGVuZ3RoID0gMDtcbiAgLyogVG8gc3BlZWQgdXAgZGVmbGF0aW9uLCBoYXNoIGNoYWlucyBhcmUgbmV2ZXIgc2VhcmNoZWQgYmV5b25kIHRoaXNcbiAgICogbGVuZ3RoLiAgQSBoaWdoZXIgbGltaXQgaW1wcm92ZXMgY29tcHJlc3Npb24gcmF0aW8gYnV0IGRlZ3JhZGVzIHRoZVxuICAgKiBzcGVlZC5cbiAgICovXG5cbiAgdGhpcy5tYXhfbGF6eV9tYXRjaCA9IDA7XG4gIC8qIEF0dGVtcHQgdG8gZmluZCBhIGJldHRlciBtYXRjaCBvbmx5IHdoZW4gdGhlIGN1cnJlbnQgbWF0Y2ggaXMgc3RyaWN0bHlcbiAgICogc21hbGxlciB0aGFuIHRoaXMgdmFsdWUuIFRoaXMgbWVjaGFuaXNtIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb25cbiAgICogbGV2ZWxzID49IDQuXG4gICAqL1xuICAvLyBUaGF0J3MgYWxpYXMgdG8gbWF4X2xhenlfbWF0Y2gsIGRvbid0IHVzZSBkaXJlY3RseVxuICAvL3RoaXMubWF4X2luc2VydF9sZW5ndGggPSAwO1xuICAvKiBJbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGhhc2ggdGFibGUgb25seSBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdFxuICAgKiBncmVhdGVyIHRoYW4gdGhpcyBsZW5ndGguIFRoaXMgc2F2ZXMgdGltZSBidXQgZGVncmFkZXMgY29tcHJlc3Npb24uXG4gICAqIG1heF9pbnNlcnRfbGVuZ3RoIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb24gbGV2ZWxzIDw9IDMuXG4gICAqL1xuXG4gIHRoaXMubGV2ZWwgPSAwOyAvKiBjb21wcmVzc2lvbiBsZXZlbCAoMS4uOSkgKi9cbiAgdGhpcy5zdHJhdGVneSA9IDA7IC8qIGZhdm9yIG9yIGZvcmNlIEh1ZmZtYW4gY29kaW5nKi9cblxuICB0aGlzLmdvb2RfbWF0Y2ggPSAwO1xuICAvKiBVc2UgYSBmYXN0ZXIgc2VhcmNoIHdoZW4gdGhlIHByZXZpb3VzIG1hdGNoIGlzIGxvbmdlciB0aGFuIHRoaXMgKi9cblxuICB0aGlzLm5pY2VfbWF0Y2ggPSAwOyAvKiBTdG9wIHNlYXJjaGluZyB3aGVuIGN1cnJlbnQgbWF0Y2ggZXhjZWVkcyB0aGlzICovXG5cbiAgLyogdXNlZCBieSBjOiAqL1xuXG4gIC8qIERpZG4ndCB1c2UgY3RfZGF0YSB0eXBlZGVmIGJlbG93IHRvIHN1cHByZXNzIGNvbXBpbGVyIHdhcm5pbmcgKi9cblxuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGR5bl9sdHJlZVtIRUFQX1NJWkVdOyAgIC8qIGxpdGVyYWwgYW5kIGxlbmd0aCB0cmVlICovXG4gIC8vIHN0cnVjdCBjdF9kYXRhX3MgZHluX2R0cmVlWzIqRF9DT0RFUysxXTsgLyogZGlzdGFuY2UgdHJlZSAqL1xuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGJsX3RyZWVbMipCTF9DT0RFUysxXTsgIC8qIEh1ZmZtYW4gdHJlZSBmb3IgYml0IGxlbmd0aHMgKi9cblxuICAvLyBVc2UgZmxhdCBhcnJheSBvZiBET1VCTEUgc2l6ZSwgd2l0aCBpbnRlcmxlYXZlZCBmYXRhLFxuICAvLyBiZWNhdXNlIEpTIGRvZXMgbm90IHN1cHBvcnQgZWZmZWN0aXZlXG4gIHRoaXMuZHluX2x0cmVlID0gbmV3IEJ1ZjE2KEhFQVBfU0laRSAqIDIpO1xuICB0aGlzLmR5bl9kdHJlZSA9IG5ldyBCdWYxNigoMiAqIERfQ09ERVMgKyAxKSAqIDIpO1xuICB0aGlzLmJsX3RyZWUgPSBuZXcgQnVmMTYoKDIgKiBCTF9DT0RFUyArIDEpICogMik7XG4gIHplcm8odGhpcy5keW5fbHRyZWUpO1xuICB6ZXJvKHRoaXMuZHluX2R0cmVlKTtcbiAgemVybyh0aGlzLmJsX3RyZWUpO1xuXG4gIHRoaXMubF9kZXNjID0gbnVsbDsgLyogZGVzYy4gZm9yIGxpdGVyYWwgdHJlZSAqL1xuICB0aGlzLmRfZGVzYyA9IG51bGw7IC8qIGRlc2MuIGZvciBkaXN0YW5jZSB0cmVlICovXG4gIHRoaXMuYmxfZGVzYyA9IG51bGw7IC8qIGRlc2MuIGZvciBiaXQgbGVuZ3RoIHRyZWUgKi9cblxuICAvL3VzaCBibF9jb3VudFtNQVhfQklUUysxXTtcbiAgdGhpcy5ibF9jb3VudCA9IG5ldyBCdWYxNihNQVhfQklUUyArIDEpO1xuICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoIGZvciBhbiBvcHRpbWFsIHRyZWUgKi9cblxuICAvL2ludCBoZWFwWzIqTF9DT0RFUysxXTsgICAgICAvKiBoZWFwIHVzZWQgdG8gYnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgKi9cbiAgdGhpcy5oZWFwID0gbmV3IEJ1ZjE2KDIgKiBMX0NPREVTICsgMSk7IC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xuICB6ZXJvKHRoaXMuaGVhcCk7XG5cbiAgdGhpcy5oZWFwX2xlbiA9IDA7IC8qIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgaGVhcCAqL1xuICB0aGlzLmhlYXBfbWF4ID0gMDsgLyogZWxlbWVudCBvZiBsYXJnZXN0IGZyZXF1ZW5jeSAqL1xuICAvKiBUaGUgc29ucyBvZiBoZWFwW25dIGFyZSBoZWFwWzIqbl0gYW5kIGhlYXBbMipuKzFdLiBoZWFwWzBdIGlzIG5vdCB1c2VkLlxuICAgKiBUaGUgc2FtZSBoZWFwIGFycmF5IGlzIHVzZWQgdG8gYnVpbGQgYWxsXG4gICAqL1xuXG4gIHRoaXMuZGVwdGggPSBuZXcgQnVmMTYoMiAqIExfQ09ERVMgKyAxKTsgLy91Y2ggZGVwdGhbMipMX0NPREVTKzFdO1xuICB6ZXJvKHRoaXMuZGVwdGgpO1xuICAvKiBEZXB0aCBvZiBlYWNoIHN1YnRyZWUgdXNlZCBhcyB0aWUgYnJlYWtlciBmb3IgdHJlZXMgb2YgZXF1YWwgZnJlcXVlbmN5XG4gICAqL1xuXG4gIHRoaXMubF9idWYgPSAwOyAvKiBidWZmZXIgaW5kZXggZm9yIGxpdGVyYWxzIG9yIGxlbmd0aHMgKi9cblxuICB0aGlzLmxpdF9idWZzaXplID0gMDtcbiAgLyogU2l6ZSBvZiBtYXRjaCBidWZmZXIgZm9yIGxpdGVyYWxzL2xlbmd0aHMuICBUaGVyZSBhcmUgNCByZWFzb25zIGZvclxuICAgKiBsaW1pdGluZyBsaXRfYnVmc2l6ZSB0byA2NEs6XG4gICAqICAgLSBmcmVxdWVuY2llcyBjYW4gYmUga2VwdCBpbiAxNiBiaXQgY291bnRlcnNcbiAgICogICAtIGlmIGNvbXByZXNzaW9uIGlzIG5vdCBzdWNjZXNzZnVsIGZvciB0aGUgZmlyc3QgYmxvY2ssIGFsbCBpbnB1dFxuICAgKiAgICAgZGF0YSBpcyBzdGlsbCBpbiB0aGUgd2luZG93IHNvIHdlIGNhbiBzdGlsbCBlbWl0IGEgc3RvcmVkIGJsb2NrIGV2ZW5cbiAgICogICAgIHdoZW4gaW5wdXQgY29tZXMgZnJvbSBzdGFuZGFyZCBpbnB1dC4gIChUaGlzIGNhbiBhbHNvIGJlIGRvbmUgZm9yXG4gICAqICAgICBhbGwgYmxvY2tzIGlmIGxpdF9idWZzaXplIGlzIG5vdCBncmVhdGVyIHRoYW4gMzJLLilcbiAgICogICAtIGlmIGNvbXByZXNzaW9uIGlzIG5vdCBzdWNjZXNzZnVsIGZvciBhIGZpbGUgc21hbGxlciB0aGFuIDY0Sywgd2UgY2FuXG4gICAqICAgICBldmVuIGVtaXQgYSBzdG9yZWQgZmlsZSBpbnN0ZWFkIG9mIGEgc3RvcmVkIGJsb2NrIChzYXZpbmcgNSBieXRlcykuXG4gICAqICAgICBUaGlzIGlzIGFwcGxpY2FibGUgb25seSBmb3IgemlwIChub3QgZ3ppcCBvciB6bGliKS5cbiAgICogICAtIGNyZWF0aW5nIG5ldyBIdWZmbWFuIHRyZWVzIGxlc3MgZnJlcXVlbnRseSBtYXkgbm90IHByb3ZpZGUgZmFzdFxuICAgKiAgICAgYWRhcHRhdGlvbiB0byBjaGFuZ2VzIGluIHRoZSBpbnB1dCBkYXRhIHN0YXRpc3RpY3MuIChUYWtlIGZvclxuICAgKiAgICAgZXhhbXBsZSBhIGJpbmFyeSBmaWxlIHdpdGggcG9vcmx5IGNvbXByZXNzaWJsZSBjb2RlIGZvbGxvd2VkIGJ5XG4gICAqICAgICBhIGhpZ2hseSBjb21wcmVzc2libGUgc3RyaW5nIHRhYmxlLikgU21hbGxlciBidWZmZXIgc2l6ZXMgZ2l2ZVxuICAgKiAgICAgZmFzdCBhZGFwdGF0aW9uIGJ1dCBoYXZlIG9mIGNvdXJzZSB0aGUgb3ZlcmhlYWQgb2YgdHJhbnNtaXR0aW5nXG4gICAqICAgICB0cmVlcyBtb3JlIGZyZXF1ZW50bHkuXG4gICAqICAgLSBJIGNhbid0IGNvdW50IGFib3ZlIDRcbiAgICovXG5cbiAgdGhpcy5sYXN0X2xpdCA9IDA7IC8qIHJ1bm5pbmcgaW5kZXggaW4gbF9idWYgKi9cblxuICB0aGlzLmRfYnVmID0gMDtcbiAgLyogQnVmZmVyIGluZGV4IGZvciBkaXN0YW5jZXMuIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLCBkX2J1ZiBhbmQgbF9idWYgaGF2ZVxuICAgKiB0aGUgc2FtZSBudW1iZXIgb2YgZWxlbWVudHMuIFRvIHVzZSBkaWZmZXJlbnQgbGVuZ3RocywgYW4gZXh0cmEgZmxhZ1xuICAgKiBhcnJheSB3b3VsZCBiZSBuZWNlc3NhcnkuXG4gICAqL1xuXG4gIHRoaXMub3B0X2xlbiA9IDA7IC8qIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIG9wdGltYWwgdHJlZXMgKi9cbiAgdGhpcy5zdGF0aWNfbGVuID0gMDsgLyogYml0IGxlbmd0aCBvZiBjdXJyZW50IGJsb2NrIHdpdGggc3RhdGljIHRyZWVzICovXG4gIHRoaXMubWF0Y2hlcyA9IDA7IC8qIG51bWJlciBvZiBzdHJpbmcgbWF0Y2hlcyBpbiBjdXJyZW50IGJsb2NrICovXG4gIHRoaXMuaW5zZXJ0ID0gMDsgLyogYnl0ZXMgYXQgZW5kIG9mIHdpbmRvdyBsZWZ0IHRvIGluc2VydCAqL1xuXG5cbiAgdGhpcy5iaV9idWYgPSAwO1xuICAvKiBPdXRwdXQgYnVmZmVyLiBiaXRzIGFyZSBpbnNlcnRlZCBzdGFydGluZyBhdCB0aGUgYm90dG9tIChsZWFzdFxuICAgKiBzaWduaWZpY2FudCBiaXRzKS5cbiAgICovXG4gIHRoaXMuYmlfdmFsaWQgPSAwO1xuICAvKiBOdW1iZXIgb2YgdmFsaWQgYml0cyBpbiBiaV9idWYuICBBbGwgYml0cyBhYm92ZSB0aGUgbGFzdCB2YWxpZCBiaXRcbiAgICogYXJlIGFsd2F5cyB6ZXJvLlxuICAgKi9cblxuICAvLyBVc2VkIGZvciB3aW5kb3cgbWVtb3J5IGluaXQuIFdlIHNhZmVseSBpZ25vcmUgaXQgZm9yIEpTLiBUaGF0IG1ha2VzXG4gIC8vIHNlbnNlIG9ubHkgZm9yIHBvaW50ZXJzIGFuZCBtZW1vcnkgY2hlY2sgdG9vbHMuXG4gIC8vdGhpcy5oaWdoX3dhdGVyID0gMDtcbiAgLyogSGlnaCB3YXRlciBtYXJrIG9mZnNldCBpbiB3aW5kb3cgZm9yIGluaXRpYWxpemVkIGJ5dGVzIC0tIGJ5dGVzIGFib3ZlXG4gICAqIHRoaXMgYXJlIHNldCB0byB6ZXJvIGluIG9yZGVyIHRvIGF2b2lkIG1lbW9yeSBjaGVjayB3YXJuaW5ncyB3aGVuXG4gICAqIGxvbmdlc3QgbWF0Y2ggcm91dGluZXMgYWNjZXNzIGJ5dGVzIHBhc3QgdGhlIGlucHV0LiAgVGhpcyBpcyB0aGVuXG4gICAqIHVwZGF0ZWQgdG8gdGhlIG5ldyBoaWdoIHdhdGVyIG1hcmsuXG4gICAqL1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZsYXRlUmVzZXRLZWVwKHN0cm0pIHtcbiAgdmFyIHM7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUik7XG4gIH1cblxuICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSAwO1xuICBzdHJtLmRhdGFfdHlwZSA9IFpfVU5LTk9XTjtcblxuICBzID0gc3RybS5zdGF0ZTtcbiAgcy5wZW5kaW5nID0gMDtcbiAgcy5wZW5kaW5nX291dCA9IDA7XG5cbiAgaWYgKHMud3JhcCA8IDApIHtcbiAgICBzLndyYXAgPSAtcy53cmFwO1xuICAgIC8qIHdhcyBtYWRlIG5lZ2F0aXZlIGJ5IGRlZmxhdGUoLi4uLCBaX0ZJTklTSCk7ICovXG4gIH1cbiAgcy5zdGF0dXMgPSAocy53cmFwID8gSU5JVF9TVEFURSA6IEJVU1lfU1RBVEUpO1xuICBzdHJtLmFkbGVyID0gKHMud3JhcCA9PT0gMikgP1xuICAgIDAgLy8gY3JjMzIoMCwgWl9OVUxMLCAwKVxuICAgIDpcbiAgICAxOyAvLyBhZGxlcjMyKDAsIFpfTlVMTCwgMClcbiAgcy5sYXN0X2ZsdXNoID0gWl9OT19GTFVTSDtcbiAgX3RyX2luaXQocyk7XG4gIHJldHVybiBaX09LO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZsYXRlUmVzZXQoc3RybSkge1xuICB2YXIgcmV0ID0gZGVmbGF0ZVJlc2V0S2VlcChzdHJtKTtcbiAgaWYgKHJldCA9PT0gWl9PSykge1xuICAgIGxtX2luaXQoc3RybS5zdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGVmbGF0ZVNldEhlYWRlcihzdHJtLCBoZWFkKSB7XG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuICBpZiAoc3RybS5zdGF0ZS53cmFwICE9PSAyKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG4gIHN0cm0uc3RhdGUuZ3poZWFkID0gaGVhZDtcbiAgcmV0dXJuIFpfT0s7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmxhdGVJbml0MihzdHJtLCBsZXZlbCwgbWV0aG9kLCB3aW5kb3dCaXRzLCBtZW1MZXZlbCwgc3RyYXRlZ3kpIHtcbiAgaWYgKCFzdHJtKSB7IC8vID09PSBaX05VTExcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cbiAgdmFyIHdyYXAgPSAxO1xuXG4gIGlmIChsZXZlbCA9PT0gWl9ERUZBVUxUX0NPTVBSRVNTSU9OKSB7XG4gICAgbGV2ZWwgPSA2O1xuICB9XG5cbiAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7IC8qIHN1cHByZXNzIHpsaWIgd3JhcHBlciAqL1xuICAgIHdyYXAgPSAwO1xuICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcbiAgfSBlbHNlIGlmICh3aW5kb3dCaXRzID4gMTUpIHtcbiAgICB3cmFwID0gMjsgLyogd3JpdGUgZ3ppcCB3cmFwcGVyIGluc3RlYWQgKi9cbiAgICB3aW5kb3dCaXRzIC09IDE2O1xuICB9XG5cblxuICBpZiAobWVtTGV2ZWwgPCAxIHx8IG1lbUxldmVsID4gTUFYX01FTV9MRVZFTCB8fCBtZXRob2QgIT09IFpfREVGTEFURUQgfHxcbiAgICB3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUgfHwgbGV2ZWwgPCAwIHx8IGxldmVsID4gOSB8fFxuICAgIHN0cmF0ZWd5IDwgMCB8fCBzdHJhdGVneSA+IFpfRklYRUQpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG5cbiAgaWYgKHdpbmRvd0JpdHMgPT09IDgpIHtcbiAgICB3aW5kb3dCaXRzID0gOTtcbiAgfVxuICAvKiB1bnRpbCAyNTYtYnl0ZSB3aW5kb3cgYnVnIGZpeGVkICovXG5cbiAgdmFyIHMgPSBuZXcgRGVmbGF0ZVN0YXRlKCk7XG5cbiAgc3RybS5zdGF0ZSA9IHM7XG4gIHMuc3RybSA9IHN0cm07XG5cbiAgcy53cmFwID0gd3JhcDtcbiAgcy5nemhlYWQgPSBudWxsO1xuICBzLndfYml0cyA9IHdpbmRvd0JpdHM7XG4gIHMud19zaXplID0gMSA8PCBzLndfYml0cztcbiAgcy53X21hc2sgPSBzLndfc2l6ZSAtIDE7XG5cbiAgcy5oYXNoX2JpdHMgPSBtZW1MZXZlbCArIDc7XG4gIHMuaGFzaF9zaXplID0gMSA8PCBzLmhhc2hfYml0cztcbiAgcy5oYXNoX21hc2sgPSBzLmhhc2hfc2l6ZSAtIDE7XG4gIHMuaGFzaF9zaGlmdCA9IH5+KChzLmhhc2hfYml0cyArIE1JTl9NQVRDSCAtIDEpIC8gTUlOX01BVENIKTtcblxuICBzLndpbmRvdyA9IG5ldyBCdWY4KHMud19zaXplICogMik7XG4gIHMuaGVhZCA9IG5ldyBCdWYxNihzLmhhc2hfc2l6ZSk7XG4gIHMucHJldiA9IG5ldyBCdWYxNihzLndfc2l6ZSk7XG5cbiAgLy8gRG9uJ3QgbmVlZCBtZW0gaW5pdCBtYWdpYyBmb3IgSlMuXG4gIC8vcy5oaWdoX3dhdGVyID0gMDsgIC8qIG5vdGhpbmcgd3JpdHRlbiB0byBzLT53aW5kb3cgeWV0ICovXG5cbiAgcy5saXRfYnVmc2l6ZSA9IDEgPDwgKG1lbUxldmVsICsgNik7IC8qIDE2SyBlbGVtZW50cyBieSBkZWZhdWx0ICovXG5cbiAgcy5wZW5kaW5nX2J1Zl9zaXplID0gcy5saXRfYnVmc2l6ZSAqIDQ7XG5cbiAgLy9vdmVybGF5ID0gKHVzaGYgKikgWkFMTE9DKHN0cm0sIHMtPmxpdF9idWZzaXplLCBzaXplb2YodXNoKSsyKTtcbiAgLy9zLT5wZW5kaW5nX2J1ZiA9ICh1Y2hmICopIG92ZXJsYXk7XG4gIHMucGVuZGluZ19idWYgPSBuZXcgQnVmOChzLnBlbmRpbmdfYnVmX3NpemUpO1xuXG4gIC8vIEl0IGlzIG9mZnNldCBmcm9tIGBzLnBlbmRpbmdfYnVmYCAoc2l6ZSBpcyBgcy5saXRfYnVmc2l6ZSAqIDJgKVxuICAvL3MtPmRfYnVmID0gb3ZlcmxheSArIHMtPmxpdF9idWZzaXplL3NpemVvZih1c2gpO1xuICBzLmRfYnVmID0gMSAqIHMubGl0X2J1ZnNpemU7XG5cbiAgLy9zLT5sX2J1ZiA9IHMtPnBlbmRpbmdfYnVmICsgKDErc2l6ZW9mKHVzaCkpKnMtPmxpdF9idWZzaXplO1xuICBzLmxfYnVmID0gKDEgKyAyKSAqIHMubGl0X2J1ZnNpemU7XG5cbiAgcy5sZXZlbCA9IGxldmVsO1xuICBzLnN0cmF0ZWd5ID0gc3RyYXRlZ3k7XG4gIHMubWV0aG9kID0gbWV0aG9kO1xuXG4gIHJldHVybiBkZWZsYXRlUmVzZXQoc3RybSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZsYXRlSW5pdChzdHJtLCBsZXZlbCkge1xuICByZXR1cm4gZGVmbGF0ZUluaXQyKHN0cm0sIGxldmVsLCBaX0RFRkxBVEVELCBNQVhfV0JJVFMsIERFRl9NRU1fTEVWRUwsIFpfREVGQVVMVF9TVFJBVEVHWSk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmxhdGUoc3RybSwgZmx1c2gpIHtcbiAgdmFyIG9sZF9mbHVzaCwgcztcbiAgdmFyIGJlZywgdmFsOyAvLyBmb3IgZ3ppcCBoZWFkZXIgd3JpdGUgb25seVxuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSB8fFxuICAgIGZsdXNoID4gWl9CTE9DSyB8fCBmbHVzaCA8IDApIHtcbiAgICByZXR1cm4gc3RybSA/IGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUikgOiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHMgPSBzdHJtLnN0YXRlO1xuXG4gIGlmICghc3RybS5vdXRwdXQgfHxcbiAgICAoIXN0cm0uaW5wdXQgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkgfHxcbiAgICAocy5zdGF0dXMgPT09IEZJTklTSF9TVEFURSAmJiBmbHVzaCAhPT0gWl9GSU5JU0gpKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCAoc3RybS5hdmFpbF9vdXQgPT09IDApID8gWl9CVUZfRVJST1IgOiBaX1NUUkVBTV9FUlJPUik7XG4gIH1cblxuICBzLnN0cm0gPSBzdHJtOyAvKiBqdXN0IGluIGNhc2UgKi9cbiAgb2xkX2ZsdXNoID0gcy5sYXN0X2ZsdXNoO1xuICBzLmxhc3RfZmx1c2ggPSBmbHVzaDtcblxuICAvKiBXcml0ZSB0aGUgaGVhZGVyICovXG4gIGlmIChzLnN0YXR1cyA9PT0gSU5JVF9TVEFURSkge1xuICAgIGlmIChzLndyYXAgPT09IDIpIHtcbiAgICAgIC8vIEdaSVAgaGVhZGVyXG4gICAgICBzdHJtLmFkbGVyID0gMDsgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTtcbiAgICAgIHB1dF9ieXRlKHMsIDMxKTtcbiAgICAgIHB1dF9ieXRlKHMsIDEzOSk7XG4gICAgICBwdXRfYnl0ZShzLCA4KTtcbiAgICAgIGlmICghcy5nemhlYWQpIHsgLy8gcy0+Z3poZWFkID09IFpfTlVMTFxuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDpcbiAgICAgICAgICAocy5zdHJhdGVneSA+PSBaX0hVRkZNQU5fT05MWSB8fCBzLmxldmVsIDwgMiA/XG4gICAgICAgICAgICA0IDogMCkpO1xuICAgICAgICBwdXRfYnl0ZShzLCBPU19DT0RFKTtcbiAgICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRleHQgPyAxIDogMCkgK1xuICAgICAgICAgIChzLmd6aGVhZC5oY3JjID8gMiA6IDApICtcbiAgICAgICAgICAoIXMuZ3poZWFkLmV4dHJhID8gMCA6IDQpICtcbiAgICAgICAgICAoIXMuZ3poZWFkLm5hbWUgPyAwIDogOCkgK1xuICAgICAgICAgICghcy5nemhlYWQuY29tbWVudCA/IDAgOiAxNilcbiAgICAgICAgKTtcbiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQudGltZSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiA4KSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiAxNikgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gMjQpICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDpcbiAgICAgICAgICAocy5zdHJhdGVneSA+PSBaX0hVRkZNQU5fT05MWSB8fCBzLmxldmVsIDwgMiA/XG4gICAgICAgICAgICA0IDogMCkpO1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5vcyAmIDB4ZmYpO1xuICAgICAgICBpZiAocy5nemhlYWQuZXh0cmEgJiYgcy5nemhlYWQuZXh0cmEubGVuZ3RoKSB7XG4gICAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQuZXh0cmEubGVuZ3RoICYgMHhmZik7XG4gICAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLmV4dHJhLmxlbmd0aCA+PiA4KSAmIDB4ZmYpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzLmd6aGVhZC5oY3JjKSB7XG4gICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZywgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcy5nemluZGV4ID0gMDtcbiAgICAgICAgcy5zdGF0dXMgPSBFWFRSQV9TVEFURTtcbiAgICAgIH1cbiAgICB9IGVsc2UgLy8gREVGTEFURSBoZWFkZXJcbiAgICB7XG4gICAgICB2YXIgaGVhZGVyID0gKFpfREVGTEFURUQgKyAoKHMud19iaXRzIC0gOCkgPDwgNCkpIDw8IDg7XG4gICAgICB2YXIgbGV2ZWxfZmxhZ3MgPSAtMTtcblxuICAgICAgaWYgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIpIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAwO1xuICAgICAgfSBlbHNlIGlmIChzLmxldmVsIDwgNikge1xuICAgICAgICBsZXZlbF9mbGFncyA9IDE7XG4gICAgICB9IGVsc2UgaWYgKHMubGV2ZWwgPT09IDYpIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAzO1xuICAgICAgfVxuICAgICAgaGVhZGVyIHw9IChsZXZlbF9mbGFncyA8PCA2KTtcbiAgICAgIGlmIChzLnN0cnN0YXJ0ICE9PSAwKSB7XG4gICAgICAgIGhlYWRlciB8PSBQUkVTRVRfRElDVDtcbiAgICAgIH1cbiAgICAgIGhlYWRlciArPSAzMSAtIChoZWFkZXIgJSAzMSk7XG5cbiAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICAgIHB1dFNob3J0TVNCKHMsIGhlYWRlcik7XG5cbiAgICAgIC8qIFNhdmUgdGhlIGFkbGVyMzIgb2YgdGhlIHByZXNldCBkaWN0aW9uYXJ5OiAqL1xuICAgICAgaWYgKHMuc3Ryc3RhcnQgIT09IDApIHtcbiAgICAgICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciA+Pj4gMTYpO1xuICAgICAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTtcbiAgICAgIH1cbiAgICAgIHN0cm0uYWRsZXIgPSAxOyAvLyBhZGxlcjMyKDBMLCBaX05VTEwsIDApO1xuICAgIH1cbiAgfVxuXG4gIC8vI2lmZGVmIEdaSVBcbiAgaWYgKHMuc3RhdHVzID09PSBFWFRSQV9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5leHRyYSAvKiAhPSBaX05VTEwqLyApIHtcbiAgICAgIGJlZyA9IHMucGVuZGluZzsgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuXG4gICAgICB3aGlsZSAocy5nemluZGV4IDwgKHMuZ3poZWFkLmV4dHJhLmxlbmd0aCAmIDB4ZmZmZikpIHtcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICAgIGJlZyA9IHMucGVuZGluZztcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5leHRyYVtzLmd6aW5kZXhdICYgMHhmZik7XG4gICAgICAgIHMuZ3ppbmRleCsrO1xuICAgICAgfVxuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICBpZiAocy5nemluZGV4ID09PSBzLmd6aGVhZC5leHRyYS5sZW5ndGgpIHtcbiAgICAgICAgcy5nemluZGV4ID0gMDtcbiAgICAgICAgcy5zdGF0dXMgPSBOQU1FX1NUQVRFO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IE5BTUVfU1RBVEU7XG4gICAgfVxuICB9XG4gIGlmIChzLnN0YXR1cyA9PT0gTkFNRV9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5uYW1lIC8qICE9IFpfTlVMTCovICkge1xuICAgICAgYmVnID0gcy5wZW5kaW5nOyAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovXG4gICAgICAvL2ludCB2YWw7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICAgIGJlZyA9IHMucGVuZGluZztcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICAgIHZhbCA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSlMgc3BlY2lmaWM6IGxpdHRsZSBtYWdpYyB0byBhZGQgemVybyB0ZXJtaW5hdG9yIHRvIGVuZCBvZiBzdHJpbmdcbiAgICAgICAgaWYgKHMuZ3ppbmRleCA8IHMuZ3poZWFkLm5hbWUubGVuZ3RoKSB7XG4gICAgICAgICAgdmFsID0gcy5nemhlYWQubmFtZS5jaGFyQ29kZUF0KHMuZ3ppbmRleCsrKSAmIDB4ZmY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsID0gMDtcbiAgICAgICAgfVxuICAgICAgICBwdXRfYnl0ZShzLCB2YWwpO1xuICAgICAgfSB3aGlsZSAodmFsICE9PSAwKTtcblxuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICBpZiAodmFsID09PSAwKSB7XG4gICAgICAgIHMuZ3ppbmRleCA9IDA7XG4gICAgICAgIHMuc3RhdHVzID0gQ09NTUVOVF9TVEFURTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcy5zdGF0dXMgPSBDT01NRU5UX1NUQVRFO1xuICAgIH1cbiAgfVxuICBpZiAocy5zdGF0dXMgPT09IENPTU1FTlRfU1RBVEUpIHtcbiAgICBpZiAocy5nemhlYWQuY29tbWVudCAvKiAhPSBaX05VTEwqLyApIHtcbiAgICAgIGJlZyA9IHMucGVuZGluZzsgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuICAgICAgLy9pbnQgdmFsO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XG4gICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgICB2YWwgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0byBlbmQgb2Ygc3RyaW5nXG4gICAgICAgIGlmIChzLmd6aW5kZXggPCBzLmd6aGVhZC5jb21tZW50Lmxlbmd0aCkge1xuICAgICAgICAgIHZhbCA9IHMuZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChzLmd6aW5kZXgrKykgJiAweGZmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcHV0X2J5dGUocywgdmFsKTtcbiAgICAgIH0gd2hpbGUgKHZhbCAhPT0gMCk7XG5cbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbCA9PT0gMCkge1xuICAgICAgICBzLnN0YXR1cyA9IEhDUkNfU1RBVEU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gSENSQ19TVEFURTtcbiAgICB9XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBIQ1JDX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLmhjcmMpIHtcbiAgICAgIGlmIChzLnBlbmRpbmcgKyAyID4gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICB9XG4gICAgICBpZiAocy5wZW5kaW5nICsgMiA8PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgcHV0X2J5dGUocywgc3RybS5hZGxlciAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiA4KSAmIDB4ZmYpO1xuICAgICAgICBzdHJtLmFkbGVyID0gMDsgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTtcbiAgICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG4gICAgfVxuICB9XG4gIC8vI2VuZGlmXG5cbiAgLyogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZSAqL1xuICBpZiAocy5wZW5kaW5nICE9PSAwKSB7XG4gICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIC8qIFNpbmNlIGF2YWlsX291dCBpcyAwLCBkZWZsYXRlIHdpbGwgYmUgY2FsbGVkIGFnYWluIHdpdGhcbiAgICAgICAqIG1vcmUgb3V0cHV0IHNwYWNlLCBidXQgcG9zc2libHkgd2l0aCBib3RoIHBlbmRpbmcgYW5kXG4gICAgICAgKiBhdmFpbF9pbiBlcXVhbCB0byB6ZXJvLiBUaGVyZSB3b24ndCBiZSBhbnl0aGluZyB0byBkbyxcbiAgICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBhbiBlcnJvciBzaXR1YXRpb24gc28gbWFrZSBzdXJlIHdlXG4gICAgICAgKiByZXR1cm4gT0sgaW5zdGVhZCBvZiBCVUZfRVJST1IgYXQgbmV4dCBjYWxsIG9mIGRlZmxhdGU6XG4gICAgICAgKi9cbiAgICAgIHMubGFzdF9mbHVzaCA9IC0xO1xuICAgICAgcmV0dXJuIFpfT0s7XG4gICAgfVxuXG4gICAgLyogTWFrZSBzdXJlIHRoZXJlIGlzIHNvbWV0aGluZyB0byBkbyBhbmQgYXZvaWQgZHVwbGljYXRlIGNvbnNlY3V0aXZlXG4gICAgICogZmx1c2hlcy4gRm9yIHJlcGVhdGVkIGFuZCB1c2VsZXNzIGNhbGxzIHdpdGggWl9GSU5JU0gsIHdlIGtlZXBcbiAgICAgKiByZXR1cm5pbmcgWl9TVFJFQU1fRU5EIGluc3RlYWQgb2YgWl9CVUZfRVJST1IuXG4gICAgICovXG4gIH0gZWxzZSBpZiAoc3RybS5hdmFpbF9pbiA9PT0gMCAmJiByYW5rKGZsdXNoKSA8PSByYW5rKG9sZF9mbHVzaCkgJiZcbiAgICBmbHVzaCAhPT0gWl9GSU5JU0gpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTtcbiAgfVxuXG4gIC8qIFVzZXIgbXVzdCBub3QgcHJvdmlkZSBtb3JlIGlucHV0IGFmdGVyIHRoZSBmaXJzdCBGSU5JU0g6ICovXG4gIGlmIChzLnN0YXR1cyA9PT0gRklOSVNIX1NUQVRFICYmIHN0cm0uYXZhaWxfaW4gIT09IDApIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTtcbiAgfVxuXG4gIC8qIFN0YXJ0IGEgbmV3IGJsb2NrIG9yIGNvbnRpbnVlIHRoZSBjdXJyZW50IG9uZS5cbiAgICovXG4gIGlmIChzdHJtLmF2YWlsX2luICE9PSAwIHx8IHMubG9va2FoZWFkICE9PSAwIHx8XG4gICAgKGZsdXNoICE9PSBaX05PX0ZMVVNIICYmIHMuc3RhdHVzICE9PSBGSU5JU0hfU1RBVEUpKSB7XG4gICAgdmFyIGJzdGF0ZSA9IChzLnN0cmF0ZWd5ID09PSBaX0hVRkZNQU5fT05MWSkgPyBkZWZsYXRlX2h1ZmYocywgZmx1c2gpIDpcbiAgICAgIChzLnN0cmF0ZWd5ID09PSBaX1JMRSA/IGRlZmxhdGVfcmxlKHMsIGZsdXNoKSA6XG4gICAgICAgIGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZnVuYyhzLCBmbHVzaCkpO1xuXG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfRklOSVNIX1NUQVJURUQgfHwgYnN0YXRlID09PSBCU19GSU5JU0hfRE9ORSkge1xuICAgICAgcy5zdGF0dXMgPSBGSU5JU0hfU1RBVEU7XG4gICAgfVxuICAgIGlmIChic3RhdGUgPT09IEJTX05FRURfTU9SRSB8fCBic3RhdGUgPT09IEJTX0ZJTklTSF9TVEFSVEVEKSB7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICAgIC8qIGF2b2lkIEJVRl9FUlJPUiBuZXh0IGNhbGwsIHNlZSBhYm92ZSAqL1xuICAgICAgfVxuICAgICAgcmV0dXJuIFpfT0s7XG4gICAgICAvKiBJZiBmbHVzaCAhPSBaX05PX0ZMVVNIICYmIGF2YWlsX291dCA9PSAwLCB0aGUgbmV4dCBjYWxsXG4gICAgICAgKiBvZiBkZWZsYXRlIHNob3VsZCB1c2UgdGhlIHNhbWUgZmx1c2ggcGFyYW1ldGVyIHRvIG1ha2Ugc3VyZVxuICAgICAgICogdGhhdCB0aGUgZmx1c2ggaXMgY29tcGxldGUuIFNvIHdlIGRvbid0IGhhdmUgdG8gb3V0cHV0IGFuXG4gICAgICAgKiBlbXB0eSBibG9jayBoZXJlLCB0aGlzIHdpbGwgYmUgZG9uZSBhdCBuZXh0IGNhbGwuIFRoaXMgYWxzb1xuICAgICAgICogZW5zdXJlcyB0aGF0IGZvciBhIHZlcnkgc21hbGwgb3V0cHV0IGJ1ZmZlciwgd2UgZW1pdCBhdCBtb3N0XG4gICAgICAgKiBvbmUgZW1wdHkgYmxvY2suXG4gICAgICAgKi9cbiAgICB9XG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfQkxPQ0tfRE9ORSkge1xuICAgICAgaWYgKGZsdXNoID09PSBaX1BBUlRJQUxfRkxVU0gpIHtcbiAgICAgICAgX3RyX2FsaWduKHMpO1xuICAgICAgfSBlbHNlIGlmIChmbHVzaCAhPT0gWl9CTE9DSykgeyAvKiBGVUxMX0ZMVVNIIG9yIFNZTkNfRkxVU0ggKi9cblxuICAgICAgICBfdHJfc3RvcmVkX2Jsb2NrKHMsIDAsIDAsIGZhbHNlKTtcbiAgICAgICAgLyogRm9yIGEgZnVsbCBmbHVzaCwgdGhpcyBlbXB0eSBibG9jayB3aWxsIGJlIHJlY29nbml6ZWRcbiAgICAgICAgICogYXMgYSBzcGVjaWFsIG1hcmtlciBieSBpbmZsYXRlX3N5bmMoKS5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9GVUxMX0ZMVVNIKSB7XG4gICAgICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gICAgICAgICAgLyogZm9yZ2V0IGhpc3RvcnkgKi9cbiAgICAgICAgICB6ZXJvKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7XG5cbiAgICAgICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgICAgIHMuc3Ryc3RhcnQgPSAwO1xuICAgICAgICAgICAgcy5ibG9ja19zdGFydCA9IDA7XG4gICAgICAgICAgICBzLmluc2VydCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHMubGFzdF9mbHVzaCA9IC0xOyAvKiBhdm9pZCBCVUZfRVJST1IgYXQgbmV4dCBjYWxsLCBzZWUgYWJvdmUgKi9cbiAgICAgICAgcmV0dXJuIFpfT0s7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0KHN0cm0tPmF2YWlsX291dCA+IDAsIFwiYnVnMlwiKTtcbiAgLy9pZiAoc3RybS5hdmFpbF9vdXQgPD0gMCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJidWcyXCIpO31cblxuICBpZiAoZmx1c2ggIT09IFpfRklOSVNIKSB7XG4gICAgcmV0dXJuIFpfT0s7XG4gIH1cbiAgaWYgKHMud3JhcCA8PSAwKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VORDtcbiAgfVxuXG4gIC8qIFdyaXRlIHRoZSB0cmFpbGVyICovXG4gIGlmIChzLndyYXAgPT09IDIpIHtcbiAgICBwdXRfYnl0ZShzLCBzdHJtLmFkbGVyICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gOCkgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiAxNikgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiAyNCkgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCBzdHJtLnRvdGFsX2luICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gOCkgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiAxNikgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiAyNCkgJiAweGZmKTtcbiAgfSBlbHNlIHtcbiAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7XG4gICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciAmIDB4ZmZmZik7XG4gIH1cblxuICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAvKiBJZiBhdmFpbF9vdXQgaXMgemVybywgdGhlIGFwcGxpY2F0aW9uIHdpbGwgY2FsbCBkZWZsYXRlIGFnYWluXG4gICAqIHRvIGZsdXNoIHRoZSByZXN0LlxuICAgKi9cbiAgaWYgKHMud3JhcCA+IDApIHtcbiAgICBzLndyYXAgPSAtcy53cmFwO1xuICB9XG4gIC8qIHdyaXRlIHRoZSB0cmFpbGVyIG9ubHkgb25jZSEgKi9cbiAgcmV0dXJuIHMucGVuZGluZyAhPT0gMCA/IFpfT0sgOiBaX1NUUkVBTV9FTkQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZsYXRlRW5kKHN0cm0pIHtcbiAgdmFyIHN0YXR1cztcblxuICBpZiAoIXN0cm0gLyo9PSBaX05VTEwqLyB8fCAhc3RybS5zdGF0ZSAvKj09IFpfTlVMTCovICkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHN0YXR1cyA9IHN0cm0uc3RhdGUuc3RhdHVzO1xuICBpZiAoc3RhdHVzICE9PSBJTklUX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBFWFRSQV9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gTkFNRV9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gQ09NTUVOVF9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gSENSQ19TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gQlVTWV9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gRklOSVNIX1NUQVRFXG4gICkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cbiAgc3RybS5zdGF0ZSA9IG51bGw7XG5cbiAgcmV0dXJuIHN0YXR1cyA9PT0gQlVTWV9TVEFURSA/IGVycihzdHJtLCBaX0RBVEFfRVJST1IpIDogWl9PSztcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplcyB0aGUgY29tcHJlc3Npb24gZGljdGlvbmFyeSBmcm9tIHRoZSBnaXZlbiBieXRlXG4gKiBzZXF1ZW5jZSB3aXRob3V0IHByb2R1Y2luZyBhbnkgY29tcHJlc3NlZCBvdXRwdXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZsYXRlU2V0RGljdGlvbmFyeShzdHJtLCBkaWN0aW9uYXJ5KSB7XG4gIHZhciBkaWN0TGVuZ3RoID0gZGljdGlvbmFyeS5sZW5ndGg7XG5cbiAgdmFyIHM7XG4gIHZhciBzdHIsIG47XG4gIHZhciB3cmFwO1xuICB2YXIgYXZhaWw7XG4gIHZhciBuZXh0O1xuICB2YXIgaW5wdXQ7XG4gIHZhciB0bXBEaWN0O1xuXG4gIGlmICghc3RybSAvKj09IFpfTlVMTCovIHx8ICFzdHJtLnN0YXRlIC8qPT0gWl9OVUxMKi8gKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgcyA9IHN0cm0uc3RhdGU7XG4gIHdyYXAgPSBzLndyYXA7XG5cbiAgaWYgKHdyYXAgPT09IDIgfHwgKHdyYXAgPT09IDEgJiYgcy5zdGF0dXMgIT09IElOSVRfU1RBVEUpIHx8IHMubG9va2FoZWFkKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgLyogd2hlbiB1c2luZyB6bGliIHdyYXBwZXJzLCBjb21wdXRlIEFkbGVyLTMyIGZvciBwcm92aWRlZCBkaWN0aW9uYXJ5ICovXG4gIGlmICh3cmFwID09PSAxKSB7XG4gICAgLyogYWRsZXIzMihzdHJtLT5hZGxlciwgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7ICovXG4gICAgc3RybS5hZGxlciA9IGFkbGVyMzIoc3RybS5hZGxlciwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgMCk7XG4gIH1cblxuICBzLndyYXAgPSAwOyAvKiBhdm9pZCBjb21wdXRpbmcgQWRsZXItMzIgaW4gcmVhZF9idWYgKi9cblxuICAvKiBpZiBkaWN0aW9uYXJ5IHdvdWxkIGZpbGwgd2luZG93LCBqdXN0IHJlcGxhY2UgdGhlIGhpc3RvcnkgKi9cbiAgaWYgKGRpY3RMZW5ndGggPj0gcy53X3NpemUpIHtcbiAgICBpZiAod3JhcCA9PT0gMCkgeyAvKiBhbHJlYWR5IGVtcHR5IG90aGVyd2lzZSAqL1xuICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gICAgICB6ZXJvKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7XG4gICAgICBzLnN0cnN0YXJ0ID0gMDtcbiAgICAgIHMuYmxvY2tfc3RhcnQgPSAwO1xuICAgICAgcy5pbnNlcnQgPSAwO1xuICAgIH1cbiAgICAvKiB1c2UgdGhlIHRhaWwgKi9cbiAgICAvLyBkaWN0aW9uYXJ5ID0gZGljdGlvbmFyeS5zbGljZShkaWN0TGVuZ3RoIC0gcy53X3NpemUpO1xuICAgIHRtcERpY3QgPSBuZXcgQnVmOChzLndfc2l6ZSk7XG4gICAgYXJyYXlTZXQodG1wRGljdCwgZGljdGlvbmFyeSwgZGljdExlbmd0aCAtIHMud19zaXplLCBzLndfc2l6ZSwgMCk7XG4gICAgZGljdGlvbmFyeSA9IHRtcERpY3Q7XG4gICAgZGljdExlbmd0aCA9IHMud19zaXplO1xuICB9XG4gIC8qIGluc2VydCBkaWN0aW9uYXJ5IGludG8gd2luZG93IGFuZCBoYXNoICovXG4gIGF2YWlsID0gc3RybS5hdmFpbF9pbjtcbiAgbmV4dCA9IHN0cm0ubmV4dF9pbjtcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBzdHJtLmF2YWlsX2luID0gZGljdExlbmd0aDtcbiAgc3RybS5uZXh0X2luID0gMDtcbiAgc3RybS5pbnB1dCA9IGRpY3Rpb25hcnk7XG4gIGZpbGxfd2luZG93KHMpO1xuICB3aGlsZSAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgc3RyID0gcy5zdHJzdGFydDtcbiAgICBuID0gcy5sb29rYWhlYWQgLSAoTUlOX01BVENIIC0gMSk7XG4gICAgZG8ge1xuICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyBNSU5fTUFUQ0gtMV0pOyAqL1xuICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbc3RyICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG5cbiAgICAgIHMucHJldltzdHIgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG5cbiAgICAgIHMuaGVhZFtzLmluc19oXSA9IHN0cjtcbiAgICAgIHN0cisrO1xuICAgIH0gd2hpbGUgKC0tbik7XG4gICAgcy5zdHJzdGFydCA9IHN0cjtcbiAgICBzLmxvb2thaGVhZCA9IE1JTl9NQVRDSCAtIDE7XG4gICAgZmlsbF93aW5kb3cocyk7XG4gIH1cbiAgcy5zdHJzdGFydCArPSBzLmxvb2thaGVhZDtcbiAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7XG4gIHMuaW5zZXJ0ID0gcy5sb29rYWhlYWQ7XG4gIHMubG9va2FoZWFkID0gMDtcbiAgcy5tYXRjaF9sZW5ndGggPSBzLnByZXZfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICBzdHJtLmlucHV0ID0gaW5wdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSBhdmFpbDtcbiAgcy53cmFwID0gd3JhcDtcbiAgcmV0dXJuIFpfT0s7XG59XG5cblxuZXhwb3J0IHZhciBkZWZsYXRlSW5mbyA9ICdwYWtvIGRlZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpJztcblxuLyogTm90IGltcGxlbWVudGVkXG5leHBvcnRzLmRlZmxhdGVCb3VuZCA9IGRlZmxhdGVCb3VuZDtcbmV4cG9ydHMuZGVmbGF0ZUNvcHkgPSBkZWZsYXRlQ29weTtcbmV4cG9ydHMuZGVmbGF0ZVBhcmFtcyA9IGRlZmxhdGVQYXJhbXM7XG5leHBvcnRzLmRlZmxhdGVQZW5kaW5nID0gZGVmbGF0ZVBlbmRpbmc7XG5leHBvcnRzLmRlZmxhdGVQcmltZSA9IGRlZmxhdGVQcmltZTtcbmV4cG9ydHMuZGVmbGF0ZVR1bmUgPSBkZWZsYXRlVHVuZTtcbiovXG4iLCJcbi8vIFNlZSBzdGF0ZSBkZWZzIGZyb20gaW5mbGF0ZS5qc1xudmFyIEJBRCA9IDMwOyAgICAgICAvKiBnb3QgYSBkYXRhIGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG52YXIgVFlQRSA9IDEyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIHR5cGUgYml0cywgaW5jbHVkaW5nIGxhc3QtZmxhZyBiaXQgKi9cblxuLypcbiAgIERlY29kZSBsaXRlcmFsLCBsZW5ndGgsIGFuZCBkaXN0YW5jZSBjb2RlcyBhbmQgd3JpdGUgb3V0IHRoZSByZXN1bHRpbmdcbiAgIGxpdGVyYWwgYW5kIG1hdGNoIGJ5dGVzIHVudGlsIGVpdGhlciBub3QgZW5vdWdoIGlucHV0IG9yIG91dHB1dCBpc1xuICAgYXZhaWxhYmxlLCBhbiBlbmQtb2YtYmxvY2sgaXMgZW5jb3VudGVyZWQsIG9yIGEgZGF0YSBlcnJvciBpcyBlbmNvdW50ZXJlZC5cbiAgIFdoZW4gbGFyZ2UgZW5vdWdoIGlucHV0IGFuZCBvdXRwdXQgYnVmZmVycyBhcmUgc3VwcGxpZWQgdG8gaW5mbGF0ZSgpLCBmb3JcbiAgIGV4YW1wbGUsIGEgMTZLIGlucHV0IGJ1ZmZlciBhbmQgYSA2NEsgb3V0cHV0IGJ1ZmZlciwgbW9yZSB0aGFuIDk1JSBvZiB0aGVcbiAgIGluZmxhdGUgZXhlY3V0aW9uIHRpbWUgaXMgc3BlbnQgaW4gdGhpcyByb3V0aW5lLlxuXG4gICBFbnRyeSBhc3N1bXB0aW9uczpcblxuICAgICAgICBzdGF0ZS5tb2RlID09PSBMRU5cbiAgICAgICAgc3RybS5hdmFpbF9pbiA+PSA2XG4gICAgICAgIHN0cm0uYXZhaWxfb3V0ID49IDI1OFxuICAgICAgICBzdGFydCA+PSBzdHJtLmF2YWlsX291dFxuICAgICAgICBzdGF0ZS5iaXRzIDwgOFxuXG4gICBPbiByZXR1cm4sIHN0YXRlLm1vZGUgaXMgb25lIG9mOlxuXG4gICAgICAgIExFTiAtLSByYW4gb3V0IG9mIGVub3VnaCBvdXRwdXQgc3BhY2Ugb3IgZW5vdWdoIGF2YWlsYWJsZSBpbnB1dFxuICAgICAgICBUWVBFIC0tIHJlYWNoZWQgZW5kIG9mIGJsb2NrIGNvZGUsIGluZmxhdGUoKSB0byBpbnRlcnByZXQgbmV4dCBibG9ja1xuICAgICAgICBCQUQgLS0gZXJyb3IgaW4gYmxvY2sgZGF0YVxuXG4gICBOb3RlczpcblxuICAgIC0gVGhlIG1heGltdW0gaW5wdXQgYml0cyB1c2VkIGJ5IGEgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgaXMgMTUgYml0cyBmb3IgdGhlXG4gICAgICBsZW5ndGggY29kZSwgNSBiaXRzIGZvciB0aGUgbGVuZ3RoIGV4dHJhLCAxNSBiaXRzIGZvciB0aGUgZGlzdGFuY2UgY29kZSxcbiAgICAgIGFuZCAxMyBiaXRzIGZvciB0aGUgZGlzdGFuY2UgZXh0cmEuICBUaGlzIHRvdGFscyA0OCBiaXRzLCBvciBzaXggYnl0ZXMuXG4gICAgICBUaGVyZWZvcmUgaWYgc3RybS5hdmFpbF9pbiA+PSA2LCB0aGVuIHRoZXJlIGlzIGVub3VnaCBpbnB1dCB0byBhdm9pZFxuICAgICAgY2hlY2tpbmcgZm9yIGF2YWlsYWJsZSBpbnB1dCB3aGlsZSBkZWNvZGluZy5cblxuICAgIC0gVGhlIG1heGltdW0gYnl0ZXMgdGhhdCBhIHNpbmdsZSBsZW5ndGgvZGlzdGFuY2UgcGFpciBjYW4gb3V0cHV0IGlzIDI1OFxuICAgICAgYnl0ZXMsIHdoaWNoIGlzIHRoZSBtYXhpbXVtIGxlbmd0aCB0aGF0IGNhbiBiZSBjb2RlZC4gIGluZmxhdGVfZmFzdCgpXG4gICAgICByZXF1aXJlcyBzdHJtLmF2YWlsX291dCA+PSAyNTggZm9yIGVhY2ggbG9vcCB0byBhdm9pZCBjaGVja2luZyBmb3JcbiAgICAgIG91dHB1dCBzcGFjZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5mbGF0ZV9mYXN0KHN0cm0sIHN0YXJ0KSB7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIF9pbjsgICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaW5wdXQgKi9cbiAgdmFyIGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIGhhdmUgZW5vdWdoIGlucHV0IHdoaWxlIGluIDwgbGFzdCAqL1xuICB2YXIgX291dDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5vdXRwdXQgKi9cbiAgdmFyIGJlZzsgICAgICAgICAgICAgICAgICAgIC8qIGluZmxhdGUoKSdzIGluaXRpYWwgc3RybS5vdXRwdXQgKi9cbiAgdmFyIGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHdoaWxlIG91dCA8IGVuZCwgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSAqL1xuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgdmFyIGRtYXg7ICAgICAgICAgICAgICAgICAgIC8qIG1heGltdW0gZGlzdGFuY2UgZnJvbSB6bGliIGhlYWRlciAqL1xuLy8jZW5kaWZcbiAgdmFyIHdzaXplOyAgICAgICAgICAgICAgICAgIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuICB2YXIgd2hhdmU7ICAgICAgICAgICAgICAgICAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xuICB2YXIgd25leHQ7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXG4gIC8vIFVzZSBgc193aW5kb3dgIGluc3RlYWQgYHdpbmRvd2AsIGF2b2lkIGNvbmZsaWN0IHdpdGggaW5zdHJ1bWVudGF0aW9uIHRvb2xzXG4gIHZhciBzX3dpbmRvdzsgICAgICAgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIHdzaXplICE9IDAgKi9cbiAgdmFyIGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaG9sZCAqL1xuICB2YXIgYml0czsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5iaXRzICovXG4gIHZhciBsY29kZTsgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmxlbmNvZGUgKi9cbiAgdmFyIGRjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uZGlzdGNvZGUgKi9cbiAgdmFyIGxtYXNrOyAgICAgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGZpcnN0IGxldmVsIG9mIGxlbmd0aCBjb2RlcyAqL1xuICB2YXIgZG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgZGlzdGFuY2UgY29kZXMgKi9cbiAgdmFyIGhlcmU7ICAgICAgICAgICAgICAgICAgIC8qIHJldHJpZXZlZCB0YWJsZSBlbnRyeSAqL1xuICB2YXIgb3A7ICAgICAgICAgICAgICAgICAgICAgLyogY29kZSBiaXRzLCBvcGVyYXRpb24sIGV4dHJhIGJpdHMsIG9yICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgd2luZG93IHBvc2l0aW9uLCB3aW5kb3cgYnl0ZXMgdG8gY29weSAqL1xuICB2YXIgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoLCB1bnVzZWQgYnl0ZXMgKi9cbiAgdmFyIGRpc3Q7ICAgICAgICAgICAgICAgICAgIC8qIG1hdGNoIGRpc3RhbmNlICovXG4gIHZhciBmcm9tOyAgICAgICAgICAgICAgICAgICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGZyb20gKi9cbiAgdmFyIGZyb21fc291cmNlO1xuXG5cbiAgdmFyIGlucHV0LCBvdXRwdXQ7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcblxuICAvKiBjb3B5IHN0YXRlIHRvIGxvY2FsIHZhcmlhYmxlcyAqL1xuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIC8vaGVyZSA9IHN0YXRlLmhlcmU7XG4gIF9pbiA9IHN0cm0ubmV4dF9pbjtcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBsYXN0ID0gX2luICsgKHN0cm0uYXZhaWxfaW4gLSA1KTtcbiAgX291dCA9IHN0cm0ubmV4dF9vdXQ7XG4gIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICBiZWcgPSBfb3V0IC0gKHN0YXJ0IC0gc3RybS5hdmFpbF9vdXQpO1xuICBlbmQgPSBfb3V0ICsgKHN0cm0uYXZhaWxfb3V0IC0gMjU3KTtcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gIGRtYXggPSBzdGF0ZS5kbWF4O1xuLy8jZW5kaWZcbiAgd3NpemUgPSBzdGF0ZS53c2l6ZTtcbiAgd2hhdmUgPSBzdGF0ZS53aGF2ZTtcbiAgd25leHQgPSBzdGF0ZS53bmV4dDtcbiAgc193aW5kb3cgPSBzdGF0ZS53aW5kb3c7XG4gIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICBiaXRzID0gc3RhdGUuYml0cztcbiAgbGNvZGUgPSBzdGF0ZS5sZW5jb2RlO1xuICBkY29kZSA9IHN0YXRlLmRpc3Rjb2RlO1xuICBsbWFzayA9ICgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMTtcbiAgZG1hc2sgPSAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxO1xuXG5cbiAgLyogZGVjb2RlIGxpdGVyYWxzIGFuZCBsZW5ndGgvZGlzdGFuY2VzIHVudGlsIGVuZC1vZi1ibG9jayBvciBub3QgZW5vdWdoXG4gICAgIGlucHV0IGRhdGEgb3Igb3V0cHV0IHNwYWNlICovXG5cbiAgdG9wOlxuICBkbyB7XG4gICAgaWYgKGJpdHMgPCAxNSkge1xuICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgIGJpdHMgKz0gODtcbiAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICBiaXRzICs9IDg7XG4gICAgfVxuXG4gICAgaGVyZSA9IGxjb2RlW2hvbGQgJiBsbWFza107XG5cbiAgICBkb2xlbjpcbiAgICBmb3IgKDs7KSB7IC8vIEdvdG8gZW11bGF0aW9uXG4gICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcbiAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgIGJpdHMgLT0gb3A7XG4gICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG4gICAgICBpZiAob3AgPT09IDApIHsgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGxpdGVyYWwgKi9cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIGhlcmUudmFsID49IDB4MjAgJiYgaGVyZS52YWwgPCAweDdmID9cbiAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG4gICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcXG5cIiwgaGVyZS52YWwpKTtcbiAgICAgICAgb3V0cHV0W19vdXQrK10gPSBoZXJlICYgMHhmZmZmLypoZXJlLnZhbCovO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBiYXNlICovXG4gICAgICAgIGxlbiA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXG4gICAgICAgIGlmIChvcCkge1xuICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbiArPSBob2xkICYgKCgxIDw8IG9wKSAtIDEpO1xuICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICBiaXRzIC09IG9wO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XFxuXCIsIGxlbikpO1xuICAgICAgICBpZiAoYml0cyA8IDE1KSB7XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgaGVyZSA9IGRjb2RlW2hvbGQgJiBkbWFza107XG5cbiAgICAgICAgZG9kaXN0OlxuICAgICAgICBmb3IgKDs7KSB7IC8vIGdvdG8gZW11bGF0aW9uXG4gICAgICAgICAgb3AgPSBoZXJlID4+PiAyNC8qaGVyZS5iaXRzKi87XG4gICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZi8qaGVyZS5vcCovO1xuXG4gICAgICAgICAgaWYgKG9wICYgMTYpIHsgICAgICAgICAgICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFzZSAqL1xuICAgICAgICAgICAgZGlzdCA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgICAgICBvcCAmPSAxNTsgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXG4gICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7XG4gICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXN0ICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICAgICAgICAgICAgaWYgKGRpc3QgPiBkbWF4KSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIGRpc3QpKTtcbiAgICAgICAgICAgIG9wID0gX291dCAtIGJlZzsgICAgICAgICAgICAgICAgLyogbWF4IGRpc3RhbmNlIGluIG91dHB1dCAqL1xuICAgICAgICAgICAgaWYgKGRpc3QgPiBvcCkgeyAgICAgICAgICAgICAgICAvKiBzZWUgaWYgY29weSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgICAgICBvcCA9IGRpc3QgLSBvcDsgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICBpZiAob3AgPiB3aGF2ZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XG4gICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgICAgIH1cblxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhaWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuLy8gICAgICAgICAgICAgICAgaWYgKGxlbiA8PSBvcCAtIHdoYXZlKSB7XG4vLyAgICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IDA7XG4vLyAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbGVuKTtcbi8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wO1xuLy8gICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgbGVuIC09IG9wIC0gd2hhdmU7XG4vLyAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcbi8vICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3AgPiB3aGF2ZSk7XG4vLyAgICAgICAgICAgICAgICBpZiAob3AgPT09IDApIHtcbi8vICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0O1xuLy8gICAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbi8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pO1xuLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZyb20gPSAwOyAvLyB3aW5kb3cgaW5kZXhcbiAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBzX3dpbmRvdztcbiAgICAgICAgICAgICAgaWYgKHduZXh0ID09PSAwKSB7ICAgICAgICAgICAvKiB2ZXJ5IGNvbW1vbiBjYXNlICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSAtIG9wO1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiAod25leHQgPCBvcCkgeyAgICAgIC8qIHdyYXAgYXJvdW5kIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd3NpemUgKyB3bmV4dCAtIG9wO1xuICAgICAgICAgICAgICAgIG9wIC09IHduZXh0O1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSBlbmQgb2Ygd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICAgICAgICBpZiAod25leHQgPCBsZW4pIHsgIC8qIHNvbWUgZnJvbSBzdGFydCBvZiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgICAgb3AgPSB3bmV4dDtcbiAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAvKiBjb250aWd1b3VzIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd25leHQgLSBvcDtcbiAgICAgICAgICAgICAgICBpZiAob3AgPCBsZW4pIHsgICAgICAgICAvKiBzb21lIGZyb20gd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdoaWxlIChsZW4gPiAyKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgICAgICAgICAgLyogY29weSBkaXJlY3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgZG8geyAgICAgICAgICAgICAgICAgICAgICAgIC8qIG1pbmltdW0gbGVuZ3RoIGlzIHRocmVlICovXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiA+IDIpO1xuICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7ICAgICAgICAgIC8qIDJuZCBsZXZlbCBkaXN0YW5jZSBjb2RlICovXG4gICAgICAgICAgICBoZXJlID0gZGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIGRvZGlzdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrIHRvcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhazsgLy8gbmVlZCB0byBlbXVsYXRlIGdvdG8gdmlhIFwiY29udGludWVcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgICAgIC8qIDJuZCBsZXZlbCBsZW5ndGggY29kZSAqL1xuICAgICAgICBoZXJlID0gbGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgY29udGludWUgZG9sZW47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcCAmIDMyKSB7ICAgICAgICAgICAgICAgICAgICAgLyogZW5kLW9mLWJsb2NrICovXG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIGJyZWFrIHRvcDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUnO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhayB0b3A7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgfVxuICB9IHdoaWxlIChfaW4gPCBsYXN0ICYmIF9vdXQgPCBlbmQpO1xuXG4gIC8qIHJldHVybiB1bnVzZWQgYnl0ZXMgKG9uIGVudHJ5LCBiaXRzIDwgOCwgc28gaW4gd29uJ3QgZ28gdG9vIGZhciBiYWNrKSAqL1xuICBsZW4gPSBiaXRzID4+IDM7XG4gIF9pbiAtPSBsZW47XG4gIGJpdHMgLT0gbGVuIDw8IDM7XG4gIGhvbGQgJj0gKDEgPDwgYml0cykgLSAxO1xuXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmV0dXJuICovXG4gIHN0cm0ubmV4dF9pbiA9IF9pbjtcbiAgc3RybS5uZXh0X291dCA9IF9vdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSAoX2luIDwgbGFzdCA/IDUgKyAobGFzdCAtIF9pbikgOiA1IC0gKF9pbiAtIGxhc3QpKTtcbiAgc3RybS5hdmFpbF9vdXQgPSAoX291dCA8IGVuZCA/IDI1NyArIChlbmQgLSBfb3V0KSA6IDI1NyAtIChfb3V0IC0gZW5kKSk7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgcmV0dXJuO1xufTtcbiIsImltcG9ydCB7QnVmMTZ9IGZyb20gJy4vdXRpbHMnO1xudmFyIE1BWEJJVFMgPSAxNTtcbnZhciBFTk9VR0hfTEVOUyA9IDg1MjtcbnZhciBFTk9VR0hfRElTVFMgPSA1OTI7XG4vL3ZhciBFTk9VR0ggPSAoRU5PVUdIX0xFTlMrRU5PVUdIX0RJU1RTKTtcblxudmFyIENPREVTID0gMDtcbnZhciBMRU5TID0gMTtcbnZhciBESVNUUyA9IDI7XG5cbnZhciBsYmFzZSA9IFsgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGJhc2UgKi9cbiAgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMywgMTUsIDE3LCAxOSwgMjMsIDI3LCAzMSxcbiAgMzUsIDQzLCA1MSwgNTksIDY3LCA4MywgOTksIDExNSwgMTMxLCAxNjMsIDE5NSwgMjI3LCAyNTgsIDAsIDBcbl07XG5cbnZhciBsZXh0ID0gWyAvKiBMZW5ndGggY29kZXMgMjU3Li4yODUgZXh0cmEgKi9cbiAgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsXG4gIDE5LCAxOSwgMTksIDE5LCAyMCwgMjAsIDIwLCAyMCwgMjEsIDIxLCAyMSwgMjEsIDE2LCA3MiwgNzhcbl07XG5cbnZhciBkYmFzZSA9IFsgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgYmFzZSAqL1xuICAxLCAyLCAzLCA0LCA1LCA3LCA5LCAxMywgMTcsIDI1LCAzMywgNDksIDY1LCA5NywgMTI5LCAxOTMsXG4gIDI1NywgMzg1LCA1MTMsIDc2OSwgMTAyNSwgMTUzNywgMjA0OSwgMzA3MywgNDA5NywgNjE0NSxcbiAgODE5MywgMTIyODksIDE2Mzg1LCAyNDU3NywgMCwgMFxuXTtcblxudmFyIGRleHQgPSBbIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGV4dHJhICovXG4gIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE4LCAxOCwgMTksIDE5LCAyMCwgMjAsIDIxLCAyMSwgMjIsIDIyLFxuICAyMywgMjMsIDI0LCAyNCwgMjUsIDI1LCAyNiwgMjYsIDI3LCAyNyxcbiAgMjgsIDI4LCAyOSwgMjksIDY0LCA2NFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5mbGF0ZV90YWJsZSh0eXBlLCBsZW5zLCBsZW5zX2luZGV4LCBjb2RlcywgdGFibGUsIHRhYmxlX2luZGV4LCB3b3JrLCBvcHRzKSB7XG4gIHZhciBiaXRzID0gb3B0cy5iaXRzO1xuICAvL2hlcmUgPSBvcHRzLmhlcmU7IC8qIHRhYmxlIGVudHJ5IGZvciBkdXBsaWNhdGlvbiAqL1xuXG4gIHZhciBsZW4gPSAwOyAvKiBhIGNvZGUncyBsZW5ndGggaW4gYml0cyAqL1xuICB2YXIgc3ltID0gMDsgLyogaW5kZXggb2YgY29kZSBzeW1ib2xzICovXG4gIHZhciBtaW4gPSAwLFxuICAgIG1heCA9IDA7IC8qIG1pbmltdW0gYW5kIG1heGltdW0gY29kZSBsZW5ndGhzICovXG4gIHZhciByb290ID0gMDsgLyogbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHJvb3QgdGFibGUgKi9cbiAgdmFyIGN1cnIgPSAwOyAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3IgY3VycmVudCB0YWJsZSAqL1xuICB2YXIgZHJvcCA9IDA7IC8qIGNvZGUgYml0cyB0byBkcm9wIGZvciBzdWItdGFibGUgKi9cbiAgdmFyIGxlZnQgPSAwOyAvKiBudW1iZXIgb2YgcHJlZml4IGNvZGVzIGF2YWlsYWJsZSAqL1xuICB2YXIgdXNlZCA9IDA7IC8qIGNvZGUgZW50cmllcyBpbiB0YWJsZSB1c2VkICovXG4gIHZhciBodWZmID0gMDsgLyogSHVmZm1hbiBjb2RlICovXG4gIHZhciBpbmNyOyAvKiBmb3IgaW5jcmVtZW50aW5nIGNvZGUsIGluZGV4ICovXG4gIHZhciBmaWxsOyAvKiBpbmRleCBmb3IgcmVwbGljYXRpbmcgZW50cmllcyAqL1xuICB2YXIgbG93OyAvKiBsb3cgYml0cyBmb3IgY3VycmVudCByb290IGVudHJ5ICovXG4gIHZhciBtYXNrOyAvKiBtYXNrIGZvciBsb3cgcm9vdCBiaXRzICovXG4gIHZhciBuZXh0OyAvKiBuZXh0IGF2YWlsYWJsZSBzcGFjZSBpbiB0YWJsZSAqL1xuICB2YXIgYmFzZSA9IG51bGw7IC8qIGJhc2UgdmFsdWUgdGFibGUgdG8gdXNlICovXG4gIHZhciBiYXNlX2luZGV4ID0gMDtcbiAgLy8gIHZhciBzaG9leHRyYTsgICAgLyogZXh0cmEgYml0cyB0YWJsZSB0byB1c2UgKi9cbiAgdmFyIGVuZDsgLyogdXNlIGJhc2UgYW5kIGV4dHJhIGZvciBzeW1ib2wgPiBlbmQgKi9cbiAgdmFyIGNvdW50ID0gbmV3IEJ1ZjE2KE1BWEJJVFMgKyAxKTsgLy9bTUFYQklUUysxXTsgICAgLyogbnVtYmVyIG9mIGNvZGVzIG9mIGVhY2ggbGVuZ3RoICovXG4gIHZhciBvZmZzID0gbmV3IEJ1ZjE2KE1BWEJJVFMgKyAxKTsgLy9bTUFYQklUUysxXTsgICAgIC8qIG9mZnNldHMgaW4gdGFibGUgZm9yIGVhY2ggbGVuZ3RoICovXG4gIHZhciBleHRyYSA9IG51bGw7XG4gIHZhciBleHRyYV9pbmRleCA9IDA7XG5cbiAgdmFyIGhlcmVfYml0cywgaGVyZV9vcCwgaGVyZV92YWw7XG5cbiAgLypcbiAgIFByb2Nlc3MgYSBzZXQgb2YgY29kZSBsZW5ndGhzIHRvIGNyZWF0ZSBhIGNhbm9uaWNhbCBIdWZmbWFuIGNvZGUuICBUaGVcbiAgIGNvZGUgbGVuZ3RocyBhcmUgbGVuc1swLi5jb2Rlcy0xXS4gIEVhY2ggbGVuZ3RoIGNvcnJlc3BvbmRzIHRvIHRoZVxuICAgc3ltYm9scyAwLi5jb2Rlcy0xLiAgVGhlIEh1ZmZtYW4gY29kZSBpcyBnZW5lcmF0ZWQgYnkgZmlyc3Qgc29ydGluZyB0aGVcbiAgIHN5bWJvbHMgYnkgbGVuZ3RoIGZyb20gc2hvcnQgdG8gbG9uZywgYW5kIHJldGFpbmluZyB0aGUgc3ltYm9sIG9yZGVyXG4gICBmb3IgY29kZXMgd2l0aCBlcXVhbCBsZW5ndGhzLiAgVGhlbiB0aGUgY29kZSBzdGFydHMgd2l0aCBhbGwgemVybyBiaXRzXG4gICBmb3IgdGhlIGZpcnN0IGNvZGUgb2YgdGhlIHNob3J0ZXN0IGxlbmd0aCwgYW5kIHRoZSBjb2RlcyBhcmUgaW50ZWdlclxuICAgaW5jcmVtZW50cyBmb3IgdGhlIHNhbWUgbGVuZ3RoLCBhbmQgemVyb3MgYXJlIGFwcGVuZGVkIGFzIHRoZSBsZW5ndGhcbiAgIGluY3JlYXNlcy4gIEZvciB0aGUgZGVmbGF0ZSBmb3JtYXQsIHRoZXNlIGJpdHMgYXJlIHN0b3JlZCBiYWNrd2FyZHNcbiAgIGZyb20gdGhlaXIgbW9yZSBuYXR1cmFsIGludGVnZXIgaW5jcmVtZW50IG9yZGVyaW5nLCBhbmQgc28gd2hlbiB0aGVcbiAgIGRlY29kaW5nIHRhYmxlcyBhcmUgYnVpbHQgaW4gdGhlIGxhcmdlIGxvb3AgYmVsb3csIHRoZSBpbnRlZ2VyIGNvZGVzXG4gICBhcmUgaW5jcmVtZW50ZWQgYmFja3dhcmRzLlxuXG4gICBUaGlzIHJvdXRpbmUgYXNzdW1lcywgYnV0IGRvZXMgbm90IGNoZWNrLCB0aGF0IGFsbCBvZiB0aGUgZW50cmllcyBpblxuICAgbGVuc1tdIGFyZSBpbiB0aGUgcmFuZ2UgMC4uTUFYQklUUy4gIFRoZSBjYWxsZXIgbXVzdCBhc3N1cmUgdGhpcy5cbiAgIDEuLk1BWEJJVFMgaXMgaW50ZXJwcmV0ZWQgYXMgdGhhdCBjb2RlIGxlbmd0aC4gIHplcm8gbWVhbnMgdGhhdCB0aGF0XG4gICBzeW1ib2wgZG9lcyBub3Qgb2NjdXIgaW4gdGhpcyBjb2RlLlxuXG4gICBUaGUgY29kZXMgYXJlIHNvcnRlZCBieSBjb21wdXRpbmcgYSBjb3VudCBvZiBjb2RlcyBmb3IgZWFjaCBsZW5ndGgsXG4gICBjcmVhdGluZyBmcm9tIHRoYXQgYSB0YWJsZSBvZiBzdGFydGluZyBpbmRpY2VzIGZvciBlYWNoIGxlbmd0aCBpbiB0aGVcbiAgIHNvcnRlZCB0YWJsZSwgYW5kIHRoZW4gZW50ZXJpbmcgdGhlIHN5bWJvbHMgaW4gb3JkZXIgaW4gdGhlIHNvcnRlZFxuICAgdGFibGUuICBUaGUgc29ydGVkIHRhYmxlIGlzIHdvcmtbXSwgd2l0aCB0aGF0IHNwYWNlIGJlaW5nIHByb3ZpZGVkIGJ5XG4gICB0aGUgY2FsbGVyLlxuXG4gICBUaGUgbGVuZ3RoIGNvdW50cyBhcmUgdXNlZCBmb3Igb3RoZXIgcHVycG9zZXMgYXMgd2VsbCwgaS5lLiBmaW5kaW5nXG4gICB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBsZW5ndGggY29kZXMsIGRldGVybWluaW5nIGlmIHRoZXJlIGFyZSBhbnlcbiAgIGNvZGVzIGF0IGFsbCwgY2hlY2tpbmcgZm9yIGEgdmFsaWQgc2V0IG9mIGxlbmd0aHMsIGFuZCBsb29raW5nIGFoZWFkXG4gICBhdCBsZW5ndGggY291bnRzIHRvIGRldGVybWluZSBzdWItdGFibGUgc2l6ZXMgd2hlbiBidWlsZGluZyB0aGVcbiAgIGRlY29kaW5nIHRhYmxlcy5cbiAgICovXG5cbiAgLyogYWNjdW11bGF0ZSBsZW5ndGhzIGZvciBjb2RlcyAoYXNzdW1lcyBsZW5zW10gYWxsIGluIDAuLk1BWEJJVFMpICovXG4gIGZvciAobGVuID0gMDsgbGVuIDw9IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgY291bnRbbGVuXSA9IDA7XG4gIH1cbiAgZm9yIChzeW0gPSAwOyBzeW0gPCBjb2Rlczsgc3ltKyspIHtcbiAgICBjb3VudFtsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrO1xuICB9XG5cbiAgLyogYm91bmQgY29kZSBsZW5ndGhzLCBmb3JjZSByb290IHRvIGJlIHdpdGhpbiBjb2RlIGxlbmd0aHMgKi9cbiAgcm9vdCA9IGJpdHM7XG4gIGZvciAobWF4ID0gTUFYQklUUzsgbWF4ID49IDE7IG1heC0tKSB7XG4gICAgaWYgKGNvdW50W21heF0gIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAocm9vdCA+IG1heCkge1xuICAgIHJvb3QgPSBtYXg7XG4gIH1cbiAgaWYgKG1heCA9PT0gMCkgeyAvKiBubyBzeW1ib2xzIHRvIGNvZGUgYXQgYWxsICovXG4gICAgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0OyAgLy9oZXJlLm9wID0gKHZhciBjaGFyKTY0OyAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXG4gICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTsgICAvL2hlcmUuYml0cyA9ICh2YXIgY2hhcikxO1xuICAgIC8vdGFibGUudmFsW29wdHMudGFibGVfaW5kZXgrK10gPSAwOyAgIC8vaGVyZS52YWwgPSAodmFyIHNob3J0KTA7XG4gICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAoMSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwgMDtcblxuXG4gICAgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0O1xuICAgIC8vdGFibGUuYml0c1tvcHRzLnRhYmxlX2luZGV4XSA9IDE7XG4gICAgLy90YWJsZS52YWxbb3B0cy50YWJsZV9pbmRleCsrXSA9IDA7XG4gICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAoMSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwgMDtcblxuICAgIG9wdHMuYml0cyA9IDE7XG4gICAgcmV0dXJuIDA7IC8qIG5vIHN5bWJvbHMsIGJ1dCB3YWl0IGZvciBkZWNvZGluZyB0byByZXBvcnQgZXJyb3IgKi9cbiAgfVxuICBmb3IgKG1pbiA9IDE7IG1pbiA8IG1heDsgbWluKyspIHtcbiAgICBpZiAoY291bnRbbWluXSAhPT0gMCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChyb290IDwgbWluKSB7XG4gICAgcm9vdCA9IG1pbjtcbiAgfVxuXG4gIC8qIGNoZWNrIGZvciBhbiBvdmVyLXN1YnNjcmliZWQgb3IgaW5jb21wbGV0ZSBzZXQgb2YgbGVuZ3RocyAqL1xuICBsZWZ0ID0gMTtcbiAgZm9yIChsZW4gPSAxOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHtcbiAgICBsZWZ0IDw8PSAxO1xuICAgIGxlZnQgLT0gY291bnRbbGVuXTtcbiAgICBpZiAobGVmdCA8IDApIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IC8qIG92ZXItc3Vic2NyaWJlZCAqL1xuICB9XG4gIGlmIChsZWZ0ID4gMCAmJiAodHlwZSA9PT0gQ09ERVMgfHwgbWF4ICE9PSAxKSkge1xuICAgIHJldHVybiAtMTsgLyogaW5jb21wbGV0ZSBzZXQgKi9cbiAgfVxuXG4gIC8qIGdlbmVyYXRlIG9mZnNldHMgaW50byBzeW1ib2wgdGFibGUgZm9yIGVhY2ggbGVuZ3RoIGZvciBzb3J0aW5nICovXG4gIG9mZnNbMV0gPSAwO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgb2Zmc1tsZW4gKyAxXSA9IG9mZnNbbGVuXSArIGNvdW50W2xlbl07XG4gIH1cblxuICAvKiBzb3J0IHN5bWJvbHMgYnkgbGVuZ3RoLCBieSBzeW1ib2wgb3JkZXIgd2l0aGluIGVhY2ggbGVuZ3RoICovXG4gIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG4gICAgaWYgKGxlbnNbbGVuc19pbmRleCArIHN5bV0gIT09IDApIHtcbiAgICAgIHdvcmtbb2Zmc1tsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrXSA9IHN5bTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgQ3JlYXRlIGFuZCBmaWxsIGluIGRlY29kaW5nIHRhYmxlcy4gIEluIHRoaXMgbG9vcCwgdGhlIHRhYmxlIGJlaW5nXG4gICBmaWxsZWQgaXMgYXQgbmV4dCBhbmQgaGFzIGN1cnIgaW5kZXggYml0cy4gIFRoZSBjb2RlIGJlaW5nIHVzZWQgaXMgaHVmZlxuICAgd2l0aCBsZW5ndGggbGVuLiAgVGhhdCBjb2RlIGlzIGNvbnZlcnRlZCB0byBhbiBpbmRleCBieSBkcm9wcGluZyBkcm9wXG4gICBiaXRzIG9mZiBvZiB0aGUgYm90dG9tLiAgRm9yIGNvZGVzIHdoZXJlIGxlbiBpcyBsZXNzIHRoYW4gZHJvcCArIGN1cnIsXG4gICB0aG9zZSB0b3AgZHJvcCArIGN1cnIgLSBsZW4gYml0cyBhcmUgaW5jcmVtZW50ZWQgdGhyb3VnaCBhbGwgdmFsdWVzIHRvXG4gICBmaWxsIHRoZSB0YWJsZSB3aXRoIHJlcGxpY2F0ZWQgZW50cmllcy5cblxuICAgcm9vdCBpcyB0aGUgbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHRoZSByb290IHRhYmxlLiAgV2hlbiBsZW4gZXhjZWVkc1xuICAgcm9vdCwgc3ViLXRhYmxlcyBhcmUgY3JlYXRlZCBwb2ludGVkIHRvIGJ5IHRoZSByb290IGVudHJ5IHdpdGggYW4gaW5kZXhcbiAgIG9mIHRoZSBsb3cgcm9vdCBiaXRzIG9mIGh1ZmYuICBUaGlzIGlzIHNhdmVkIGluIGxvdyB0byBjaGVjayBmb3Igd2hlbiBhXG4gICBuZXcgc3ViLXRhYmxlIHNob3VsZCBiZSBzdGFydGVkLiAgZHJvcCBpcyB6ZXJvIHdoZW4gdGhlIHJvb3QgdGFibGUgaXNcbiAgIGJlaW5nIGZpbGxlZCwgYW5kIGRyb3AgaXMgcm9vdCB3aGVuIHN1Yi10YWJsZXMgYXJlIGJlaW5nIGZpbGxlZC5cblxuICAgV2hlbiBhIG5ldyBzdWItdGFibGUgaXMgbmVlZGVkLCBpdCBpcyBuZWNlc3NhcnkgdG8gbG9vayBhaGVhZCBpbiB0aGVcbiAgIGNvZGUgbGVuZ3RocyB0byBkZXRlcm1pbmUgd2hhdCBzaXplIHN1Yi10YWJsZSBpcyBuZWVkZWQuICBUaGUgbGVuZ3RoXG4gICBjb3VudHMgYXJlIHVzZWQgZm9yIHRoaXMsIGFuZCBzbyBjb3VudFtdIGlzIGRlY3JlbWVudGVkIGFzIGNvZGVzIGFyZVxuICAgZW50ZXJlZCBpbiB0aGUgdGFibGVzLlxuXG4gICB1c2VkIGtlZXBzIHRyYWNrIG9mIGhvdyBtYW55IHRhYmxlIGVudHJpZXMgaGF2ZSBiZWVuIGFsbG9jYXRlZCBmcm9tIHRoZVxuICAgcHJvdmlkZWQgKnRhYmxlIHNwYWNlLiAgSXQgaXMgY2hlY2tlZCBmb3IgTEVOUyBhbmQgRElTVCB0YWJsZXMgYWdhaW5zdFxuICAgdGhlIGNvbnN0YW50cyBFTk9VR0hfTEVOUyBhbmQgRU5PVUdIX0RJU1RTIHRvIGd1YXJkIGFnYWluc3QgY2hhbmdlcyBpblxuICAgdGhlIGluaXRpYWwgcm9vdCB0YWJsZSBzaXplIGNvbnN0YW50cy4gIFNlZSB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiAgIHN5bSBpbmNyZW1lbnRzIHRocm91Z2ggYWxsIHN5bWJvbHMsIGFuZCB0aGUgbG9vcCB0ZXJtaW5hdGVzIHdoZW5cbiAgIGFsbCBjb2RlcyBvZiBsZW5ndGggbWF4LCBpLmUuIGFsbCBjb2RlcywgaGF2ZSBiZWVuIHByb2Nlc3NlZC4gIFRoaXNcbiAgIHJvdXRpbmUgcGVybWl0cyBpbmNvbXBsZXRlIGNvZGVzLCBzbyBhbm90aGVyIGxvb3AgYWZ0ZXIgdGhpcyBvbmUgZmlsbHNcbiAgIGluIHRoZSByZXN0IG9mIHRoZSBkZWNvZGluZyB0YWJsZXMgd2l0aCBpbnZhbGlkIGNvZGUgbWFya2Vycy5cbiAgICovXG5cbiAgLyogc2V0IHVwIGZvciBjb2RlIHR5cGUgKi9cbiAgLy8gcG9vciBtYW4gb3B0aW1pemF0aW9uIC0gdXNlIGlmLWVsc2UgaW5zdGVhZCBvZiBzd2l0Y2gsXG4gIC8vIHRvIGF2b2lkIGRlb3B0cyBpbiBvbGQgdjhcbiAgaWYgKHR5cGUgPT09IENPREVTKSB7XG4gICAgYmFzZSA9IGV4dHJhID0gd29yazsgLyogZHVtbXkgdmFsdWUtLW5vdCB1c2VkICovXG4gICAgZW5kID0gMTk7XG5cbiAgfSBlbHNlIGlmICh0eXBlID09PSBMRU5TKSB7XG4gICAgYmFzZSA9IGxiYXNlO1xuICAgIGJhc2VfaW5kZXggLT0gMjU3O1xuICAgIGV4dHJhID0gbGV4dDtcbiAgICBleHRyYV9pbmRleCAtPSAyNTc7XG4gICAgZW5kID0gMjU2O1xuXG4gIH0gZWxzZSB7IC8qIERJU1RTICovXG4gICAgYmFzZSA9IGRiYXNlO1xuICAgIGV4dHJhID0gZGV4dDtcbiAgICBlbmQgPSAtMTtcbiAgfVxuXG4gIC8qIGluaXRpYWxpemUgb3B0cyBmb3IgbG9vcCAqL1xuICBodWZmID0gMDsgLyogc3RhcnRpbmcgY29kZSAqL1xuICBzeW0gPSAwOyAvKiBzdGFydGluZyBjb2RlIHN5bWJvbCAqL1xuICBsZW4gPSBtaW47IC8qIHN0YXJ0aW5nIGNvZGUgbGVuZ3RoICovXG4gIG5leHQgPSB0YWJsZV9pbmRleDsgLyogY3VycmVudCB0YWJsZSB0byBmaWxsIGluICovXG4gIGN1cnIgPSByb290OyAvKiBjdXJyZW50IHRhYmxlIGluZGV4IGJpdHMgKi9cbiAgZHJvcCA9IDA7IC8qIGN1cnJlbnQgYml0cyB0byBkcm9wIGZyb20gY29kZSBmb3IgaW5kZXggKi9cbiAgbG93ID0gLTE7IC8qIHRyaWdnZXIgbmV3IHN1Yi10YWJsZSB3aGVuIGxlbiA+IHJvb3QgKi9cbiAgdXNlZCA9IDEgPDwgcm9vdDsgLyogdXNlIHJvb3QgdGFibGUgZW50cmllcyAqL1xuICBtYXNrID0gdXNlZCAtIDE7IC8qIG1hc2sgZm9yIGNvbXBhcmluZyBsb3cgKi9cblxuICAvKiBjaGVjayBhdmFpbGFibGUgdGFibGUgc3BhY2UgKi9cbiAgaWYgKCh0eXBlID09PSBMRU5TICYmIHVzZWQgPiBFTk9VR0hfTEVOUykgfHxcbiAgICAodHlwZSA9PT0gRElTVFMgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUykpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHZhciBpID0gMDtcbiAgLyogcHJvY2VzcyBhbGwgY29kZXMgYW5kIG1ha2UgdGFibGUgZW50cmllcyAqL1xuICBmb3IgKDs7KSB7XG4gICAgaSsrO1xuICAgIC8qIGNyZWF0ZSB0YWJsZSBlbnRyeSAqL1xuICAgIGhlcmVfYml0cyA9IGxlbiAtIGRyb3A7XG4gICAgaWYgKHdvcmtbc3ltXSA8IGVuZCkge1xuICAgICAgaGVyZV9vcCA9IDA7XG4gICAgICBoZXJlX3ZhbCA9IHdvcmtbc3ltXTtcbiAgICB9IGVsc2UgaWYgKHdvcmtbc3ltXSA+IGVuZCkge1xuICAgICAgaGVyZV9vcCA9IGV4dHJhW2V4dHJhX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICAgIGhlcmVfdmFsID0gYmFzZVtiYXNlX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVyZV9vcCA9IDMyICsgNjQ7IC8qIGVuZCBvZiBibG9jayAqL1xuICAgICAgaGVyZV92YWwgPSAwO1xuICAgIH1cblxuICAgIC8qIHJlcGxpY2F0ZSBmb3IgdGhvc2UgaW5kaWNlcyB3aXRoIGxvdyBsZW4gYml0cyBlcXVhbCB0byBodWZmICovXG4gICAgaW5jciA9IDEgPDwgKGxlbiAtIGRyb3ApO1xuICAgIGZpbGwgPSAxIDw8IGN1cnI7XG4gICAgbWluID0gZmlsbDsgLyogc2F2ZSBvZmZzZXQgdG8gbmV4dCB0YWJsZSAqL1xuICAgIGRvIHtcbiAgICAgIGZpbGwgLT0gaW5jcjtcbiAgICAgIHRhYmxlW25leHQgKyAoaHVmZiA+PiBkcm9wKSArIGZpbGxdID0gKGhlcmVfYml0cyA8PCAyNCkgfCAoaGVyZV9vcCA8PCAxNikgfCBoZXJlX3ZhbCB8IDA7XG4gICAgfSB3aGlsZSAoZmlsbCAhPT0gMCk7XG5cbiAgICAvKiBiYWNrd2FyZHMgaW5jcmVtZW50IHRoZSBsZW4tYml0IGNvZGUgaHVmZiAqL1xuICAgIGluY3IgPSAxIDw8IChsZW4gLSAxKTtcbiAgICB3aGlsZSAoaHVmZiAmIGluY3IpIHtcbiAgICAgIGluY3IgPj49IDE7XG4gICAgfVxuICAgIGlmIChpbmNyICE9PSAwKSB7XG4gICAgICBodWZmICY9IGluY3IgLSAxO1xuICAgICAgaHVmZiArPSBpbmNyO1xuICAgIH0gZWxzZSB7XG4gICAgICBodWZmID0gMDtcbiAgICB9XG5cbiAgICAvKiBnbyB0byBuZXh0IHN5bWJvbCwgdXBkYXRlIGNvdW50LCBsZW4gKi9cbiAgICBzeW0rKztcbiAgICBpZiAoLS1jb3VudFtsZW5dID09PSAwKSB7XG4gICAgICBpZiAobGVuID09PSBtYXgpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBsZW4gPSBsZW5zW2xlbnNfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgIH1cblxuICAgIC8qIGNyZWF0ZSBuZXcgc3ViLXRhYmxlIGlmIG5lZWRlZCAqL1xuICAgIGlmIChsZW4gPiByb290ICYmIChodWZmICYgbWFzaykgIT09IGxvdykge1xuICAgICAgLyogaWYgZmlyc3QgdGltZSwgdHJhbnNpdGlvbiB0byBzdWItdGFibGVzICovXG4gICAgICBpZiAoZHJvcCA9PT0gMCkge1xuICAgICAgICBkcm9wID0gcm9vdDtcbiAgICAgIH1cblxuICAgICAgLyogaW5jcmVtZW50IHBhc3QgbGFzdCB0YWJsZSAqL1xuICAgICAgbmV4dCArPSBtaW47IC8qIGhlcmUgbWluIGlzIDEgPDwgY3VyciAqL1xuXG4gICAgICAvKiBkZXRlcm1pbmUgbGVuZ3RoIG9mIG5leHQgdGFibGUgKi9cbiAgICAgIGN1cnIgPSBsZW4gLSBkcm9wO1xuICAgICAgbGVmdCA9IDEgPDwgY3VycjtcbiAgICAgIHdoaWxlIChjdXJyICsgZHJvcCA8IG1heCkge1xuICAgICAgICBsZWZ0IC09IGNvdW50W2N1cnIgKyBkcm9wXTtcbiAgICAgICAgaWYgKGxlZnQgPD0gMCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGN1cnIrKztcbiAgICAgICAgbGVmdCA8PD0gMTtcbiAgICAgIH1cblxuICAgICAgLyogY2hlY2sgZm9yIGVub3VnaCBzcGFjZSAqL1xuICAgICAgdXNlZCArPSAxIDw8IGN1cnI7XG4gICAgICBpZiAoKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TKSB8fFxuICAgICAgICAodHlwZSA9PT0gRElTVFMgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUykpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIC8qIHBvaW50IGVudHJ5IGluIHJvb3QgdGFibGUgdG8gc3ViLXRhYmxlICovXG4gICAgICBsb3cgPSBodWZmICYgbWFzaztcbiAgICAgIC8qdGFibGUub3BbbG93XSA9IGN1cnI7XG4gICAgICB0YWJsZS5iaXRzW2xvd10gPSByb290O1xuICAgICAgdGFibGUudmFsW2xvd10gPSBuZXh0IC0gb3B0cy50YWJsZV9pbmRleDsqL1xuICAgICAgdGFibGVbbG93XSA9IChyb290IDw8IDI0KSB8IChjdXJyIDw8IDE2KSB8IChuZXh0IC0gdGFibGVfaW5kZXgpIHwgMDtcbiAgICB9XG4gIH1cblxuICAvKiBmaWxsIGluIHJlbWFpbmluZyB0YWJsZSBlbnRyeSBpZiBjb2RlIGlzIGluY29tcGxldGUgKGd1YXJhbnRlZWQgdG8gaGF2ZVxuICAgYXQgbW9zdCBvbmUgcmVtYWluaW5nIGVudHJ5LCBzaW5jZSBpZiB0aGUgY29kZSBpcyBpbmNvbXBsZXRlLCB0aGVcbiAgIG1heGltdW0gY29kZSBsZW5ndGggdGhhdCB3YXMgYWxsb3dlZCB0byBnZXQgdGhpcyBmYXIgaXMgb25lIGJpdCkgKi9cbiAgaWYgKGh1ZmYgIT09IDApIHtcbiAgICAvL3RhYmxlLm9wW25leHQgKyBodWZmXSA9IDY0OyAgICAgICAgICAgIC8qIGludmFsaWQgY29kZSBtYXJrZXIgKi9cbiAgICAvL3RhYmxlLmJpdHNbbmV4dCArIGh1ZmZdID0gbGVuIC0gZHJvcDtcbiAgICAvL3RhYmxlLnZhbFtuZXh0ICsgaHVmZl0gPSAwO1xuICAgIHRhYmxlW25leHQgKyBodWZmXSA9ICgobGVuIC0gZHJvcCkgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7XG4gIH1cblxuICAvKiBzZXQgcmV0dXJuIHBhcmFtZXRlcnMgKi9cbiAgLy9vcHRzLnRhYmxlX2luZGV4ICs9IHVzZWQ7XG4gIG9wdHMuYml0cyA9IHJvb3Q7XG4gIHJldHVybiAwO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtCdWY4LEJ1ZjE2LEJ1ZjMyLGFycmF5U2V0fSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBhZGxlcjMyIGZyb20gJy4vYWRsZXIzMic7XG5pbXBvcnQgY3JjMzIgZnJvbSAnLi9jcmMzMic7XG5pbXBvcnQgaW5mbGF0ZV9mYXN0IGZyb20gJy4vaW5mZmFzdCc7XG5pbXBvcnQgaW5mbGF0ZV90YWJsZSBmcm9tICcuL2luZnRyZWVzJztcblxudmFyIENPREVTID0gMDtcbnZhciBMRU5TID0gMTtcbnZhciBESVNUUyA9IDI7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbi8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbi8vdmFyIFpfTk9fRkxVU0ggICAgICA9IDA7XG4vL3ZhciBaX1BBUlRJQUxfRkxVU0ggPSAxO1xuLy92YXIgWl9TWU5DX0ZMVVNIICAgID0gMjtcbi8vdmFyIFpfRlVMTF9GTFVTSCAgICA9IDM7XG52YXIgWl9GSU5JU0ggPSA0O1xudmFyIFpfQkxPQ0sgPSA1O1xudmFyIFpfVFJFRVMgPSA2O1xuXG5cbi8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcbiAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy5cbiAqL1xudmFyIFpfT0sgPSAwO1xudmFyIFpfU1RSRUFNX0VORCA9IDE7XG52YXIgWl9ORUVEX0RJQ1QgPSAyO1xuLy92YXIgWl9FUlJOTyAgICAgICAgID0gLTE7XG52YXIgWl9TVFJFQU1fRVJST1IgPSAtMjtcbnZhciBaX0RBVEFfRVJST1IgPSAtMztcbnZhciBaX01FTV9FUlJPUiA9IC00O1xudmFyIFpfQlVGX0VSUk9SID0gLTU7XG4vL3ZhciBaX1ZFUlNJT05fRVJST1IgPSAtNjtcblxuLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXG52YXIgWl9ERUZMQVRFRCA9IDg7XG5cblxuLyogU1RBVEVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxudmFyIEhFQUQgPSAxOyAvKiBpOiB3YWl0aW5nIGZvciBtYWdpYyBoZWFkZXIgKi9cbnZhciBGTEFHUyA9IDI7IC8qIGk6IHdhaXRpbmcgZm9yIG1ldGhvZCBhbmQgZmxhZ3MgKGd6aXApICovXG52YXIgVElNRSA9IDM7IC8qIGk6IHdhaXRpbmcgZm9yIG1vZGlmaWNhdGlvbiB0aW1lIChnemlwKSAqL1xudmFyIE9TID0gNDsgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgZmxhZ3MgYW5kIG9wZXJhdGluZyBzeXN0ZW0gKGd6aXApICovXG52YXIgRVhMRU4gPSA1OyAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBsZW5ndGggKGd6aXApICovXG52YXIgRVhUUkEgPSA2OyAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBieXRlcyAoZ3ppcCkgKi9cbnZhciBOQU1FID0gNzsgLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGZpbGUgbmFtZSAoZ3ppcCkgKi9cbnZhciBDT01NRU5UID0gODsgLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGNvbW1lbnQgKGd6aXApICovXG52YXIgSENSQyA9IDk7IC8qIGk6IHdhaXRpbmcgZm9yIGhlYWRlciBjcmMgKGd6aXApICovXG52YXIgRElDVElEID0gMTA7IC8qIGk6IHdhaXRpbmcgZm9yIGRpY3Rpb25hcnkgY2hlY2sgdmFsdWUgKi9cbnZhciBESUNUID0gMTE7IC8qIHdhaXRpbmcgZm9yIGluZmxhdGVTZXREaWN0aW9uYXJ5KCkgY2FsbCAqL1xudmFyIFRZUEUgPSAxMjsgLyogaTogd2FpdGluZyBmb3IgdHlwZSBiaXRzLCBpbmNsdWRpbmcgbGFzdC1mbGFnIGJpdCAqL1xudmFyIFRZUEVETyA9IDEzOyAvKiBpOiBzYW1lLCBidXQgc2tpcCBjaGVjayB0byBleGl0IGluZmxhdGUgb24gbmV3IGJsb2NrICovXG52YXIgU1RPUkVEID0gMTQ7IC8qIGk6IHdhaXRpbmcgZm9yIHN0b3JlZCBzaXplIChsZW5ndGggYW5kIGNvbXBsZW1lbnQpICovXG52YXIgQ09QWV8gPSAxNTsgLyogaS9vOiBzYW1lIGFzIENPUFkgYmVsb3csIGJ1dCBvbmx5IGZpcnN0IHRpbWUgaW4gKi9cbnZhciBDT1BZID0gMTY7IC8qIGkvbzogd2FpdGluZyBmb3IgaW5wdXQgb3Igb3V0cHV0IHRvIGNvcHkgc3RvcmVkIGJsb2NrICovXG52YXIgVEFCTEUgPSAxNzsgLyogaTogd2FpdGluZyBmb3IgZHluYW1pYyBibG9jayB0YWJsZSBsZW5ndGhzICovXG52YXIgTEVOTEVOUyA9IDE4OyAvKiBpOiB3YWl0aW5nIGZvciBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbnZhciBDT0RFTEVOUyA9IDE5OyAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGgvbGl0IGFuZCBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi9cbnZhciBMRU5fID0gMjA7IC8qIGk6IHNhbWUgYXMgTEVOIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovXG52YXIgTEVOID0gMjE7IC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aC9saXQvZW9iIGNvZGUgKi9cbnZhciBMRU5FWFQgPSAyMjsgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoIGV4dHJhIGJpdHMgKi9cbnZhciBESVNUID0gMjM7IC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGNvZGUgKi9cbnZhciBESVNURVhUID0gMjQ7IC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGV4dHJhIGJpdHMgKi9cbnZhciBNQVRDSCA9IDI1OyAvKiBvOiB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2UgdG8gY29weSBzdHJpbmcgKi9cbnZhciBMSVQgPSAyNjsgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIHdyaXRlIGxpdGVyYWwgKi9cbnZhciBDSEVDSyA9IDI3OyAvKiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgY2hlY2sgdmFsdWUgKi9cbnZhciBMRU5HVEggPSAyODsgLyogaTogd2FpdGluZyBmb3IgMzItYml0IGxlbmd0aCAoZ3ppcCkgKi9cbnZhciBET05FID0gMjk7IC8qIGZpbmlzaGVkIGNoZWNrLCBkb25lIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG52YXIgQkFEID0gMzA7IC8qIGdvdCBhIGRhdGEgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cbnZhciBNRU0gPSAzMTsgLyogZ290IGFuIGluZmxhdGUoKSBtZW1vcnkgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cbnZhciBTWU5DID0gMzI7IC8qIGxvb2tpbmcgZm9yIHN5bmNocm9uaXphdGlvbiBieXRlcyB0byByZXN0YXJ0IGluZmxhdGUoKSAqL1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cblxudmFyIEVOT1VHSF9MRU5TID0gODUyO1xudmFyIEVOT1VHSF9ESVNUUyA9IDU5Mjtcbi8vdmFyIEVOT1VHSCA9ICAoRU5PVUdIX0xFTlMrRU5PVUdIX0RJU1RTKTtcblxudmFyIE1BWF9XQklUUyA9IDE1O1xuLyogMzJLIExaNzcgd2luZG93ICovXG52YXIgREVGX1dCSVRTID0gTUFYX1dCSVRTO1xuXG5cbmZ1bmN0aW9uIHpzd2FwMzIocSkge1xuICByZXR1cm4gKCgocSA+Pj4gMjQpICYgMHhmZikgK1xuICAgICgocSA+Pj4gOCkgJiAweGZmMDApICtcbiAgICAoKHEgJiAweGZmMDApIDw8IDgpICtcbiAgICAoKHEgJiAweGZmKSA8PCAyNCkpO1xufVxuXG5cbmZ1bmN0aW9uIEluZmxhdGVTdGF0ZSgpIHtcbiAgdGhpcy5tb2RlID0gMDsgLyogY3VycmVudCBpbmZsYXRlIG1vZGUgKi9cbiAgdGhpcy5sYXN0ID0gZmFsc2U7IC8qIHRydWUgaWYgcHJvY2Vzc2luZyBsYXN0IGJsb2NrICovXG4gIHRoaXMud3JhcCA9IDA7IC8qIGJpdCAwIHRydWUgZm9yIHpsaWIsIGJpdCAxIHRydWUgZm9yIGd6aXAgKi9cbiAgdGhpcy5oYXZlZGljdCA9IGZhbHNlOyAvKiB0cnVlIGlmIGRpY3Rpb25hcnkgcHJvdmlkZWQgKi9cbiAgdGhpcy5mbGFncyA9IDA7IC8qIGd6aXAgaGVhZGVyIG1ldGhvZCBhbmQgZmxhZ3MgKDAgaWYgemxpYikgKi9cbiAgdGhpcy5kbWF4ID0gMDsgLyogemxpYiBoZWFkZXIgbWF4IGRpc3RhbmNlIChJTkZMQVRFX1NUUklDVCkgKi9cbiAgdGhpcy5jaGVjayA9IDA7IC8qIHByb3RlY3RlZCBjb3B5IG9mIGNoZWNrIHZhbHVlICovXG4gIHRoaXMudG90YWwgPSAwOyAvKiBwcm90ZWN0ZWQgY29weSBvZiBvdXRwdXQgY291bnQgKi9cbiAgLy8gVE9ETzogbWF5IGJlIHt9XG4gIHRoaXMuaGVhZCA9IG51bGw7IC8qIHdoZXJlIHRvIHNhdmUgZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gKi9cblxuICAvKiBzbGlkaW5nIHdpbmRvdyAqL1xuICB0aGlzLndiaXRzID0gMDsgLyogbG9nIGJhc2UgMiBvZiByZXF1ZXN0ZWQgd2luZG93IHNpemUgKi9cbiAgdGhpcy53c2l6ZSA9IDA7IC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuICB0aGlzLndoYXZlID0gMDsgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xuICB0aGlzLnduZXh0ID0gMDsgLyogd2luZG93IHdyaXRlIGluZGV4ICovXG4gIHRoaXMud2luZG93ID0gbnVsbDsgLyogYWxsb2NhdGVkIHNsaWRpbmcgd2luZG93LCBpZiBuZWVkZWQgKi9cblxuICAvKiBiaXQgYWNjdW11bGF0b3IgKi9cbiAgdGhpcy5ob2xkID0gMDsgLyogaW5wdXQgYml0IGFjY3VtdWxhdG9yICovXG4gIHRoaXMuYml0cyA9IDA7IC8qIG51bWJlciBvZiBiaXRzIGluIFwiaW5cIiAqL1xuXG4gIC8qIGZvciBzdHJpbmcgYW5kIHN0b3JlZCBibG9jayBjb3B5aW5nICovXG4gIHRoaXMubGVuZ3RoID0gMDsgLyogbGl0ZXJhbCBvciBsZW5ndGggb2YgZGF0YSB0byBjb3B5ICovXG4gIHRoaXMub2Zmc2V0ID0gMDsgLyogZGlzdGFuY2UgYmFjayB0byBjb3B5IHN0cmluZyBmcm9tICovXG5cbiAgLyogZm9yIHRhYmxlIGFuZCBjb2RlIGRlY29kaW5nICovXG4gIHRoaXMuZXh0cmEgPSAwOyAvKiBleHRyYSBiaXRzIG5lZWRlZCAqL1xuXG4gIC8qIGZpeGVkIGFuZCBkeW5hbWljIGNvZGUgdGFibGVzICovXG4gIHRoaXMubGVuY29kZSA9IG51bGw7IC8qIHN0YXJ0aW5nIHRhYmxlIGZvciBsZW5ndGgvbGl0ZXJhbCBjb2RlcyAqL1xuICB0aGlzLmRpc3Rjb2RlID0gbnVsbDsgLyogc3RhcnRpbmcgdGFibGUgZm9yIGRpc3RhbmNlIGNvZGVzICovXG4gIHRoaXMubGVuYml0cyA9IDA7IC8qIGluZGV4IGJpdHMgZm9yIGxlbmNvZGUgKi9cbiAgdGhpcy5kaXN0Yml0cyA9IDA7IC8qIGluZGV4IGJpdHMgZm9yIGRpc3Rjb2RlICovXG5cbiAgLyogZHluYW1pYyB0YWJsZSBidWlsZGluZyAqL1xuICB0aGlzLm5jb2RlID0gMDsgLyogbnVtYmVyIG9mIGNvZGUgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLm5sZW4gPSAwOyAvKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLm5kaXN0ID0gMDsgLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLmhhdmUgPSAwOyAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGhzIGluIGxlbnNbXSAqL1xuICB0aGlzLm5leHQgPSBudWxsOyAvKiBuZXh0IGF2YWlsYWJsZSBzcGFjZSBpbiBjb2Rlc1tdICovXG5cbiAgdGhpcy5sZW5zID0gbmV3IEJ1ZjE2KDMyMCk7IC8qIHRlbXBvcmFyeSBzdG9yYWdlIGZvciBjb2RlIGxlbmd0aHMgKi9cbiAgdGhpcy53b3JrID0gbmV3IEJ1ZjE2KDI4OCk7IC8qIHdvcmsgYXJlYSBmb3IgY29kZSB0YWJsZSBidWlsZGluZyAqL1xuXG4gIC8qXG4gICBiZWNhdXNlIHdlIGRvbid0IGhhdmUgcG9pbnRlcnMgaW4ganMsIHdlIHVzZSBsZW5jb2RlIGFuZCBkaXN0Y29kZSBkaXJlY3RseVxuICAgYXMgYnVmZmVycyBzbyB3ZSBkb24ndCBuZWVkIGNvZGVzXG4gICovXG4gIC8vdGhpcy5jb2RlcyA9IG5ldyBCdWYzMihFTk9VR0gpOyAgICAgICAvKiBzcGFjZSBmb3IgY29kZSB0YWJsZXMgKi9cbiAgdGhpcy5sZW5keW4gPSBudWxsOyAvKiBkeW5hbWljIHRhYmxlIGZvciBsZW5ndGgvbGl0ZXJhbCBjb2RlcyAoSlMgc3BlY2lmaWMpICovXG4gIHRoaXMuZGlzdGR5biA9IG51bGw7IC8qIGR5bmFtaWMgdGFibGUgZm9yIGRpc3RhbmNlIGNvZGVzIChKUyBzcGVjaWZpYykgKi9cbiAgdGhpcy5zYW5lID0gMDsgLyogaWYgZmFsc2UsIGFsbG93IGludmFsaWQgZGlzdGFuY2UgdG9vIGZhciAqL1xuICB0aGlzLmJhY2sgPSAwOyAvKiBiaXRzIGJhY2sgb2YgbGFzdCB1bnByb2Nlc3NlZCBsZW5ndGgvbGl0ICovXG4gIHRoaXMud2FzID0gMDsgLyogaW5pdGlhbCBsZW5ndGggb2YgbWF0Y2ggKi9cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZmxhdGVSZXNldEtlZXAoc3RybSkge1xuICB2YXIgc3RhdGU7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgc3RybS50b3RhbF9pbiA9IHN0cm0udG90YWxfb3V0ID0gc3RhdGUudG90YWwgPSAwO1xuICBzdHJtLm1zZyA9ICcnOyAvKlpfTlVMTCovXG4gIGlmIChzdGF0ZS53cmFwKSB7IC8qIHRvIHN1cHBvcnQgaWxsLWNvbmNlaXZlZCBKYXZhIHRlc3Qgc3VpdGUgKi9cbiAgICBzdHJtLmFkbGVyID0gc3RhdGUud3JhcCAmIDE7XG4gIH1cbiAgc3RhdGUubW9kZSA9IEhFQUQ7XG4gIHN0YXRlLmxhc3QgPSAwO1xuICBzdGF0ZS5oYXZlZGljdCA9IDA7XG4gIHN0YXRlLmRtYXggPSAzMjc2ODtcbiAgc3RhdGUuaGVhZCA9IG51bGwgLypaX05VTEwqLyA7XG4gIHN0YXRlLmhvbGQgPSAwO1xuICBzdGF0ZS5iaXRzID0gMDtcbiAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG4gIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW4gPSBuZXcgQnVmMzIoRU5PVUdIX0xFTlMpO1xuICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLmRpc3RkeW4gPSBuZXcgQnVmMzIoRU5PVUdIX0RJU1RTKTtcblxuICBzdGF0ZS5zYW5lID0gMTtcbiAgc3RhdGUuYmFjayA9IC0xO1xuICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6IHJlc2V0XFxuXCIpKTtcbiAgcmV0dXJuIFpfT0s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmZsYXRlUmVzZXQoc3RybSkge1xuICB2YXIgc3RhdGU7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgc3RhdGUud3NpemUgPSAwO1xuICBzdGF0ZS53aGF2ZSA9IDA7XG4gIHN0YXRlLnduZXh0ID0gMDtcbiAgcmV0dXJuIGluZmxhdGVSZXNldEtlZXAoc3RybSk7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZmxhdGVSZXNldDIoc3RybSwgd2luZG93Qml0cykge1xuICB2YXIgd3JhcDtcbiAgdmFyIHN0YXRlO1xuXG4gIC8qIGdldCB0aGUgc3RhdGUgKi9cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICAvKiBleHRyYWN0IHdyYXAgcmVxdWVzdCBmcm9tIHdpbmRvd0JpdHMgcGFyYW1ldGVyICovXG4gIGlmICh3aW5kb3dCaXRzIDwgMCkge1xuICAgIHdyYXAgPSAwO1xuICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcbiAgfSBlbHNlIHtcbiAgICB3cmFwID0gKHdpbmRvd0JpdHMgPj4gNCkgKyAxO1xuICAgIGlmICh3aW5kb3dCaXRzIDwgNDgpIHtcbiAgICAgIHdpbmRvd0JpdHMgJj0gMTU7XG4gICAgfVxuICB9XG5cbiAgLyogc2V0IG51bWJlciBvZiB3aW5kb3cgYml0cywgZnJlZSB3aW5kb3cgaWYgZGlmZmVyZW50ICovXG4gIGlmICh3aW5kb3dCaXRzICYmICh3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUpKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG4gIGlmIChzdGF0ZS53aW5kb3cgIT09IG51bGwgJiYgc3RhdGUud2JpdHMgIT09IHdpbmRvd0JpdHMpIHtcbiAgICBzdGF0ZS53aW5kb3cgPSBudWxsO1xuICB9XG5cbiAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXNldCB0aGUgcmVzdCBvZiBpdCAqL1xuICBzdGF0ZS53cmFwID0gd3JhcDtcbiAgc3RhdGUud2JpdHMgPSB3aW5kb3dCaXRzO1xuICByZXR1cm4gaW5mbGF0ZVJlc2V0KHN0cm0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5mbGF0ZUluaXQyKHN0cm0sIHdpbmRvd0JpdHMpIHtcbiAgdmFyIHJldDtcbiAgdmFyIHN0YXRlO1xuXG4gIGlmICghc3RybSkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuICAvL3N0cm0ubXNnID0gWl9OVUxMOyAgICAgICAgICAgICAgICAgLyogaW4gY2FzZSB3ZSByZXR1cm4gYW4gZXJyb3IgKi9cblxuICBzdGF0ZSA9IG5ldyBJbmZsYXRlU3RhdGUoKTtcblxuICAvL2lmIChzdGF0ZSA9PT0gWl9OVUxMKSByZXR1cm4gWl9NRU1fRVJST1I7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogYWxsb2NhdGVkXFxuXCIpKTtcbiAgc3RybS5zdGF0ZSA9IHN0YXRlO1xuICBzdGF0ZS53aW5kb3cgPSBudWxsIC8qWl9OVUxMKi8gO1xuICByZXQgPSBpbmZsYXRlUmVzZXQyKHN0cm0sIHdpbmRvd0JpdHMpO1xuICBpZiAocmV0ICE9PSBaX09LKSB7XG4gICAgc3RybS5zdGF0ZSA9IG51bGwgLypaX05VTEwqLyA7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZmxhdGVJbml0KHN0cm0pIHtcbiAgcmV0dXJuIGluZmxhdGVJbml0MihzdHJtLCBERUZfV0JJVFMpO1xufVxuXG5cbi8qXG4gUmV0dXJuIHN0YXRlIHdpdGggbGVuZ3RoIGFuZCBkaXN0YW5jZSBkZWNvZGluZyB0YWJsZXMgYW5kIGluZGV4IHNpemVzIHNldCB0b1xuIGZpeGVkIGNvZGUgZGVjb2RpbmcuICBOb3JtYWxseSB0aGlzIHJldHVybnMgZml4ZWQgdGFibGVzIGZyb20gaW5mZml4ZWQuaC5cbiBJZiBCVUlMREZJWEVEIGlzIGRlZmluZWQsIHRoZW4gaW5zdGVhZCB0aGlzIHJvdXRpbmUgYnVpbGRzIHRoZSB0YWJsZXMgdGhlXG4gZmlyc3QgdGltZSBpdCdzIGNhbGxlZCwgYW5kIHJldHVybnMgdGhvc2UgdGFibGVzIHRoZSBmaXJzdCB0aW1lIGFuZFxuIHRoZXJlYWZ0ZXIuICBUaGlzIHJlZHVjZXMgdGhlIHNpemUgb2YgdGhlIGNvZGUgYnkgYWJvdXQgMksgYnl0ZXMsIGluXG4gZXhjaGFuZ2UgZm9yIGEgbGl0dGxlIGV4ZWN1dGlvbiB0aW1lLiAgSG93ZXZlciwgQlVJTERGSVhFRCBzaG91bGQgbm90IGJlXG4gdXNlZCBmb3IgdGhyZWFkZWQgYXBwbGljYXRpb25zLCBzaW5jZSB0aGUgcmV3cml0aW5nIG9mIHRoZSB0YWJsZXMgYW5kIHZpcmdpblxuIG1heSBub3QgYmUgdGhyZWFkLXNhZmUuXG4gKi9cbnZhciB2aXJnaW4gPSB0cnVlO1xuXG52YXIgbGVuZml4LCBkaXN0Zml4OyAvLyBXZSBoYXZlIG5vIHBvaW50ZXJzIGluIEpTLCBzbyBrZWVwIHRhYmxlcyBzZXBhcmF0ZVxuXG5mdW5jdGlvbiBmaXhlZHRhYmxlcyhzdGF0ZSkge1xuICAvKiBidWlsZCBmaXhlZCBodWZmbWFuIHRhYmxlcyBpZiBmaXJzdCBjYWxsIChtYXkgbm90IGJlIHRocmVhZCBzYWZlKSAqL1xuICBpZiAodmlyZ2luKSB7XG4gICAgdmFyIHN5bTtcblxuICAgIGxlbmZpeCA9IG5ldyBCdWYzMig1MTIpO1xuICAgIGRpc3RmaXggPSBuZXcgQnVmMzIoMzIpO1xuXG4gICAgLyogbGl0ZXJhbC9sZW5ndGggdGFibGUgKi9cbiAgICBzeW0gPSAwO1xuICAgIHdoaWxlIChzeW0gPCAxNDQpIHtcbiAgICAgIHN0YXRlLmxlbnNbc3ltKytdID0gODtcbiAgICB9XG4gICAgd2hpbGUgKHN5bSA8IDI1Nikge1xuICAgICAgc3RhdGUubGVuc1tzeW0rK10gPSA5O1xuICAgIH1cbiAgICB3aGlsZSAoc3ltIDwgMjgwKSB7XG4gICAgICBzdGF0ZS5sZW5zW3N5bSsrXSA9IDc7XG4gICAgfVxuICAgIHdoaWxlIChzeW0gPCAyODgpIHtcbiAgICAgIHN0YXRlLmxlbnNbc3ltKytdID0gODtcbiAgICB9XG5cbiAgICBpbmZsYXRlX3RhYmxlKExFTlMsIHN0YXRlLmxlbnMsIDAsIDI4OCwgbGVuZml4LCAwLCBzdGF0ZS53b3JrLCB7XG4gICAgICBiaXRzOiA5XG4gICAgfSk7XG5cbiAgICAvKiBkaXN0YW5jZSB0YWJsZSAqL1xuICAgIHN5bSA9IDA7XG4gICAgd2hpbGUgKHN5bSA8IDMyKSB7XG4gICAgICBzdGF0ZS5sZW5zW3N5bSsrXSA9IDU7XG4gICAgfVxuXG4gICAgaW5mbGF0ZV90YWJsZShESVNUUywgc3RhdGUubGVucywgMCwgMzIsIGRpc3RmaXgsIDAsIHN0YXRlLndvcmssIHtcbiAgICAgIGJpdHM6IDVcbiAgICB9KTtcblxuICAgIC8qIGRvIHRoaXMganVzdCBvbmNlICovXG4gICAgdmlyZ2luID0gZmFsc2U7XG4gIH1cblxuICBzdGF0ZS5sZW5jb2RlID0gbGVuZml4O1xuICBzdGF0ZS5sZW5iaXRzID0gOTtcbiAgc3RhdGUuZGlzdGNvZGUgPSBkaXN0Zml4O1xuICBzdGF0ZS5kaXN0Yml0cyA9IDU7XG59XG5cblxuLypcbiBVcGRhdGUgdGhlIHdpbmRvdyB3aXRoIHRoZSBsYXN0IHdzaXplIChub3JtYWxseSAzMkspIGJ5dGVzIHdyaXR0ZW4gYmVmb3JlXG4gcmV0dXJuaW5nLiAgSWYgd2luZG93IGRvZXMgbm90IGV4aXN0IHlldCwgY3JlYXRlIGl0LiAgVGhpcyBpcyBvbmx5IGNhbGxlZFxuIHdoZW4gYSB3aW5kb3cgaXMgYWxyZWFkeSBpbiB1c2UsIG9yIHdoZW4gb3V0cHV0IGhhcyBiZWVuIHdyaXR0ZW4gZHVyaW5nIHRoaXNcbiBpbmZsYXRlIGNhbGwsIGJ1dCB0aGUgZW5kIG9mIHRoZSBkZWZsYXRlIHN0cmVhbSBoYXMgbm90IGJlZW4gcmVhY2hlZCB5ZXQuXG4gSXQgaXMgYWxzbyBjYWxsZWQgdG8gY3JlYXRlIGEgd2luZG93IGZvciBkaWN0aW9uYXJ5IGRhdGEgd2hlbiBhIGRpY3Rpb25hcnlcbiBpcyBsb2FkZWQuXG5cbiBQcm92aWRpbmcgb3V0cHV0IGJ1ZmZlcnMgbGFyZ2VyIHRoYW4gMzJLIHRvIGluZmxhdGUoKSBzaG91bGQgcHJvdmlkZSBhIHNwZWVkXG4gYWR2YW50YWdlLCBzaW5jZSBvbmx5IHRoZSBsYXN0IDMySyBvZiBvdXRwdXQgaXMgY29waWVkIHRvIHRoZSBzbGlkaW5nIHdpbmRvd1xuIHVwb24gcmV0dXJuIGZyb20gaW5mbGF0ZSgpLCBhbmQgc2luY2UgYWxsIGRpc3RhbmNlcyBhZnRlciB0aGUgZmlyc3QgMzJLIG9mXG4gb3V0cHV0IHdpbGwgZmFsbCBpbiB0aGUgb3V0cHV0IGRhdGEsIG1ha2luZyBtYXRjaCBjb3BpZXMgc2ltcGxlciBhbmQgZmFzdGVyLlxuIFRoZSBhZHZhbnRhZ2UgbWF5IGJlIGRlcGVuZGVudCBvbiB0aGUgc2l6ZSBvZiB0aGUgcHJvY2Vzc29yJ3MgZGF0YSBjYWNoZXMuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZXdpbmRvdyhzdHJtLCBzcmMsIGVuZCwgY29weSkge1xuICB2YXIgZGlzdDtcbiAgdmFyIHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICAvKiBpZiBpdCBoYXNuJ3QgYmVlbiBkb25lIGFscmVhZHksIGFsbG9jYXRlIHNwYWNlIGZvciB0aGUgd2luZG93ICovXG4gIGlmIChzdGF0ZS53aW5kb3cgPT09IG51bGwpIHtcbiAgICBzdGF0ZS53c2l6ZSA9IDEgPDwgc3RhdGUud2JpdHM7XG4gICAgc3RhdGUud25leHQgPSAwO1xuICAgIHN0YXRlLndoYXZlID0gMDtcblxuICAgIHN0YXRlLndpbmRvdyA9IG5ldyBCdWY4KHN0YXRlLndzaXplKTtcbiAgfVxuXG4gIC8qIGNvcHkgc3RhdGUtPndzaXplIG9yIGxlc3Mgb3V0cHV0IGJ5dGVzIGludG8gdGhlIGNpcmN1bGFyIHdpbmRvdyAqL1xuICBpZiAoY29weSA+PSBzdGF0ZS53c2l6ZSkge1xuICAgIGFycmF5U2V0KHN0YXRlLndpbmRvdywgc3JjLCBlbmQgLSBzdGF0ZS53c2l6ZSwgc3RhdGUud3NpemUsIDApO1xuICAgIHN0YXRlLnduZXh0ID0gMDtcbiAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplO1xuICB9IGVsc2Uge1xuICAgIGRpc3QgPSBzdGF0ZS53c2l6ZSAtIHN0YXRlLnduZXh0O1xuICAgIGlmIChkaXN0ID4gY29weSkge1xuICAgICAgZGlzdCA9IGNvcHk7XG4gICAgfVxuICAgIC8vem1lbWNweShzdGF0ZS0+d2luZG93ICsgc3RhdGUtPnduZXh0LCBlbmQgLSBjb3B5LCBkaXN0KTtcbiAgICBhcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gY29weSwgZGlzdCwgc3RhdGUud25leHQpO1xuICAgIGNvcHkgLT0gZGlzdDtcbiAgICBpZiAoY29weSkge1xuICAgICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3csIGVuZCAtIGNvcHksIGNvcHkpO1xuICAgICAgYXJyYXlTZXQoc3RhdGUud2luZG93LCBzcmMsIGVuZCAtIGNvcHksIGNvcHksIDApO1xuICAgICAgc3RhdGUud25leHQgPSBjb3B5O1xuICAgICAgc3RhdGUud2hhdmUgPSBzdGF0ZS53c2l6ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUud25leHQgKz0gZGlzdDtcbiAgICAgIGlmIChzdGF0ZS53bmV4dCA9PT0gc3RhdGUud3NpemUpIHtcbiAgICAgICAgc3RhdGUud25leHQgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLndoYXZlIDwgc3RhdGUud3NpemUpIHtcbiAgICAgICAgc3RhdGUud2hhdmUgKz0gZGlzdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmZsYXRlKHN0cm0sIGZsdXNoKSB7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIGlucHV0LCBvdXRwdXQ7IC8vIGlucHV0L291dHB1dCBidWZmZXJzXG4gIHZhciBuZXh0OyAvKiBuZXh0IGlucHV0IElOREVYICovXG4gIHZhciBwdXQ7IC8qIG5leHQgb3V0cHV0IElOREVYICovXG4gIHZhciBoYXZlLCBsZWZ0OyAvKiBhdmFpbGFibGUgaW5wdXQgYW5kIG91dHB1dCAqL1xuICB2YXIgaG9sZDsgLyogYml0IGJ1ZmZlciAqL1xuICB2YXIgYml0czsgLyogYml0cyBpbiBiaXQgYnVmZmVyICovXG4gIHZhciBfaW4sIF9vdXQ7IC8qIHNhdmUgc3RhcnRpbmcgYXZhaWxhYmxlIGlucHV0IGFuZCBvdXRwdXQgKi9cbiAgdmFyIGNvcHk7IC8qIG51bWJlciBvZiBzdG9yZWQgb3IgbWF0Y2ggYnl0ZXMgdG8gY29weSAqL1xuICB2YXIgZnJvbTsgLyogd2hlcmUgdG8gY29weSBtYXRjaCBieXRlcyBmcm9tICovXG4gIHZhciBmcm9tX3NvdXJjZTtcbiAgdmFyIGhlcmUgPSAwOyAvKiBjdXJyZW50IGRlY29kaW5nIHRhYmxlIGVudHJ5ICovXG4gIHZhciBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsOyAvLyBwYWtlZCBcImhlcmVcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxuICAvL3ZhciBsYXN0OyAgICAgICAgICAgICAgICAgICAvKiBwYXJlbnQgdGFibGUgZW50cnkgKi9cbiAgdmFyIGxhc3RfYml0cywgbGFzdF9vcCwgbGFzdF92YWw7IC8vIHBha2VkIFwibGFzdFwiIGRlbm9ybWFsaXplZCAoSlMgc3BlY2lmaWMpXG4gIHZhciBsZW47IC8qIGxlbmd0aCB0byBjb3B5IGZvciByZXBlYXRzLCBiaXRzIHRvIGRyb3AgKi9cbiAgdmFyIHJldDsgLyogcmV0dXJuIGNvZGUgKi9cbiAgdmFyIGhidWYgPSBuZXcgQnVmOCg0KTsgLyogYnVmZmVyIGZvciBnemlwIGhlYWRlciBjcmMgY2FsY3VsYXRpb24gKi9cbiAgdmFyIG9wdHM7XG5cbiAgdmFyIG47IC8vIHRlbXBvcmFyeSB2YXIgZm9yIE5FRURfQklUU1xuXG4gIHZhciBvcmRlciA9IC8qIHBlcm11dGF0aW9uIG9mIGNvZGUgbGVuZ3RocyAqLyBbMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNV07XG5cblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgfHwgIXN0cm0ub3V0cHV0IHx8XG4gICAgKCFzdHJtLmlucHV0ICYmIHN0cm0uYXZhaWxfaW4gIT09IDApKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkge1xuICAgIHN0YXRlLm1vZGUgPSBUWVBFRE87XG4gIH0gLyogc2tpcCBjaGVjayAqL1xuXG5cbiAgLy8tLS0gTE9BRCgpIC0tLVxuICBwdXQgPSBzdHJtLm5leHRfb3V0O1xuICBvdXRwdXQgPSBzdHJtLm91dHB1dDtcbiAgbGVmdCA9IHN0cm0uYXZhaWxfb3V0O1xuICBuZXh0ID0gc3RybS5uZXh0X2luO1xuICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gIGhhdmUgPSBzdHJtLmF2YWlsX2luO1xuICBob2xkID0gc3RhdGUuaG9sZDtcbiAgYml0cyA9IHN0YXRlLmJpdHM7XG4gIC8vLS0tXG5cbiAgX2luID0gaGF2ZTtcbiAgX291dCA9IGxlZnQ7XG4gIHJldCA9IFpfT0s7XG5cbiAgaW5mX2xlYXZlOiAvLyBnb3RvIGVtdWxhdGlvblxuICAgIGZvciAoOzspIHtcbiAgICAgIHN3aXRjaCAoc3RhdGUubW9kZSkge1xuICAgICAgY2FzZSBIRUFEOlxuICAgICAgICBpZiAoc3RhdGUud3JhcCA9PT0gMCkge1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFRE87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpO1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmICgoc3RhdGUud3JhcCAmIDIpICYmIGhvbGQgPT09IDB4OGIxZikgeyAvKiBnemlwIGhlYWRlciAqL1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gMCAvKmNyYzMyKDBMLCBaX05VTEwsIDApKi8gO1xuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAvLz09PS8vXG5cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5tb2RlID0gRkxBR1M7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZmxhZ3MgPSAwOyAvKiBleHBlY3QgemxpYiBoZWFkZXIgKi9cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShzdGF0ZS53cmFwICYgMSkgfHwgLyogY2hlY2sgaWYgemxpYiBoZWFkZXIgYWxsb3dlZCAqL1xuICAgICAgICAgICgoKGhvbGQgJiAweGZmKSAvKkJJVFMoOCkqLyA8PCA4KSArIChob2xkID4+IDgpKSAlIDMxKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGhlYWRlciBjaGVjayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGhvbGQgJiAweDBmKSAvKkJJVFMoNCkqLyAhPT0gWl9ERUZMQVRFRCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDQpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA0O1xuICAgICAgICBiaXRzIC09IDQ7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgbGVuID0gKGhvbGQgJiAweDBmKSAvKkJJVFMoNCkqLyArIDg7XG4gICAgICAgIGlmIChzdGF0ZS53Yml0cyA9PT0gMCkge1xuICAgICAgICAgIHN0YXRlLndiaXRzID0gbGVuO1xuICAgICAgICB9IGVsc2UgaWYgKGxlbiA+IHN0YXRlLndiaXRzKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCB3aW5kb3cgc2l6ZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5kbWF4ID0gMSA8PCBsZW47XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICB6bGliIGhlYWRlciBva1xcblwiKSk7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDEgLyphZGxlcjMyKDBMLCBaX05VTEwsIDApKi8gO1xuICAgICAgICBzdGF0ZS5tb2RlID0gaG9sZCAmIDB4MjAwID8gRElDVElEIDogVFlQRTtcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBGTEFHUzpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLmZsYWdzID0gaG9sZDtcbiAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4ZmYpICE9PSBaX0RFRkxBVEVEKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHhlMDAwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC50ZXh0ID0gKChob2xkID4+IDgpICYgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgfVxuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IFRJTUU7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgVElNRTpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC50aW1lID0gaG9sZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBDUkM0KHN0YXRlLmNoZWNrLCBob2xkKVxuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzJdID0gKGhvbGQgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlszXSA9IChob2xkID4+PiAyNCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDQsIDApO1xuICAgICAgICAgIC8vPT09XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBPUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBPUzpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC54ZmxhZ3MgPSAoaG9sZCAmIDB4ZmYpO1xuICAgICAgICAgIHN0YXRlLmhlYWQub3MgPSAoaG9sZCA+PiA4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gRVhMRU47XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRVhMRU46XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDQwMCkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IGhvbGQ7XG4gICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmFfbGVuID0gaG9sZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbnVsbCAvKlpfTlVMTCovIDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gRVhUUkE7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRVhUUkE6XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDQwMCkge1xuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgICAgaWYgKGNvcHkgPiBoYXZlKSB7XG4gICAgICAgICAgICBjb3B5ID0gaGF2ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgICAgIGxlbiA9IHN0YXRlLmhlYWQuZXh0cmFfbGVuIC0gc3RhdGUubGVuZ3RoO1xuICAgICAgICAgICAgICBpZiAoIXN0YXRlLmhlYWQuZXh0cmEpIHtcbiAgICAgICAgICAgICAgICAvLyBVc2UgdW50eXBlZCBhcnJheSBmb3IgbW9yZSBjb252ZW5pZW5kIHByb2Nlc3NpbmcgbGF0ZXJcbiAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbmV3IEFycmF5KHN0YXRlLmhlYWQuZXh0cmFfbGVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhcnJheVNldChcbiAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhLFxuICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICAgICAgLy8gZXh0cmEgZmllbGQgaXMgbGltaXRlZCB0byA2NTUzNiBieXRlc1xuICAgICAgICAgICAgICAgIC8vIC0gbm8gbmVlZCBmb3IgYWRkaXRpb25hbCBzaXplIGNoZWNrXG4gICAgICAgICAgICAgICAgY29weSxcbiAgICAgICAgICAgICAgICAvKmxlbiArIGNvcHkgPiBzdGF0ZS5oZWFkLmV4dHJhX21heCAtIGxlbiA/IHN0YXRlLmhlYWQuZXh0cmFfbWF4IDogY29weSwqL1xuICAgICAgICAgICAgICAgIGxlblxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAvL3ptZW1jcHkoc3RhdGUuaGVhZC5leHRyYSArIGxlbiwgbmV4dCxcbiAgICAgICAgICAgICAgLy8gICAgICAgIGxlbiArIGNvcHkgPiBzdGF0ZS5oZWFkLmV4dHJhX21heCA/XG4gICAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhX21heCAtIGxlbiA6IGNvcHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBOQU1FO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIE5BTUU6XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDgwMCkge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7XG4gICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvcHkgPSAwO1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIC8vIFRPRE86IDIgb3IgMSBieXRlcz9cbiAgICAgICAgICAgIGxlbiA9IGlucHV0W25leHQgKyBjb3B5KytdO1xuICAgICAgICAgICAgLyogdXNlIGNvbnN0YW50IGxpbWl0IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnkgKi9cbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJlxuICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLm5hbWVfbWF4Ki8gKSkge1xuICAgICAgICAgICAgICBzdGF0ZS5oZWFkLm5hbWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gd2hpbGUgKGxlbiAmJiBjb3B5IDwgaGF2ZSk7XG5cbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLm5hbWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBDT01NRU5UO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIENPTU1FTlQ6XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MTAwMCkge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7XG4gICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvcHkgPSAwO1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGxlbiA9IGlucHV0W25leHQgKyBjb3B5KytdO1xuICAgICAgICAgICAgLyogdXNlIGNvbnN0YW50IGxpbWl0IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnkgKi9cbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJlxuICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLmNvbW1fbWF4Ki8gKSkge1xuICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmNvbW1lbnQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gd2hpbGUgKGxlbiAmJiBjb3B5IDwgaGF2ZSk7XG4gICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5jb21tZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gSENSQztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBIQ1JDOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHtcbiAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLmNoZWNrICYgMHhmZmZmKSkge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaGVhZGVyIGNyYyBtaXNtYXRjaCc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5oY3JjID0gKChzdGF0ZS5mbGFncyA+PiA5KSAmIDEpO1xuICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESUNUSUQ6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7XG4gICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSB6c3dhcDMyKGhvbGQpO1xuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IERJQ1Q7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRElDVDpcbiAgICAgICAgaWYgKHN0YXRlLmhhdmVkaWN0ID09PSAwKSB7XG4gICAgICAgICAgLy8tLS0gUkVTVE9SRSgpIC0tLVxuICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBsZWZ0O1xuICAgICAgICAgIHN0cm0ubmV4dF9pbiA9IG5leHQ7XG4gICAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gICAgICAgICAgc3RhdGUuaG9sZCA9IGhvbGQ7XG4gICAgICAgICAgc3RhdGUuYml0cyA9IGJpdHM7XG4gICAgICAgICAgLy8tLS1cbiAgICAgICAgICByZXR1cm4gWl9ORUVEX0RJQ1Q7XG4gICAgICAgIH1cbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMSAvKmFkbGVyMzIoMEwsIFpfTlVMTCwgMCkqLyA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRZUEU6XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9CTE9DSyB8fCBmbHVzaCA9PT0gWl9UUkVFUykge1xuICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRZUEVETzpcbiAgICAgICAgaWYgKHN0YXRlLmxhc3QpIHtcbiAgICAgICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3O1xuICAgICAgICAgIGJpdHMgLT0gYml0cyAmIDc7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBDSEVDSztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLz09PSBORUVEQklUUygzKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLmxhc3QgPSAoaG9sZCAmIDB4MDEpIC8qQklUUygxKSovIDtcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoMSkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDE7XG4gICAgICAgIGJpdHMgLT0gMTtcbiAgICAgICAgLy8tLS0vL1xuXG4gICAgICAgIHN3aXRjaCAoKGhvbGQgJiAweDAzKSAvKkJJVFMoMikqLyApIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIC8qIHN0b3JlZCBibG9jayAqL1xuICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIHN0b3JlZCBibG9jayVzXFxuXCIsXG4gICAgICAgICAgLy8gICAgICAgIHN0YXRlLmxhc3QgPyBcIiAobGFzdClcIiA6IFwiXCIpKTtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gU1RPUkVEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgLyogZml4ZWQgYmxvY2sgKi9cbiAgICAgICAgICBmaXhlZHRhYmxlcyhzdGF0ZSk7XG4gICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgZml4ZWQgY29kZXMgYmxvY2slc1xcblwiLFxuICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IExFTl87IC8qIGRlY29kZSBjb2RlcyAqL1xuICAgICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykge1xuICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgICAgIGhvbGQgPj4+PSAyO1xuICAgICAgICAgICAgYml0cyAtPSAyO1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIC8qIGR5bmFtaWMgYmxvY2sgKi9cbiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBkeW5hbWljIGNvZGVzIGJsb2NrJXNcXG5cIixcbiAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBUQUJMRTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYmxvY2sgdHlwZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgfVxuICAgICAgICAvLy0tLSBEUk9QQklUUygyKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gMjtcbiAgICAgICAgYml0cyAtPSAyO1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTVE9SRUQ6XG4gICAgICAgIC8vLS0tIEJZVEVCSVRTKCkgLS0tLy8gLyogZ28gdG8gYnl0ZSBib3VuZGFyeSAqL1xuICAgICAgICBob2xkID4+Pj0gYml0cyAmIDc7XG4gICAgICAgIGJpdHMgLT0gYml0cyAmIDc7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmICgoaG9sZCAmIDB4ZmZmZikgIT09ICgoaG9sZCA+Pj4gMTYpIF4gMHhmZmZmKSkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgc3RvcmVkIGJsb2NrIGxlbmd0aHMnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubGVuZ3RoID0gaG9sZCAmIDB4ZmZmZjtcbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICBzdG9yZWQgbGVuZ3RoICV1XFxuXCIsXG4gICAgICAgIC8vICAgICAgICBzdGF0ZS5sZW5ndGgpKTtcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBDT1BZXztcbiAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7XG4gICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09QWV86XG4gICAgICAgIHN0YXRlLm1vZGUgPSBDT1BZO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIENPUFk6XG4gICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIGlmIChjb3B5KSB7XG4gICAgICAgICAgaWYgKGNvcHkgPiBoYXZlKSB7XG4gICAgICAgICAgICBjb3B5ID0gaGF2ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7XG4gICAgICAgICAgICBjb3B5ID0gbGVmdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkgPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0gem1lbWNweShwdXQsIG5leHQsIGNvcHkpOyAtLS1cbiAgICAgICAgICBhcnJheVNldChvdXRwdXQsIGlucHV0LCBuZXh0LCBjb3B5LCBwdXQpO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGxlZnQgLT0gY29weTtcbiAgICAgICAgICBwdXQgKz0gY29weTtcbiAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHN0b3JlZCBlbmRcXG5cIikpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRBQkxFOlxuICAgICAgICAvLz09PSBORUVEQklUUygxNCk7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTQpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubmxlbiA9IChob2xkICYgMHgxZikgLypCSVRTKDUpKi8gKyAyNTc7XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDUpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA1O1xuICAgICAgICBiaXRzIC09IDU7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUubmRpc3QgPSAoaG9sZCAmIDB4MWYpIC8qQklUUyg1KSovICsgMTtcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDU7XG4gICAgICAgIGJpdHMgLT0gNTtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5uY29kZSA9IChob2xkICYgMHgwZikgLypCSVRTKDQpKi8gKyA0O1xuICAgICAgICAvLy0tLSBEUk9QQklUUyg0KSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gNDtcbiAgICAgICAgYml0cyAtPSA0O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIC8vI2lmbmRlZiBQS1pJUF9CVUdfV09SS0FST1VORFxuICAgICAgICBpZiAoc3RhdGUubmxlbiA+IDI4NiB8fCBzdGF0ZS5uZGlzdCA+IDMwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIHN5bWJvbHMnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8jZW5kaWZcbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICB0YWJsZSBzaXplcyBva1xcblwiKSk7XG4gICAgICAgIHN0YXRlLmhhdmUgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOTEVOUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5MRU5TOlxuICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5jb2RlKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLmxlbnNbb3JkZXJbc3RhdGUuaGF2ZSsrXV0gPSAoaG9sZCAmIDB4MDcpOyAvL0JJVFMoMyk7XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMykgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gMztcbiAgICAgICAgICBiaXRzIC09IDM7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgMTkpIHtcbiAgICAgICAgICBzdGF0ZS5sZW5zW29yZGVyW3N0YXRlLmhhdmUrK11dID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgICAvL3N0YXRlLm5leHQgPSBzdGF0ZS5jb2RlcztcbiAgICAgICAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDtcbiAgICAgICAgLy8gU3dpdGNoIHRvIHVzZSBkeW5hbWljIHRhYmxlXG4gICAgICAgIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW47XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSA3O1xuXG4gICAgICAgIG9wdHMgPSB7XG4gICAgICAgICAgYml0czogc3RhdGUubGVuYml0c1xuICAgICAgICB9O1xuICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKENPREVTLCBzdGF0ZS5sZW5zLCAwLCAxOSwgc3RhdGUubGVuY29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG5cbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgY29kZSBsZW5ndGhzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIGNvZGUgbGVuZ3RocyBva1xcblwiKSk7XG4gICAgICAgIHN0YXRlLmhhdmUgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09ERUxFTlM7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09ERUxFTlM6XG4gICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7XG4gICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDEpXTsgLypCSVRTKHN0YXRlLmxlbmJpdHMpKi9cbiAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgICBpZiAoKGhlcmVfYml0cykgPD0gYml0cykge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7XG4gICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGVyZV92YWwgPCAxNikge1xuICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gaGVyZV92YWw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChoZXJlX3ZhbCA9PT0gMTYpIHtcbiAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgMik7XG4gICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyAyO1xuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBpZiAoc3RhdGUuaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYml0IGxlbmd0aCByZXBlYXQnO1xuICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGVuID0gc3RhdGUubGVuc1tzdGF0ZS5oYXZlIC0gMV07XG4gICAgICAgICAgICAgIGNvcHkgPSAzICsgKGhvbGQgJiAweDAzKTsgLy9CSVRTKDIpO1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUygyKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gMjtcbiAgICAgICAgICAgICAgYml0cyAtPSAyO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhlcmVfdmFsID09PSAxNykge1xuICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyAzKTtcbiAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDM7XG4gICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICAgIGxlbiA9IDA7XG4gICAgICAgICAgICAgIGNvcHkgPSAzICsgKGhvbGQgJiAweDA3KTsgLy9CSVRTKDMpO1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUygzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gMztcbiAgICAgICAgICAgICAgYml0cyAtPSAzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyA3KTtcbiAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDc7XG4gICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICAgIGxlbiA9IDA7XG4gICAgICAgICAgICAgIGNvcHkgPSAxMSArIChob2xkICYgMHg3Zik7IC8vQklUUyg3KTtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoNykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDc7XG4gICAgICAgICAgICAgIGJpdHMgLT0gNztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgKyBjb3B5ID4gc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYml0IGxlbmd0aCByZXBlYXQnO1xuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChjb3B5LS0pIHtcbiAgICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gbGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGhhbmRsZSBlcnJvciBicmVha3MgaW4gd2hpbGUgKi9cbiAgICAgICAgaWYgKHN0YXRlLm1vZGUgPT09IEJBRCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogY2hlY2sgZm9yIGVuZC1vZi1ibG9jayBjb2RlIChiZXR0ZXIgaGF2ZSBvbmUpICovXG4gICAgICAgIGlmIChzdGF0ZS5sZW5zWzI1Nl0gPT09IDApIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2snO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBidWlsZCBjb2RlIHRhYmxlcyAtLSBub3RlOiBkbyBub3QgY2hhbmdlIHRoZSBsZW5iaXRzIG9yIGRpc3RiaXRzXG4gICAgICAgICAgIHZhbHVlcyBoZXJlICg5IGFuZCA2KSB3aXRob3V0IHJlYWRpbmcgdGhlIGNvbW1lbnRzIGluIGluZnRyZWVzLmhcbiAgICAgICAgICAgY29uY2VybmluZyB0aGUgRU5PVUdIIGNvbnN0YW50cywgd2hpY2ggZGVwZW5kIG9uIHRob3NlIHZhbHVlcyAqL1xuICAgICAgICBzdGF0ZS5sZW5iaXRzID0gOTtcblxuICAgICAgICBvcHRzID0ge1xuICAgICAgICAgIGJpdHM6IHN0YXRlLmxlbmJpdHNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShMRU5TLCBzdGF0ZS5sZW5zLCAwLCBzdGF0ZS5ubGVuLCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAgIC8vIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5uZXh0O1xuXG4gICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RocyBzZXQnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5kaXN0Yml0cyA9IDY7XG4gICAgICAgIC8vc3RhdGUuZGlzdGNvZGUuY29weShzdGF0ZS5jb2Rlcyk7XG4gICAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZVxuICAgICAgICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLmRpc3RkeW47XG4gICAgICAgIG9wdHMgPSB7XG4gICAgICAgICAgYml0czogc3RhdGUuZGlzdGJpdHNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShESVNUUywgc3RhdGUubGVucywgc3RhdGUubmxlbiwgc3RhdGUubmRpc3QsIHN0YXRlLmRpc3Rjb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG4gICAgICAgIHN0YXRlLmRpc3RiaXRzID0gb3B0cy5iaXRzO1xuICAgICAgICAvLyBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQ7XG5cbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2VzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCAnaW5mbGF0ZTogICAgICAgY29kZXMgb2tcXG4nKSk7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fO1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHtcbiAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgIH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5fOlxuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTjpcbiAgICAgICAgaWYgKGhhdmUgPj0gNiAmJiBsZWZ0ID49IDI1OCkge1xuICAgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAgICAgICAgIC8vLS0tXG4gICAgICAgICAgaW5mbGF0ZV9mYXN0KHN0cm0sIF9vdXQpO1xuICAgICAgICAgIC8vLS0tIExPQUQoKSAtLS1cbiAgICAgICAgICBwdXQgPSBzdHJtLm5leHRfb3V0O1xuICAgICAgICAgIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICAgICAgICAgIGxlZnQgPSBzdHJtLmF2YWlsX291dDtcbiAgICAgICAgICBuZXh0ID0gc3RybS5uZXh0X2luO1xuICAgICAgICAgIGlucHV0ID0gc3RybS5pbnB1dDtcbiAgICAgICAgICBoYXZlID0gc3RybS5hdmFpbF9pbjtcbiAgICAgICAgICBob2xkID0gc3RhdGUuaG9sZDtcbiAgICAgICAgICBiaXRzID0gc3RhdGUuYml0cztcbiAgICAgICAgICAvLy0tLVxuXG4gICAgICAgICAgaWYgKHN0YXRlLm1vZGUgPT09IFRZUEUpIHtcbiAgICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuYmFjayA9IDA7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMSldOyAvKkJJVFMoc3RhdGUubGVuYml0cykqL1xuICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICBpZiAoaGVyZV9iaXRzIDw9IGJpdHMpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiYgKGhlcmVfb3AgJiAweGYwKSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RfYml0cyA9IGhlcmVfYml0cztcbiAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDtcbiAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsO1xuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2xhc3RfdmFsICtcbiAgICAgICAgICAgICAgKChob2xkICYgKCgxIDw8IChsYXN0X2JpdHMgKyBsYXN0X29wKSkgLSAxKSkgLypCSVRTKGxhc3QuYml0cyArIGxhc3Qub3ApKi8gPj4gbGFzdF9iaXRzKV07XG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMobGFzdC5iaXRzKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBsYXN0X2JpdHM7XG4gICAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gbGFzdF9iaXRzO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUuYmFjayArPSBoZXJlX2JpdHM7XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IGhlcmVfdmFsO1xuICAgICAgICBpZiAoaGVyZV9vcCA9PT0gMCkge1xuICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBoZXJlLnZhbCA+PSAweDIwICYmIGhlcmUudmFsIDwgMHg3ZiA/XG4gICAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG4gICAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxcblwiLCBoZXJlLnZhbCkpO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBMSVQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiAzMikge1xuICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcbiAgICAgICAgICBzdGF0ZS5iYWNrID0gLTE7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiA2NCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5leHRyYSA9IGhlcmVfb3AgJiAxNTtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTkVYVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5FWFQ6XG4gICAgICAgIGlmIChzdGF0ZS5leHRyYSkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcbiAgICAgICAgICBuID0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLmxlbmd0aCArPSBob2xkICYgKCgxIDw8IHN0YXRlLmV4dHJhKSAtIDEpIC8qQklUUyhzdGF0ZS5leHRyYSkqLyA7XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoc3RhdGUuZXh0cmEpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gc3RhdGUuZXh0cmE7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBsZW5ndGggJXVcXG5cIiwgc3RhdGUubGVuZ3RoKSk7XG4gICAgICAgIHN0YXRlLndhcyA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgc3RhdGUubW9kZSA9IERJU1Q7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRElTVDpcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgIGhlcmUgPSBzdGF0ZS5kaXN0Y29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmRpc3RiaXRzKSAtIDEpXTsgLypCSVRTKHN0YXRlLmRpc3RiaXRzKSovXG4gICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgIGlmICgoaGVyZV9iaXRzKSA8PSBiaXRzKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7XG4gICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICB9XG4gICAgICAgIGlmICgoaGVyZV9vcCAmIDB4ZjApID09PSAwKSB7XG4gICAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzO1xuICAgICAgICAgIGxhc3Rfb3AgPSBoZXJlX29wO1xuICAgICAgICAgIGxhc3RfdmFsID0gaGVyZV92YWw7XG4gICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2xhc3RfdmFsICtcbiAgICAgICAgICAgICAgKChob2xkICYgKCgxIDw8IChsYXN0X2JpdHMgKyBsYXN0X29wKSkgLSAxKSkgLypCSVRTKGxhc3QuYml0cyArIGxhc3Qub3ApKi8gPj4gbGFzdF9iaXRzKV07XG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMobGFzdC5iaXRzKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBsYXN0X2JpdHM7XG4gICAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gbGFzdF9iaXRzO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUuYmFjayArPSBoZXJlX2JpdHM7XG4gICAgICAgIGlmIChoZXJlX29wICYgNjQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUub2Zmc2V0ID0gaGVyZV92YWw7XG4gICAgICAgIHN0YXRlLmV4dHJhID0gKGhlcmVfb3ApICYgMTU7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBESVNURVhUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERJU1RFWFQ6XG4gICAgICAgIGlmIChzdGF0ZS5leHRyYSkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcbiAgICAgICAgICBuID0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLm9mZnNldCArPSBob2xkICYgKCgxIDw8IHN0YXRlLmV4dHJhKSAtIDEpIC8qQklUUyhzdGF0ZS5leHRyYSkqLyA7XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoc3RhdGUuZXh0cmEpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gc3RhdGUuZXh0cmE7XG4gICAgICAgIH1cbiAgICAgICAgLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IHN0YXRlLmRtYXgpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyNlbmRpZlxuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIHN0YXRlLm9mZnNldCkpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTUFUQ0g7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTUFUQ0g6XG4gICAgICAgIGlmIChsZWZ0ID09PSAwKSB7XG4gICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICB9XG4gICAgICAgIGNvcHkgPSBfb3V0IC0gbGVmdDtcbiAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IGNvcHkpIHsgLyogY29weSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5vZmZzZXQgLSBjb3B5O1xuICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUud2hhdmUpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmFpbHRzLFxuICAgICAgICAgICAgLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgLy8jaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSXG4gICAgICAgICAgICAvLyAgICAgICAgICBUcmFjZSgoc3RkZXJyLCBcImluZmxhdGUuYyB0b28gZmFyXFxuXCIpKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgIGNvcHkgLT0gc3RhdGUud2hhdmU7XG4gICAgICAgICAgICAvLyAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLmxlbmd0aCkgeyBjb3B5ID0gc3RhdGUubGVuZ3RoOyB9XG4gICAgICAgICAgICAvLyAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbiAgICAgICAgICAgIC8vICAgICAgICAgIGxlZnQgLT0gY29weTtcbiAgICAgICAgICAgIC8vICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICAgICAgLy8gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICBvdXRwdXRbcHV0KytdID0gMDtcbiAgICAgICAgICAgIC8vICAgICAgICAgIH0gd2hpbGUgKC0tY29weSk7XG4gICAgICAgICAgICAvLyAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7IHN0YXRlLm1vZGUgPSBMRU47IH1cbiAgICAgICAgICAgIC8vICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8jZW5kaWZcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53bmV4dCkge1xuICAgICAgICAgICAgY29weSAtPSBzdGF0ZS53bmV4dDtcbiAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53c2l6ZSAtIGNvcHk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53bmV4dCAtIGNvcHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmcm9tX3NvdXJjZSA9IHN0YXRlLndpbmRvdztcbiAgICAgICAgfSBlbHNlIHsgLyogY29weSBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xuICAgICAgICAgIGZyb20gPSBwdXQgLSBzdGF0ZS5vZmZzZXQ7XG4gICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29weSA+IGxlZnQpIHtcbiAgICAgICAgICBjb3B5ID0gbGVmdDtcbiAgICAgICAgfVxuICAgICAgICBsZWZ0IC09IGNvcHk7XG4gICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgb3V0cHV0W3B1dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgIH0gd2hpbGUgKC0tY29weSk7XG4gICAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMSVQ6XG4gICAgICAgIGlmIChsZWZ0ID09PSAwKSB7XG4gICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dFtwdXQrK10gPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIGxlZnQtLTtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENIRUNLOlxuICAgICAgICBpZiAoc3RhdGUud3JhcCkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAvLyBVc2UgJ3wnIGluc2RlYWQgb2YgJysnIHRvIG1ha2Ugc3VyZSB0aGF0IHJlc3VsdCBpcyBzaWduZWRcbiAgICAgICAgICAgIGhvbGQgfD0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgX291dCAtPSBsZWZ0O1xuICAgICAgICAgIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7XG4gICAgICAgICAgc3RhdGUudG90YWwgKz0gX291dDtcbiAgICAgICAgICBpZiAoX291dCkge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID1cbiAgICAgICAgICAgICAgLypVUERBVEUoc3RhdGUuY2hlY2ssIHB1dCAtIF9vdXQsIF9vdXQpOyovXG4gICAgICAgICAgICAgIChzdGF0ZS5mbGFncyA/IGNyYzMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpIDogYWRsZXIzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBwdXQgLSBfb3V0KSk7XG5cbiAgICAgICAgICB9XG4gICAgICAgICAgX291dCA9IGxlZnQ7XG4gICAgICAgICAgLy8gTkI6IGNyYzMyIHN0b3JlZCBhcyBzaWduZWQgMzItYml0IGludCwgenN3YXAzMiByZXR1cm5zIHNpZ25lZCB0b29cbiAgICAgICAgICBpZiAoKHN0YXRlLmZsYWdzID8gaG9sZCA6IHpzd2FwMzIoaG9sZCkpICE9PSBzdGF0ZS5jaGVjaykge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGRhdGEgY2hlY2snO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgY2hlY2sgbWF0Y2hlcyB0cmFpbGVyXFxuXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOR1RIO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTkdUSDpcbiAgICAgICAgaWYgKHN0YXRlLndyYXAgJiYgc3RhdGUuZmxhZ3MpIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygzMik7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHtcbiAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLnRvdGFsICYgMHhmZmZmZmZmZikpIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBsZW5ndGggY2hlY2snO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgbGVuZ3RoIG1hdGNoZXMgdHJhaWxlclxcblwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IERPTkU7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRE9ORTpcbiAgICAgICAgcmV0ID0gWl9TVFJFQU1fRU5EO1xuICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICBjYXNlIEJBRDpcbiAgICAgICAgcmV0ID0gWl9EQVRBX0VSUk9SO1xuICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICBjYXNlIE1FTTpcbiAgICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SO1xuICAgICAgY2FzZSBTWU5DOlxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gICAgICB9XG4gICAgfVxuXG4gIC8vIGluZl9sZWF2ZSA8LSBoZXJlIGlzIHJlYWwgcGxhY2UgZm9yIFwiZ290byBpbmZfbGVhdmVcIiwgZW11bGF0ZWQgdmlhIFwiYnJlYWsgaW5mX2xlYXZlXCJcblxuICAvKlxuICAgICBSZXR1cm4gZnJvbSBpbmZsYXRlKCksIHVwZGF0aW5nIHRoZSB0b3RhbCBjb3VudHMgYW5kIHRoZSBjaGVjayB2YWx1ZS5cbiAgICAgSWYgdGhlcmUgd2FzIG5vIHByb2dyZXNzIGR1cmluZyB0aGUgaW5mbGF0ZSgpIGNhbGwsIHJldHVybiBhIGJ1ZmZlclxuICAgICBlcnJvci4gIENhbGwgdXBkYXRld2luZG93KCkgdG8gY3JlYXRlIGFuZC9vciB1cGRhdGUgdGhlIHdpbmRvdyBzdGF0ZS5cbiAgICAgTm90ZTogYSBtZW1vcnkgZXJyb3IgZnJvbSBpbmZsYXRlKCkgaXMgbm9uLXJlY292ZXJhYmxlLlxuICAgKi9cblxuICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgLy8tLS1cblxuICBpZiAoc3RhdGUud3NpemUgfHwgKF9vdXQgIT09IHN0cm0uYXZhaWxfb3V0ICYmIHN0YXRlLm1vZGUgPCBCQUQgJiZcbiAgICAgIChzdGF0ZS5tb2RlIDwgQ0hFQ0sgfHwgZmx1c2ggIT09IFpfRklOSVNIKSkpIHtcbiAgICBpZiAodXBkYXRld2luZG93KHN0cm0sIHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0LCBfb3V0IC0gc3RybS5hdmFpbF9vdXQpKSB7XG4gICAgICBzdGF0ZS5tb2RlID0gTUVNO1xuICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SO1xuICAgIH1cbiAgfVxuICBfaW4gLT0gc3RybS5hdmFpbF9pbjtcbiAgX291dCAtPSBzdHJtLmF2YWlsX291dDtcbiAgc3RybS50b3RhbF9pbiArPSBfaW47XG4gIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7XG4gIHN0YXRlLnRvdGFsICs9IF9vdXQ7XG4gIGlmIChzdGF0ZS53cmFwICYmIF9vdXQpIHtcbiAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAvKlVQREFURShzdGF0ZS5jaGVjaywgc3RybS5uZXh0X291dCAtIF9vdXQsIF9vdXQpOyovXG4gICAgICAoc3RhdGUuZmxhZ3MgPyBjcmMzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBzdHJtLm5leHRfb3V0IC0gX291dCkgOiBhZGxlcjMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHN0cm0ubmV4dF9vdXQgLSBfb3V0KSk7XG4gIH1cbiAgc3RybS5kYXRhX3R5cGUgPSBzdGF0ZS5iaXRzICsgKHN0YXRlLmxhc3QgPyA2NCA6IDApICtcbiAgICAoc3RhdGUubW9kZSA9PT0gVFlQRSA/IDEyOCA6IDApICtcbiAgICAoc3RhdGUubW9kZSA9PT0gTEVOXyB8fCBzdGF0ZS5tb2RlID09PSBDT1BZXyA/IDI1NiA6IDApO1xuICBpZiAoKChfaW4gPT09IDAgJiYgX291dCA9PT0gMCkgfHwgZmx1c2ggPT09IFpfRklOSVNIKSAmJiByZXQgPT09IFpfT0spIHtcbiAgICByZXQgPSBaX0JVRl9FUlJPUjtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5mbGF0ZUVuZChzdHJtKSB7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIC8qfHwgc3RybS0+emZyZWUgPT0gKGZyZWVfZnVuYykwKi8gKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgdmFyIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKHN0YXRlLndpbmRvdykge1xuICAgIHN0YXRlLndpbmRvdyA9IG51bGw7XG4gIH1cbiAgc3RybS5zdGF0ZSA9IG51bGw7XG4gIHJldHVybiBaX09LO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5mbGF0ZUdldEhlYWRlcihzdHJtLCBoZWFkKSB7XG4gIHZhciBzdGF0ZTtcblxuICAvKiBjaGVjayBzdGF0ZSAqL1xuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBpZiAoKHN0YXRlLndyYXAgJiAyKSA9PT0gMCkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIC8qIHNhdmUgaGVhZGVyIHN0cnVjdHVyZSAqL1xuICBzdGF0ZS5oZWFkID0gaGVhZDtcbiAgaGVhZC5kb25lID0gZmFsc2U7XG4gIHJldHVybiBaX09LO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5mbGF0ZVNldERpY3Rpb25hcnkoc3RybSwgZGljdGlvbmFyeSkge1xuICB2YXIgZGljdExlbmd0aCA9IGRpY3Rpb25hcnkubGVuZ3RoO1xuXG4gIHZhciBzdGF0ZTtcbiAgdmFyIGRpY3RpZDtcbiAgdmFyIHJldDtcblxuICAvKiBjaGVjayBzdGF0ZSAqL1xuICBpZiAoIXN0cm0gLyogPT0gWl9OVUxMICovIHx8ICFzdHJtLnN0YXRlIC8qID09IFpfTlVMTCAqLyApIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuXG4gIGlmIChzdGF0ZS53cmFwICE9PSAwICYmIHN0YXRlLm1vZGUgIT09IERJQ1QpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICAvKiBjaGVjayBmb3IgY29ycmVjdCBkaWN0aW9uYXJ5IGlkZW50aWZpZXIgKi9cbiAgaWYgKHN0YXRlLm1vZGUgPT09IERJQ1QpIHtcbiAgICBkaWN0aWQgPSAxOyAvKiBhZGxlcjMyKDAsIG51bGwsIDApKi9cbiAgICAvKiBkaWN0aWQgPSBhZGxlcjMyKGRpY3RpZCwgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7ICovXG4gICAgZGljdGlkID0gYWRsZXIzMihkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIDApO1xuICAgIGlmIChkaWN0aWQgIT09IHN0YXRlLmNoZWNrKSB7XG4gICAgICByZXR1cm4gWl9EQVRBX0VSUk9SO1xuICAgIH1cbiAgfVxuICAvKiBjb3B5IGRpY3Rpb25hcnkgdG8gd2luZG93IHVzaW5nIHVwZGF0ZXdpbmRvdygpLCB3aGljaCB3aWxsIGFtZW5kIHRoZVxuICAgZXhpc3RpbmcgZGljdGlvbmFyeSBpZiBhcHByb3ByaWF0ZSAqL1xuICByZXQgPSB1cGRhdGV3aW5kb3coc3RybSwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgZGljdExlbmd0aCk7XG4gIGlmIChyZXQpIHtcbiAgICBzdGF0ZS5tb2RlID0gTUVNO1xuICAgIHJldHVybiBaX01FTV9FUlJPUjtcbiAgfVxuICBzdGF0ZS5oYXZlZGljdCA9IDE7XG4gIC8vIFRyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgZGljdGlvbmFyeSBzZXRcXG5cIikpO1xuICByZXR1cm4gWl9PSztcbn1cblxuZXhwb3J0IHZhciBpbmZsYXRlSW5mbyA9ICdwYWtvIGluZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpJztcblxuLyogTm90IGltcGxlbWVudGVkXG5leHBvcnRzLmluZmxhdGVDb3B5ID0gaW5mbGF0ZUNvcHk7XG5leHBvcnRzLmluZmxhdGVHZXREaWN0aW9uYXJ5ID0gaW5mbGF0ZUdldERpY3Rpb25hcnk7XG5leHBvcnRzLmluZmxhdGVNYXJrID0gaW5mbGF0ZU1hcms7XG5leHBvcnRzLmluZmxhdGVQcmltZSA9IGluZmxhdGVQcmltZTtcbmV4cG9ydHMuaW5mbGF0ZVN5bmMgPSBpbmZsYXRlU3luYztcbmV4cG9ydHMuaW5mbGF0ZVN5bmNQb2ludCA9IGluZmxhdGVTeW5jUG9pbnQ7XG5leHBvcnRzLmluZmxhdGVVbmRlcm1pbmUgPSBpbmZsYXRlVW5kZXJtaW5lO1xuKi9cbiIsImltcG9ydCBtc2cgZnJvbSAnLi9tZXNzYWdlcyc7XG5pbXBvcnQgenN0cmVhbSBmcm9tICcuL3pzdHJlYW0nO1xuaW1wb3J0IHtkZWZsYXRlSW5pdDIsIGRlZmxhdGVFbmQsIGRlZmxhdGVSZXNldCwgZGVmbGF0ZX0gZnJvbSAnLi9kZWZsYXRlJztcbmltcG9ydCB7aW5mbGF0ZUluaXQyLCBpbmZsYXRlLCBpbmZsYXRlRW5kLCBpbmZsYXRlUmVzZXR9IGZyb20gJy4vaW5mbGF0ZSc7XG4vLyBpbXBvcnQgY29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzJztcblxuXG4vLyB6bGliIG1vZGVzXG5leHBvcnQgdmFyIE5PTkUgPSAwO1xuZXhwb3J0IHZhciBERUZMQVRFID0gMTtcbmV4cG9ydCB2YXIgSU5GTEFURSA9IDI7XG5leHBvcnQgdmFyIEdaSVAgPSAzO1xuZXhwb3J0IHZhciBHVU5aSVAgPSA0O1xuZXhwb3J0IHZhciBERUZMQVRFUkFXID0gNTtcbmV4cG9ydCB2YXIgSU5GTEFURVJBVyA9IDY7XG5leHBvcnQgdmFyIFVOWklQID0gNztcbmV4cG9ydCB2YXIgWl9OT19GTFVTSD0gICAgICAgICAwLFxuICBaX1BBUlRJQUxfRkxVU0g9ICAgIDEsXG4gIFpfU1lOQ19GTFVTSD0gICAgMixcbiAgWl9GVUxMX0ZMVVNIPSAgICAgICAzLFxuICBaX0ZJTklTSD0gICAgICAgNCxcbiAgWl9CTE9DSz0gICAgICAgICAgIDUsXG4gIFpfVFJFRVM9ICAgICAgICAgICAgNixcblxuICAvKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXG4gICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxuICAqL1xuICBaX09LPSAgICAgICAgICAgICAgIDAsXG4gIFpfU1RSRUFNX0VORD0gICAgICAgMSxcbiAgWl9ORUVEX0RJQ1Q9ICAgICAgMixcbiAgWl9FUlJOTz0gICAgICAgLTEsXG4gIFpfU1RSRUFNX0VSUk9SPSAgIC0yLFxuICBaX0RBVEFfRVJST1I9ICAgIC0zLFxuICAvL1pfTUVNX0VSUk9SOiAgICAgLTQsXG4gIFpfQlVGX0VSUk9SPSAgICAtNSxcbiAgLy9aX1ZFUlNJT05fRVJST1I6IC02LFxuXG4gIC8qIGNvbXByZXNzaW9uIGxldmVscyAqL1xuICBaX05PX0NPTVBSRVNTSU9OPSAgICAgICAgIDAsXG4gIFpfQkVTVF9TUEVFRD0gICAgICAgICAgICAgMSxcbiAgWl9CRVNUX0NPTVBSRVNTSU9OPSAgICAgICA5LFxuICBaX0RFRkFVTFRfQ09NUFJFU1NJT049ICAgLTEsXG5cblxuICBaX0ZJTFRFUkVEPSAgICAgICAgICAgICAgIDEsXG4gIFpfSFVGRk1BTl9PTkxZPSAgICAgICAgICAgMixcbiAgWl9STEU9ICAgICAgICAgICAgICAgICAgICAzLFxuICBaX0ZJWEVEPSAgICAgICAgICAgICAgICAgIDQsXG4gIFpfREVGQVVMVF9TVFJBVEVHWT0gICAgICAgMCxcblxuICAvKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG4gIFpfQklOQVJZPSAgICAgICAgICAgICAgICAgMCxcbiAgWl9URVhUPSAgICAgICAgICAgICAgICAgICAxLFxuICAvL1pfQVNDSUk6ICAgICAgICAgICAgICAgIDEsIC8vID0gWl9URVhUIChkZXByZWNhdGVkKVxuICBaX1VOS05PV049ICAgICAgICAgICAgICAgIDIsXG5cbiAgLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXG4gIFpfREVGTEFURUQ9ICAgICAgICAgICAgICAgODtcbmV4cG9ydCBmdW5jdGlvbiBabGliKG1vZGUpIHtcbiAgaWYgKG1vZGUgPCBERUZMQVRFIHx8IG1vZGUgPiBVTlpJUClcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgYXJndW1lbnQnKTtcblxuICB0aGlzLm1vZGUgPSBtb2RlO1xuICB0aGlzLmluaXRfZG9uZSA9IGZhbHNlO1xuICB0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gZmFsc2U7XG4gIHRoaXMucGVuZGluZ19jbG9zZSA9IGZhbHNlO1xuICB0aGlzLndpbmRvd0JpdHMgPSAwO1xuICB0aGlzLmxldmVsID0gMDtcbiAgdGhpcy5tZW1MZXZlbCA9IDA7XG4gIHRoaXMuc3RyYXRlZ3kgPSAwO1xuICB0aGlzLmRpY3Rpb25hcnkgPSBudWxsO1xufVxuXG5abGliLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24od2luZG93Qml0cywgbGV2ZWwsIG1lbUxldmVsLCBzdHJhdGVneSwgZGljdGlvbmFyeSkge1xuICB0aGlzLndpbmRvd0JpdHMgPSB3aW5kb3dCaXRzO1xuICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gIHRoaXMubWVtTGV2ZWwgPSBtZW1MZXZlbDtcbiAgdGhpcy5zdHJhdGVneSA9IHN0cmF0ZWd5O1xuICAvLyBkaWN0aW9uYXJ5IG5vdCBzdXBwb3J0ZWQuXG5cbiAgaWYgKHRoaXMubW9kZSA9PT0gR1pJUCB8fCB0aGlzLm1vZGUgPT09IEdVTlpJUClcbiAgICB0aGlzLndpbmRvd0JpdHMgKz0gMTY7XG5cbiAgaWYgKHRoaXMubW9kZSA9PT0gVU5aSVApXG4gICAgdGhpcy53aW5kb3dCaXRzICs9IDMyO1xuXG4gIGlmICh0aGlzLm1vZGUgPT09IERFRkxBVEVSQVcgfHwgdGhpcy5tb2RlID09PSBJTkZMQVRFUkFXKVxuICAgIHRoaXMud2luZG93Qml0cyA9IC10aGlzLndpbmRvd0JpdHM7XG5cbiAgdGhpcy5zdHJtID0gbmV3IHpzdHJlYW0oKTtcbiAgdmFyIHN0YXR1cztcbiAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgY2FzZSBERUZMQVRFOlxuICBjYXNlIEdaSVA6XG4gIGNhc2UgREVGTEFURVJBVzpcbiAgICBzdGF0dXMgPSBkZWZsYXRlSW5pdDIoXG4gICAgICB0aGlzLnN0cm0sXG4gICAgICB0aGlzLmxldmVsLFxuICAgICAgWl9ERUZMQVRFRCxcbiAgICAgIHRoaXMud2luZG93Qml0cyxcbiAgICAgIHRoaXMubWVtTGV2ZWwsXG4gICAgICB0aGlzLnN0cmF0ZWd5XG4gICAgKTtcbiAgICBicmVhaztcbiAgY2FzZSBJTkZMQVRFOlxuICBjYXNlIEdVTlpJUDpcbiAgY2FzZSBJTkZMQVRFUkFXOlxuICBjYXNlIFVOWklQOlxuICAgIHN0YXR1cyAgPSBpbmZsYXRlSW5pdDIoXG4gICAgICB0aGlzLnN0cm0sXG4gICAgICB0aGlzLndpbmRvd0JpdHNcbiAgICApO1xuICAgIGJyZWFrO1xuICBkZWZhdWx0OlxuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtb2RlICcgKyB0aGlzLm1vZGUpO1xuICB9XG5cbiAgaWYgKHN0YXR1cyAhPT0gWl9PSykge1xuICAgIHRoaXMuX2Vycm9yKHN0YXR1cyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IGZhbHNlO1xuICB0aGlzLmluaXRfZG9uZSA9IHRydWU7XG59O1xuXG5abGliLnByb3RvdHlwZS5wYXJhbXMgPSBmdW5jdGlvbigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdkZWZsYXRlUGFyYW1zIE5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cblpsaWIucHJvdG90eXBlLl93cml0ZUNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5pbml0X2RvbmUpXG4gICAgdGhyb3cgbmV3IEVycm9yKCd3cml0ZSBiZWZvcmUgaW5pdCcpO1xuXG4gIGlmICh0aGlzLm1vZGUgPT09IE5PTkUpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdhbHJlYWR5IGZpbmFsaXplZCcpO1xuXG4gIGlmICh0aGlzLndyaXRlX2luX3Byb2dyZXNzKVxuICAgIHRocm93IG5ldyBFcnJvcignd3JpdGUgYWxyZWFkeSBpbiBwcm9ncmVzcycpO1xuXG4gIGlmICh0aGlzLnBlbmRpbmdfY2xvc2UpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbG9zZSBpcyBwZW5kaW5nJyk7XG59O1xuXG5abGliLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGZsdXNoLCBpbnB1dCwgaW5fb2ZmLCBpbl9sZW4sIG91dCwgb3V0X29mZiwgb3V0X2xlbikge1xuICB0aGlzLl93cml0ZUNoZWNrKCk7XG4gIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSB0cnVlO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICBzZWxmLndyaXRlX2luX3Byb2dyZXNzID0gZmFsc2U7XG4gICAgdmFyIHJlcyA9IHNlbGYuX3dyaXRlKGZsdXNoLCBpbnB1dCwgaW5fb2ZmLCBpbl9sZW4sIG91dCwgb3V0X29mZiwgb3V0X2xlbik7XG4gICAgc2VsZi5jYWxsYmFjayhyZXNbMF0sIHJlc1sxXSk7XG5cbiAgICBpZiAoc2VsZi5wZW5kaW5nX2Nsb3NlKVxuICAgICAgc2VsZi5jbG9zZSgpO1xuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCBtZXRob2QgZm9yIE5vZGUgYnVmZmVycywgdXNlZCBieSBwYWtvXG5mdW5jdGlvbiBidWZmZXJTZXQoZGF0YSwgb2Zmc2V0KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSBkYXRhW2ldO1xuICB9XG59XG5cblpsaWIucHJvdG90eXBlLndyaXRlU3luYyA9IGZ1bmN0aW9uKGZsdXNoLCBpbnB1dCwgaW5fb2ZmLCBpbl9sZW4sIG91dCwgb3V0X29mZiwgb3V0X2xlbikge1xuICB0aGlzLl93cml0ZUNoZWNrKCk7XG4gIHJldHVybiB0aGlzLl93cml0ZShmbHVzaCwgaW5wdXQsIGluX29mZiwgaW5fbGVuLCBvdXQsIG91dF9vZmYsIG91dF9sZW4pO1xufTtcblxuWmxpYi5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oZmx1c2gsIGlucHV0LCBpbl9vZmYsIGluX2xlbiwgb3V0LCBvdXRfb2ZmLCBvdXRfbGVuKSB7XG4gIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSB0cnVlO1xuXG4gIGlmIChmbHVzaCAhPT0gWl9OT19GTFVTSCAmJlxuICAgICAgZmx1c2ggIT09IFpfUEFSVElBTF9GTFVTSCAmJlxuICAgICAgZmx1c2ggIT09IFpfU1lOQ19GTFVTSCAmJlxuICAgICAgZmx1c2ggIT09IFpfRlVMTF9GTFVTSCAmJlxuICAgICAgZmx1c2ggIT09IFpfRklOSVNIICYmXG4gICAgICBmbHVzaCAhPT0gWl9CTE9DSykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBmbHVzaCB2YWx1ZScpO1xuICB9XG5cbiAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICBpbnB1dCA9IG5ldyBCdWZmZXIoMCk7XG4gICAgaW5fbGVuID0gMDtcbiAgICBpbl9vZmYgPSAwO1xuICB9XG5cbiAgaWYgKG91dC5fc2V0KVxuICAgIG91dC5zZXQgPSBvdXQuX3NldDtcbiAgZWxzZVxuICAgIG91dC5zZXQgPSBidWZmZXJTZXQ7XG5cbiAgdmFyIHN0cm0gPSB0aGlzLnN0cm07XG4gIHN0cm0uYXZhaWxfaW4gPSBpbl9sZW47XG4gIHN0cm0uaW5wdXQgPSBpbnB1dDtcbiAgc3RybS5uZXh0X2luID0gaW5fb2ZmO1xuICBzdHJtLmF2YWlsX291dCA9IG91dF9sZW47XG4gIHN0cm0ub3V0cHV0ID0gb3V0O1xuICBzdHJtLm5leHRfb3V0ID0gb3V0X29mZjtcbiAgdmFyIHN0YXR1cztcbiAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgY2FzZSBERUZMQVRFOlxuICBjYXNlIEdaSVA6XG4gIGNhc2UgREVGTEFURVJBVzpcbiAgICBzdGF0dXMgPSBkZWZsYXRlKHN0cm0sIGZsdXNoKTtcbiAgICBicmVhaztcbiAgY2FzZSBVTlpJUDpcbiAgY2FzZSBJTkZMQVRFOlxuICBjYXNlIEdVTlpJUDpcbiAgY2FzZSBJTkZMQVRFUkFXOlxuICAgIHN0YXR1cyA9IGluZmxhdGUoc3RybSwgZmx1c2gpO1xuICAgIGJyZWFrO1xuICBkZWZhdWx0OlxuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtb2RlICcgKyB0aGlzLm1vZGUpO1xuICB9XG5cbiAgaWYgKHN0YXR1cyAhPT0gWl9TVFJFQU1fRU5EICYmIHN0YXR1cyAhPT0gWl9PSykge1xuICAgIHRoaXMuX2Vycm9yKHN0YXR1cyk7XG4gIH1cblxuICB0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gZmFsc2U7XG4gIHJldHVybiBbc3RybS5hdmFpbF9pbiwgc3RybS5hdmFpbF9vdXRdO1xufTtcblxuWmxpYi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MpIHtcbiAgICB0aGlzLnBlbmRpbmdfY2xvc2UgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMucGVuZGluZ19jbG9zZSA9IGZhbHNlO1xuXG4gIGlmICh0aGlzLm1vZGUgPT09IERFRkxBVEUgfHwgdGhpcy5tb2RlID09PSBHWklQIHx8IHRoaXMubW9kZSA9PT0gREVGTEFURVJBVykge1xuICAgIGRlZmxhdGVFbmQodGhpcy5zdHJtKTtcbiAgfSBlbHNlIHtcbiAgICBpbmZsYXRlRW5kKHRoaXMuc3RybSk7XG4gIH1cblxuICB0aGlzLm1vZGUgPSBOT05FO1xufTtcbnZhciBzdGF0dXNcblpsaWIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gIGNhc2UgREVGTEFURTpcbiAgY2FzZSBERUZMQVRFUkFXOlxuICAgIHN0YXR1cyA9IGRlZmxhdGVSZXNldCh0aGlzLnN0cm0pO1xuICAgIGJyZWFrO1xuICBjYXNlIElORkxBVEU6XG4gIGNhc2UgSU5GTEFURVJBVzpcbiAgICBzdGF0dXMgPSBpbmZsYXRlUmVzZXQodGhpcy5zdHJtKTtcbiAgICBicmVhaztcbiAgfVxuXG4gIGlmIChzdGF0dXMgIT09IFpfT0spIHtcbiAgICB0aGlzLl9lcnJvcihzdGF0dXMpO1xuICB9XG59O1xuXG5abGliLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbihzdGF0dXMpIHtcbiAgdGhpcy5vbmVycm9yKG1zZ1tzdGF0dXNdICsgJzogJyArIHRoaXMuc3RybS5tc2csIHN0YXR1cyk7XG5cbiAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IGZhbHNlO1xuICBpZiAodGhpcy5wZW5kaW5nX2Nsb3NlKVxuICAgIHRoaXMuY2xvc2UoKTtcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtUcmFuc2Zvcm19IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgKiBhcyBfYmluZGluZyBmcm9tICcuL3psaWItbGliL2JpbmRpbmcnO1xuaW1wb3J0IHtpbmhlcml0c30gZnJvbSAndXRpbCc7XG5mdW5jdGlvbiBhc3NlcnQgKGEsIG1zZykge1xuICBpZiAoIWEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgfVxufVxudmFyIGJpbmRpbmcgPSB7fTtcbk9iamVjdC5rZXlzKF9iaW5kaW5nKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgYmluZGluZ1trZXldID0gX2JpbmRpbmdba2V5XTtcbn0pO1xuLy8gemxpYiBkb2Vzbid0IHByb3ZpZGUgdGhlc2UsIHNvIGtsdWRnZSB0aGVtIGluIGZvbGxvd2luZyB0aGUgc2FtZVxuLy8gY29uc3QgbmFtaW5nIHNjaGVtZSB6bGliIHVzZXMuXG5iaW5kaW5nLlpfTUlOX1dJTkRPV0JJVFMgPSA4O1xuYmluZGluZy5aX01BWF9XSU5ET1dCSVRTID0gMTU7XG5iaW5kaW5nLlpfREVGQVVMVF9XSU5ET1dCSVRTID0gMTU7XG5cbi8vIGZld2VyIHRoYW4gNjQgYnl0ZXMgcGVyIGNodW5rIGlzIHN0dXBpZC5cbi8vIHRlY2huaWNhbGx5IGl0IGNvdWxkIHdvcmsgd2l0aCBhcyBmZXcgYXMgOCwgYnV0IGV2ZW4gNjQgYnl0ZXNcbi8vIGlzIGFic3VyZGx5IGxvdy4gIFVzdWFsbHkgYSBNQiBvciBtb3JlIGlzIGJlc3QuXG5iaW5kaW5nLlpfTUlOX0NIVU5LID0gNjQ7XG5iaW5kaW5nLlpfTUFYX0NIVU5LID0gSW5maW5pdHk7XG5iaW5kaW5nLlpfREVGQVVMVF9DSFVOSyA9ICgxNiAqIDEwMjQpO1xuXG5iaW5kaW5nLlpfTUlOX01FTUxFVkVMID0gMTtcbmJpbmRpbmcuWl9NQVhfTUVNTEVWRUwgPSA5O1xuYmluZGluZy5aX0RFRkFVTFRfTUVNTEVWRUwgPSA4O1xuXG5iaW5kaW5nLlpfTUlOX0xFVkVMID0gLTE7XG5iaW5kaW5nLlpfTUFYX0xFVkVMID0gOTtcbmJpbmRpbmcuWl9ERUZBVUxUX0xFVkVMID0gYmluZGluZy5aX0RFRkFVTFRfQ09NUFJFU1NJT047XG5cblxuLy8gdHJhbnNsYXRpb24gdGFibGUgZm9yIHJldHVybiBjb2Rlcy5cbmV4cG9ydCB2YXIgY29kZXMgPSB7XG4gIFpfT0s6IGJpbmRpbmcuWl9PSyxcbiAgWl9TVFJFQU1fRU5EOiBiaW5kaW5nLlpfU1RSRUFNX0VORCxcbiAgWl9ORUVEX0RJQ1Q6IGJpbmRpbmcuWl9ORUVEX0RJQ1QsXG4gIFpfRVJSTk86IGJpbmRpbmcuWl9FUlJOTyxcbiAgWl9TVFJFQU1fRVJST1I6IGJpbmRpbmcuWl9TVFJFQU1fRVJST1IsXG4gIFpfREFUQV9FUlJPUjogYmluZGluZy5aX0RBVEFfRVJST1IsXG4gIFpfTUVNX0VSUk9SOiBiaW5kaW5nLlpfTUVNX0VSUk9SLFxuICBaX0JVRl9FUlJPUjogYmluZGluZy5aX0JVRl9FUlJPUixcbiAgWl9WRVJTSU9OX0VSUk9SOiBiaW5kaW5nLlpfVkVSU0lPTl9FUlJPUlxufTtcblxuT2JqZWN0LmtleXMoY29kZXMpLmZvckVhY2goZnVuY3Rpb24oaykge1xuICBjb2Rlc1tjb2Rlc1trXV0gPSBrO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZsYXRlKG8pIHtcbiAgcmV0dXJuIG5ldyBEZWZsYXRlKG8pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW5mbGF0ZShvKSB7XG4gIHJldHVybiBuZXcgSW5mbGF0ZShvKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlZmxhdGVSYXcobykge1xuICByZXR1cm4gbmV3IERlZmxhdGVSYXcobyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbmZsYXRlUmF3KG8pIHtcbiAgcmV0dXJuIG5ldyBJbmZsYXRlUmF3KG8pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlR3ppcChvKSB7XG4gIHJldHVybiBuZXcgR3ppcChvKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUd1bnppcChvKSB7XG4gIHJldHVybiBuZXcgR3VuemlwKG8pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW56aXAobykge1xuICByZXR1cm4gbmV3IFVuemlwKG8pO1xufVxuXG5cbi8vIENvbnZlbmllbmNlIG1ldGhvZHMuXG4vLyBjb21wcmVzcy9kZWNvbXByZXNzIGEgc3RyaW5nIG9yIGJ1ZmZlciBpbiBvbmUgc3RlcC5cbmV4cG9ydCBmdW5jdGlvbiBkZWZsYXRlKGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRzO1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICByZXR1cm4gemxpYkJ1ZmZlcihuZXcgRGVmbGF0ZShvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZsYXRlU3luYyhidWZmZXIsIG9wdHMpIHtcbiAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBEZWZsYXRlKG9wdHMpLCBidWZmZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3ppcChidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cbiAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IEd6aXAob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3ppcFN5bmMoYnVmZmVyLCBvcHRzKSB7XG4gIHJldHVybiB6bGliQnVmZmVyU3luYyhuZXcgR3ppcChvcHRzKSwgYnVmZmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmxhdGVSYXcoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBEZWZsYXRlUmF3KG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmxhdGVSYXdTeW5jKGJ1ZmZlciwgb3B0cykge1xuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IERlZmxhdGVSYXcob3B0cyksIGJ1ZmZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnppcChidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cbiAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IFVuemlwKG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuemlwU3luYyhidWZmZXIsIG9wdHMpIHtcbiAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBVbnppcChvcHRzKSwgYnVmZmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZmxhdGUoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBJbmZsYXRlKG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZmxhdGVTeW5jKGJ1ZmZlciwgb3B0cykge1xuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IEluZmxhdGUob3B0cyksIGJ1ZmZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBndW56aXAoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBHdW56aXAob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3VuemlwU3luYyhidWZmZXIsIG9wdHMpIHtcbiAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBHdW56aXAob3B0cyksIGJ1ZmZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmZsYXRlUmF3KGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRzO1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICByZXR1cm4gemxpYkJ1ZmZlcihuZXcgSW5mbGF0ZVJhdyhvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmZsYXRlUmF3U3luYyhidWZmZXIsIG9wdHMpIHtcbiAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBJbmZsYXRlUmF3KG9wdHMpLCBidWZmZXIpO1xufVxuXG5mdW5jdGlvbiB6bGliQnVmZmVyKGVuZ2luZSwgYnVmZmVyLCBjYWxsYmFjaykge1xuICB2YXIgYnVmZmVycyA9IFtdO1xuICB2YXIgbnJlYWQgPSAwO1xuXG4gIGVuZ2luZS5vbignZXJyb3InLCBvbkVycm9yKTtcbiAgZW5naW5lLm9uKCdlbmQnLCBvbkVuZCk7XG5cbiAgZW5naW5lLmVuZChidWZmZXIpO1xuICBmbG93KCk7XG5cbiAgZnVuY3Rpb24gZmxvdygpIHtcbiAgICB2YXIgY2h1bms7XG4gICAgd2hpbGUgKG51bGwgIT09IChjaHVuayA9IGVuZ2luZS5yZWFkKCkpKSB7XG4gICAgICBidWZmZXJzLnB1c2goY2h1bmspO1xuICAgICAgbnJlYWQgKz0gY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgICBlbmdpbmUub25jZSgncmVhZGFibGUnLCBmbG93KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRXJyb3IoZXJyKSB7XG4gICAgZW5naW5lLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbkVuZCk7XG4gICAgZW5naW5lLnJlbW92ZUxpc3RlbmVyKCdyZWFkYWJsZScsIGZsb3cpO1xuICAgIGNhbGxiYWNrKGVycik7XG4gIH1cblxuICBmdW5jdGlvbiBvbkVuZCgpIHtcbiAgICB2YXIgYnVmID0gQnVmZmVyLmNvbmNhdChidWZmZXJzLCBucmVhZCk7XG4gICAgYnVmZmVycyA9IFtdO1xuICAgIGNhbGxiYWNrKG51bGwsIGJ1Zik7XG4gICAgZW5naW5lLmNsb3NlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gemxpYkJ1ZmZlclN5bmMoZW5naW5lLCBidWZmZXIpIHtcbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKVxuICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIoYnVmZmVyKTtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdOb3QgYSBzdHJpbmcgb3IgYnVmZmVyJyk7XG5cbiAgdmFyIGZsdXNoRmxhZyA9IGJpbmRpbmcuWl9GSU5JU0g7XG5cbiAgcmV0dXJuIGVuZ2luZS5fcHJvY2Vzc0NodW5rKGJ1ZmZlciwgZmx1c2hGbGFnKTtcbn1cblxuLy8gZ2VuZXJpYyB6bGliXG4vLyBtaW5pbWFsIDItYnl0ZSBoZWFkZXJcbmV4cG9ydCBmdW5jdGlvbiBEZWZsYXRlKG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIERlZmxhdGUpKSByZXR1cm4gbmV3IERlZmxhdGUob3B0cyk7XG4gIFpsaWIuY2FsbCh0aGlzLCBvcHRzLCBiaW5kaW5nLkRFRkxBVEUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSW5mbGF0ZShvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBJbmZsYXRlKSkgcmV0dXJuIG5ldyBJbmZsYXRlKG9wdHMpO1xuICBabGliLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5JTkZMQVRFKTtcbn1cblxuXG5cbi8vIGd6aXAgLSBiaWdnZXIgaGVhZGVyLCBzYW1lIGRlZmxhdGUgY29tcHJlc3Npb25cbmV4cG9ydCBmdW5jdGlvbiBHemlwKG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEd6aXApKSByZXR1cm4gbmV3IEd6aXAob3B0cyk7XG4gIFpsaWIuY2FsbCh0aGlzLCBvcHRzLCBiaW5kaW5nLkdaSVApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gR3VuemlwKG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEd1bnppcCkpIHJldHVybiBuZXcgR3VuemlwKG9wdHMpO1xuICBabGliLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5HVU5aSVApO1xufVxuXG5cblxuLy8gcmF3IC0gbm8gaGVhZGVyXG5leHBvcnQgZnVuY3Rpb24gRGVmbGF0ZVJhdyhvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWZsYXRlUmF3KSkgcmV0dXJuIG5ldyBEZWZsYXRlUmF3KG9wdHMpO1xuICBabGliLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5ERUZMQVRFUkFXKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEluZmxhdGVSYXcob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSW5mbGF0ZVJhdykpIHJldHVybiBuZXcgSW5mbGF0ZVJhdyhvcHRzKTtcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuSU5GTEFURVJBVyk7XG59XG5cblxuLy8gYXV0by1kZXRlY3QgaGVhZGVyLlxuZXhwb3J0IGZ1bmN0aW9uIFVuemlwKG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFVuemlwKSkgcmV0dXJuIG5ldyBVbnppcChvcHRzKTtcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuVU5aSVApO1xufVxuXG5cbi8vIHRoZSBabGliIGNsYXNzIHRoZXkgYWxsIGluaGVyaXQgZnJvbVxuLy8gVGhpcyB0aGluZyBtYW5hZ2VzIHRoZSBxdWV1ZSBvZiByZXF1ZXN0cywgYW5kIHJldHVybnNcbi8vIHRydWUgb3IgZmFsc2UgaWYgdGhlcmUgaXMgYW55dGhpbmcgaW4gdGhlIHF1ZXVlIHdoZW5cbi8vIHlvdSBjYWxsIHRoZSAud3JpdGUoKSBtZXRob2QuXG5cbmV4cG9ydCBmdW5jdGlvbiBabGliKG9wdHMsIG1vZGUpIHtcbiAgdGhpcy5fb3B0cyA9IG9wdHMgPSBvcHRzIHx8IHt9O1xuICB0aGlzLl9jaHVua1NpemUgPSBvcHRzLmNodW5rU2l6ZSB8fCBiaW5kaW5nLlpfREVGQVVMVF9DSFVOSztcblxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRzKTtcblxuICBpZiAob3B0cy5mbHVzaCkge1xuICAgIGlmIChvcHRzLmZsdXNoICE9PSBiaW5kaW5nLlpfTk9fRkxVU0ggJiZcbiAgICAgICAgb3B0cy5mbHVzaCAhPT0gYmluZGluZy5aX1BBUlRJQUxfRkxVU0ggJiZcbiAgICAgICAgb3B0cy5mbHVzaCAhPT0gYmluZGluZy5aX1NZTkNfRkxVU0ggJiZcbiAgICAgICAgb3B0cy5mbHVzaCAhPT0gYmluZGluZy5aX0ZVTExfRkxVU0ggJiZcbiAgICAgICAgb3B0cy5mbHVzaCAhPT0gYmluZGluZy5aX0ZJTklTSCAmJlxuICAgICAgICBvcHRzLmZsdXNoICE9PSBiaW5kaW5nLlpfQkxPQ0spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBmbHVzaCBmbGFnOiAnICsgb3B0cy5mbHVzaCk7XG4gICAgfVxuICB9XG4gIHRoaXMuX2ZsdXNoRmxhZyA9IG9wdHMuZmx1c2ggfHwgYmluZGluZy5aX05PX0ZMVVNIO1xuXG4gIGlmIChvcHRzLmNodW5rU2l6ZSkge1xuICAgIGlmIChvcHRzLmNodW5rU2l6ZSA8IGJpbmRpbmcuWl9NSU5fQ0hVTksgfHxcbiAgICAgICAgb3B0cy5jaHVua1NpemUgPiBiaW5kaW5nLlpfTUFYX0NIVU5LKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2h1bmsgc2l6ZTogJyArIG9wdHMuY2h1bmtTaXplKTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0cy53aW5kb3dCaXRzKSB7XG4gICAgaWYgKG9wdHMud2luZG93Qml0cyA8IGJpbmRpbmcuWl9NSU5fV0lORE9XQklUUyB8fFxuICAgICAgICBvcHRzLndpbmRvd0JpdHMgPiBiaW5kaW5nLlpfTUFYX1dJTkRPV0JJVFMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB3aW5kb3dCaXRzOiAnICsgb3B0cy53aW5kb3dCaXRzKTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0cy5sZXZlbCkge1xuICAgIGlmIChvcHRzLmxldmVsIDwgYmluZGluZy5aX01JTl9MRVZFTCB8fFxuICAgICAgICBvcHRzLmxldmVsID4gYmluZGluZy5aX01BWF9MRVZFTCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvbXByZXNzaW9uIGxldmVsOiAnICsgb3B0cy5sZXZlbCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdHMubWVtTGV2ZWwpIHtcbiAgICBpZiAob3B0cy5tZW1MZXZlbCA8IGJpbmRpbmcuWl9NSU5fTUVNTEVWRUwgfHxcbiAgICAgICAgb3B0cy5tZW1MZXZlbCA+IGJpbmRpbmcuWl9NQVhfTUVNTEVWRUwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtZW1MZXZlbDogJyArIG9wdHMubWVtTGV2ZWwpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRzLnN0cmF0ZWd5KSB7XG4gICAgaWYgKG9wdHMuc3RyYXRlZ3kgIT0gYmluZGluZy5aX0ZJTFRFUkVEICYmXG4gICAgICAgIG9wdHMuc3RyYXRlZ3kgIT0gYmluZGluZy5aX0hVRkZNQU5fT05MWSAmJlxuICAgICAgICBvcHRzLnN0cmF0ZWd5ICE9IGJpbmRpbmcuWl9STEUgJiZcbiAgICAgICAgb3B0cy5zdHJhdGVneSAhPSBiaW5kaW5nLlpfRklYRUQgJiZcbiAgICAgICAgb3B0cy5zdHJhdGVneSAhPSBiaW5kaW5nLlpfREVGQVVMVF9TVFJBVEVHWSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmF0ZWd5OiAnICsgb3B0cy5zdHJhdGVneSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdHMuZGljdGlvbmFyeSkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKG9wdHMuZGljdGlvbmFyeSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBkaWN0aW9uYXJ5OiBpdCBzaG91bGQgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLl9iaW5kaW5nID0gbmV3IGJpbmRpbmcuWmxpYihtb2RlKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuX2hhZEVycm9yID0gZmFsc2U7XG4gIHRoaXMuX2JpbmRpbmcub25lcnJvciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIGVycm5vKSB7XG4gICAgLy8gdGhlcmUgaXMgbm8gd2F5IHRvIGNsZWFubHkgcmVjb3Zlci5cbiAgICAvLyBjb250aW51aW5nIG9ubHkgb2JzY3VyZXMgcHJvYmxlbXMuXG4gICAgc2VsZi5fYmluZGluZyA9IG51bGw7XG4gICAgc2VsZi5faGFkRXJyb3IgPSB0cnVlO1xuXG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIGVycm9yLmVycm5vID0gZXJybm87XG4gICAgZXJyb3IuY29kZSA9IGJpbmRpbmcuY29kZXNbZXJybm9dO1xuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gIH07XG5cbiAgdmFyIGxldmVsID0gYmluZGluZy5aX0RFRkFVTFRfQ09NUFJFU1NJT047XG4gIGlmICh0eXBlb2Ygb3B0cy5sZXZlbCA9PT0gJ251bWJlcicpIGxldmVsID0gb3B0cy5sZXZlbDtcblxuICB2YXIgc3RyYXRlZ3kgPSBiaW5kaW5nLlpfREVGQVVMVF9TVFJBVEVHWTtcbiAgaWYgKHR5cGVvZiBvcHRzLnN0cmF0ZWd5ID09PSAnbnVtYmVyJykgc3RyYXRlZ3kgPSBvcHRzLnN0cmF0ZWd5O1xuXG4gIHRoaXMuX2JpbmRpbmcuaW5pdChvcHRzLndpbmRvd0JpdHMgfHwgYmluZGluZy5aX0RFRkFVTFRfV0lORE9XQklUUyxcbiAgICAgICAgICAgICAgICAgICAgIGxldmVsLFxuICAgICAgICAgICAgICAgICAgICAgb3B0cy5tZW1MZXZlbCB8fCBiaW5kaW5nLlpfREVGQVVMVF9NRU1MRVZFTCxcbiAgICAgICAgICAgICAgICAgICAgIHN0cmF0ZWd5LFxuICAgICAgICAgICAgICAgICAgICAgb3B0cy5kaWN0aW9uYXJ5KTtcblxuICB0aGlzLl9idWZmZXIgPSBuZXcgQnVmZmVyKHRoaXMuX2NodW5rU2l6ZSk7XG4gIHRoaXMuX29mZnNldCA9IDA7XG4gIHRoaXMuX2Nsb3NlZCA9IGZhbHNlO1xuICB0aGlzLl9sZXZlbCA9IGxldmVsO1xuICB0aGlzLl9zdHJhdGVneSA9IHN0cmF0ZWd5O1xuXG4gIHRoaXMub25jZSgnZW5kJywgdGhpcy5jbG9zZSk7XG59XG5cbmluaGVyaXRzKFpsaWIsIFRyYW5zZm9ybSk7XG5cblpsaWIucHJvdG90eXBlLnBhcmFtcyA9IGZ1bmN0aW9uKGxldmVsLCBzdHJhdGVneSwgY2FsbGJhY2spIHtcbiAgaWYgKGxldmVsIDwgYmluZGluZy5aX01JTl9MRVZFTCB8fFxuICAgICAgbGV2ZWwgPiBiaW5kaW5nLlpfTUFYX0xFVkVMKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgY29tcHJlc3Npb24gbGV2ZWw6ICcgKyBsZXZlbCk7XG4gIH1cbiAgaWYgKHN0cmF0ZWd5ICE9IGJpbmRpbmcuWl9GSUxURVJFRCAmJlxuICAgICAgc3RyYXRlZ3kgIT0gYmluZGluZy5aX0hVRkZNQU5fT05MWSAmJlxuICAgICAgc3RyYXRlZ3kgIT0gYmluZGluZy5aX1JMRSAmJlxuICAgICAgc3RyYXRlZ3kgIT0gYmluZGluZy5aX0ZJWEVEICYmXG4gICAgICBzdHJhdGVneSAhPSBiaW5kaW5nLlpfREVGQVVMVF9TVFJBVEVHWSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgc3RyYXRlZ3k6ICcgKyBzdHJhdGVneSk7XG4gIH1cblxuICBpZiAodGhpcy5fbGV2ZWwgIT09IGxldmVsIHx8IHRoaXMuX3N0cmF0ZWd5ICE9PSBzdHJhdGVneSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLmZsdXNoKGJpbmRpbmcuWl9TWU5DX0ZMVVNILCBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYuX2JpbmRpbmcucGFyYW1zKGxldmVsLCBzdHJhdGVneSk7XG4gICAgICBpZiAoIXNlbGYuX2hhZEVycm9yKSB7XG4gICAgICAgIHNlbGYuX2xldmVsID0gbGV2ZWw7XG4gICAgICAgIHNlbGYuX3N0cmF0ZWd5ID0gc3RyYXRlZ3k7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKTtcbiAgfVxufTtcblxuWmxpYi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2JpbmRpbmcucmVzZXQoKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIF9mbHVzaCBmdW5jdGlvbiBjYWxsZWQgYnkgdGhlIHRyYW5zZm9ybSBjbGFzcyxcbi8vIGludGVybmFsbHksIHdoZW4gdGhlIGxhc3QgY2h1bmsgaGFzIGJlZW4gd3JpdHRlbi5cblpsaWIucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHRoaXMuX3RyYW5zZm9ybShuZXcgQnVmZmVyKDApLCAnJywgY2FsbGJhY2spO1xufTtcblxuWmxpYi5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbihraW5kLCBjYWxsYmFjaykge1xuICB2YXIgd3MgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2Yga2luZCA9PT0gJ2Z1bmN0aW9uJyB8fCAoa2luZCA9PT0gdm9pZCAwICYmICFjYWxsYmFjaykpIHtcbiAgICBjYWxsYmFjayA9IGtpbmQ7XG4gICAga2luZCA9IGJpbmRpbmcuWl9GVUxMX0ZMVVNIO1xuICB9XG5cbiAgaWYgKHdzLmVuZGVkKSB7XG4gICAgaWYgKGNhbGxiYWNrKVxuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAod3MuZW5kaW5nKSB7XG4gICAgaWYgKGNhbGxiYWNrKVxuICAgICAgdGhpcy5vbmNlKCdlbmQnLCBjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAod3MubmVlZERyYWluKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYuZmx1c2goY2FsbGJhY2spO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2ZsdXNoRmxhZyA9IGtpbmQ7XG4gICAgdGhpcy53cml0ZShuZXcgQnVmZmVyKDApLCAnJywgY2FsbGJhY2spO1xuICB9XG59O1xuXG5abGliLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjaylcbiAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKTtcblxuICBpZiAodGhpcy5fY2xvc2VkKVxuICAgIHJldHVybjtcblxuICB0aGlzLl9jbG9zZWQgPSB0cnVlO1xuXG4gIHRoaXMuX2JpbmRpbmcuY2xvc2UoKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5lbWl0KCdjbG9zZScpO1xuICB9KTtcbn07XG5cblpsaWIucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBmbHVzaEZsYWc7XG4gIHZhciB3cyA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBlbmRpbmcgPSB3cy5lbmRpbmcgfHwgd3MuZW5kZWQ7XG4gIHZhciBsYXN0ID0gZW5kaW5nICYmICghY2h1bmsgfHwgd3MubGVuZ3RoID09PSBjaHVuay5sZW5ndGgpO1xuXG4gIGlmICghY2h1bmsgPT09IG51bGwgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpXG4gICAgcmV0dXJuIGNiKG5ldyBFcnJvcignaW52YWxpZCBpbnB1dCcpKTtcblxuICAvLyBJZiBpdCdzIHRoZSBsYXN0IGNodW5rLCBvciBhIGZpbmFsIGZsdXNoLCB3ZSB1c2UgdGhlIFpfRklOSVNIIGZsdXNoIGZsYWcuXG4gIC8vIElmIGl0J3MgZXhwbGljaXRseSBmbHVzaGluZyBhdCBzb21lIG90aGVyIHRpbWUsIHRoZW4gd2UgdXNlXG4gIC8vIFpfRlVMTF9GTFVTSC4gT3RoZXJ3aXNlLCB1c2UgWl9OT19GTFVTSCBmb3IgbWF4aW11bSBjb21wcmVzc2lvblxuICAvLyBnb29kbmVzcy5cbiAgaWYgKGxhc3QpXG4gICAgZmx1c2hGbGFnID0gYmluZGluZy5aX0ZJTklTSDtcbiAgZWxzZSB7XG4gICAgZmx1c2hGbGFnID0gdGhpcy5fZmx1c2hGbGFnO1xuICAgIC8vIG9uY2Ugd2UndmUgZmx1c2hlZCB0aGUgbGFzdCBvZiB0aGUgcXVldWUsIHN0b3AgZmx1c2hpbmcgYW5kXG4gICAgLy8gZ28gYmFjayB0byB0aGUgbm9ybWFsIGJlaGF2aW9yLlxuICAgIGlmIChjaHVuay5sZW5ndGggPj0gd3MubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9mbHVzaEZsYWcgPSB0aGlzLl9vcHRzLmZsdXNoIHx8IGJpbmRpbmcuWl9OT19GTFVTSDtcbiAgICB9XG4gIH1cblxuICB0aGlzLl9wcm9jZXNzQ2h1bmsoY2h1bmssIGZsdXNoRmxhZywgY2IpO1xufTtcblxuWmxpYi5wcm90b3R5cGUuX3Byb2Nlc3NDaHVuayA9IGZ1bmN0aW9uKGNodW5rLCBmbHVzaEZsYWcsIGNiKSB7XG4gIHZhciBhdmFpbEluQmVmb3JlID0gY2h1bmsgJiYgY2h1bmsubGVuZ3RoO1xuICB2YXIgYXZhaWxPdXRCZWZvcmUgPSB0aGlzLl9jaHVua1NpemUgLSB0aGlzLl9vZmZzZXQ7XG4gIHZhciBpbk9mZiA9IDA7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBhc3luYyA9IHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJztcblxuICBpZiAoIWFzeW5jKSB7XG4gICAgdmFyIGJ1ZmZlcnMgPSBbXTtcbiAgICB2YXIgbnJlYWQgPSAwO1xuXG4gICAgdmFyIGVycm9yO1xuICAgIHRoaXMub24oJ2Vycm9yJywgZnVuY3Rpb24oZXIpIHtcbiAgICAgIGVycm9yID0gZXI7XG4gICAgfSk7XG5cbiAgICBkbyB7XG4gICAgICB2YXIgcmVzID0gdGhpcy5fYmluZGluZy53cml0ZVN5bmMoZmx1c2hGbGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLCAvLyBpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluT2ZmLCAvLyBpbl9vZmZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmFpbEluQmVmb3JlLCAvLyBpbl9sZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWZmZXIsIC8vIG91dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29mZnNldCwgLy9vdXRfb2ZmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxPdXRCZWZvcmUpOyAvLyBvdXRfbGVuXG4gICAgfSB3aGlsZSAoIXRoaXMuX2hhZEVycm9yICYmIGNhbGxiYWNrKHJlc1swXSwgcmVzWzFdKSk7XG5cbiAgICBpZiAodGhpcy5faGFkRXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cblxuICAgIHZhciBidWYgPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMsIG5yZWFkKTtcbiAgICB0aGlzLmNsb3NlKCk7XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgdmFyIHJlcSA9IHRoaXMuX2JpbmRpbmcud3JpdGUoZmx1c2hGbGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVuaywgLy8gaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5PZmYsIC8vIGluX29mZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmFpbEluQmVmb3JlLCAvLyBpbl9sZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYnVmZmVyLCAvLyBvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0LCAvL291dF9vZmZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxPdXRCZWZvcmUpOyAvLyBvdXRfbGVuXG5cbiAgcmVxLmJ1ZmZlciA9IGNodW5rO1xuICByZXEuY2FsbGJhY2sgPSBjYWxsYmFjaztcblxuICBmdW5jdGlvbiBjYWxsYmFjayhhdmFpbEluQWZ0ZXIsIGF2YWlsT3V0QWZ0ZXIpIHtcbiAgICBpZiAoc2VsZi5faGFkRXJyb3IpXG4gICAgICByZXR1cm47XG5cbiAgICB2YXIgaGF2ZSA9IGF2YWlsT3V0QmVmb3JlIC0gYXZhaWxPdXRBZnRlcjtcbiAgICBhc3NlcnQoaGF2ZSA+PSAwLCAnaGF2ZSBzaG91bGQgbm90IGdvIGRvd24nKTtcblxuICAgIGlmIChoYXZlID4gMCkge1xuICAgICAgdmFyIG91dCA9IHNlbGYuX2J1ZmZlci5zbGljZShzZWxmLl9vZmZzZXQsIHNlbGYuX29mZnNldCArIGhhdmUpO1xuICAgICAgc2VsZi5fb2Zmc2V0ICs9IGhhdmU7XG4gICAgICAvLyBzZXJ2ZSBzb21lIG91dHB1dCB0byB0aGUgY29uc3VtZXIuXG4gICAgICBpZiAoYXN5bmMpIHtcbiAgICAgICAgc2VsZi5wdXNoKG91dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWZmZXJzLnB1c2gob3V0KTtcbiAgICAgICAgbnJlYWQgKz0gb3V0Lmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBleGhhdXN0ZWQgdGhlIG91dHB1dCBidWZmZXIsIG9yIHVzZWQgYWxsIHRoZSBpbnB1dCBjcmVhdGUgYSBuZXcgb25lLlxuICAgIGlmIChhdmFpbE91dEFmdGVyID09PSAwIHx8IHNlbGYuX29mZnNldCA+PSBzZWxmLl9jaHVua1NpemUpIHtcbiAgICAgIGF2YWlsT3V0QmVmb3JlID0gc2VsZi5fY2h1bmtTaXplO1xuICAgICAgc2VsZi5fb2Zmc2V0ID0gMDtcbiAgICAgIHNlbGYuX2J1ZmZlciA9IG5ldyBCdWZmZXIoc2VsZi5fY2h1bmtTaXplKTtcbiAgICB9XG5cbiAgICBpZiAoYXZhaWxPdXRBZnRlciA9PT0gMCkge1xuICAgICAgLy8gTm90IGFjdHVhbGx5IGRvbmUuICBOZWVkIHRvIHJlcHJvY2Vzcy5cbiAgICAgIC8vIEFsc28sIHVwZGF0ZSB0aGUgYXZhaWxJbkJlZm9yZSB0byB0aGUgYXZhaWxJbkFmdGVyIHZhbHVlLFxuICAgICAgLy8gc28gdGhhdCBpZiB3ZSBoYXZlIHRvIGhpdCBpdCBhIHRoaXJkIChmb3VydGgsIGV0Yy4pIHRpbWUsXG4gICAgICAvLyBpdCdsbCBoYXZlIHRoZSBjb3JyZWN0IGJ5dGUgY291bnRzLlxuICAgICAgaW5PZmYgKz0gKGF2YWlsSW5CZWZvcmUgLSBhdmFpbEluQWZ0ZXIpO1xuICAgICAgYXZhaWxJbkJlZm9yZSA9IGF2YWlsSW5BZnRlcjtcblxuICAgICAgaWYgKCFhc3luYylcbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIHZhciBuZXdSZXEgPSBzZWxmLl9iaW5kaW5nLndyaXRlKGZsdXNoRmxhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5PZmYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmFpbEluQmVmb3JlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2h1bmtTaXplKTtcbiAgICAgIG5ld1JlcS5jYWxsYmFjayA9IGNhbGxiYWNrOyAvLyB0aGlzIHNhbWUgZnVuY3Rpb25cbiAgICAgIG5ld1JlcS5idWZmZXIgPSBjaHVuaztcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWFzeW5jKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gZmluaXNoZWQgd2l0aCB0aGUgY2h1bmsuXG4gICAgY2IoKTtcbiAgfVxufTtcblxuaW5oZXJpdHMoRGVmbGF0ZSwgWmxpYik7XG5pbmhlcml0cyhJbmZsYXRlLCBabGliKTtcbmluaGVyaXRzKEd6aXAsIFpsaWIpO1xuaW5oZXJpdHMoR3VuemlwLCBabGliKTtcbmluaGVyaXRzKERlZmxhdGVSYXcsIFpsaWIpO1xuaW5oZXJpdHMoSW5mbGF0ZVJhdywgWmxpYik7XG5pbmhlcml0cyhVbnppcCwgWmxpYik7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvZGVzOiBjb2RlcyxcbiAgY3JlYXRlRGVmbGF0ZTogY3JlYXRlRGVmbGF0ZSxcbiAgY3JlYXRlSW5mbGF0ZTogY3JlYXRlSW5mbGF0ZSxcbiAgY3JlYXRlRGVmbGF0ZVJhdzogY3JlYXRlRGVmbGF0ZVJhdyxcbiAgY3JlYXRlSW5mbGF0ZVJhdzogY3JlYXRlSW5mbGF0ZVJhdyxcbiAgY3JlYXRlR3ppcDogY3JlYXRlR3ppcCxcbiAgY3JlYXRlR3VuemlwOiBjcmVhdGVHdW56aXAsXG4gIGNyZWF0ZVVuemlwOiBjcmVhdGVVbnppcCxcbiAgZGVmbGF0ZTogZGVmbGF0ZSxcbiAgZGVmbGF0ZVN5bmM6IGRlZmxhdGVTeW5jLFxuICBnemlwOiBnemlwLFxuICBnemlwU3luYzogZ3ppcFN5bmMsXG4gIGRlZmxhdGVSYXc6IGRlZmxhdGVSYXcsXG4gIGRlZmxhdGVSYXdTeW5jOiBkZWZsYXRlUmF3U3luYyxcbiAgdW56aXA6IHVuemlwLFxuICB1bnppcFN5bmM6IHVuemlwU3luYyxcbiAgaW5mbGF0ZTogaW5mbGF0ZSxcbiAgaW5mbGF0ZVN5bmM6IGluZmxhdGVTeW5jLFxuICBndW56aXA6IGd1bnppcCxcbiAgZ3VuemlwU3luYzogZ3VuemlwU3luYyxcbiAgaW5mbGF0ZVJhdzogaW5mbGF0ZVJhdyxcbiAgaW5mbGF0ZVJhd1N5bmM6IGluZmxhdGVSYXdTeW5jLFxuICBEZWZsYXRlOiBEZWZsYXRlLFxuICBJbmZsYXRlOiBJbmZsYXRlLFxuICBHemlwOiBHemlwLFxuICBHdW56aXA6IEd1bnppcCxcbiAgRGVmbGF0ZVJhdzogRGVmbGF0ZVJhdyxcbiAgSW5mbGF0ZVJhdzogSW5mbGF0ZVJhdyxcbiAgVW56aXA6IFVuemlwLFxuICBabGliOiBabGliXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG52YXIgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xudmFyIGh0dHBGb2xsb3cgPSByZXF1aXJlKCdmb2xsb3ctcmVkaXJlY3RzJykuaHR0cDtcbnZhciBodHRwc0ZvbGxvdyA9IHJlcXVpcmUoJ2ZvbGxvdy1yZWRpcmVjdHMnKS5odHRwcztcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKTtcbnZhciB6bGliID0gcmVxdWlyZSgnemxpYicpO1xudmFyIHBrZyA9IHJlcXVpcmUoJy4vLi4vLi4vcGFja2FnZS5qc29uJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9lbmhhbmNlRXJyb3InKTtcblxudmFyIGlzSHR0cHMgPSAvaHR0cHM6Py87XG5cbi8qZXNsaW50IGNvbnNpc3RlbnQtcmV0dXJuOjAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBodHRwQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoSHR0cFJlcXVlc3QocmVzb2x2ZVByb21pc2UsIHJlamVjdFByb21pc2UpIHtcbiAgICB2YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUodmFsdWUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlKHZhbHVlKTtcbiAgICB9O1xuICAgIHZhciByZWplY3QgPSBmdW5jdGlvbiByZWplY3QodmFsdWUpIHtcbiAgICAgIHJlamVjdFByb21pc2UodmFsdWUpO1xuICAgIH07XG4gICAgdmFyIGRhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgLy8gU2V0IFVzZXItQWdlbnQgKHJlcXVpcmVkIGJ5IHNvbWUgc2VydmVycylcbiAgICAvLyBPbmx5IHNldCBoZWFkZXIgaWYgaXQgaGFzbid0IGJlZW4gc2V0IGluIGNvbmZpZ1xuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvaXNzdWVzLzY5XG4gICAgaWYgKCFoZWFkZXJzWydVc2VyLUFnZW50J10gJiYgIWhlYWRlcnNbJ3VzZXItYWdlbnQnXSkge1xuICAgICAgaGVhZGVyc1snVXNlci1BZ2VudCddID0gJ2F4aW9zLycgKyBwa2cudmVyc2lvbjtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSAmJiAhdXRpbHMuaXNTdHJlYW0oZGF0YSkpIHtcbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgLy8gTm90aGluZyB0byBkby4uLlxuICAgICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpKSB7XG4gICAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShuZXcgVWludDhBcnJheShkYXRhKSk7XG4gICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzU3RyaW5nKGRhdGEpKSB7XG4gICAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCAndXRmLTgnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAgICAgJ0RhdGEgYWZ0ZXIgdHJhbnNmb3JtYXRpb24gbXVzdCBiZSBhIHN0cmluZywgYW4gQXJyYXlCdWZmZXIsIGEgQnVmZmVyLCBvciBhIFN0cmVhbScsXG4gICAgICAgICAgY29uZmlnXG4gICAgICAgICkpO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgQ29udGVudC1MZW5ndGggaGVhZGVyIGlmIGRhdGEgZXhpc3RzXG4gICAgICBoZWFkZXJzWydDb250ZW50LUxlbmd0aCddID0gZGF0YS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIHZhciBhdXRoID0gdW5kZWZpbmVkO1xuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIGF1dGggPSB1c2VybmFtZSArICc6JyArIHBhc3N3b3JkO1xuICAgIH1cblxuICAgIC8vIFBhcnNlIHVybFxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHZhciBwYXJzZWQgPSB1cmwucGFyc2UoZnVsbFBhdGgpO1xuICAgIHZhciBwcm90b2NvbCA9IHBhcnNlZC5wcm90b2NvbCB8fCAnaHR0cDonO1xuXG4gICAgaWYgKCFhdXRoICYmIHBhcnNlZC5hdXRoKSB7XG4gICAgICB2YXIgdXJsQXV0aCA9IHBhcnNlZC5hdXRoLnNwbGl0KCc6Jyk7XG4gICAgICB2YXIgdXJsVXNlcm5hbWUgPSB1cmxBdXRoWzBdIHx8ICcnO1xuICAgICAgdmFyIHVybFBhc3N3b3JkID0gdXJsQXV0aFsxXSB8fCAnJztcbiAgICAgIGF1dGggPSB1cmxVc2VybmFtZSArICc6JyArIHVybFBhc3N3b3JkO1xuICAgIH1cblxuICAgIGlmIChhdXRoKSB7XG4gICAgICBkZWxldGUgaGVhZGVycy5BdXRob3JpemF0aW9uO1xuICAgIH1cblxuICAgIHZhciBpc0h0dHBzUmVxdWVzdCA9IGlzSHR0cHMudGVzdChwcm90b2NvbCk7XG4gICAgdmFyIGFnZW50ID0gaXNIdHRwc1JlcXVlc3QgPyBjb25maWcuaHR0cHNBZ2VudCA6IGNvbmZpZy5odHRwQWdlbnQ7XG5cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IGJ1aWxkVVJMKHBhcnNlZC5wYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKSxcbiAgICAgIG1ldGhvZDogY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgIGFnZW50OiBhZ2VudCxcbiAgICAgIGFnZW50czogeyBodHRwOiBjb25maWcuaHR0cEFnZW50LCBodHRwczogY29uZmlnLmh0dHBzQWdlbnQgfSxcbiAgICAgIGF1dGg6IGF1dGhcbiAgICB9O1xuXG4gICAgaWYgKGNvbmZpZy5zb2NrZXRQYXRoKSB7XG4gICAgICBvcHRpb25zLnNvY2tldFBhdGggPSBjb25maWcuc29ja2V0UGF0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucy5ob3N0bmFtZSA9IHBhcnNlZC5ob3N0bmFtZTtcbiAgICAgIG9wdGlvbnMucG9ydCA9IHBhcnNlZC5wb3J0O1xuICAgIH1cblxuICAgIHZhciBwcm94eSA9IGNvbmZpZy5wcm94eTtcbiAgICBpZiAoIXByb3h5ICYmIHByb3h5ICE9PSBmYWxzZSkge1xuICAgICAgdmFyIHByb3h5RW52ID0gcHJvdG9jb2wuc2xpY2UoMCwgLTEpICsgJ19wcm94eSc7XG4gICAgICB2YXIgcHJveHlVcmwgPSBwcm9jZXNzLmVudltwcm94eUVudl0gfHwgcHJvY2Vzcy5lbnZbcHJveHlFbnYudG9VcHBlckNhc2UoKV07XG4gICAgICBpZiAocHJveHlVcmwpIHtcbiAgICAgICAgdmFyIHBhcnNlZFByb3h5VXJsID0gdXJsLnBhcnNlKHByb3h5VXJsKTtcbiAgICAgICAgdmFyIG5vUHJveHlFbnYgPSBwcm9jZXNzLmVudi5ub19wcm94eSB8fCBwcm9jZXNzLmVudi5OT19QUk9YWTtcbiAgICAgICAgdmFyIHNob3VsZFByb3h5ID0gdHJ1ZTtcblxuICAgICAgICBpZiAobm9Qcm94eUVudikge1xuICAgICAgICAgIHZhciBub1Byb3h5ID0gbm9Qcm94eUVudi5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiB0cmltKHMpIHtcbiAgICAgICAgICAgIHJldHVybiBzLnRyaW0oKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHNob3VsZFByb3h5ID0gIW5vUHJveHkuc29tZShmdW5jdGlvbiBwcm94eU1hdGNoKHByb3h5RWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKCFwcm94eUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3h5RWxlbWVudCA9PT0gJyonKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3h5RWxlbWVudFswXSA9PT0gJy4nICYmXG4gICAgICAgICAgICAgICAgcGFyc2VkLmhvc3RuYW1lLnN1YnN0cihwYXJzZWQuaG9zdG5hbWUubGVuZ3RoIC0gcHJveHlFbGVtZW50Lmxlbmd0aCkgPT09IHByb3h5RWxlbWVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZC5ob3N0bmFtZSA9PT0gcHJveHlFbGVtZW50O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoc2hvdWxkUHJveHkpIHtcbiAgICAgICAgICBwcm94eSA9IHtcbiAgICAgICAgICAgIGhvc3Q6IHBhcnNlZFByb3h5VXJsLmhvc3RuYW1lLFxuICAgICAgICAgICAgcG9ydDogcGFyc2VkUHJveHlVcmwucG9ydFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAocGFyc2VkUHJveHlVcmwuYXV0aCkge1xuICAgICAgICAgICAgdmFyIHByb3h5VXJsQXV0aCA9IHBhcnNlZFByb3h5VXJsLmF1dGguc3BsaXQoJzonKTtcbiAgICAgICAgICAgIHByb3h5LmF1dGggPSB7XG4gICAgICAgICAgICAgIHVzZXJuYW1lOiBwcm94eVVybEF1dGhbMF0sXG4gICAgICAgICAgICAgIHBhc3N3b3JkOiBwcm94eVVybEF1dGhbMV1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb3h5KSB7XG4gICAgICBvcHRpb25zLmhvc3RuYW1lID0gcHJveHkuaG9zdDtcbiAgICAgIG9wdGlvbnMuaG9zdCA9IHByb3h5Lmhvc3Q7XG4gICAgICBvcHRpb25zLmhlYWRlcnMuaG9zdCA9IHBhcnNlZC5ob3N0bmFtZSArIChwYXJzZWQucG9ydCA/ICc6JyArIHBhcnNlZC5wb3J0IDogJycpO1xuICAgICAgb3B0aW9ucy5wb3J0ID0gcHJveHkucG9ydDtcbiAgICAgIG9wdGlvbnMucGF0aCA9IHByb3RvY29sICsgJy8vJyArIHBhcnNlZC5ob3N0bmFtZSArIChwYXJzZWQucG9ydCA/ICc6JyArIHBhcnNlZC5wb3J0IDogJycpICsgb3B0aW9ucy5wYXRoO1xuXG4gICAgICAvLyBCYXNpYyBwcm94eSBhdXRob3JpemF0aW9uXG4gICAgICBpZiAocHJveHkuYXV0aCkge1xuICAgICAgICB2YXIgYmFzZTY0ID0gQnVmZmVyLmZyb20ocHJveHkuYXV0aC51c2VybmFtZSArICc6JyArIHByb3h5LmF1dGgucGFzc3dvcmQsICd1dGY4JykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICBvcHRpb25zLmhlYWRlcnNbJ1Byb3h5LUF1dGhvcml6YXRpb24nXSA9ICdCYXNpYyAnICsgYmFzZTY0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0cmFuc3BvcnQ7XG4gICAgdmFyIGlzSHR0cHNQcm94eSA9IGlzSHR0cHNSZXF1ZXN0ICYmIChwcm94eSA/IGlzSHR0cHMudGVzdChwcm94eS5wcm90b2NvbCkgOiB0cnVlKTtcbiAgICBpZiAoY29uZmlnLnRyYW5zcG9ydCkge1xuICAgICAgdHJhbnNwb3J0ID0gY29uZmlnLnRyYW5zcG9ydDtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5tYXhSZWRpcmVjdHMgPT09IDApIHtcbiAgICAgIHRyYW5zcG9ydCA9IGlzSHR0cHNQcm94eSA/IGh0dHBzIDogaHR0cDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNvbmZpZy5tYXhSZWRpcmVjdHMpIHtcbiAgICAgICAgb3B0aW9ucy5tYXhSZWRpcmVjdHMgPSBjb25maWcubWF4UmVkaXJlY3RzO1xuICAgICAgfVxuICAgICAgdHJhbnNwb3J0ID0gaXNIdHRwc1Byb3h5ID8gaHR0cHNGb2xsb3cgOiBodHRwRm9sbG93O1xuICAgIH1cblxuICAgIGlmIChjb25maWcubWF4Qm9keUxlbmd0aCA+IC0xKSB7XG4gICAgICBvcHRpb25zLm1heEJvZHlMZW5ndGggPSBjb25maWcubWF4Qm9keUxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdGhlIHJlcXVlc3RcbiAgICB2YXIgcmVxID0gdHJhbnNwb3J0LnJlcXVlc3Qob3B0aW9ucywgZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UocmVzKSB7XG4gICAgICBpZiAocmVxLmFib3J0ZWQpIHJldHVybjtcblxuICAgICAgLy8gdW5jb21wcmVzcyB0aGUgcmVzcG9uc2UgYm9keSB0cmFuc3BhcmVudGx5IGlmIHJlcXVpcmVkXG4gICAgICB2YXIgc3RyZWFtID0gcmVzO1xuXG4gICAgICAvLyByZXR1cm4gdGhlIGxhc3QgcmVxdWVzdCBpbiBjYXNlIG9mIHJlZGlyZWN0c1xuICAgICAgdmFyIGxhc3RSZXF1ZXN0ID0gcmVzLnJlcSB8fCByZXE7XG5cblxuICAgICAgLy8gaWYgbm8gY29udGVudCwgaXMgSEVBRCByZXF1ZXN0IG9yIGRlY29tcHJlc3MgZGlzYWJsZWQgd2Ugc2hvdWxkIG5vdCBkZWNvbXByZXNzXG4gICAgICBpZiAocmVzLnN0YXR1c0NvZGUgIT09IDIwNCAmJiBsYXN0UmVxdWVzdC5tZXRob2QgIT09ICdIRUFEJyAmJiBjb25maWcuZGVjb21wcmVzcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgc3dpdGNoIChyZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddKSB7XG4gICAgICAgIC8qZXNsaW50IGRlZmF1bHQtY2FzZTowKi9cbiAgICAgICAgY2FzZSAnZ3ppcCc6XG4gICAgICAgIGNhc2UgJ2NvbXByZXNzJzpcbiAgICAgICAgY2FzZSAnZGVmbGF0ZSc6XG4gICAgICAgIC8vIGFkZCB0aGUgdW56aXBwZXIgdG8gdGhlIGJvZHkgc3RyZWFtIHByb2Nlc3NpbmcgcGlwZWxpbmVcbiAgICAgICAgICBzdHJlYW0gPSBzdHJlYW0ucGlwZSh6bGliLmNyZWF0ZVVuemlwKCkpO1xuXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjb250ZW50LWVuY29kaW5nIGluIG9yZGVyIHRvIG5vdCBjb25mdXNlIGRvd25zdHJlYW0gb3BlcmF0aW9uc1xuICAgICAgICAgIGRlbGV0ZSByZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgc3RhdHVzOiByZXMuc3RhdHVzQ29kZSxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzLnN0YXR1c01lc3NhZ2UsXG4gICAgICAgIGhlYWRlcnM6IHJlcy5oZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogbGFzdFJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJykge1xuICAgICAgICByZXNwb25zZS5kYXRhID0gc3RyZWFtO1xuICAgICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzcG9uc2VCdWZmZXIgPSBbXTtcbiAgICAgICAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gaGFuZGxlU3RyZWFtRGF0YShjaHVuaykge1xuICAgICAgICAgIHJlc3BvbnNlQnVmZmVyLnB1c2goY2h1bmspO1xuXG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBjb250ZW50IGxlbmd0aCBpcyBub3Qgb3ZlciB0aGUgbWF4Q29udGVudExlbmd0aCBpZiBzcGVjaWZpZWRcbiAgICAgICAgICBpZiAoY29uZmlnLm1heENvbnRlbnRMZW5ndGggPiAtMSAmJiBCdWZmZXIuY29uY2F0KHJlc3BvbnNlQnVmZmVyKS5sZW5ndGggPiBjb25maWcubWF4Q29udGVudExlbmd0aCkge1xuICAgICAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHJlamVjdChjcmVhdGVFcnJvcignbWF4Q29udGVudExlbmd0aCBzaXplIG9mICcgKyBjb25maWcubWF4Q29udGVudExlbmd0aCArICcgZXhjZWVkZWQnLFxuICAgICAgICAgICAgICBjb25maWcsIG51bGwsIGxhc3RSZXF1ZXN0KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBzdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24gaGFuZGxlU3RyZWFtRXJyb3IoZXJyKSB7XG4gICAgICAgICAgaWYgKHJlcS5hYm9ydGVkKSByZXR1cm47XG4gICAgICAgICAgcmVqZWN0KGVuaGFuY2VFcnJvcihlcnIsIGNvbmZpZywgbnVsbCwgbGFzdFJlcXVlc3QpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiBoYW5kbGVTdHJlYW1FbmQoKSB7XG4gICAgICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9IEJ1ZmZlci5jb25jYXQocmVzcG9uc2VCdWZmZXIpO1xuICAgICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnYXJyYXlidWZmZXInKSB7XG4gICAgICAgICAgICByZXNwb25zZURhdGEgPSByZXNwb25zZURhdGEudG9TdHJpbmcoY29uZmlnLnJlc3BvbnNlRW5jb2RpbmcpO1xuICAgICAgICAgICAgaWYgKCFjb25maWcucmVzcG9uc2VFbmNvZGluZyB8fCBjb25maWcucmVzcG9uc2VFbmNvZGluZyA9PT0gJ3V0ZjgnKSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlRGF0YSA9IHV0aWxzLnN0cmlwQk9NKHJlc3BvbnNlRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IHJlc3BvbnNlRGF0YTtcbiAgICAgICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gSGFuZGxlIGVycm9yc1xuICAgIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0RXJyb3IoZXJyKSB7XG4gICAgICBpZiAocmVxLmFib3J0ZWQgJiYgZXJyLmNvZGUgIT09ICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJykgcmV0dXJuO1xuICAgICAgcmVqZWN0KGVuaGFuY2VFcnJvcihlcnIsIGNvbmZpZywgbnVsbCwgcmVxKSk7XG4gICAgfSk7XG5cbiAgICAvLyBIYW5kbGUgcmVxdWVzdCB0aW1lb3V0XG4gICAgaWYgKGNvbmZpZy50aW1lb3V0KSB7XG4gICAgICAvLyBTb21ldGltZSwgdGhlIHJlc3BvbnNlIHdpbGwgYmUgdmVyeSBzbG93LCBhbmQgZG9lcyBub3QgcmVzcG9uZCwgdGhlIGNvbm5lY3QgZXZlbnQgd2lsbCBiZSBibG9jayBieSBldmVudCBsb29wIHN5c3RlbS5cbiAgICAgIC8vIEFuZCB0aW1lciBjYWxsYmFjayB3aWxsIGJlIGZpcmVkLCBhbmQgYWJvcnQoKSB3aWxsIGJlIGludm9rZWQgYmVmb3JlIGNvbm5lY3Rpb24sIHRoZW4gZ2V0IFwic29ja2V0IGhhbmcgdXBcIiBhbmQgY29kZSBFQ09OTlJFU0VULlxuICAgICAgLy8gQXQgdGhpcyB0aW1lLCBpZiB3ZSBoYXZlIGEgbGFyZ2UgbnVtYmVyIG9mIHJlcXVlc3QsIG5vZGVqcyB3aWxsIGhhbmcgdXAgc29tZSBzb2NrZXQgb24gYmFja2dyb3VuZC4gYW5kIHRoZSBudW1iZXIgd2lsbCB1cCBhbmQgdXAuXG4gICAgICAvLyBBbmQgdGhlbiB0aGVzZSBzb2NrZXQgd2hpY2ggYmUgaGFuZyB1cCB3aWxsIGRldm9yaW5nIENQVSBsaXR0bGUgYnkgbGl0dGxlLlxuICAgICAgLy8gQ2xpZW50UmVxdWVzdC5zZXRUaW1lb3V0IHdpbGwgYmUgZmlyZWQgb24gdGhlIHNwZWNpZnkgbWlsbGlzZWNvbmRzLCBhbmQgY2FuIG1ha2Ugc3VyZSB0aGF0IGFib3J0KCkgd2lsbCBiZSBmaXJlZCBhZnRlciBjb25uZWN0LlxuICAgICAgcmVxLnNldFRpbWVvdXQoY29uZmlnLnRpbWVvdXQsIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RUaW1lb3V0KCkge1xuICAgICAgICByZXEuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcSkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAocmVxLmFib3J0ZWQpIHJldHVybjtcblxuICAgICAgICByZXEuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgaWYgKHV0aWxzLmlzU3RyZWFtKGRhdGEpKSB7XG4gICAgICBkYXRhLm9uKCdlcnJvcicsIGZ1bmN0aW9uIGhhbmRsZVN0cmVhbUVycm9yKGVycikge1xuICAgICAgICByZWplY3QoZW5oYW5jZUVycm9yKGVyciwgY29uZmlnLCBudWxsLCByZXEpKTtcbiAgICAgIH0pLnBpcGUocmVxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxLmVuZChkYXRhKTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAodXRpbHMuaXNCbG9iKHJlcXVlc3REYXRhKSB8fCB1dGlscy5pc0ZpbGUocmVxdWVzdERhdGEpKSAmJlxuICAgICAgcmVxdWVzdERhdGEudHlwZVxuICAgICkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCc7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKHRpbWVvdXRFcnJvck1lc3NhZ2UsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdmFyIHZhbHVlRnJvbUNvbmZpZzJLZXlzID0gWyd1cmwnLCAnbWV0aG9kJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknLCAncGFyYW1zJ107XG4gIHZhciBkZWZhdWx0VG9Db25maWcyS2V5cyA9IFtcbiAgICAnYmFzZVVSTCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3RpbWVvdXRNZXNzYWdlJywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJywgJ2RlY29tcHJlc3MnLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJywgJ21heEJvZHlMZW5ndGgnLCAnbWF4UmVkaXJlY3RzJywgJ3RyYW5zcG9ydCcsICdodHRwQWdlbnQnLFxuICAgICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJywgJ3NvY2tldFBhdGgnLCAncmVzcG9uc2VFbmNvZGluZydcbiAgXTtcbiAgdmFyIGRpcmVjdE1lcmdlS2V5cyA9IFsndmFsaWRhdGVTdGF0dXMnXTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChkaXJlY3RNZXJnZUtleXMsIGZ1bmN0aW9uIG1lcmdlKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBheGlvc0tleXMgPSB2YWx1ZUZyb21Db25maWcyS2V5c1xuICAgIC5jb25jYXQobWVyZ2VEZWVwUHJvcGVydGllc0tleXMpXG4gICAgLmNvbmNhdChkZWZhdWx0VG9Db25maWcyS2V5cylcbiAgICAuY29uY2F0KGRpcmVjdE1lcmdlS2V5cyk7XG5cbiAgdmFyIG90aGVyS2V5cyA9IE9iamVjdFxuICAgIC5rZXlzKGNvbmZpZzEpXG4gICAgLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgYXhpb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXhpb3NcIikpO1xuY2xhc3MgUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IocmVxdWVzdCA9IGF4aW9zXzEuZGVmYXVsdCkge1xuICAgICAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgIH1cbiAgICBnZXQodXJsLCBjb25maWcgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LmdldCh1cmwsIGNvbmZpZyk7XG4gICAgfVxuICAgIHBvc3QodXJsLCBkYXRhLCBjb25maWcgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LnBvc3QodXJsLCBkYXRhLCBjb25maWcpO1xuICAgIH1cbiAgICBwdXQodXJsLCBkYXRhLCBjb25maWcgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LnB1dCh1cmwsIGRhdGEsIGNvbmZpZyk7XG4gICAgfVxuICAgIHBhdGNoKHVybCwgZGF0YSwgY29uZmlnID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5wYXRjaCh1cmwsIGRhdGEsIGNvbmZpZyk7XG4gICAgfVxuICAgIGRlbGV0ZSh1cmwsIGNvbmZpZyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QuZGVsZXRlKHVybCwgY29uZmlnKTtcbiAgICB9XG4gICAgc3RhdGljIGlzUmVxdWVzdEVycm9yKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAhIShlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXMpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgQWJzdHJhY3QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4uLy4uL3V0aWwvaHR0cC9yZXF1ZXN0XCIpKTtcbmNsYXNzIFJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0b2tlbiA9ICcnLCB1cmwgPSAnJykge1xuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLnJlcXVlc3QgPSBuZXcgQWJzdHJhY3QuUmVxdWVzdCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFJlc291cmNlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb25maWcgPSB7XG4gICAgQXBwOiB7XG4gICAgICAgIGJhc2VVcmw6ICdodHRwOi8vbG9jYWxob3N0OjMzMzMvYXBpJyxcbiAgICB9LFxuICAgIE1lZXRpbmc6IHtcbiAgICAgICAgZG9tYWluOiAnY29uZi52NGguY2xvdWQnLFxuICAgICAgICBleHRlcm5hbEFwaTogJ2h0dHBzOi8vY29uZi52NGguY2xvdWQvZXh0ZXJuYWxfYXBpLmpzJyxcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNvbmZpZztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBkZWZhdWx0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2NvbmZpZy9kZWZhdWx0XCIpKTtcbmNvbnN0IGltcG9ydEppdHNpQXBpID0gKGRvbWFpbikgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIGlmICh3aW5kb3cuSml0c2lNZWV0RXh0ZXJuYWxBUEkpIHtcbiAgICAgICAgcmVzb2x2ZSh3aW5kb3cuSml0c2lNZWV0RXh0ZXJuYWxBUEkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBzY3JpcHQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvamF2YXNjcmlwdCcpO1xuICAgICAgICBzY3JpcHQuc2V0QXR0cmlidXRlKCdzcmMnLCBkb21haW4gPyBgaHR0cHM6Ly8ke2RvbWFpbn0vZXh0ZXJuYWxfYXBpLmpzYCA6IGRlZmF1bHRfMS5kZWZhdWx0Lk1lZXRpbmcuZXh0ZXJuYWxBcGkpO1xuICAgICAgICBoZWFkLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQubm9kZU5hbWUgPT09ICdTQ1JJUFQnKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh3aW5kb3cuSml0c2lNZWV0RXh0ZXJuYWxBUEkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH1cbn0pKTtcbmV4cG9ydHMuZGVmYXVsdCA9IGltcG9ydEppdHNpQXBpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IEltcG9ydEppdHNpRmlsZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0ltcG9ydEppdHNpRmlsZVwiKSk7XG5jb25zdCBkZWZhdWx0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2NvbmZpZy9kZWZhdWx0XCIpKTtcbmNsYXNzIEppdHNpTWVldCB7XG4gICAgc3RhcnRDb25mZXJlbmNlKG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZTogb3B0cy5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgIGp3dDogb3B0cy5qd3QsXG4gICAgICAgICAgICAgICAgcm9vbU5hbWU6IG9wdHMucm9vbU5hbWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDY0MCB8fCBvcHRzLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNDgwIHx8IG9wdHMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIG9uQ2xvc2U6IG9wdHMub25DbG9zZSxcbiAgICAgICAgICAgICAgICBvbkxvYWQ6IG9wdHMub25Mb2FkLFxuICAgICAgICAgICAgICAgIHVzZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IG9wdHMudXNlckluZm8gJiYgb3B0cy51c2VySW5mby5kaXNwbGF5TmFtZSA/IG9wdHMudXNlckluZm8uZGlzcGxheU5hbWUgOiAnQ29udmlkYWRvJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbmZpZ092ZXJ3cml0ZToge1xuICAgICAgICAgICAgICAgICAgICBzdGFydFdpdGhBdWRpb011dGVkOiBvcHRzLnN0YXJ0V2l0aEF1ZGlvTXV0ZWQsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0V2l0aFZpZGVvTXV0ZWQ6IG9wdHMuc3RhcnRXaXRoVmlkZW9NdXRlZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGludGVyZmFjZUNvbmZpZ092ZXJ3cml0ZToge1xuICAgICAgICAgICAgICAgICAgICBUT09MQkFSX0JVVFRPTlM6IG9wdHMuYnV0dG9ucyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgICAgIEltcG9ydEppdHNpRmlsZV8xLmRlZmF1bHQoKS50aGVuKChKaXRzaUV4dGVybmFsQXBpKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5KaXRzaUV4dGVybmFsQXBpID0gbmV3IEppdHNpRXh0ZXJuYWxBcGkob3B0cy5kb21haW4gPyBvcHRzLmRvbWFpbiA6IGRlZmF1bHRfMS5kZWZhdWx0Lk1lZXRpbmcuZG9tYWluLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy51c2VySW5mbyAmJiBvcHRzLnVzZXJJbmZvLmRpc3BsYXlOYW1lKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLkppdHNpRXh0ZXJuYWxBcGkuZXhlY3V0ZUNvbW1hbmQoJ2Rpc3BsYXlOYW1lJywgb3B0cy51c2VySW5mby5kaXNwbGF5TmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuc2hhcmVMaW5rKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLkppdHNpRXh0ZXJuYWxBcGkuZXhlY3V0ZUNvbW1hbmQoJ2xpbmsnLCBvcHRzLnNoYXJlTGluayk7XG4gICAgICAgICAgICAgICAgdGhpcy5KaXRzaUV4dGVybmFsQXBpLmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWR5VG9DbG9zZScsIG9wdGlvbnMub25DbG9zZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNsb3NlQ29uZmVyZW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wYXJlbnROb2RlLmlubmVySFRNTCA9ICcnO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0TnVtYmVyT2ZQYXJ0KCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSml0c2lFeHRlcm5hbEFwaS5nZXROdW1iZXJPZlBhcnRpY2lwYW50cygpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBKaXRzaU1lZXQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgQXBwRXJyb3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vY29tbW9uL2Vycm9ycy9BcHBFcnJvclwiKSk7XG5jb25zdCByZXNvdXJjZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9jb21tb24vcmVzb3VyY2VcIikpO1xuY29uc3QgSml0c2lNZWV0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL3V0aWwvaml0c2kvSml0c2lNZWV0XCIpKTtcbmNsYXNzIFNlc3Npb24gZXh0ZW5kcyByZXNvdXJjZV8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKHRva2VuLCB1cmwsIGRvbWFpbikge1xuICAgICAgICBzdXBlcih0b2tlbiwgdXJsKTtcbiAgICAgICAgdGhpcy51cmwgPSBgJHt0aGlzLnVybH0vc2Vzc2lvbnNgO1xuICAgICAgICB0aGlzLnNlc3Npb25DdXJyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5kb21haW4gPSBkb21haW47XG4gICAgfVxuICAgIGNyZWF0ZShkYXRhKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LnBvc3QoYCR7dGhpcy51cmx9YCwgZGF0YSwgeyBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IHRoaXMudG9rZW4gPyBgQmVhcmVyICR7dGhpcy50b2tlbn1gIDogJycgfSB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZpbmQoc2Vzc2lvbk5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QuZ2V0KGAke3RoaXMudXJsfS8ke3Nlc3Npb25OYW1lfWAsIHsgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiB0aGlzLnRva2VuID8gYEJlYXJlciAke3RoaXMudG9rZW59YCA6ICcnIH0gfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuZGF0YSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4geyBjb25zb2xlLmxvZyhlcnIpOyB0aHJvdyBuZXcgQXBwRXJyb3JfMS5kZWZhdWx0KGVyci5yZXNwb25zZS5kYXRhLCBlcnIucmVzcG9uc2Uuc3RhdHVzKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsaXN0KCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5nZXQoYCR7dGhpcy51cmx9YCwgeyBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IHRoaXMudG9rZW4gPyBgQmVhcmVyICR7dGhpcy50b2tlbn1gIDogJycgfSB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZShzZXNzaW9uTmFtZSwgZGF0YSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5wdXQoYCR7dGhpcy51cmx9LyR7c2Vzc2lvbk5hbWV9YCwgZGF0YSwgeyBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IHRoaXMudG9rZW4gPyBgQmVhcmVyICR7dGhpcy50b2tlbn1gIDogJycgfSB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5zdGF0dXMgPT09IDIwNClcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4geyB0aHJvdyBuZXcgQXBwRXJyb3JfMS5kZWZhdWx0KGVyci5yZXNwb25zZS5kYXRhLCBlcnIucmVzcG9uc2Uuc3RhdHVzKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkZWxldGUoc2Vzc2lvbk5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QuZGVsZXRlKGAke3RoaXMudXJsfS8ke3Nlc3Npb25OYW1lfWAsIHsgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiB0aGlzLnRva2VuID8gYEJlYXJlciAke3RoaXMudG9rZW59YCA6ICcnIH0gfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuc3RhdHVzID09PSAyMDQpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsgdGhyb3cgbmV3IEFwcEVycm9yXzEuZGVmYXVsdChlcnIucmVzcG9uc2UuZGF0YSwgZXJyLnJlc3BvbnNlLnN0YXR1cyk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgam9pbihzZXNzaW9uTmFtZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5wb3N0KGAke3RoaXMudXJsfS8ke3Nlc3Npb25OYW1lfS9qb2luYCwgbnVsbCwgeyBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IHRoaXMudG9rZW4gPyBgQmVhcmVyICR7dGhpcy50b2tlbn1gIDogJycgfSB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXJ0Q29uZmVyZW5jZShzZXNzaW9uTmFtZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IHlpZWxkIHRoaXMuam9pbihzZXNzaW9uTmFtZSk7XG4gICAgICAgICAgICB0aGlzLmNvbmZlcmVuY2UgPSBuZXcgSml0c2lNZWV0XzEuZGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5zZXNzaW9uQ3VycmVudCA9IHNlc3Npb25OYW1lO1xuICAgICAgICAgICAgeWllbGQgdGhpcy5jb25mZXJlbmNlLnN0YXJ0Q29uZmVyZW5jZShPYmplY3QuYXNzaWduKHsgand0OiBpbmZvLnNlc3Npb25Ub2tlbiwgcm9vbU5hbWU6IGluZm8uc2hvcnQsIG9uQ2xvc2U6ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsgeWllbGQgdGhpcy5lbmRDb25mZXJlbmNlKHNlc3Npb25OYW1lLCBvcHRpb25zLm9uQ2xvc2UpOyB9KSwgZG9tYWluOiB0aGlzLmRvbWFpbiB9LCBvcHRpb25zKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdG9wQ29uZmVyZW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlc3Npb25DdXJyZW50KVxuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuY29uZmVyZW5jZS5jbG9zZUNvbmZlcmVuY2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVuZENvbmZlcmVuY2Uoc2Vzc2lvbk5hbWUsIG9uQ2xvc2UpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmVyZW5jZS5jbG9zZUNvbmZlcmVuY2UoKTtcbiAgICAgICAgICAgIGlmIChvbkNsb3NlKVxuICAgICAgICAgICAgICAgIG9uQ2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2Vzc2lvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBBcHBFcnJvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9jb21tb24vZXJyb3JzL0FwcEVycm9yXCIpKTtcbmNvbnN0IHJlc291cmNlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL2NvbW1vbi9yZXNvdXJjZVwiKSk7XG5jbGFzcyBPcmcgZXh0ZW5kcyByZXNvdXJjZV8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKHRva2VuLCB1cmwpIHtcbiAgICAgICAgc3VwZXIodG9rZW4sIHVybCk7XG4gICAgICAgIHRoaXMudXJsID0gYCR7dGhpcy51cmx9L29yZ3NgO1xuICAgIH1cbiAgICBjcmVhdGUoZGF0YSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5wb3N0KGAke3RoaXMudXJsfWAsIGRhdGEsIHsgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiB0aGlzLnRva2VuID8gYEJlYXJlciAke3RoaXMudG9rZW59YCA6ICcnIH0gfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuZGF0YSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4geyB0aHJvdyBuZXcgQXBwRXJyb3JfMS5kZWZhdWx0KGVyci5yZXNwb25zZS5kYXRhLCBlcnIucmVzcG9uc2Uuc3RhdHVzKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmaW5kKG9yZ0lkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LmdldChgJHt0aGlzLnVybH0vJHtvcmdJZH1gLCB7IGhlYWRlcnM6IHsgQXV0aG9yaXphdGlvbjogdGhpcy50b2tlbiA/IGBCZWFyZXIgJHt0aGlzLnRva2VufWAgOiAnJyB9IH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmRhdGEpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsgY29uc29sZS5sb2coZXJyKTsgdGhyb3cgbmV3IEFwcEVycm9yXzEuZGVmYXVsdChlcnIucmVzcG9uc2UuZGF0YSwgZXJyLnJlc3BvbnNlLnN0YXR1cyk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QuZ2V0KGAke3RoaXMudXJsfWAsIHsgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiB0aGlzLnRva2VuID8gYEJlYXJlciAke3RoaXMudG9rZW59YCA6ICcnIH0gfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuZGF0YSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4geyB0aHJvdyBuZXcgQXBwRXJyb3JfMS5kZWZhdWx0KGVyci5yZXNwb25zZS5kYXRhLCBlcnIucmVzcG9uc2Uuc3RhdHVzKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGUob3JnSWQsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QucHV0KGAke3RoaXMudXJsfS8ke29yZ0lkfWAsIGRhdGEsIHsgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiB0aGlzLnRva2VuID8gYEJlYXJlciAke3RoaXMudG9rZW59YCA6ICcnIH0gfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuc3RhdHVzID09PSAyMDQpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsgdGhyb3cgbmV3IEFwcEVycm9yXzEuZGVmYXVsdChlcnIucmVzcG9uc2UuZGF0YSwgZXJyLnJlc3BvbnNlLnN0YXR1cyk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGVsZXRlKG9yZ0lkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LmRlbGV0ZShgJHt0aGlzLnVybH0vJHtvcmdJZH1gLCB7IGhlYWRlcnM6IHsgQXV0aG9yaXphdGlvbjogdGhpcy50b2tlbiA/IGBCZWFyZXIgJHt0aGlzLnRva2VufWAgOiAnJyB9IH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLnN0YXR1cyA9PT0gMjA0KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gT3JnO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IEFwcEVycm9yXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL2NvbW1vbi9lcnJvcnMvQXBwRXJyb3JcIikpO1xuY29uc3QgcmVzb3VyY2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vY29tbW9uL3Jlc291cmNlXCIpKTtcbmNsYXNzIE9yZ1VuaXQgZXh0ZW5kcyByZXNvdXJjZV8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKHRva2VuLCB1cmwpIHtcbiAgICAgICAgc3VwZXIodG9rZW4sIHVybCk7XG4gICAgfVxuICAgIGNyZWF0ZShvcmdOYW1lLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LnBvc3QoYCR7dGhpcy51cmx9L29yZ3MvJHtvcmdOYW1lfS9vcmdVbml0c2AsIGRhdGEsIHsgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiB0aGlzLnRva2VuID8gYEJlYXJlciAke3RoaXMudG9rZW59YCA6ICcnIH0gfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuZGF0YSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4geyB0aHJvdyBuZXcgQXBwRXJyb3JfMS5kZWZhdWx0KGVyci5yZXNwb25zZS5kYXRhLCBlcnIucmVzcG9uc2Uuc3RhdHVzKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmaW5kKG9yZ05hbWUsIG9yZ1VuaXROYW1lKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LmdldChgJHt0aGlzLnVybH0vb3Jncy8ke29yZ05hbWV9L29yZ1VuaXRzLyR7b3JnVW5pdE5hbWV9YCwgeyBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IHRoaXMudG9rZW4gPyBgQmVhcmVyICR7dGhpcy50b2tlbn1gIDogJycgfSB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IGNvbnNvbGUubG9nKGVycik7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxpc3Qob3JnTmFtZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5nZXQoYCR7dGhpcy51cmx9L29yZ3MvJHtvcmdOYW1lfS9vcmdVbml0c2AsIHsgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiB0aGlzLnRva2VuID8gYEJlYXJlciAke3RoaXMudG9rZW59YCA6ICcnIH0gfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuZGF0YSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4geyB0aHJvdyBuZXcgQXBwRXJyb3JfMS5kZWZhdWx0KGVyci5yZXNwb25zZS5kYXRhLCBlcnIucmVzcG9uc2Uuc3RhdHVzKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGUob3JnTmFtZSwgb3JnVW5pdE5hbWUsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QucHV0KGAke3RoaXMudXJsfS9vcmdzLyR7b3JnTmFtZX0vb3JnVW5pdHMvJHtvcmdVbml0TmFtZX1gLCBkYXRhLCB7IGhlYWRlcnM6IHsgQXV0aG9yaXphdGlvbjogdGhpcy50b2tlbiA/IGBCZWFyZXIgJHt0aGlzLnRva2VufWAgOiAnJyB9IH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLnN0YXR1cyA9PT0gMjA0KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRlbGV0ZShvcmdOYW1lLCBvcmdVbml0TmFtZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5kZWxldGUoYCR7dGhpcy51cmx9L29yZ3MvJHtvcmdOYW1lfS9vcmdVbml0cy8ke29yZ1VuaXROYW1lfWAsIHsgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiB0aGlzLnRva2VuID8gYEJlYXJlciAke3RoaXMudG9rZW59YCA6ICcnIH0gfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuc3RhdHVzID09PSAyMDQpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsgdGhyb3cgbmV3IEFwcEVycm9yXzEuZGVmYXVsdChlcnIucmVzcG9uc2UuZGF0YSwgZXJyLnJlc3BvbnNlLnN0YXR1cyk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBPcmdVbml0O1xuIiwidmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLlN0cmVhbTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERlbGF5ZWRTdHJlYW07XG5mdW5jdGlvbiBEZWxheWVkU3RyZWFtKCkge1xuICB0aGlzLnNvdXJjZSA9IG51bGw7XG4gIHRoaXMuZGF0YVNpemUgPSAwO1xuICB0aGlzLm1heERhdGFTaXplID0gMTAyNCAqIDEwMjQ7XG4gIHRoaXMucGF1c2VTdHJlYW0gPSB0cnVlO1xuXG4gIHRoaXMuX21heERhdGFTaXplRXhjZWVkZWQgPSBmYWxzZTtcbiAgdGhpcy5fcmVsZWFzZWQgPSBmYWxzZTtcbiAgdGhpcy5fYnVmZmVyZWRFdmVudHMgPSBbXTtcbn1cbnV0aWwuaW5oZXJpdHMoRGVsYXllZFN0cmVhbSwgU3RyZWFtKTtcblxuRGVsYXllZFN0cmVhbS5jcmVhdGUgPSBmdW5jdGlvbihzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGRlbGF5ZWRTdHJlYW0gPSBuZXcgdGhpcygpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBmb3IgKHZhciBvcHRpb24gaW4gb3B0aW9ucykge1xuICAgIGRlbGF5ZWRTdHJlYW1bb3B0aW9uXSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgfVxuXG4gIGRlbGF5ZWRTdHJlYW0uc291cmNlID0gc291cmNlO1xuXG4gIHZhciByZWFsRW1pdCA9IHNvdXJjZS5lbWl0O1xuICBzb3VyY2UuZW1pdCA9IGZ1bmN0aW9uKCkge1xuICAgIGRlbGF5ZWRTdHJlYW0uX2hhbmRsZUVtaXQoYXJndW1lbnRzKTtcbiAgICByZXR1cm4gcmVhbEVtaXQuYXBwbHkoc291cmNlLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHNvdXJjZS5vbignZXJyb3InLCBmdW5jdGlvbigpIHt9KTtcbiAgaWYgKGRlbGF5ZWRTdHJlYW0ucGF1c2VTdHJlYW0pIHtcbiAgICBzb3VyY2UucGF1c2UoKTtcbiAgfVxuXG4gIHJldHVybiBkZWxheWVkU3RyZWFtO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KERlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLCAncmVhZGFibGUnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2UucmVhZGFibGU7XG4gIH1cbn0pO1xuXG5EZWxheWVkU3RyZWFtLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zb3VyY2Uuc2V0RW5jb2RpbmcuYXBwbHkodGhpcy5zb3VyY2UsIGFyZ3VtZW50cyk7XG59O1xuXG5EZWxheWVkU3RyZWFtLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLl9yZWxlYXNlZCkge1xuICAgIHRoaXMucmVsZWFzZSgpO1xuICB9XG5cbiAgdGhpcy5zb3VyY2UucmVzdW1lKCk7XG59O1xuXG5EZWxheWVkU3RyZWFtLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNvdXJjZS5wYXVzZSgpO1xufTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUucmVsZWFzZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9yZWxlYXNlZCA9IHRydWU7XG5cbiAgdGhpcy5fYnVmZmVyZWRFdmVudHMuZm9yRWFjaChmdW5jdGlvbihhcmdzKSB7XG4gICAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9LmJpbmQodGhpcykpO1xuICB0aGlzLl9idWZmZXJlZEV2ZW50cyA9IFtdO1xufTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgciA9IFN0cmVhbS5wcm90b3R5cGUucGlwZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB0aGlzLnJlc3VtZSgpO1xuICByZXR1cm4gcjtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLl9oYW5kbGVFbWl0ID0gZnVuY3Rpb24oYXJncykge1xuICBpZiAodGhpcy5fcmVsZWFzZWQpIHtcbiAgICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGFyZ3NbMF0gPT09ICdkYXRhJykge1xuICAgIHRoaXMuZGF0YVNpemUgKz0gYXJnc1sxXS5sZW5ndGg7XG4gICAgdGhpcy5fY2hlY2tJZk1heERhdGFTaXplRXhjZWVkZWQoKTtcbiAgfVxuXG4gIHRoaXMuX2J1ZmZlcmVkRXZlbnRzLnB1c2goYXJncyk7XG59O1xuXG5EZWxheWVkU3RyZWFtLnByb3RvdHlwZS5fY2hlY2tJZk1heERhdGFTaXplRXhjZWVkZWQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX21heERhdGFTaXplRXhjZWVkZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5kYXRhU2l6ZSA8PSB0aGlzLm1heERhdGFTaXplKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fbWF4RGF0YVNpemVFeGNlZWRlZCA9IHRydWU7XG4gIHZhciBtZXNzYWdlID1cbiAgICAnRGVsYXllZFN0cmVhbSNtYXhEYXRhU2l6ZSBvZiAnICsgdGhpcy5tYXhEYXRhU2l6ZSArICcgYnl0ZXMgZXhjZWVkZWQuJ1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKG1lc3NhZ2UpKTtcbn07XG4iLCJ2YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKS5TdHJlYW07XG52YXIgRGVsYXllZFN0cmVhbSA9IHJlcXVpcmUoJ2RlbGF5ZWQtc3RyZWFtJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tYmluZWRTdHJlYW07XG5mdW5jdGlvbiBDb21iaW5lZFN0cmVhbSgpIHtcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcbiAgdGhpcy5kYXRhU2l6ZSA9IDA7XG4gIHRoaXMubWF4RGF0YVNpemUgPSAyICogMTAyNCAqIDEwMjQ7XG4gIHRoaXMucGF1c2VTdHJlYW1zID0gdHJ1ZTtcblxuICB0aGlzLl9yZWxlYXNlZCA9IGZhbHNlO1xuICB0aGlzLl9zdHJlYW1zID0gW107XG4gIHRoaXMuX2N1cnJlbnRTdHJlYW0gPSBudWxsO1xuICB0aGlzLl9pbnNpZGVMb29wID0gZmFsc2U7XG4gIHRoaXMuX3BlbmRpbmdOZXh0ID0gZmFsc2U7XG59XG51dGlsLmluaGVyaXRzKENvbWJpbmVkU3RyZWFtLCBTdHJlYW0pO1xuXG5Db21iaW5lZFN0cmVhbS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHZhciBjb21iaW5lZFN0cmVhbSA9IG5ldyB0aGlzKCk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgY29tYmluZWRTdHJlYW1bb3B0aW9uXSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgfVxuXG4gIHJldHVybiBjb21iaW5lZFN0cmVhbTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLmlzU3RyZWFtTGlrZSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICByZXR1cm4gKHR5cGVvZiBzdHJlYW0gIT09ICdmdW5jdGlvbicpXG4gICAgJiYgKHR5cGVvZiBzdHJlYW0gIT09ICdzdHJpbmcnKVxuICAgICYmICh0eXBlb2Ygc3RyZWFtICE9PSAnYm9vbGVhbicpXG4gICAgJiYgKHR5cGVvZiBzdHJlYW0gIT09ICdudW1iZXInKVxuICAgICYmICghQnVmZmVyLmlzQnVmZmVyKHN0cmVhbSkpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICB2YXIgaXNTdHJlYW1MaWtlID0gQ29tYmluZWRTdHJlYW0uaXNTdHJlYW1MaWtlKHN0cmVhbSk7XG5cbiAgaWYgKGlzU3RyZWFtTGlrZSkge1xuICAgIGlmICghKHN0cmVhbSBpbnN0YW5jZW9mIERlbGF5ZWRTdHJlYW0pKSB7XG4gICAgICB2YXIgbmV3U3RyZWFtID0gRGVsYXllZFN0cmVhbS5jcmVhdGUoc3RyZWFtLCB7XG4gICAgICAgIG1heERhdGFTaXplOiBJbmZpbml0eSxcbiAgICAgICAgcGF1c2VTdHJlYW06IHRoaXMucGF1c2VTdHJlYW1zLFxuICAgICAgfSk7XG4gICAgICBzdHJlYW0ub24oJ2RhdGEnLCB0aGlzLl9jaGVja0RhdGFTaXplLmJpbmQodGhpcykpO1xuICAgICAgc3RyZWFtID0gbmV3U3RyZWFtO1xuICAgIH1cblxuICAgIHRoaXMuX2hhbmRsZUVycm9ycyhzdHJlYW0pO1xuXG4gICAgaWYgKHRoaXMucGF1c2VTdHJlYW1zKSB7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLl9zdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHtcbiAgU3RyZWFtLnByb3RvdHlwZS5waXBlLmNhbGwodGhpcywgZGVzdCwgb3B0aW9ucyk7XG4gIHRoaXMucmVzdW1lKCk7XG4gIHJldHVybiBkZXN0O1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9nZXROZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2N1cnJlbnRTdHJlYW0gPSBudWxsO1xuXG4gIGlmICh0aGlzLl9pbnNpZGVMb29wKSB7XG4gICAgdGhpcy5fcGVuZGluZ05leHQgPSB0cnVlO1xuICAgIHJldHVybjsgLy8gZGVmZXIgY2FsbFxuICB9XG5cbiAgdGhpcy5faW5zaWRlTG9vcCA9IHRydWU7XG4gIHRyeSB7XG4gICAgZG8ge1xuICAgICAgdGhpcy5fcGVuZGluZ05leHQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3JlYWxHZXROZXh0KCk7XG4gICAgfSB3aGlsZSAodGhpcy5fcGVuZGluZ05leHQpO1xuICB9IGZpbmFsbHkge1xuICAgIHRoaXMuX2luc2lkZUxvb3AgPSBmYWxzZTtcbiAgfVxufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9yZWFsR2V0TmV4dCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RyZWFtID0gdGhpcy5fc3RyZWFtcy5zaGlmdCgpO1xuXG5cbiAgaWYgKHR5cGVvZiBzdHJlYW0gPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLmVuZCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RyZWFtICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fcGlwZU5leHQoc3RyZWFtKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZ2V0U3RyZWFtID0gc3RyZWFtO1xuICBnZXRTdHJlYW0oZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIGlzU3RyZWFtTGlrZSA9IENvbWJpbmVkU3RyZWFtLmlzU3RyZWFtTGlrZShzdHJlYW0pO1xuICAgIGlmIChpc1N0cmVhbUxpa2UpIHtcbiAgICAgIHN0cmVhbS5vbignZGF0YScsIHRoaXMuX2NoZWNrRGF0YVNpemUuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLl9oYW5kbGVFcnJvcnMoc3RyZWFtKTtcbiAgICB9XG5cbiAgICB0aGlzLl9waXBlTmV4dChzdHJlYW0pO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9waXBlTmV4dCA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICB0aGlzLl9jdXJyZW50U3RyZWFtID0gc3RyZWFtO1xuXG4gIHZhciBpc1N0cmVhbUxpa2UgPSBDb21iaW5lZFN0cmVhbS5pc1N0cmVhbUxpa2Uoc3RyZWFtKTtcbiAgaWYgKGlzU3RyZWFtTGlrZSkge1xuICAgIHN0cmVhbS5vbignZW5kJywgdGhpcy5fZ2V0TmV4dC5iaW5kKHRoaXMpKTtcbiAgICBzdHJlYW0ucGlwZSh0aGlzLCB7ZW5kOiBmYWxzZX0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IHN0cmVhbTtcbiAgdGhpcy53cml0ZSh2YWx1ZSk7XG4gIHRoaXMuX2dldE5leHQoKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5faGFuZGxlRXJyb3JzID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc3RyZWFtLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikge1xuICAgIHNlbGYuX2VtaXRFcnJvcihlcnIpO1xuICB9KTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdGhpcy5lbWl0KCdkYXRhJywgZGF0YSk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLnBhdXNlU3RyZWFtcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmKHRoaXMucGF1c2VTdHJlYW1zICYmIHRoaXMuX2N1cnJlbnRTdHJlYW0gJiYgdHlwZW9mKHRoaXMuX2N1cnJlbnRTdHJlYW0ucGF1c2UpID09ICdmdW5jdGlvbicpIHRoaXMuX2N1cnJlbnRTdHJlYW0ucGF1c2UoKTtcbiAgdGhpcy5lbWl0KCdwYXVzZScpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX3JlbGVhc2VkKSB7XG4gICAgdGhpcy5fcmVsZWFzZWQgPSB0cnVlO1xuICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgIHRoaXMuX2dldE5leHQoKTtcbiAgfVxuXG4gIGlmKHRoaXMucGF1c2VTdHJlYW1zICYmIHRoaXMuX2N1cnJlbnRTdHJlYW0gJiYgdHlwZW9mKHRoaXMuX2N1cnJlbnRTdHJlYW0ucmVzdW1lKSA9PSAnZnVuY3Rpb24nKSB0aGlzLl9jdXJyZW50U3RyZWFtLnJlc3VtZSgpO1xuICB0aGlzLmVtaXQoJ3Jlc3VtZScpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9yZXNldCgpO1xuICB0aGlzLmVtaXQoJ2VuZCcpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcmVzZXQoKTtcbiAgdGhpcy5lbWl0KCdjbG9zZScpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHRoaXMuX3N0cmVhbXMgPSBbXTtcbiAgdGhpcy5fY3VycmVudFN0cmVhbSA9IG51bGw7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX2NoZWNrRGF0YVNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fdXBkYXRlRGF0YVNpemUoKTtcbiAgaWYgKHRoaXMuZGF0YVNpemUgPD0gdGhpcy5tYXhEYXRhU2l6ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtZXNzYWdlID1cbiAgICAnRGVsYXllZFN0cmVhbSNtYXhEYXRhU2l6ZSBvZiAnICsgdGhpcy5tYXhEYXRhU2l6ZSArICcgYnl0ZXMgZXhjZWVkZWQuJztcbiAgdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihtZXNzYWdlKSk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX3VwZGF0ZURhdGFTaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGF0YVNpemUgPSAwO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5fc3RyZWFtcy5mb3JFYWNoKGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIGlmICghc3RyZWFtLmRhdGFTaXplKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VsZi5kYXRhU2l6ZSArPSBzdHJlYW0uZGF0YVNpemU7XG4gIH0pO1xuXG4gIGlmICh0aGlzLl9jdXJyZW50U3RyZWFtICYmIHRoaXMuX2N1cnJlbnRTdHJlYW0uZGF0YVNpemUpIHtcbiAgICB0aGlzLmRhdGFTaXplICs9IHRoaXMuX2N1cnJlbnRTdHJlYW0uZGF0YVNpemU7XG4gIH1cbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5fZW1pdEVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gIHRoaXMuX3Jlc2V0KCk7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyByZXNvbHZlcyAuIGFuZCAuLiBlbGVtZW50cyBpbiBhIHBhdGggYXJyYXkgd2l0aCBkaXJlY3RvcnkgbmFtZXMgdGhlcmVcbi8vIG11c3QgYmUgbm8gc2xhc2hlcywgZW1wdHkgZWxlbWVudHMsIG9yIGRldmljZSBuYW1lcyAoYzpcXCkgaW4gdGhlIGFycmF5XG4vLyAoc28gYWxzbyBubyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzIC0gaXQgZG9lcyBub3QgZGlzdGluZ3Vpc2hcbi8vIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBwYXRocylcbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KHBhcnRzLCBhbGxvd0Fib3ZlUm9vdCkge1xuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgbGFzdCA9IHBhcnRzW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgcGFydHMudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFydHM7XG59XG5cbi8vIFNwbGl0IGEgZmlsZW5hbWUgaW50byBbcm9vdCwgZGlyLCBiYXNlbmFtZSwgZXh0XSwgdW5peCB2ZXJzaW9uXG4vLyAncm9vdCcgaXMganVzdCBhIHNsYXNoLCBvciBub3RoaW5nLlxudmFyIHNwbGl0UGF0aFJlID1cbiAgICAvXihcXC8/fCkoW1xcc1xcU10qPykoKD86XFwuezEsMn18W15cXC9dKz98KShcXC5bXi5cXC9dKnwpKSg/OltcXC9dKikkLztcbnZhciBzcGxpdFBhdGggPSBmdW5jdGlvbihmaWxlbmFtZSkge1xuICByZXR1cm4gc3BsaXRQYXRoUmUuZXhlYyhmaWxlbmFtZSkuc2xpY2UoMSk7XG59O1xuXG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZSgpIHtcbiAgdmFyIHJlc29sdmVkUGF0aCA9ICcnLFxuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgdmFyIHBhdGggPSAoaSA+PSAwKSA/IGFyZ3VtZW50c1tpXSA6ICcvJztcblxuICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllc1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfSBlbHNlIGlmICghcGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIHJldHVybiAoKHJlc29sdmVkQWJzb2x1dGUgPyAnLycgOiAnJykgKyByZXNvbHZlZFBhdGgpIHx8ICcuJztcbn07XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHBhdGgpIHtcbiAgdmFyIGlzUGF0aEFic29sdXRlID0gaXNBYnNvbHV0ZShwYXRoKSxcbiAgICAgIHRyYWlsaW5nU2xhc2ggPSBzdWJzdHIocGF0aCwgLTEpID09PSAnLyc7XG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFpc1BhdGhBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIGlmICghcGF0aCAmJiAhaXNQYXRoQWJzb2x1dGUpIHtcbiAgICBwYXRoID0gJy4nO1xuICB9XG4gIGlmIChwYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcbiAgICBwYXRoICs9ICcvJztcbiAgfVxuXG4gIHJldHVybiAoaXNQYXRoQWJzb2x1dGUgPyAnLycgOiAnJykgKyBwYXRoO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0IGZ1bmN0aW9uIGpvaW4oKSB7XG4gIHZhciBwYXRocyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHJldHVybiBub3JtYWxpemUoZmlsdGVyKHBhdGhzLCBmdW5jdGlvbihwLCBpbmRleCkge1xuICAgIGlmICh0eXBlb2YgcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICAgIHJldHVybiBwO1xuICB9KS5qb2luKCcvJykpO1xufVxuXG5cbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnQgZnVuY3Rpb24gcmVsYXRpdmUoZnJvbSwgdG8pIHtcbiAgZnJvbSA9IHJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO1xuICB0byA9IHJlc29sdmUodG8pLnN1YnN0cigxKTtcblxuICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbiAgfVxuXG4gIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcblxuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgc2FtZVBhcnRzTGVuZ3RoID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvdXRwdXRQYXJ0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gc2FtZVBhcnRzTGVuZ3RoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgfVxuXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XG5cbiAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oJy8nKTtcbn1cblxuZXhwb3J0IHZhciBzZXAgPSAnLyc7XG5leHBvcnQgdmFyIGRlbGltaXRlciA9ICc6JztcblxuZXhwb3J0IGZ1bmN0aW9uIGRpcm5hbWUocGF0aCkge1xuICB2YXIgcmVzdWx0ID0gc3BsaXRQYXRoKHBhdGgpLFxuICAgICAgcm9vdCA9IHJlc3VsdFswXSxcbiAgICAgIGRpciA9IHJlc3VsdFsxXTtcblxuICBpZiAoIXJvb3QgJiYgIWRpcikge1xuICAgIC8vIE5vIGRpcm5hbWUgd2hhdHNvZXZlclxuICAgIHJldHVybiAnLic7XG4gIH1cblxuICBpZiAoZGlyKSB7XG4gICAgLy8gSXQgaGFzIGEgZGlybmFtZSwgc3RyaXAgdHJhaWxpbmcgc2xhc2hcbiAgICBkaXIgPSBkaXIuc3Vic3RyKDAsIGRpci5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIHJldHVybiByb290ICsgZGlyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmFzZW5hbWUocGF0aCwgZXh0KSB7XG4gIHZhciBmID0gc3BsaXRQYXRoKHBhdGgpWzJdO1xuICAvLyBUT0RPOiBtYWtlIHRoaXMgY29tcGFyaXNvbiBjYXNlLWluc2Vuc2l0aXZlIG9uIHdpbmRvd3M/XG4gIGlmIChleHQgJiYgZi5zdWJzdHIoLTEgKiBleHQubGVuZ3RoKSA9PT0gZXh0KSB7XG4gICAgZiA9IGYuc3Vic3RyKDAsIGYubGVuZ3RoIC0gZXh0Lmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIGY7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dG5hbWUocGF0aCkge1xuICByZXR1cm4gc3BsaXRQYXRoKHBhdGgpWzNdO1xufVxuZXhwb3J0IGRlZmF1bHQge1xuICBleHRuYW1lOiBleHRuYW1lLFxuICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gIGRpcm5hbWU6IGRpcm5hbWUsXG4gIHNlcDogc2VwLFxuICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgcmVsYXRpdmU6IHJlbGF0aXZlLFxuICBqb2luOiBqb2luLFxuICBpc0Fic29sdXRlOiBpc0Fic29sdXRlLFxuICBub3JtYWxpemU6IG5vcm1hbGl6ZSxcbiAgcmVzb2x2ZTogcmVzb2x2ZVxufTtcbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGYpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxudmFyIHN1YnN0ciA9ICdhYicuc3Vic3RyKC0xKSA9PT0gJ2InID9cbiAgICBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7IHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pIH0gOlxuICAgIGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICAgIH1cbjtcbiIsIi8qIVxuICogbWltZS10eXBlc1xuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBDb3B5cmlnaHQoYykgMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGRiID0gcmVxdWlyZSgnbWltZS1kYicpXG52YXIgZXh0bmFtZSA9IHJlcXVpcmUoJ3BhdGgnKS5leHRuYW1lXG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEVYVFJBQ1RfVFlQRV9SRUdFWFAgPSAvXlxccyooW147XFxzXSopKD86O3xcXHN8JCkvXG52YXIgVEVYVF9UWVBFX1JFR0VYUCA9IC9edGV4dFxcLy9pXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5jaGFyc2V0ID0gY2hhcnNldFxuZXhwb3J0cy5jaGFyc2V0cyA9IHsgbG9va3VwOiBjaGFyc2V0IH1cbmV4cG9ydHMuY29udGVudFR5cGUgPSBjb250ZW50VHlwZVxuZXhwb3J0cy5leHRlbnNpb24gPSBleHRlbnNpb25cbmV4cG9ydHMuZXh0ZW5zaW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbClcbmV4cG9ydHMubG9va3VwID0gbG9va3VwXG5leHBvcnRzLnR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4vLyBQb3B1bGF0ZSB0aGUgZXh0ZW5zaW9ucy90eXBlcyBtYXBzXG5wb3B1bGF0ZU1hcHMoZXhwb3J0cy5leHRlbnNpb25zLCBleHBvcnRzLnR5cGVzKVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBjaGFyc2V0IGZvciBhIE1JTUUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gY2hhcnNldCAodHlwZSkge1xuICBpZiAoIXR5cGUgfHwgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBUT0RPOiB1c2UgbWVkaWEtdHlwZXJcbiAgdmFyIG1hdGNoID0gRVhUUkFDVF9UWVBFX1JFR0VYUC5leGVjKHR5cGUpXG4gIHZhciBtaW1lID0gbWF0Y2ggJiYgZGJbbWF0Y2hbMV0udG9Mb3dlckNhc2UoKV1cblxuICBpZiAobWltZSAmJiBtaW1lLmNoYXJzZXQpIHtcbiAgICByZXR1cm4gbWltZS5jaGFyc2V0XG4gIH1cblxuICAvLyBkZWZhdWx0IHRleHQvKiB0byB1dGYtOFxuICBpZiAobWF0Y2ggJiYgVEVYVF9UWVBFX1JFR0VYUC50ZXN0KG1hdGNoWzFdKSkge1xuICAgIHJldHVybiAnVVRGLTgnXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBmdWxsIENvbnRlbnQtVHlwZSBoZWFkZXIgZ2l2ZW4gYSBNSU1FIHR5cGUgb3IgZXh0ZW5zaW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGNvbnRlbnRUeXBlIChzdHIpIHtcbiAgLy8gVE9ETzogc2hvdWxkIHRoaXMgZXZlbiBiZSBpbiB0aGlzIG1vZHVsZT9cbiAgaWYgKCFzdHIgfHwgdHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHZhciBtaW1lID0gc3RyLmluZGV4T2YoJy8nKSA9PT0gLTFcbiAgICA/IGV4cG9ydHMubG9va3VwKHN0cilcbiAgICA6IHN0clxuXG4gIGlmICghbWltZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gVE9ETzogdXNlIGNvbnRlbnQtdHlwZSBvciBvdGhlciBtb2R1bGVcbiAgaWYgKG1pbWUuaW5kZXhPZignY2hhcnNldCcpID09PSAtMSkge1xuICAgIHZhciBjaGFyc2V0ID0gZXhwb3J0cy5jaGFyc2V0KG1pbWUpXG4gICAgaWYgKGNoYXJzZXQpIG1pbWUgKz0gJzsgY2hhcnNldD0nICsgY2hhcnNldC50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICByZXR1cm4gbWltZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBleHRlbnNpb24gZm9yIGEgTUlNRSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBleHRlbnNpb24gKHR5cGUpIHtcbiAgaWYgKCF0eXBlIHx8IHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gVE9ETzogdXNlIG1lZGlhLXR5cGVyXG4gIHZhciBtYXRjaCA9IEVYVFJBQ1RfVFlQRV9SRUdFWFAuZXhlYyh0eXBlKVxuXG4gIC8vIGdldCBleHRlbnNpb25zXG4gIHZhciBleHRzID0gbWF0Y2ggJiYgZXhwb3J0cy5leHRlbnNpb25zW21hdGNoWzFdLnRvTG93ZXJDYXNlKCldXG5cbiAgaWYgKCFleHRzIHx8ICFleHRzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIGV4dHNbMF1cbn1cblxuLyoqXG4gKiBMb29rdXAgdGhlIE1JTUUgdHlwZSBmb3IgYSBmaWxlIHBhdGgvZXh0ZW5zaW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBsb29rdXAgKHBhdGgpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gZ2V0IHRoZSBleHRlbnNpb24gKFwiZXh0XCIgb3IgXCIuZXh0XCIgb3IgZnVsbCBwYXRoKVxuICB2YXIgZXh0ZW5zaW9uID0gZXh0bmFtZSgneC4nICsgcGF0aClcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5zdWJzdHIoMSlcblxuICBpZiAoIWV4dGVuc2lvbikge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMudHlwZXNbZXh0ZW5zaW9uXSB8fCBmYWxzZVxufVxuXG4vKipcbiAqIFBvcHVsYXRlIHRoZSBleHRlbnNpb25zIGFuZCB0eXBlcyBtYXBzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb3B1bGF0ZU1hcHMgKGV4dGVuc2lvbnMsIHR5cGVzKSB7XG4gIC8vIHNvdXJjZSBwcmVmZXJlbmNlIChsZWFzdCAtPiBtb3N0KVxuICB2YXIgcHJlZmVyZW5jZSA9IFsnbmdpbngnLCAnYXBhY2hlJywgdW5kZWZpbmVkLCAnaWFuYSddXG5cbiAgT2JqZWN0LmtleXMoZGIpLmZvckVhY2goZnVuY3Rpb24gZm9yRWFjaE1pbWVUeXBlICh0eXBlKSB7XG4gICAgdmFyIG1pbWUgPSBkYlt0eXBlXVxuICAgIHZhciBleHRzID0gbWltZS5leHRlbnNpb25zXG5cbiAgICBpZiAoIWV4dHMgfHwgIWV4dHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBtaW1lIC0+IGV4dGVuc2lvbnNcbiAgICBleHRlbnNpb25zW3R5cGVdID0gZXh0c1xuXG4gICAgLy8gZXh0ZW5zaW9uIC0+IG1pbWVcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBleHRlbnNpb24gPSBleHRzW2ldXG5cbiAgICAgIGlmICh0eXBlc1tleHRlbnNpb25dKSB7XG4gICAgICAgIHZhciBmcm9tID0gcHJlZmVyZW5jZS5pbmRleE9mKGRiW3R5cGVzW2V4dGVuc2lvbl1dLnNvdXJjZSlcbiAgICAgICAgdmFyIHRvID0gcHJlZmVyZW5jZS5pbmRleE9mKG1pbWUuc291cmNlKVxuXG4gICAgICAgIGlmICh0eXBlc1tleHRlbnNpb25dICE9PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyAmJlxuICAgICAgICAgIChmcm9tID4gdG8gfHwgKGZyb20gPT09IHRvICYmIHR5cGVzW2V4dGVuc2lvbl0uc3Vic3RyKDAsIDEyKSA9PT0gJ2FwcGxpY2F0aW9uLycpKSkge1xuICAgICAgICAgIC8vIHNraXAgdGhlIHJlbWFwcGluZ1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHRoZSBleHRlbnNpb24gLT4gbWltZVxuICAgICAgdHlwZXNbZXh0ZW5zaW9uXSA9IHR5cGVcbiAgICB9XG4gIH0pXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGRlZmVyO1xuXG4vKipcbiAqIFJ1bnMgcHJvdmlkZWQgZnVuY3Rpb24gb24gbmV4dCBpdGVyYXRpb24gb2YgdGhlIGV2ZW50IGxvb3BcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAtIGZ1bmN0aW9uIHRvIHJ1blxuICovXG5mdW5jdGlvbiBkZWZlcihmbilcbntcbiAgdmFyIG5leHRUaWNrID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PSAnZnVuY3Rpb24nXG4gICAgPyBzZXRJbW1lZGlhdGVcbiAgICA6IChcbiAgICAgIHR5cGVvZiBwcm9jZXNzID09ICdvYmplY3QnICYmIHR5cGVvZiBwcm9jZXNzLm5leHRUaWNrID09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvY2Vzcy5uZXh0VGlja1xuICAgICAgOiBudWxsXG4gICAgKTtcblxuICBpZiAobmV4dFRpY2spXG4gIHtcbiAgICBuZXh0VGljayhmbik7XG4gIH1cbiAgZWxzZVxuICB7XG4gICAgc2V0VGltZW91dChmbiwgMCk7XG4gIH1cbn1cbiIsInZhciBkZWZlciA9IHJlcXVpcmUoJy4vZGVmZXIuanMnKTtcblxuLy8gQVBJXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jO1xuXG4vKipcbiAqIFJ1bnMgcHJvdmlkZWQgY2FsbGJhY2sgYXN5bmNocm9ub3VzbHlcbiAqIGV2ZW4gaWYgY2FsbGJhY2sgaXRzZWxmIGlzIG5vdFxuICpcbiAqIEBwYXJhbSAgIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBjYWxsYmFjayB0byBpbnZva2VcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gLSBhdWdtZW50ZWQgY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gYXN5bmMoY2FsbGJhY2spXG57XG4gIHZhciBpc0FzeW5jID0gZmFsc2U7XG5cbiAgLy8gY2hlY2sgaWYgYXN5bmMgaGFwcGVuZWRcbiAgZGVmZXIoZnVuY3Rpb24oKSB7IGlzQXN5bmMgPSB0cnVlOyB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gYXN5bmNfY2FsbGJhY2soZXJyLCByZXN1bHQpXG4gIHtcbiAgICBpZiAoaXNBc3luYylcbiAgICB7XG4gICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdCk7XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICBkZWZlcihmdW5jdGlvbiBuZXh0VGlja19jYWxsYmFjaygpXG4gICAgICB7XG4gICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cbiIsIi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBhYm9ydDtcblxuLyoqXG4gKiBBYm9ydHMgbGVmdG92ZXIgYWN0aXZlIGpvYnNcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgLSBjdXJyZW50IHN0YXRlIG9iamVjdFxuICovXG5mdW5jdGlvbiBhYm9ydChzdGF0ZSlcbntcbiAgT2JqZWN0LmtleXMoc3RhdGUuam9icykuZm9yRWFjaChjbGVhbi5iaW5kKHN0YXRlKSk7XG5cbiAgLy8gcmVzZXQgbGVmdG92ZXIgam9ic1xuICBzdGF0ZS5qb2JzID0ge307XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIGxlZnRvdmVyIGpvYiBieSBpbnZva2luZyBhYm9ydCBmdW5jdGlvbiBmb3IgdGhlIHByb3ZpZGVkIGpvYiBpZFxuICpcbiAqIEB0aGlzICBzdGF0ZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBrZXkgLSBqb2IgaWQgdG8gYWJvcnRcbiAqL1xuZnVuY3Rpb24gY2xlYW4oa2V5KVxue1xuICBpZiAodHlwZW9mIHRoaXMuam9ic1trZXldID09ICdmdW5jdGlvbicpXG4gIHtcbiAgICB0aGlzLmpvYnNba2V5XSgpO1xuICB9XG59XG4iLCJ2YXIgYXN5bmMgPSByZXF1aXJlKCcuL2FzeW5jLmpzJylcbiAgLCBhYm9ydCA9IHJlcXVpcmUoJy4vYWJvcnQuanMnKVxuICA7XG5cbi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBpdGVyYXRlO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWFjaCBqb2Igb2JqZWN0XG4gKlxuICogQHBhcmFtIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gaXRlcmF0b3IgLSBpdGVyYXRvciB0byBydW5cbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIGN1cnJlbnQgam9iIHN0YXR1c1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBpbnZva2VkIHdoZW4gYWxsIGVsZW1lbnRzIHByb2Nlc3NlZFxuICovXG5mdW5jdGlvbiBpdGVyYXRlKGxpc3QsIGl0ZXJhdG9yLCBzdGF0ZSwgY2FsbGJhY2spXG57XG4gIC8vIHN0b3JlIGN1cnJlbnQgaW5kZXhcbiAgdmFyIGtleSA9IHN0YXRlWydrZXllZExpc3QnXSA/IHN0YXRlWydrZXllZExpc3QnXVtzdGF0ZS5pbmRleF0gOiBzdGF0ZS5pbmRleDtcblxuICBzdGF0ZS5qb2JzW2tleV0gPSBydW5Kb2IoaXRlcmF0b3IsIGtleSwgbGlzdFtrZXldLCBmdW5jdGlvbihlcnJvciwgb3V0cHV0KVxuICB7XG4gICAgLy8gZG9uJ3QgcmVwZWF0IHlvdXJzZWxmXG4gICAgLy8gc2tpcCBzZWNvbmRhcnkgY2FsbGJhY2tzXG4gICAgaWYgKCEoa2V5IGluIHN0YXRlLmpvYnMpKVxuICAgIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBjbGVhbiB1cCBqb2JzXG4gICAgZGVsZXRlIHN0YXRlLmpvYnNba2V5XTtcblxuICAgIGlmIChlcnJvcilcbiAgICB7XG4gICAgICAvLyBkb24ndCBwcm9jZXNzIHJlc3Qgb2YgdGhlIHJlc3VsdHNcbiAgICAgIC8vIHN0b3Agc3RpbGwgYWN0aXZlIGpvYnNcbiAgICAgIC8vIGFuZCByZXNldCB0aGUgbGlzdFxuICAgICAgYWJvcnQoc3RhdGUpO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgc3RhdGUucmVzdWx0c1trZXldID0gb3V0cHV0O1xuICAgIH1cblxuICAgIC8vIHJldHVybiBzYWx2YWdlZCByZXN1bHRzXG4gICAgY2FsbGJhY2soZXJyb3IsIHN0YXRlLnJlc3VsdHMpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSdW5zIGl0ZXJhdG9yIG92ZXIgcHJvdmlkZWQgam9iIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGl0ZXJhdG9yIC0gaXRlcmF0b3IgdG8gaW52b2tlXG4gKiBAcGFyYW0gICB7c3RyaW5nfG51bWJlcn0ga2V5IC0ga2V5L2luZGV4IG9mIHRoZSBlbGVtZW50IGluIHRoZSBsaXN0IG9mIGpvYnNcbiAqIEBwYXJhbSAgIHttaXhlZH0gaXRlbSAtIGpvYiBkZXNjcmlwdGlvblxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgYWZ0ZXIgaXRlcmF0b3IgaXMgZG9uZSB3aXRoIHRoZSBqb2JcbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxtaXhlZH0gLSBqb2IgYWJvcnQgZnVuY3Rpb24gb3Igc29tZXRoaW5nIGVsc2VcbiAqL1xuZnVuY3Rpb24gcnVuSm9iKGl0ZXJhdG9yLCBrZXksIGl0ZW0sIGNhbGxiYWNrKVxue1xuICB2YXIgYWJvcnRlcjtcblxuICAvLyBhbGxvdyBzaG9ydGN1dCBpZiBpdGVyYXRvciBleHBlY3RzIG9ubHkgdHdvIGFyZ3VtZW50c1xuICBpZiAoaXRlcmF0b3IubGVuZ3RoID09IDIpXG4gIHtcbiAgICBhYm9ydGVyID0gaXRlcmF0b3IoaXRlbSwgYXN5bmMoY2FsbGJhY2spKTtcbiAgfVxuICAvLyBvdGhlcndpc2UgZ28gd2l0aCBmdWxsIHRocmVlIGFyZ3VtZW50c1xuICBlbHNlXG4gIHtcbiAgICBhYm9ydGVyID0gaXRlcmF0b3IoaXRlbSwga2V5LCBhc3luYyhjYWxsYmFjaykpO1xuICB9XG5cbiAgcmV0dXJuIGFib3J0ZXI7XG59XG4iLCIvLyBBUElcbm1vZHVsZS5leHBvcnRzID0gc3RhdGU7XG5cbi8qKlxuICogQ3JlYXRlcyBpbml0aWFsIHN0YXRlIG9iamVjdFxuICogZm9yIGl0ZXJhdGlvbiBvdmVyIGxpc3RcbiAqXG4gKiBAcGFyYW0gICB7YXJyYXl8b2JqZWN0fSBsaXN0IC0gbGlzdCB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSAgIHtmdW5jdGlvbnxudWxsfSBzb3J0TWV0aG9kIC0gZnVuY3Rpb24gdG8gdXNlIGZvciBrZXlzIHNvcnQsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBgbnVsbGAgdG8ga2VlcCB0aGVtIGFzIGlzXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIGluaXRpYWwgc3RhdGUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHN0YXRlKGxpc3QsIHNvcnRNZXRob2QpXG57XG4gIHZhciBpc05hbWVkTGlzdCA9ICFBcnJheS5pc0FycmF5KGxpc3QpXG4gICAgLCBpbml0U3RhdGUgPVxuICAgIHtcbiAgICAgIGluZGV4ICAgIDogMCxcbiAgICAgIGtleWVkTGlzdDogaXNOYW1lZExpc3QgfHwgc29ydE1ldGhvZCA/IE9iamVjdC5rZXlzKGxpc3QpIDogbnVsbCxcbiAgICAgIGpvYnMgICAgIDoge30sXG4gICAgICByZXN1bHRzICA6IGlzTmFtZWRMaXN0ID8ge30gOiBbXSxcbiAgICAgIHNpemUgICAgIDogaXNOYW1lZExpc3QgPyBPYmplY3Qua2V5cyhsaXN0KS5sZW5ndGggOiBsaXN0Lmxlbmd0aFxuICAgIH1cbiAgICA7XG5cbiAgaWYgKHNvcnRNZXRob2QpXG4gIHtcbiAgICAvLyBzb3J0IGFycmF5IGtleXMgYmFzZWQgb24gaXQncyB2YWx1ZXNcbiAgICAvLyBzb3J0IG9iamVjdCdzIGtleXMganVzdCBvbiBvd24gbWVyaXRcbiAgICBpbml0U3RhdGUua2V5ZWRMaXN0LnNvcnQoaXNOYW1lZExpc3QgPyBzb3J0TWV0aG9kIDogZnVuY3Rpb24oYSwgYilcbiAgICB7XG4gICAgICByZXR1cm4gc29ydE1ldGhvZChsaXN0W2FdLCBsaXN0W2JdKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBpbml0U3RhdGU7XG59XG4iLCJ2YXIgYWJvcnQgPSByZXF1aXJlKCcuL2Fib3J0LmpzJylcbiAgLCBhc3luYyA9IHJlcXVpcmUoJy4vYXN5bmMuanMnKVxuICA7XG5cbi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSB0ZXJtaW5hdG9yO1xuXG4vKipcbiAqIFRlcm1pbmF0ZXMgam9icyBpbiB0aGUgYXR0YWNoZWQgc3RhdGUgY29udGV4dFxuICpcbiAqIEB0aGlzICBBc3luY0tpdFN0YXRlI1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmaW5hbCBjYWxsYmFjayB0byBpbnZva2UgYWZ0ZXIgdGVybWluYXRpb25cbiAqL1xuZnVuY3Rpb24gdGVybWluYXRvcihjYWxsYmFjaylcbntcbiAgaWYgKCFPYmplY3Qua2V5cyh0aGlzLmpvYnMpLmxlbmd0aClcbiAge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGZhc3QgZm9yd2FyZCBpdGVyYXRpb24gaW5kZXhcbiAgdGhpcy5pbmRleCA9IHRoaXMuc2l6ZTtcblxuICAvLyBhYm9ydCBqb2JzXG4gIGFib3J0KHRoaXMpO1xuXG4gIC8vIHNlbmQgYmFjayByZXN1bHRzIHdlIGhhdmUgc28gZmFyXG4gIGFzeW5jKGNhbGxiYWNrKShudWxsLCB0aGlzLnJlc3VsdHMpO1xufVxuIiwidmFyIGl0ZXJhdGUgICAgPSByZXF1aXJlKCcuL2xpYi9pdGVyYXRlLmpzJylcbiAgLCBpbml0U3RhdGUgID0gcmVxdWlyZSgnLi9saWIvc3RhdGUuanMnKVxuICAsIHRlcm1pbmF0b3IgPSByZXF1aXJlKCcuL2xpYi90ZXJtaW5hdG9yLmpzJylcbiAgO1xuXG4vLyBQdWJsaWMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHNlcmlhbE9yZGVyZWQ7XG4vLyBzb3J0aW5nIGhlbHBlcnNcbm1vZHVsZS5leHBvcnRzLmFzY2VuZGluZyAgPSBhc2NlbmRpbmc7XG5tb2R1bGUuZXhwb3J0cy5kZXNjZW5kaW5nID0gZGVzY2VuZGluZztcblxuLyoqXG4gKiBSdW5zIGl0ZXJhdG9yIG92ZXIgcHJvdmlkZWQgc29ydGVkIGFycmF5IGVsZW1lbnRzIGluIHNlcmllc1xuICpcbiAqIEBwYXJhbSAgIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBpdGVyYXRvciAtIGl0ZXJhdG9yIHRvIHJ1blxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBzb3J0TWV0aG9kIC0gY3VzdG9tIHNvcnQgZnVuY3Rpb25cbiAqIEBwYXJhbSAgIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBpbnZva2VkIHdoZW4gYWxsIGVsZW1lbnRzIHByb2Nlc3NlZFxuICogQHJldHVybnMge2Z1bmN0aW9ufSAtIGpvYnMgdGVybWluYXRvclxuICovXG5mdW5jdGlvbiBzZXJpYWxPcmRlcmVkKGxpc3QsIGl0ZXJhdG9yLCBzb3J0TWV0aG9kLCBjYWxsYmFjaylcbntcbiAgdmFyIHN0YXRlID0gaW5pdFN0YXRlKGxpc3QsIHNvcnRNZXRob2QpO1xuXG4gIGl0ZXJhdGUobGlzdCwgaXRlcmF0b3IsIHN0YXRlLCBmdW5jdGlvbiBpdGVyYXRvckhhbmRsZXIoZXJyb3IsIHJlc3VsdClcbiAge1xuICAgIGlmIChlcnJvcilcbiAgICB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgcmVzdWx0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGF0ZS5pbmRleCsrO1xuXG4gICAgLy8gYXJlIHdlIHRoZXJlIHlldD9cbiAgICBpZiAoc3RhdGUuaW5kZXggPCAoc3RhdGVbJ2tleWVkTGlzdCddIHx8IGxpc3QpLmxlbmd0aClcbiAgICB7XG4gICAgICBpdGVyYXRlKGxpc3QsIGl0ZXJhdG9yLCBzdGF0ZSwgaXRlcmF0b3JIYW5kbGVyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBkb25lIGhlcmVcbiAgICBjYWxsYmFjayhudWxsLCBzdGF0ZS5yZXN1bHRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRlcm1pbmF0b3IuYmluZChzdGF0ZSwgY2FsbGJhY2spO1xufVxuXG4vKlxuICogLS0gU29ydCBtZXRob2RzXG4gKi9cblxuLyoqXG4gKiBzb3J0IGhlbHBlciB0byBzb3J0IGFycmF5IGVsZW1lbnRzIGluIGFzY2VuZGluZyBvcmRlclxuICpcbiAqIEBwYXJhbSAgIHttaXhlZH0gYSAtIGFuIGl0ZW0gdG8gY29tcGFyZVxuICogQHBhcmFtICAge21peGVkfSBiIC0gYW4gaXRlbSB0byBjb21wYXJlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIGNvbXBhcmlzb24gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKVxue1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7XG59XG5cbi8qKlxuICogc29ydCBoZWxwZXIgdG8gc29ydCBhcnJheSBlbGVtZW50cyBpbiBkZXNjZW5kaW5nIG9yZGVyXG4gKlxuICogQHBhcmFtICAge21peGVkfSBhIC0gYW4gaXRlbSB0byBjb21wYXJlXG4gKiBAcGFyYW0gICB7bWl4ZWR9IGIgLSBhbiBpdGVtIHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gY29tcGFyaXNvbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gZGVzY2VuZGluZyhhLCBiKVxue1xuICByZXR1cm4gLTEgKiBhc2NlbmRpbmcoYSwgYik7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9XG57XG4gIHBhcmFsbGVsICAgICAgOiByZXF1aXJlKCcuL3BhcmFsbGVsLmpzJyksXG4gIHNlcmlhbCAgICAgICAgOiByZXF1aXJlKCcuL3NlcmlhbC5qcycpLFxuICBzZXJpYWxPcmRlcmVkIDogcmVxdWlyZSgnLi9zZXJpYWxPcmRlcmVkLmpzJylcbn07XG4iLCJ2YXIgaXRlcmF0ZSAgICA9IHJlcXVpcmUoJy4vbGliL2l0ZXJhdGUuanMnKVxuICAsIGluaXRTdGF0ZSAgPSByZXF1aXJlKCcuL2xpYi9zdGF0ZS5qcycpXG4gICwgdGVybWluYXRvciA9IHJlcXVpcmUoJy4vbGliL3Rlcm1pbmF0b3IuanMnKVxuICA7XG5cbi8vIFB1YmxpYyBBUElcbm1vZHVsZS5leHBvcnRzID0gcGFyYWxsZWw7XG5cbi8qKlxuICogUnVucyBpdGVyYXRvciBvdmVyIHByb3ZpZGVkIGFycmF5IGVsZW1lbnRzIGluIHBhcmFsbGVsXG4gKlxuICogQHBhcmFtICAge2FycmF5fG9iamVjdH0gbGlzdCAtIGFycmF5IG9yIG9iamVjdCAobmFtZWQgbGlzdCkgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGl0ZXJhdG9yIC0gaXRlcmF0b3IgdG8gcnVuXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gaW52b2tlZCB3aGVuIGFsbCBlbGVtZW50cyBwcm9jZXNzZWRcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gLSBqb2JzIHRlcm1pbmF0b3JcbiAqL1xuZnVuY3Rpb24gcGFyYWxsZWwobGlzdCwgaXRlcmF0b3IsIGNhbGxiYWNrKVxue1xuICB2YXIgc3RhdGUgPSBpbml0U3RhdGUobGlzdCk7XG5cbiAgd2hpbGUgKHN0YXRlLmluZGV4IDwgKHN0YXRlWydrZXllZExpc3QnXSB8fCBsaXN0KS5sZW5ndGgpXG4gIHtcbiAgICBpdGVyYXRlKGxpc3QsIGl0ZXJhdG9yLCBzdGF0ZSwgZnVuY3Rpb24oZXJyb3IsIHJlc3VsdClcbiAgICB7XG4gICAgICBpZiAoZXJyb3IpXG4gICAgICB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCByZXN1bHQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGxvb2tzIGxpa2UgaXQncyB0aGUgbGFzdCBvbmVcbiAgICAgIGlmIChPYmplY3Qua2V5cyhzdGF0ZS5qb2JzKS5sZW5ndGggPT09IDApXG4gICAgICB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHN0YXRlLnJlc3VsdHMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGF0ZS5pbmRleCsrO1xuICB9XG5cbiAgcmV0dXJuIHRlcm1pbmF0b3IuYmluZChzdGF0ZSwgY2FsbGJhY2spO1xufVxuIiwiLy8gcG9wdWxhdGVzIG1pc3NpbmcgdmFsdWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRzdCwgc3JjKSB7XG5cbiAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApXG4gIHtcbiAgICBkc3RbcHJvcF0gPSBkc3RbcHJvcF0gfHwgc3JjW3Byb3BdO1xuICB9KTtcblxuICByZXR1cm4gZHN0O1xufTtcbiIsInZhciBDb21iaW5lZFN0cmVhbSA9IHJlcXVpcmUoJ2NvbWJpbmVkLXN0cmVhbScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xudmFyIGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcbnZhciBwYXJzZVVybCA9IHJlcXVpcmUoJ3VybCcpLnBhcnNlO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBtaW1lID0gcmVxdWlyZSgnbWltZS10eXBlcycpO1xudmFyIGFzeW5ja2l0ID0gcmVxdWlyZSgnYXN5bmNraXQnKTtcbnZhciBwb3B1bGF0ZSA9IHJlcXVpcmUoJy4vcG9wdWxhdGUuanMnKTtcblxuLy8gUHVibGljIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBGb3JtRGF0YTtcblxuLy8gbWFrZSBpdCBhIFN0cmVhbVxudXRpbC5pbmhlcml0cyhGb3JtRGF0YSwgQ29tYmluZWRTdHJlYW0pO1xuXG4vKipcbiAqIENyZWF0ZSByZWFkYWJsZSBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiBzdHJlYW1zLlxuICogQ2FuIGJlIHVzZWQgdG8gc3VibWl0IGZvcm1zXG4gKiBhbmQgZmlsZSB1cGxvYWRzIHRvIG90aGVyIHdlYiBhcHBsaWNhdGlvbnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFByb3BlcnRpZXMgdG8gYmUgYWRkZWQvb3ZlcnJpZGVuIGZvciBGb3JtRGF0YSBhbmQgQ29tYmluZWRTdHJlYW1cbiAqL1xuZnVuY3Rpb24gRm9ybURhdGEob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRm9ybURhdGEpKSB7XG4gICAgcmV0dXJuIG5ldyBGb3JtRGF0YShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuX292ZXJoZWFkTGVuZ3RoID0gMDtcbiAgdGhpcy5fdmFsdWVMZW5ndGggPSAwO1xuICB0aGlzLl92YWx1ZXNUb01lYXN1cmUgPSBbXTtcblxuICBDb21iaW5lZFN0cmVhbS5jYWxsKHRoaXMpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBmb3IgKHZhciBvcHRpb24gaW4gb3B0aW9ucykge1xuICAgIHRoaXNbb3B0aW9uXSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgfVxufVxuXG5Gb3JtRGF0YS5MSU5FX0JSRUFLID0gJ1xcclxcbic7XG5Gb3JtRGF0YS5ERUZBVUxUX0NPTlRFTlRfVFlQRSA9ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nO1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oZmllbGQsIHZhbHVlLCBvcHRpb25zKSB7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gYWxsb3cgZmlsZW5hbWUgYXMgc2luZ2xlIG9wdGlvblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gJ3N0cmluZycpIHtcbiAgICBvcHRpb25zID0ge2ZpbGVuYW1lOiBvcHRpb25zfTtcbiAgfVxuXG4gIHZhciBhcHBlbmQgPSBDb21iaW5lZFN0cmVhbS5wcm90b3R5cGUuYXBwZW5kLmJpbmQodGhpcyk7XG5cbiAgLy8gYWxsIHRoYXQgc3RyZWFteSBidXNpbmVzcyBjYW4ndCBoYW5kbGUgbnVtYmVyc1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgdmFsdWUgPSAnJyArIHZhbHVlO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZlbGl4Z2Uvbm9kZS1mb3JtLWRhdGEvaXNzdWVzLzM4XG4gIGlmICh1dGlsLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUGxlYXNlIGNvbnZlcnQgeW91ciBhcnJheSBpbnRvIHN0cmluZ1xuICAgIC8vIHRoZSB3YXkgd2ViIHNlcnZlciBleHBlY3RzIGl0XG4gICAgdGhpcy5fZXJyb3IobmV3IEVycm9yKCdBcnJheXMgYXJlIG5vdCBzdXBwb3J0ZWQuJykpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBoZWFkZXIgPSB0aGlzLl9tdWx0aVBhcnRIZWFkZXIoZmllbGQsIHZhbHVlLCBvcHRpb25zKTtcbiAgdmFyIGZvb3RlciA9IHRoaXMuX211bHRpUGFydEZvb3RlcigpO1xuXG4gIGFwcGVuZChoZWFkZXIpO1xuICBhcHBlbmQodmFsdWUpO1xuICBhcHBlbmQoZm9vdGVyKTtcblxuICAvLyBwYXNzIGFsb25nIG9wdGlvbnMua25vd25MZW5ndGhcbiAgdGhpcy5fdHJhY2tMZW5ndGgoaGVhZGVyLCB2YWx1ZSwgb3B0aW9ucyk7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX3RyYWNrTGVuZ3RoID0gZnVuY3Rpb24oaGVhZGVyLCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdmFsdWVMZW5ndGggPSAwO1xuXG4gIC8vIHVzZWQgdy8gZ2V0TGVuZ3RoU3luYygpLCB3aGVuIGxlbmd0aCBpcyBrbm93bi5cbiAgLy8gZS5nLiBmb3Igc3RyZWFtaW5nIGRpcmVjdGx5IGZyb20gYSByZW1vdGUgc2VydmVyLFxuICAvLyB3LyBhIGtub3duIGZpbGUgYSBzaXplLCBhbmQgbm90IHdhbnRpbmcgdG8gd2FpdCBmb3JcbiAgLy8gaW5jb21pbmcgZmlsZSB0byBmaW5pc2ggdG8gZ2V0IGl0cyBzaXplLlxuICBpZiAob3B0aW9ucy5rbm93bkxlbmd0aCAhPSBudWxsKSB7XG4gICAgdmFsdWVMZW5ndGggKz0gK29wdGlvbnMua25vd25MZW5ndGg7XG4gIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgIHZhbHVlTGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZUxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgfVxuXG4gIHRoaXMuX3ZhbHVlTGVuZ3RoICs9IHZhbHVlTGVuZ3RoO1xuXG4gIC8vIEBjaGVjayB3aHkgYWRkIENSTEY/IGRvZXMgdGhpcyBhY2NvdW50IGZvciBjdXN0b20vbXVsdGlwbGUgQ1JMRnM/XG4gIHRoaXMuX292ZXJoZWFkTGVuZ3RoICs9XG4gICAgQnVmZmVyLmJ5dGVMZW5ndGgoaGVhZGVyKSArXG4gICAgRm9ybURhdGEuTElORV9CUkVBSy5sZW5ndGg7XG5cbiAgLy8gZW1wdHkgb3IgZWl0aGVyIGRvZXNuJ3QgaGF2ZSBwYXRoIG9yIG5vdCBhbiBodHRwIHJlc3BvbnNlXG4gIGlmICghdmFsdWUgfHwgKCAhdmFsdWUucGF0aCAmJiAhKHZhbHVlLnJlYWRhYmxlICYmIHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSApKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gbm8gbmVlZCB0byBib3RoZXIgd2l0aCB0aGUgbGVuZ3RoXG4gIGlmICghb3B0aW9ucy5rbm93bkxlbmd0aCkge1xuICAgIHRoaXMuX3ZhbHVlc1RvTWVhc3VyZS5wdXNoKHZhbHVlKTtcbiAgfVxufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9sZW5ndGhSZXRyaWV2ZXIgPSBmdW5jdGlvbih2YWx1ZSwgY2FsbGJhY2spIHtcblxuICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2ZkJykpIHtcblxuICAgIC8vIHRha2UgcmVhZCByYW5nZSBpbnRvIGEgYWNjb3VudFxuICAgIC8vIGBlbmRgID0gSW5maW5pdHkg4oCTPiByZWFkIGZpbGUgdGlsbCB0aGUgZW5kXG4gICAgLy9cbiAgICAvLyBUT0RPOiBMb29rcyBsaWtlIHRoZXJlIGlzIGJ1ZyBpbiBOb2RlIGZzLmNyZWF0ZVJlYWRTdHJlYW1cbiAgICAvLyBpdCBkb2Vzbid0IHJlc3BlY3QgYGVuZGAgb3B0aW9ucyB3aXRob3V0IGBzdGFydGAgb3B0aW9uc1xuICAgIC8vIEZpeCBpdCB3aGVuIG5vZGUgZml4ZXMgaXQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy83ODE5XG4gICAgaWYgKHZhbHVlLmVuZCAhPSB1bmRlZmluZWQgJiYgdmFsdWUuZW5kICE9IEluZmluaXR5ICYmIHZhbHVlLnN0YXJ0ICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAvLyB3aGVuIGVuZCBzcGVjaWZpZWRcbiAgICAgIC8vIG5vIG5lZWQgdG8gY2FsY3VsYXRlIHJhbmdlXG4gICAgICAvLyBpbmNsdXNpdmUsIHN0YXJ0cyB3aXRoIDBcbiAgICAgIGNhbGxiYWNrKG51bGwsIHZhbHVlLmVuZCArIDEgLSAodmFsdWUuc3RhcnQgPyB2YWx1ZS5zdGFydCA6IDApKTtcblxuICAgIC8vIG5vdCB0aGF0IGZhc3Qgc25vb3B5XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHN0aWxsIG5lZWQgdG8gZmV0Y2ggZmlsZSBzaXplIGZyb20gZnNcbiAgICAgIGZzLnN0YXQodmFsdWUucGF0aCwgZnVuY3Rpb24oZXJyLCBzdGF0KSB7XG5cbiAgICAgICAgdmFyIGZpbGVTaXplO1xuXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBmaW5hbCBzaXplIGJhc2VkIG9uIHRoZSByYW5nZSBvcHRpb25zXG4gICAgICAgIGZpbGVTaXplID0gc3RhdC5zaXplIC0gKHZhbHVlLnN0YXJ0ID8gdmFsdWUuc3RhcnQgOiAwKTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgZmlsZVNpemUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gIC8vIG9yIGh0dHAgcmVzcG9uc2VcbiAgfSBlbHNlIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnaHR0cFZlcnNpb24nKSkge1xuICAgIGNhbGxiYWNrKG51bGwsICt2YWx1ZS5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddKTtcblxuICAvLyBvciByZXF1ZXN0IHN0cmVhbSBodHRwOi8vZ2l0aHViLmNvbS9taWtlYWwvcmVxdWVzdFxuICB9IGVsc2UgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwTW9kdWxlJykpIHtcbiAgICAvLyB3YWl0IHRpbGwgcmVzcG9uc2UgY29tZSBiYWNrXG4gICAgdmFsdWUub24oJ3Jlc3BvbnNlJywgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIHZhbHVlLnBhdXNlKCk7XG4gICAgICBjYWxsYmFjayhudWxsLCArcmVzcG9uc2UuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSk7XG4gICAgfSk7XG4gICAgdmFsdWUucmVzdW1lKCk7XG5cbiAgLy8gc29tZXRoaW5nIGVsc2VcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjaygnVW5rbm93biBzdHJlYW0nKTtcbiAgfVxufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9tdWx0aVBhcnRIZWFkZXIgPSBmdW5jdGlvbihmaWVsZCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgLy8gY3VzdG9tIGhlYWRlciBzcGVjaWZpZWQgKGFzIHN0cmluZyk/XG4gIC8vIGl0IGJlY29tZXMgcmVzcG9uc2libGUgZm9yIGJvdW5kYXJ5XG4gIC8vIChlLmcuIHRvIGhhbmRsZSBleHRyYSBDUkxGcyBvbiAuTkVUIHNlcnZlcnMpXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5oZWFkZXIgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5oZWFkZXI7XG4gIH1cblxuICB2YXIgY29udGVudERpc3Bvc2l0aW9uID0gdGhpcy5fZ2V0Q29udGVudERpc3Bvc2l0aW9uKHZhbHVlLCBvcHRpb25zKTtcbiAgdmFyIGNvbnRlbnRUeXBlID0gdGhpcy5fZ2V0Q29udGVudFR5cGUodmFsdWUsIG9wdGlvbnMpO1xuXG4gIHZhciBjb250ZW50cyA9ICcnO1xuICB2YXIgaGVhZGVycyAgPSB7XG4gICAgLy8gYWRkIGN1c3RvbSBkaXNwb3NpdGlvbiBhcyB0aGlyZCBlbGVtZW50IG9yIGtlZXAgaXQgdHdvIGVsZW1lbnRzIGlmIG5vdFxuICAgICdDb250ZW50LURpc3Bvc2l0aW9uJzogWydmb3JtLWRhdGEnLCAnbmFtZT1cIicgKyBmaWVsZCArICdcIiddLmNvbmNhdChjb250ZW50RGlzcG9zaXRpb24gfHwgW10pLFxuICAgIC8vIGlmIG5vIGNvbnRlbnQgdHlwZS4gYWxsb3cgaXQgdG8gYmUgZW1wdHkgYXJyYXlcbiAgICAnQ29udGVudC1UeXBlJzogW10uY29uY2F0KGNvbnRlbnRUeXBlIHx8IFtdKVxuICB9O1xuXG4gIC8vIGFsbG93IGN1c3RvbSBoZWFkZXJzLlxuICBpZiAodHlwZW9mIG9wdGlvbnMuaGVhZGVyID09ICdvYmplY3QnKSB7XG4gICAgcG9wdWxhdGUoaGVhZGVycywgb3B0aW9ucy5oZWFkZXIpO1xuICB9XG5cbiAgdmFyIGhlYWRlcjtcbiAgZm9yICh2YXIgcHJvcCBpbiBoZWFkZXJzKSB7XG4gICAgaWYgKCFoZWFkZXJzLmhhc093blByb3BlcnR5KHByb3ApKSBjb250aW51ZTtcbiAgICBoZWFkZXIgPSBoZWFkZXJzW3Byb3BdO1xuXG4gICAgLy8gc2tpcCBudWxsaXNoIGhlYWRlcnMuXG4gICAgaWYgKGhlYWRlciA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IGFsbCBoZWFkZXJzIHRvIGFycmF5cy5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaGVhZGVyKSkge1xuICAgICAgaGVhZGVyID0gW2hlYWRlcl07XG4gICAgfVxuXG4gICAgLy8gYWRkIG5vbi1lbXB0eSBoZWFkZXJzLlxuICAgIGlmIChoZWFkZXIubGVuZ3RoKSB7XG4gICAgICBjb250ZW50cyArPSBwcm9wICsgJzogJyArIGhlYWRlci5qb2luKCc7ICcpICsgRm9ybURhdGEuTElORV9CUkVBSztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJy0tJyArIHRoaXMuZ2V0Qm91bmRhcnkoKSArIEZvcm1EYXRhLkxJTkVfQlJFQUsgKyBjb250ZW50cyArIEZvcm1EYXRhLkxJTkVfQlJFQUs7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2dldENvbnRlbnREaXNwb3NpdGlvbiA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRpb25zKSB7XG5cbiAgdmFyIGZpbGVuYW1lXG4gICAgLCBjb250ZW50RGlzcG9zaXRpb25cbiAgICA7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbGVwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIGN1c3RvbSBmaWxlcGF0aCBmb3IgcmVsYXRpdmUgcGF0aHNcbiAgICBmaWxlbmFtZSA9IHBhdGgubm9ybWFsaXplKG9wdGlvbnMuZmlsZXBhdGgpLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgfSBlbHNlIGlmIChvcHRpb25zLmZpbGVuYW1lIHx8IHZhbHVlLm5hbWUgfHwgdmFsdWUucGF0aCkge1xuICAgIC8vIGN1c3RvbSBmaWxlbmFtZSB0YWtlIHByZWNlZGVuY2VcbiAgICAvLyBmb3JtaWRhYmxlIGFuZCB0aGUgYnJvd3NlciBhZGQgYSBuYW1lIHByb3BlcnR5XG4gICAgLy8gZnMtIGFuZCByZXF1ZXN0LSBzdHJlYW1zIGhhdmUgcGF0aCBwcm9wZXJ0eVxuICAgIGZpbGVuYW1lID0gcGF0aC5iYXNlbmFtZShvcHRpb25zLmZpbGVuYW1lIHx8IHZhbHVlLm5hbWUgfHwgdmFsdWUucGF0aCk7XG4gIH0gZWxzZSBpZiAodmFsdWUucmVhZGFibGUgJiYgdmFsdWUuaGFzT3duUHJvcGVydHkoJ2h0dHBWZXJzaW9uJykpIHtcbiAgICAvLyBvciB0cnkgaHR0cCByZXNwb25zZVxuICAgIGZpbGVuYW1lID0gcGF0aC5iYXNlbmFtZSh2YWx1ZS5jbGllbnQuX2h0dHBNZXNzYWdlLnBhdGggfHwgJycpO1xuICB9XG5cbiAgaWYgKGZpbGVuYW1lKSB7XG4gICAgY29udGVudERpc3Bvc2l0aW9uID0gJ2ZpbGVuYW1lPVwiJyArIGZpbGVuYW1lICsgJ1wiJztcbiAgfVxuXG4gIHJldHVybiBjb250ZW50RGlzcG9zaXRpb247XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2dldENvbnRlbnRUeXBlID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcblxuICAvLyB1c2UgY3VzdG9tIGNvbnRlbnQtdHlwZSBhYm92ZSBhbGxcbiAgdmFyIGNvbnRlbnRUeXBlID0gb3B0aW9ucy5jb250ZW50VHlwZTtcblxuICAvLyBvciB0cnkgYG5hbWVgIGZyb20gZm9ybWlkYWJsZSwgYnJvd3NlclxuICBpZiAoIWNvbnRlbnRUeXBlICYmIHZhbHVlLm5hbWUpIHtcbiAgICBjb250ZW50VHlwZSA9IG1pbWUubG9va3VwKHZhbHVlLm5hbWUpO1xuICB9XG5cbiAgLy8gb3IgdHJ5IGBwYXRoYCBmcm9tIGZzLSwgcmVxdWVzdC0gc3RyZWFtc1xuICBpZiAoIWNvbnRlbnRUeXBlICYmIHZhbHVlLnBhdGgpIHtcbiAgICBjb250ZW50VHlwZSA9IG1pbWUubG9va3VwKHZhbHVlLnBhdGgpO1xuICB9XG5cbiAgLy8gb3IgaWYgaXQncyBodHRwLXJlcG9uc2VcbiAgaWYgKCFjb250ZW50VHlwZSAmJiB2YWx1ZS5yZWFkYWJsZSAmJiB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnaHR0cFZlcnNpb24nKSkge1xuICAgIGNvbnRlbnRUeXBlID0gdmFsdWUuaGVhZGVyc1snY29udGVudC10eXBlJ107XG4gIH1cblxuICAvLyBvciBndWVzcyBpdCBmcm9tIHRoZSBmaWxlcGF0aCBvciBmaWxlbmFtZVxuICBpZiAoIWNvbnRlbnRUeXBlICYmIChvcHRpb25zLmZpbGVwYXRoIHx8IG9wdGlvbnMuZmlsZW5hbWUpKSB7XG4gICAgY29udGVudFR5cGUgPSBtaW1lLmxvb2t1cChvcHRpb25zLmZpbGVwYXRoIHx8IG9wdGlvbnMuZmlsZW5hbWUpO1xuICB9XG5cbiAgLy8gZmFsbGJhY2sgdG8gdGhlIGRlZmF1bHQgY29udGVudCB0eXBlIGlmIGB2YWx1ZWAgaXMgbm90IHNpbXBsZSB2YWx1ZVxuICBpZiAoIWNvbnRlbnRUeXBlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgIGNvbnRlbnRUeXBlID0gRm9ybURhdGEuREVGQVVMVF9DT05URU5UX1RZUEU7XG4gIH1cblxuICByZXR1cm4gY29udGVudFR5cGU7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX211bHRpUGFydEZvb3RlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24obmV4dCkge1xuICAgIHZhciBmb290ZXIgPSBGb3JtRGF0YS5MSU5FX0JSRUFLO1xuXG4gICAgdmFyIGxhc3RQYXJ0ID0gKHRoaXMuX3N0cmVhbXMubGVuZ3RoID09PSAwKTtcbiAgICBpZiAobGFzdFBhcnQpIHtcbiAgICAgIGZvb3RlciArPSB0aGlzLl9sYXN0Qm91bmRhcnkoKTtcbiAgICB9XG5cbiAgICBuZXh0KGZvb3Rlcik7XG4gIH0uYmluZCh0aGlzKTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fbGFzdEJvdW5kYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnLS0nICsgdGhpcy5nZXRCb3VuZGFyeSgpICsgJy0tJyArIEZvcm1EYXRhLkxJTkVfQlJFQUs7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuZ2V0SGVhZGVycyA9IGZ1bmN0aW9uKHVzZXJIZWFkZXJzKSB7XG4gIHZhciBoZWFkZXI7XG4gIHZhciBmb3JtSGVhZGVycyA9IHtcbiAgICAnY29udGVudC10eXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGE7IGJvdW5kYXJ5PScgKyB0aGlzLmdldEJvdW5kYXJ5KClcbiAgfTtcblxuICBmb3IgKGhlYWRlciBpbiB1c2VySGVhZGVycykge1xuICAgIGlmICh1c2VySGVhZGVycy5oYXNPd25Qcm9wZXJ0eShoZWFkZXIpKSB7XG4gICAgICBmb3JtSGVhZGVyc1toZWFkZXIudG9Mb3dlckNhc2UoKV0gPSB1c2VySGVhZGVyc1toZWFkZXJdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb3JtSGVhZGVycztcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5nZXRCb3VuZGFyeSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX2JvdW5kYXJ5KSB7XG4gICAgdGhpcy5fZ2VuZXJhdGVCb3VuZGFyeSgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2JvdW5kYXJ5O1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZGF0YUJ1ZmZlciA9IG5ldyBCdWZmZXIuYWxsb2MoIDAgKTtcbiAgdmFyIGJvdW5kYXJ5ID0gdGhpcy5nZXRCb3VuZGFyeSgpO1xuXG4gIC8vIENyZWF0ZSB0aGUgZm9ybSBjb250ZW50LiBBZGQgTGluZSBicmVha3MgdG8gdGhlIGVuZCBvZiBkYXRhLlxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fc3RyZWFtcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fc3RyZWFtc1tpXSAhPT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAvLyBBZGQgY29udGVudCB0byB0aGUgYnVmZmVyLlxuICAgICAgaWYoQnVmZmVyLmlzQnVmZmVyKHRoaXMuX3N0cmVhbXNbaV0pKSB7XG4gICAgICAgIGRhdGFCdWZmZXIgPSBCdWZmZXIuY29uY2F0KCBbZGF0YUJ1ZmZlciwgdGhpcy5fc3RyZWFtc1tpXV0pO1xuICAgICAgfWVsc2Uge1xuICAgICAgICBkYXRhQnVmZmVyID0gQnVmZmVyLmNvbmNhdCggW2RhdGFCdWZmZXIsIEJ1ZmZlci5mcm9tKHRoaXMuX3N0cmVhbXNbaV0pXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBicmVhayBhZnRlciBjb250ZW50LlxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9zdHJlYW1zW2ldICE9PSAnc3RyaW5nJyB8fCB0aGlzLl9zdHJlYW1zW2ldLnN1YnN0cmluZyggMiwgYm91bmRhcnkubGVuZ3RoICsgMiApICE9PSBib3VuZGFyeSkge1xuICAgICAgICBkYXRhQnVmZmVyID0gQnVmZmVyLmNvbmNhdCggW2RhdGFCdWZmZXIsIEJ1ZmZlci5mcm9tKEZvcm1EYXRhLkxJTkVfQlJFQUspXSApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCB0aGUgZm9vdGVyIGFuZCByZXR1cm4gdGhlIEJ1ZmZlciBvYmplY3QuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KCBbZGF0YUJ1ZmZlciwgQnVmZmVyLmZyb20odGhpcy5fbGFzdEJvdW5kYXJ5KCkpXSApO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9nZW5lcmF0ZUJvdW5kYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRoaXMgZ2VuZXJhdGVzIGEgNTAgY2hhcmFjdGVyIGJvdW5kYXJ5IHNpbWlsYXIgdG8gdGhvc2UgdXNlZCBieSBGaXJlZm94LlxuICAvLyBUaGV5IGFyZSBvcHRpbWl6ZWQgZm9yIGJveWVyLW1vb3JlIHBhcnNpbmcuXG4gIHZhciBib3VuZGFyeSA9ICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgIGJvdW5kYXJ5ICs9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKS50b1N0cmluZygxNik7XG4gIH1cblxuICB0aGlzLl9ib3VuZGFyeSA9IGJvdW5kYXJ5O1xufTtcblxuLy8gTm90ZTogZ2V0TGVuZ3RoU3luYyBET0VTTidUIGNhbGN1bGF0ZSBzdHJlYW1zIGxlbmd0aFxuLy8gQXMgd29ya2Fyb3VuZCBvbmUgY2FuIGNhbGN1bGF0ZSBmaWxlIHNpemUgbWFudWFsbHlcbi8vIGFuZCBhZGQgaXQgYXMga25vd25MZW5ndGggb3B0aW9uXG5Gb3JtRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoU3luYyA9IGZ1bmN0aW9uKCkge1xuICB2YXIga25vd25MZW5ndGggPSB0aGlzLl9vdmVyaGVhZExlbmd0aCArIHRoaXMuX3ZhbHVlTGVuZ3RoO1xuXG4gIC8vIERvbid0IGdldCBjb25mdXNlZCwgdGhlcmUgYXJlIDMgXCJpbnRlcm5hbFwiIHN0cmVhbXMgZm9yIGVhY2gga2V5dmFsIHBhaXJcbiAgLy8gc28gaXQgYmFzaWNhbGx5IGNoZWNrcyBpZiB0aGVyZSBpcyBhbnkgdmFsdWUgYWRkZWQgdG8gdGhlIGZvcm1cbiAgaWYgKHRoaXMuX3N0cmVhbXMubGVuZ3RoKSB7XG4gICAga25vd25MZW5ndGggKz0gdGhpcy5fbGFzdEJvdW5kYXJ5KCkubGVuZ3RoO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGEvaXNzdWVzLzQwXG4gIGlmICghdGhpcy5oYXNLbm93bkxlbmd0aCgpKSB7XG4gICAgLy8gU29tZSBhc3luYyBsZW5ndGggcmV0cmlldmVycyBhcmUgcHJlc2VudFxuICAgIC8vIHRoZXJlZm9yZSBzeW5jaHJvbm91cyBsZW5ndGggY2FsY3VsYXRpb24gaXMgZmFsc2UuXG4gICAgLy8gUGxlYXNlIHVzZSBnZXRMZW5ndGgoY2FsbGJhY2spIHRvIGdldCBwcm9wZXIgbGVuZ3RoXG4gICAgdGhpcy5fZXJyb3IobmV3IEVycm9yKCdDYW5ub3QgY2FsY3VsYXRlIHByb3BlciBsZW5ndGggaW4gc3luY2hyb25vdXMgd2F5LicpKTtcbiAgfVxuXG4gIHJldHVybiBrbm93bkxlbmd0aDtcbn07XG5cbi8vIFB1YmxpYyBBUEkgdG8gY2hlY2sgaWYgbGVuZ3RoIG9mIGFkZGVkIHZhbHVlcyBpcyBrbm93blxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGEvaXNzdWVzLzE5NlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGEvaXNzdWVzLzI2MlxuRm9ybURhdGEucHJvdG90eXBlLmhhc0tub3duTGVuZ3RoID0gZnVuY3Rpb24oKSB7XG4gIHZhciBoYXNLbm93bkxlbmd0aCA9IHRydWU7XG5cbiAgaWYgKHRoaXMuX3ZhbHVlc1RvTWVhc3VyZS5sZW5ndGgpIHtcbiAgICBoYXNLbm93bkxlbmd0aCA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGhhc0tub3duTGVuZ3RoO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uKGNiKSB7XG4gIHZhciBrbm93bkxlbmd0aCA9IHRoaXMuX292ZXJoZWFkTGVuZ3RoICsgdGhpcy5fdmFsdWVMZW5ndGg7XG5cbiAgaWYgKHRoaXMuX3N0cmVhbXMubGVuZ3RoKSB7XG4gICAga25vd25MZW5ndGggKz0gdGhpcy5fbGFzdEJvdW5kYXJ5KCkubGVuZ3RoO1xuICB9XG5cbiAgaWYgKCF0aGlzLl92YWx1ZXNUb01lYXN1cmUubGVuZ3RoKSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhjYi5iaW5kKHRoaXMsIG51bGwsIGtub3duTGVuZ3RoKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXN5bmNraXQucGFyYWxsZWwodGhpcy5fdmFsdWVzVG9NZWFzdXJlLCB0aGlzLl9sZW5ndGhSZXRyaWV2ZXIsIGZ1bmN0aW9uKGVyciwgdmFsdWVzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2IoZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgIGtub3duTGVuZ3RoICs9IGxlbmd0aDtcbiAgICB9KTtcblxuICAgIGNiKG51bGwsIGtub3duTGVuZ3RoKTtcbiAgfSk7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuc3VibWl0ID0gZnVuY3Rpb24ocGFyYW1zLCBjYikge1xuICB2YXIgcmVxdWVzdFxuICAgICwgb3B0aW9uc1xuICAgICwgZGVmYXVsdHMgPSB7bWV0aG9kOiAncG9zdCd9XG4gICAgO1xuXG4gIC8vIHBhcnNlIHByb3ZpZGVkIHVybCBpZiBpdCdzIHN0cmluZ1xuICAvLyBvciB0cmVhdCBpdCBhcyBvcHRpb25zIG9iamVjdFxuICBpZiAodHlwZW9mIHBhcmFtcyA9PSAnc3RyaW5nJykge1xuXG4gICAgcGFyYW1zID0gcGFyc2VVcmwocGFyYW1zKTtcbiAgICBvcHRpb25zID0gcG9wdWxhdGUoe1xuICAgICAgcG9ydDogcGFyYW1zLnBvcnQsXG4gICAgICBwYXRoOiBwYXJhbXMucGF0aG5hbWUsXG4gICAgICBob3N0OiBwYXJhbXMuaG9zdG5hbWUsXG4gICAgICBwcm90b2NvbDogcGFyYW1zLnByb3RvY29sXG4gICAgfSwgZGVmYXVsdHMpO1xuXG4gIC8vIHVzZSBjdXN0b20gcGFyYW1zXG4gIH0gZWxzZSB7XG5cbiAgICBvcHRpb25zID0gcG9wdWxhdGUocGFyYW1zLCBkZWZhdWx0cyk7XG4gICAgLy8gaWYgbm8gcG9ydCBwcm92aWRlZCB1c2UgZGVmYXVsdCBvbmVcbiAgICBpZiAoIW9wdGlvbnMucG9ydCkge1xuICAgICAgb3B0aW9ucy5wb3J0ID0gb3B0aW9ucy5wcm90b2NvbCA9PSAnaHR0cHM6JyA/IDQ0MyA6IDgwO1xuICAgIH1cbiAgfVxuXG4gIC8vIHB1dCB0aGF0IGdvb2QgY29kZSBpbiBnZXRIZWFkZXJzIHRvIHNvbWUgdXNlXG4gIG9wdGlvbnMuaGVhZGVycyA9IHRoaXMuZ2V0SGVhZGVycyhwYXJhbXMuaGVhZGVycyk7XG5cbiAgLy8gaHR0cHMgaWYgc3BlY2lmaWVkLCBmYWxsYmFjayB0byBodHRwIGluIGFueSBvdGhlciBjYXNlXG4gIGlmIChvcHRpb25zLnByb3RvY29sID09ICdodHRwczonKSB7XG4gICAgcmVxdWVzdCA9IGh0dHBzLnJlcXVlc3Qob3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmVxdWVzdCA9IGh0dHAucmVxdWVzdChvcHRpb25zKTtcbiAgfVxuXG4gIC8vIGdldCBjb250ZW50IGxlbmd0aCBhbmQgZmlyZSBhd2F5XG4gIHRoaXMuZ2V0TGVuZ3RoKGZ1bmN0aW9uKGVyciwgbGVuZ3RoKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBhZGQgY29udGVudCBsZW5ndGhcbiAgICByZXF1ZXN0LnNldEhlYWRlcignQ29udGVudC1MZW5ndGgnLCBsZW5ndGgpO1xuXG4gICAgdGhpcy5waXBlKHJlcXVlc3QpO1xuICAgIGlmIChjYikge1xuICAgICAgdmFyIG9uUmVzcG9uc2U7XG5cbiAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIChlcnJvciwgcmVzcG9uY2UpIHtcbiAgICAgICAgcmVxdWVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBjYWxsYmFjayk7XG4gICAgICAgIHJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoJ3Jlc3BvbnNlJywgb25SZXNwb25zZSk7XG5cbiAgICAgICAgcmV0dXJuIGNiLmNhbGwodGhpcywgZXJyb3IsIHJlc3BvbmNlKTtcbiAgICAgIH07XG5cbiAgICAgIG9uUmVzcG9uc2UgPSBjYWxsYmFjay5iaW5kKHRoaXMsIG51bGwpO1xuXG4gICAgICByZXF1ZXN0Lm9uKCdlcnJvcicsIGNhbGxiYWNrKTtcbiAgICAgIHJlcXVlc3Qub24oJ3Jlc3BvbnNlJywgb25SZXNwb25zZSk7XG4gICAgfVxuICB9LmJpbmQodGhpcykpO1xuXG4gIHJldHVybiByZXF1ZXN0O1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICBpZiAoIXRoaXMuZXJyb3IpIHtcbiAgICB0aGlzLmVycm9yID0gZXJyO1xuICAgIHRoaXMucGF1c2UoKTtcbiAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxufTtcblxuRm9ybURhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ1tvYmplY3QgRm9ybURhdGFdJztcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZm9ybV9kYXRhXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImZvcm0tZGF0YVwiKSk7XG5jb25zdCBBcHBFcnJvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9jb21tb24vZXJyb3JzL0FwcEVycm9yXCIpKTtcbmNvbnN0IHJlc291cmNlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL2NvbW1vbi9yZXNvdXJjZVwiKSk7XG5jbGFzcyBBcmNoaXZlIGV4dGVuZHMgcmVzb3VyY2VfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3Rvcih0b2tlbiwgdXJsKSB7XG4gICAgICAgIHN1cGVyKHRva2VuLCB1cmwpO1xuICAgICAgICB0aGlzLnVybCA9IGAke3RoaXMudXJsfS9hcmNoaXZlc2A7XG4gICAgfVxuICAgIHNlbmRGaWxlKGZpbGUsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm0gPSBuZXcgZm9ybV9kYXRhXzEuZGVmYXVsdCgpO1xuICAgICAgICAgICAgaWYgKGRhdGEub3JnKVxuICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kKCdvcmcnLCBkYXRhLm9yZyk7XG4gICAgICAgICAgICBpZiAoZGF0YS5vcmdVbml0KVxuICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kKCdvcmdVbml0JywgZGF0YS5vcmdVbml0KTtcbiAgICAgICAgICAgIGlmIChkYXRhLnNlc3Npb24pXG4gICAgICAgICAgICAgICAgZm9ybS5hcHBlbmQoJ3Nlc3Npb24nLCBkYXRhLnNlc3Npb24pO1xuICAgICAgICAgICAgaWYgKGRhdGEudHlwZSlcbiAgICAgICAgICAgICAgICBmb3JtLmFwcGVuZCgndHlwZScsIGRhdGEudHlwZSk7XG4gICAgICAgICAgICBmb3JtLmFwcGVuZCgnZmlsZW5hbWUnLCBmaWxlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QucG9zdChgJHt0aGlzLnVybH1gLCBmb3JtLCB7IGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oeyBBdXRob3JpemF0aW9uOiB0aGlzLnRva2VuID8gYEJlYXJlciAke3RoaXMudG9rZW59YCA6ICcnIH0sIGZvcm0uZ2V0SGVhZGVycygpKSB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZpbmQoZmlsZUlkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LmdldChgJHt0aGlzLnVybH0vJHtmaWxlSWR9YCwgeyBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IHRoaXMudG9rZW4gPyBgQmVhcmVyICR7dGhpcy50b2tlbn1gIDogJycgfSB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IGNvbnNvbGUubG9nKGVycik7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQXJjaGl2ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IEFic3RyYWN0ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuLi8uLi8uLi91dGlsL2h0dHAvcmVxdWVzdFwiKSk7XG5jb25zdCBBcHBFcnJvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9jb21tb24vZXJyb3JzL0FwcEVycm9yXCIpKTtcbmNsYXNzIEF1dGgge1xuICAgIGNvbnN0cnVjdG9yKHVybCkge1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0ID0gbmV3IEFic3RyYWN0LlJlcXVlc3QoKTtcbiAgICB9XG4gICAgbG9naW4oZGF0YSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5wb3N0KGAke3RoaXMudXJsfS9hdXRoYCwgZGF0YSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuZGF0YSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4geyBjb25zb2xlLmxvZyhlcnIpOyB0aHJvdyBuZXcgQXBwRXJyb3JfMS5kZWZhdWx0KGVyci5yZXNwb25zZS5kYXRhLCBlcnIucmVzcG9uc2Uuc3RhdHVzKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWZyZXNoKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QucG9zdChgJHt0aGlzLnVybH0vYXV0aC9yZWZyZXNoYCwgZGF0YSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuZGF0YSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4geyB0aHJvdyBuZXcgQXBwRXJyb3JfMS5kZWZhdWx0KGVyci5yZXNwb25zZS5kYXRhLCBlcnIucmVzcG9uc2Uuc3RhdHVzKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEF1dGg7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgQXBwRXJyb3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vY29tbW9uL2Vycm9ycy9BcHBFcnJvclwiKSk7XG5jb25zdCByZXNvdXJjZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9jb21tb24vcmVzb3VyY2VcIikpO1xuY2xhc3MgVXNlciBleHRlbmRzIHJlc291cmNlXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IodG9rZW4sIHVybCkge1xuICAgICAgICBzdXBlcih0b2tlbiwgdXJsKTtcbiAgICAgICAgdGhpcy51cmwgPSBgJHt0aGlzLnVybH0vdXNlcnNgO1xuICAgIH1cbiAgICBjcmVhdGUoZGF0YSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5wb3N0KGAke3RoaXMudXJsfWAsIGRhdGEsIHsgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiB0aGlzLnRva2VuID8gYEJlYXJlciAke3RoaXMudG9rZW59YCA6ICcnIH0gfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuZGF0YSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4geyB0aHJvdyBuZXcgQXBwRXJyb3JfMS5kZWZhdWx0KGVyci5yZXNwb25zZS5kYXRhLCBlcnIucmVzcG9uc2Uuc3RhdHVzKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmaW5kKHVzZXJJZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5nZXQoYCR7dGhpcy51cmx9LyR7dXNlcklkfWAsIHsgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiB0aGlzLnRva2VuID8gYEJlYXJlciAke3RoaXMudG9rZW59YCA6ICcnIH0gfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuZGF0YSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4geyBjb25zb2xlLmxvZyhlcnIpOyB0aHJvdyBuZXcgQXBwRXJyb3JfMS5kZWZhdWx0KGVyci5yZXNwb25zZS5kYXRhLCBlcnIucmVzcG9uc2Uuc3RhdHVzKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsaXN0KCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5nZXQoYCR7dGhpcy51cmx9YCwgeyBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IHRoaXMudG9rZW4gPyBgQmVhcmVyICR7dGhpcy50b2tlbn1gIDogJycgfSB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZSh1c2VySWQsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QucHV0KGAke3RoaXMudXJsfS8ke3VzZXJJZH1gLCBkYXRhLCB7IGhlYWRlcnM6IHsgQXV0aG9yaXphdGlvbjogdGhpcy50b2tlbiA/IGBCZWFyZXIgJHt0aGlzLnRva2VufWAgOiAnJyB9IH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLnN0YXR1cyA9PT0gMjA0KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRlbGV0ZSh1c2VySWQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QuZGVsZXRlKGAke3RoaXMudXJsfS8ke3VzZXJJZH1gLCB7IGhlYWRlcnM6IHsgQXV0aG9yaXphdGlvbjogdGhpcy50b2tlbiA/IGBCZWFyZXIgJHt0aGlzLnRva2VufWAgOiAnJyB9IH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLnN0YXR1cyA9PT0gMjA0KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gVXNlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBBcHBFcnJvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9jb21tb24vZXJyb3JzL0FwcEVycm9yXCIpKTtcbmNvbnN0IHJlc291cmNlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL2NvbW1vbi9yZXNvdXJjZVwiKSk7XG5jbGFzcyBQbGFuIGV4dGVuZHMgcmVzb3VyY2VfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3Rvcih0b2tlbiwgdXJsKSB7XG4gICAgICAgIHN1cGVyKHRva2VuLCB1cmwpO1xuICAgICAgICB0aGlzLnVybCA9IGAke3RoaXMudXJsfS9wcmVzY3JpcHRpb25zYDtcbiAgICB9XG4gICAgY3JlYXRlKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QucG9zdChgJHt0aGlzLnVybH1gLCBkYXRhLCB7IGhlYWRlcnM6IHsgQXV0aG9yaXphdGlvbjogdGhpcy50b2tlbiA/IGBCZWFyZXIgJHt0aGlzLnRva2VufWAgOiAnJyB9IH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmRhdGEpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsgdGhyb3cgbmV3IEFwcEVycm9yXzEuZGVmYXVsdChlcnIucmVzcG9uc2UuZGF0YSwgZXJyLnJlc3BvbnNlLnN0YXR1cyk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZmluZChwcmVzY3JpcHRpb25JZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5nZXQoYCR7dGhpcy51cmx9LyR7cHJlc2NyaXB0aW9uSWR9YCwgeyBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IHRoaXMudG9rZW4gPyBgQmVhcmVyICR7dGhpcy50b2tlbn1gIDogJycgfSB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxpc3QoZGF0YSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5nZXQoYCR7dGhpcy51cmx9YCwgeyBwYXJhbXM6IGRhdGEsIGhlYWRlcnM6IHsgQXV0aG9yaXphdGlvbjogdGhpcy50b2tlbiA/IGBCZWFyZXIgJHt0aGlzLnRva2VufWAgOiAnJyB9IH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmRhdGEpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsgdGhyb3cgbmV3IEFwcEVycm9yXzEuZGVmYXVsdChlcnIucmVzcG9uc2UuZGF0YSwgZXJyLnJlc3BvbnNlLnN0YXR1cyk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgdXBkYXRlKHByZXNjcmlwdGlvbklkLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LnBhdGNoKGAke3RoaXMudXJsfS8ke3ByZXNjcmlwdGlvbklkfWAsIGRhdGEsIHsgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiB0aGlzLnRva2VuID8gYEJlYXJlciAke3RoaXMudG9rZW59YCA6ICcnIH0gfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuc3RhdHVzID09PSAyMDQpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsgdGhyb3cgbmV3IEFwcEVycm9yXzEuZGVmYXVsdChlcnIucmVzcG9uc2UuZGF0YSwgZXJyLnJlc3BvbnNlLnN0YXR1cyk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGVsZXRlKHByZXNjcmlwdGlvbklkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LmRlbGV0ZShgJHt0aGlzLnVybH0vJHtwcmVzY3JpcHRpb25JZH1gLCB7IGhlYWRlcnM6IHsgQXV0aG9yaXphdGlvbjogdGhpcy50b2tlbiA/IGBCZWFyZXIgJHt0aGlzLnRva2VufWAgOiAnJyB9IH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLnN0YXR1cyA9PT0gMjA0KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IHRocm93IG5ldyBBcHBFcnJvcl8xLmRlZmF1bHQoZXJyLnJlc3BvbnNlLmRhdGEsIGVyci5yZXNwb25zZS5zdGF0dXMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNpZ24ocHJlc2NyaXB0aW9uSWQsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QucG9zdChgJHt0aGlzLnVybH0vJHtwcmVzY3JpcHRpb25JZH1gLCBkYXRhLCB7IGhlYWRlcnM6IHsgQXV0aG9yaXphdGlvbjogdGhpcy50b2tlbiA/IGBCZWFyZXIgJHt0aGlzLnRva2VufWAgOiAnJyB9IH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmRhdGEpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsgdGhyb3cgbmV3IEFwcEVycm9yXzEuZGVmYXVsdChlcnIucmVzcG9uc2UuZGF0YSwgZXJyLnJlc3BvbnNlLnN0YXR1cyk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQbGFuO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IFNlc3Npb25BY3Rpb25zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcmVzb3VyY2VzL3Nlc3Npb24vYWN0aW9ucy9TZXNzaW9uQWN0aW9uc1wiKSk7XG5jb25zdCBPcmdBY3Rpb25zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcmVzb3VyY2VzL29yZy9hY3Rpb25zL09yZ0FjdGlvbnNcIikpO1xuY29uc3QgT3JnVW5pdEFjdGlvbnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZXNvdXJjZXMvb3JnVW5pdC9hY3Rpb25zL09yZ1VuaXRBY3Rpb25zXCIpKTtcbmNvbnN0IEFyY2hpdmVBY3Rpb25zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcmVzb3VyY2VzL2FyY2hpdmUvYWN0aW9ucy9BcmNoaXZlQWN0aW9uc1wiKSk7XG5jb25zdCBBdXRoUmVzb3VyY2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZXNvdXJjZXMvQXV0aC9yZXNvdXJjZXMvQXV0aFJlc291cmNlXCIpKTtcbmNvbnN0IFVzZXJBY3Rpb25zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcmVzb3VyY2VzL3VzZXIvYWN0aW9ucy9Vc2VyQWN0aW9uc1wiKSk7XG5jb25zdCBQcmVzY3JpcHRpb25BY3Rpb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZXNvdXJjZXMvcHJlc2NyaXB0aW9uL2FjdGlvbnMvUHJlc2NyaXB0aW9uQWN0aW9uXCIpKTtcbmNvbnN0IGRlZmF1bHRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb25maWcvZGVmYXVsdFwiKSk7XG5jbGFzcyBTZXNzaW9uTWFuYWdlciB7XG4gICAgc2V0dXAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50b2tlbilcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuID0gb3B0aW9ucy50b2tlbjtcbiAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubG9naW4gJiYgb3B0aW9ucy5wYXNzd29yZClcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmxvZ2luKG9wdGlvbnMubG9naW4sIG9wdGlvbnMucGFzc3dvcmQpO1xuICAgICAgICAgICAgdGhpcy5iYXNlVXJsID0gb3B0aW9ucyAmJiBvcHRpb25zLmJhc2VVcmwgPyBvcHRpb25zLmJhc2VVcmwgOiBkZWZhdWx0XzEuZGVmYXVsdC5BcHAuYmFzZVVybDtcbiAgICAgICAgICAgIHRoaXMub3JnID0gbmV3IE9yZ0FjdGlvbnNfMS5kZWZhdWx0KHRoaXMudG9rZW4sIHRoaXMuYmFzZVVybCk7XG4gICAgICAgICAgICB0aGlzLm9yZ1VuaXQgPSBuZXcgT3JnVW5pdEFjdGlvbnNfMS5kZWZhdWx0KHRoaXMudG9rZW4sIHRoaXMuYmFzZVVybCk7XG4gICAgICAgICAgICB0aGlzLnNlc3Npb24gPSBuZXcgU2Vzc2lvbkFjdGlvbnNfMS5kZWZhdWx0KHRoaXMudG9rZW4sIHRoaXMuYmFzZVVybCwgb3B0aW9ucy5kb21haW4pO1xuICAgICAgICAgICAgdGhpcy5hcmNoaXZlID0gbmV3IEFyY2hpdmVBY3Rpb25zXzEuZGVmYXVsdCh0aGlzLnRva2VuLCB0aGlzLmJhc2VVcmwpO1xuICAgICAgICAgICAgdGhpcy51c2VyID0gbmV3IFVzZXJBY3Rpb25zXzEuZGVmYXVsdCh0aGlzLnRva2VuLCB0aGlzLmJhc2VVcmwpO1xuICAgICAgICAgICAgdGhpcy5wcmVzY3JpcHRpb24gPSBuZXcgUHJlc2NyaXB0aW9uQWN0aW9uXzEuZGVmYXVsdCh0aGlzLnRva2VuLCB0aGlzLmJhc2VVcmwpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbG9naW4obG9naW4sIHBhc3N3b3JkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBhdXRoID0gbmV3IEF1dGhSZXNvdXJjZV8xLmRlZmF1bHQodGhpcy5iYXNlVXJsKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgYXV0aC5sb2dpbih7IGxvZ2luLCBwYXNzd29yZCB9KTtcbiAgICAgICAgICAgIHRoaXMudG9rZW4gPSByZXNwb25zZS5hY2Nlc3NUb2tlbjtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2Vzc2lvbk1hbmFnZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IEFwcF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0FwcFwiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBBcHBfMS5kZWZhdWx0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXBwRXJyb3IiLCJFcnJvciIsIltvYmplY3QgT2JqZWN0XSIsIm1lc3NhZ2UiLCJjb2RlIiwiaW50ZXJuYWwiLCJzdXBlciIsInRoaXMiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImNvbnN0cnVjdG9yIiwiZm4iLCJ0aGlzQXJnIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiaSIsImFwcGx5IiwidG9TdHJpbmciLCJwcm90b3R5cGUiLCJpc0FycmF5IiwidmFsIiwiY2FsbCIsImlzVW5kZWZpbmVkIiwiaXNPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJpc0Z1bmN0aW9uIiwiZm9yRWFjaCIsIm9iaiIsImwiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJlIiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0Iiwid2luZG93IiwiZG9jdW1lbnQiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwic2xpY2UiLCJleHRlbmQiLCJhIiwiYiIsImJpbmQiLCJ0cmltIiwic3RyIiwicmVwbGFjZSIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJDb2RlQXQiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInV0aWxzIiwicGFydHMiLCJ2IiwidG9JU09TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwicHVzaCIsImpvaW4iLCJoYXNobWFya0luZGV4IiwiaW5kZXhPZiIsIkludGVyY2VwdG9yTWFuYWdlciIsImhhbmRsZXJzIiwidXNlIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJlamVjdCIsImlkIiwiaCIsImRhdGEiLCJoZWFkZXJzIiwiZm5zIiwiX19DQU5DRUxfXyIsImdsb2JhbCIsInNlbGYiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiY29uY2F0IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJuZXh0VGljayIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInBlcmZvcm1hbmNlIiwicGVyZm9ybWFuY2VOb3ciLCJub3ciLCJtb3pOb3ciLCJtc05vdyIsIm9Ob3ciLCJ3ZWJraXROb3ciLCJEYXRlIiwiZ2V0VGltZSIsInN0YXJ0VGltZSIsImJyb3dzZXIkMSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJiaW5kaW5nIiwibmFtZSIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJocnRpbWUiLCJwcmV2aW91c1RpbWVzdGFtcCIsImNsb2NrdGltZSIsInNlY29uZHMiLCJNYXRoIiwiZmxvb3IiLCJuYW5vc2Vjb25kcyIsInBsYXRmb3JtIiwicmVsZWFzZSIsImNvbmZpZyIsInVwdGltZSIsIm5vcm1hbGl6ZWROYW1lIiwidG9VcHBlckNhc2UiLCJlcnJvciIsInJlcXVlc3QiLCJyZXNwb25zZSIsImlzQXhpb3NFcnJvciIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJlbmhhbmNlRXJyb3IiLCJyZXNvbHZlIiwicmVqZWN0IiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJjcmVhdGVFcnJvciIsIndyaXRlIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsInJlYWQiLCJtYXRjaCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsImJhc2VVUkwiLCJyZXF1ZXN0ZWRVUkwiLCJ0ZXN0IiwicmVsYXRpdmVVUkwiLCJpZ25vcmVEdXBsaWNhdGVPZiIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsInBhcnNlZCIsImxvb2t1cCIsInJldkxvb2t1cCIsIkFyciIsIlVpbnQ4QXJyYXkiLCJpbml0ZWQiLCJpbml0IiwiZW5jb2RlQ2h1bmsiLCJ1aW50OCIsInN0YXJ0IiwiZW5kIiwidG1wIiwibnVtIiwib3V0cHV0IiwiZnJvbUJ5dGVBcnJheSIsImV4dHJhQnl0ZXMiLCJtYXhDaHVua0xlbmd0aCIsImxlbjIiLCJvZmZzZXQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsIm0iLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJkIiwicyIsIk5hTiIsIkluZmluaXR5IiwicG93IiwiYyIsInJ0IiwiYWJzIiwiaXNOYU4iLCJsb2ciLCJMTjIiLCJhcnIiLCJrTWF4TGVuZ3RoIiwiQnVmZmVyIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiX19wcm90b19fIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiZnJvbSIsIlR5cGVFcnJvciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiZnJvbUFycmF5TGlrZSIsInN0cmluZyIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsImludGVybmFsSXNCdWZmZXIiLCJjaGVja2VkIiwiY29weSIsInR5cGUiLCJhc3NlcnRTaXplIiwic2l6ZSIsIl9pc0J1ZmZlciIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwidG9Mb3dlckNhc2UiLCJzbG93VG9TdHJpbmciLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsIm4iLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwiYnVmIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaiIsImhleFdyaXRlIiwiTnVtYmVyIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImJ5dGVBcnJheSIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJtaW4iLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZnJvbUNoYXJDb2RlIiwicG9vbFNpemUiLCJfYXVnbWVudCIsImFsbG9jIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsImNvbXBhcmUiLCJ4IiwieSIsImxpc3QiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJlcXVhbHMiLCJpbnNwZWN0IiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJfYXJyIiwicmV0Iiwib3V0IiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJtYXgiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzdWJhcnJheSIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0Iiwic2V0IiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJsZWFkU3Vycm9nYXRlIiwiYjY0IiwicGxhY2VIb2xkZXJzIiwiTCIsInNyYyIsImRzdCIsImlzRmFzdEJ1ZmZlciIsIl9ibG9iQ29uc3RydWN0b3IiLCJ4aHIiLCJoYXNGZXRjaCIsImZldGNoIiwiUmVhZGFibGVTdHJlYW0iLCJjaGVja1R5cGVTdXBwb3J0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwiaGF2ZUFycmF5QnVmZmVyIiwiaGF2ZVNsaWNlIiwiYXJyYXlidWZmZXIiLCJtc3N0cmVhbSIsIm1vemNodW5rZWRhcnJheWJ1ZmZlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJ2YkFycmF5IiwiVkJBcnJheSIsImNyZWF0ZSIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJUZW1wQ3RvciIsImZvcm1hdFJlZ0V4cCIsImZvcm1hdCIsImYiLCJvYmplY3RzIiwiXyIsImlzTnVsbCIsImRlcHJlY2F0ZSIsIm1zZyIsInByb2Nlc3MiLCJub0RlcHJlY2F0aW9uIiwid2FybmVkIiwidGhyb3dEZXByZWNhdGlvbiIsInRyYWNlRGVwcmVjYXRpb24iLCJjb25zb2xlIiwidHJhY2UiLCJkZWJ1Z0Vudmlyb24iLCJkZWJ1Z3MiLCJkZWJ1Z2xvZyIsIk5PREVfREVCVUciLCJvcHRzIiwiY3R4Iiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImRlcHRoIiwiY29sb3JzIiwiaXNCb29sZWFuIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVUeXBlIiwic3R5bGUiLCJzdHlsZXMiLCJyZWN1cnNlVGltZXMiLCJwcmltaXRpdmUiLCJzaW1wbGUiLCJrZXlzIiwidmlzaWJsZUtleXMiLCJpZHgiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaXNFcnJvciIsImZvcm1hdEVycm9yIiwiaXNSZWdFeHAiLCJiYXNlIiwiYnJhY2VzIiwidG9VVENTdHJpbmciLCJmb3JtYXRQcm9wZXJ0eSIsIm1hcCIsInBvcCIsInJlZHVjZSIsInByZXYiLCJjdXIiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0Iiwic3BsaXQiLCJsaW5lIiwiYXIiLCJpc051bGxPclVuZGVmaW5lZCIsInJlIiwib2JqZWN0VG9TdHJpbmciLCJpc1ByaW1pdGl2ZSIsIm8iLCJwYWQiLCJib2xkIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaW52ZXJzZSIsIndoaXRlIiwiZ3JleSIsImJsYWNrIiwiYmx1ZSIsImN5YW4iLCJncmVlbiIsIm1hZ2VudGEiLCJyZWQiLCJ5ZWxsb3ciLCJzcGVjaWFsIiwiYm9vbGVhbiIsInVuZGVmaW5lZCIsIm51bGwiLCJkYXRlIiwicmVnZXhwIiwibW9udGhzIiwidGltZXN0YW1wIiwidGltZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJvcmlnaW4iLCJhZGQiLCJwcm9wIiwiaW5oZXJpdHMiLCJtYXliZUJ1ZiIsImlzU3ltYm9sIiwiRXZlbnRIYW5kbGVycyIsIkV2ZW50RW1pdHRlciIsIiRnZXRNYXhMaXN0ZW5lcnMiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImVtaXROb25lIiwiaGFuZGxlciIsImlzRm4iLCJsaXN0ZW5lcnMiLCJhcnJheUNsb25lIiwiZW1pdE9uZSIsImFyZzEiLCJlbWl0VHdvIiwiYXJnMiIsImVtaXRUaHJlZSIsImFyZzMiLCJlbWl0TWFueSIsIl9hZGRMaXN0ZW5lciIsImxpc3RlbmVyIiwicHJlcGVuZCIsImV2ZW50cyIsImV4aXN0aW5nIiwiX2V2ZW50cyIsIm5ld0xpc3RlbmVyIiwiX2V2ZW50c0NvdW50IiwidW5zaGlmdCIsInciLCJlbWl0dGVyIiwiY291bnQiLCJ3YXJuIiwiX29uY2VXcmFwIiwiZmlyZWQiLCJnIiwibGlzdGVuZXJDb3VudCIsImV2bGlzdGVuZXIiLCJCdWZmZXJMaXN0IiwiaGVhZCIsInRhaWwiLCJ1c2luZ0RvbWFpbnMiLCJhY3RpdmUiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJlciIsImRvRXJyb3IiLCJlcnIiLCJjb250ZXh0IiwiZG9tYWluRW1pdHRlciIsImRvbWFpblRocm93biIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJpbmRleCIsImsiLCJldmVudE5hbWVzIiwiUmVmbGVjdCIsIm93bktleXMiLCJlbnRyeSIsIm5leHQiLCJzaGlmdCIsImNsZWFyIiwicCIsImlzQnVmZmVyRW5jb2RpbmciLCJTdHJpbmdEZWNvZGVyIiwic3Vycm9nYXRlU2l6ZSIsImRldGVjdEluY29tcGxldGVDaGFyIiwidXRmMTZEZXRlY3RJbmNvbXBsZXRlQ2hhciIsImJhc2U2NERldGVjdEluY29tcGxldGVDaGFyIiwicGFzc1Rocm91Z2hXcml0ZSIsImNoYXJCdWZmZXIiLCJjaGFyUmVjZWl2ZWQiLCJjaGFyTGVuZ3RoIiwiY2hhclN0ciIsImF2YWlsYWJsZSIsImNoYXJDb2RlIiwic3Vic3RyaW5nIiwiY3IiLCJlbmMiLCJSZWFkYWJsZSIsIlJlYWRhYmxlU3RhdGUiLCJkZWJ1ZyIsIm9wdGlvbnMiLCJzdHJlYW0iLCJvYmplY3RNb2RlIiwiRHVwbGV4IiwicmVhZGFibGVPYmplY3RNb2RlIiwiaHdtIiwiaGlnaFdhdGVyTWFyayIsImRlZmF1bHRId20iLCJwaXBlcyIsInBpcGVzQ291bnQiLCJmbG93aW5nIiwiZW5kZWQiLCJlbmRFbWl0dGVkIiwicmVhZGluZyIsInN5bmMiLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsInJlc3VtZVNjaGVkdWxlZCIsImRlZmF1bHRFbmNvZGluZyIsInJhbk91dCIsImF3YWl0RHJhaW4iLCJyZWFkaW5nTW9yZSIsImRlY29kZXIiLCJfcmVhZGFibGVTdGF0ZSIsInJlYWRhYmxlIiwiX3JlYWQiLCJyZWFkYWJsZUFkZENodW5rIiwic3RhdGUiLCJjaHVuayIsImFkZFRvRnJvbnQiLCJlbWl0UmVhZGFibGUiLCJfZSIsInNraXBBZGQiLCJtYXliZVJlYWRNb3JlXyIsImlzUGF1c2VkIiwic2V0RW5jb2RpbmciLCJNQVhfSFdNIiwiaG93TXVjaFRvUmVhZCIsImVtaXRSZWFkYWJsZV8iLCJmbG93IiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJmcm9tTGlzdCIsImhhc1N0cmluZ3MiLCJuYiIsImVuZFJlYWRhYmxlIiwiZW5kUmVhZGFibGVOVCIsInhzIiwibm9wIiwiV3JpdGVSZXEiLCJjYiIsImNhbGxiYWNrIiwiV3JpdGFibGVTdGF0ZSIsImdldEJ1ZmZlciIsIndyaXRhYmxlT2JqZWN0TW9kZSIsIm5lZWREcmFpbiIsImVuZGluZyIsImZpbmlzaGVkIiwibm9EZWNvZGUiLCJkZWNvZGVTdHJpbmdzIiwid3JpdGluZyIsImNvcmtlZCIsImJ1ZmZlclByb2Nlc3NpbmciLCJvbndyaXRlIiwiX3dyaXRhYmxlU3RhdGUiLCJ3cml0ZWNiIiwid3JpdGVsZW4iLCJwZW5kaW5nY2IiLCJlcnJvckVtaXR0ZWQiLCJuZWVkRmluaXNoIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY2xlYXJCdWZmZXIiLCJhZnRlcldyaXRlIiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsInByZWZpbmlzaGVkIiwiYnVmZmVyZWRSZXF1ZXN0Q291bnQiLCJjb3JrZWRSZXF1ZXN0c0ZyZWUiLCJDb3JrZWRSZXF1ZXN0IiwiV3JpdGFibGUiLCJfd3JpdGUiLCJ3cml0ZXYiLCJfd3JpdGV2IiwiZG9Xcml0ZSIsImZpbmlzaE1heWJlIiwiaG9sZGVyIiwiZmluaXNoIiwicHJlZmluaXNoIiwibmVlZCIsIl90aGlzIiwibk9yaWciLCJkb1JlYWQiLCJkZXN0IiwicGlwZU9wdHMiLCJlbmRGbiIsImNsZWFudXAiLCJvbmVuZCIsIm9udW5waXBlIiwib25kcmFpbiIsImNsZWFuZWRVcCIsIm9uY2xvc2UiLCJvbmZpbmlzaCIsIm9uZXJyb3IiLCJvbmRhdGEiLCJpbmNyZWFzZWRBd2FpdERyYWluIiwicGF1c2UiLCJ1bnBpcGUiLCJldmVudCIsInJlc3VtZSIsImRlc3RzIiwiX2kiLCJzcGxpY2UiLCJldiIsIndyYXAiLCJwYXVzZWQiLCJtZXRob2QiLCJfZnJvbUxpc3QiLCJjdXJyZW50IiwidmFsaWQiLCJsYXN0IiwiY29yayIsInVuY29yayIsInNldERlZmF1bHRFbmNvZGluZyIsImFsbG93SGFsZk9wZW4iLCJvbkVuZE5UIiwiVHJhbnNmb3JtU3RhdGUiLCJhZnRlclRyYW5zZm9ybSIsInRzIiwiX3RyYW5zZm9ybVN0YXRlIiwidHJhbnNmb3JtaW5nIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJfdHJhbnNmb3JtIiwiZmx1c2giLCJfZmx1c2giLCJkb25lIiwid3MiLCJQYXNzVGhyb3VnaCIsIlN0cmVhbSIsIkVFIiwic291cmNlIiwiX2lzU3RkaW8iLCJkaWRPbkVuZCIsImRlc3Ryb3kiLCJJbmNvbWluZ01lc3NhZ2UiLCJtb2RlIiwiX21vZGUiLCJyYXdIZWFkZXJzIiwidHJhaWxlcnMiLCJyYXdUcmFpbGVycyIsIl9mZXRjaFJlc3BvbnNlIiwic3RhdHVzQ29kZSIsInN0YXR1c01lc3NhZ2UiLCJzdGF0dXNUZXh0IiwiaGVhZGVyIiwiX2l0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJyZWFkZXIiLCJib2R5IiwiZ2V0UmVhZGVyIiwidGhlbiIsIl9kZXN0cm95ZWQiLCJfeGhyIiwiX3BvcyIsInJlc3BvbnNlVVJMIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibWF0Y2hlcyIsIl9jaGFyc2V0IiwibWltZVR5cGUiLCJjaGFyc2V0TWF0Y2giLCJDbGllbnRSZXF1ZXN0IiwicHJlZmVyQmluYXJ5IiwiX29wdHMiLCJfYm9keSIsIl9oZWFkZXJzIiwiYXV0aCIsInNldEhlYWRlciIsInVzZUZldGNoIiwiY2FwYWJpbGl0eS5vdmVycmlkZU1pbWVUeXBlIiwiY2FwYWJpbGl0eS5oYXNGZXRjaCIsImNhcGFiaWxpdHkubW96Y2h1bmtlZGFycmF5YnVmZmVyIiwiY2FwYWJpbGl0eS5tc3N0cmVhbSIsImNhcGFiaWxpdHkuYXJyYXlidWZmZXIiLCJjYXBhYmlsaXR5LnZiQXJyYXkiLCJfb25GaW5pc2giLCJfb25YSFJQcm9ncmVzcyIsInJlYWR5U3RhdGUiLCJyZXNwb25zZUJvZHkiLCJ0b0FycmF5IiwicmVzcG9uc2VUZXh0IiwibmV3RGF0YSIsIk1TU3RyZWFtUmVhZGVyIiwib25wcm9ncmVzcyIsIm9ubG9hZCIsInJlYWRBc0FycmF5QnVmZmVyIiwidW5zYWZlSGVhZGVycyIsImxvd2VyTmFtZSIsImdldEhlYWRlciIsInJlbW92ZUhlYWRlciIsImhlYWRlcnNPYmoiLCJCbG9iIiwiYXJyYXlDb3B5IiwiY3JlZGVudGlhbHMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJfY29ubmVjdCIsInJlYXNvbiIsInNldFJlcXVlc3RIZWFkZXIiLCJfcmVzcG9uc2UiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJzZW5kIiwiYWJvcnQiLCJmbHVzaEhlYWRlcnMiLCJzZXROb0RlbGF5Iiwic2V0U29ja2V0S2VlcEFsaXZlIiwibWF4SW50IiwicmVnZXhOb25BU0NJSSIsInJlZ2V4U2VwYXJhdG9ycyIsImVycm9ycyIsIm92ZXJmbG93Iiwibm90LWJhc2ljIiwiaW52YWxpZC1pbnB1dCIsInN0cmluZ0Zyb21DaGFyQ29kZSIsImRpZ2l0VG9CYXNpYyIsImRpZ2l0IiwiZmxhZyIsImFkYXB0IiwiZGVsdGEiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJiYXNlTWludXNUTWluIiwidG9BU0NJSSIsImlucHV0IiwiZW5jb2RlZCIsImhhbmRsZWRDUENvdW50IiwiYmFzaWNMZW5ndGgiLCJiaWFzIiwicSIsInQiLCJjdXJyZW50VmFsdWUiLCJpbnB1dExlbmd0aCIsImhhbmRsZWRDUENvdW50UGx1c09uZSIsImJhc2VNaW51c1QiLCJxTWludXNUIiwiZXh0cmEiLCJjb3VudGVyIiwic3RyaW5naWZ5UHJpbWl0aXZlIiwib2JqZWN0S2V5cyIsInBhcnNlIiwicXMiLCJzZXAiLCJlcSIsIm1heEtleXMiLCJrc3RyIiwidnN0ciIsInVybFBhcnNlIiwicmVsYXRpdmUiLCJyZXNvbHZlT2JqZWN0IiwiVXJsIiwic2xhc2hlcyIsInF1ZXJ5IiwicHJvdG9jb2xQYXR0ZXJuIiwicG9ydFBhdHRlcm4iLCJzaW1wbGVQYXRoUGF0dGVybiIsInVud2lzZSIsImF1dG9Fc2NhcGUiLCJub25Ib3N0Q2hhcnMiLCJob3N0RW5kaW5nQ2hhcnMiLCJob3N0bmFtZVBhcnRQYXR0ZXJuIiwiaG9zdG5hbWVQYXJ0U3RhcnQiLCJ1bnNhZmVQcm90b2NvbCIsImphdmFzY3JpcHQiLCJqYXZhc2NyaXB0OiIsImhvc3RsZXNzUHJvdG9jb2wiLCJzbGFzaGVkUHJvdG9jb2wiLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJnb3BoZXIiLCJmaWxlIiwiaHR0cDoiLCJodHRwczoiLCJmdHA6IiwiZ29waGVyOiIsImZpbGU6IiwicGFyc2VRdWVyeVN0cmluZyIsInNsYXNoZXNEZW5vdGVIb3N0IiwidSIsInF1ZXJ5SW5kZXgiLCJzcGxpdHRlciIsInVTcGxpdCIsInJlc3QiLCJzaW1wbGVQYXRoIiwiZXhlYyIsInFzUGFyc2UiLCJoZWMiLCJwcm90byIsImxvd2VyUHJvdG8iLCJhdFNpZ24iLCJob3N0RW5kIiwicGFyc2VIb3N0IiwiaXB2Nkhvc3RuYW1lIiwiaG9zdHBhcnRzIiwicGFydCIsIm5ld3BhcnQiLCJ2YWxpZFBhcnRzIiwibm90SG9zdCIsImJpdCIsImFlIiwiZXNjIiwiZXNjYXBlIiwicW0iLCJrcyIsImRlZmF1bHRQcm90b2NvbCIsInJlcSIsIkFnZW50IiwicmVsIiwicmVsUGF0aCIsInRrZXlzIiwidGsiLCJ0a2V5IiwicmtleXMiLCJyayIsInJrZXkiLCJhdXRoSW5Ib3N0IiwiaXNTb3VyY2VBYnMiLCJpc1JlbEFicyIsIm11c3RFbmRBYnMiLCJyZW1vdmVBbGxEb3RzIiwic3JjUGF0aCIsInBzeWNob3RpYyIsImhhc1RyYWlsaW5nU2xhc2giLCJ1cCIsImlzQWJzb2x1dGUiLCJkZWZhdWx0TWF4U29ja2V0cyIsIk1FVEhPRFMiLCJTVEFUVVNfQ09ERVMiLCIxMDAiLCIxMDEiLCIxMDIiLCIyMDAiLCIyMDEiLCIyMDIiLCIyMDMiLCIyMDQiLCIyMDUiLCIyMDYiLCIyMDciLCIzMDAiLCIzMDEiLCIzMDIiLCIzMDMiLCIzMDQiLCIzMDUiLCIzMDciLCI0MDAiLCI0MDEiLCI0MDIiLCI0MDMiLCI0MDQiLCI0MDUiLCI0MDYiLCI0MDciLCI0MDgiLCI0MDkiLCI0MTAiLCI0MTEiLCI0MTIiLCI0MTMiLCI0MTQiLCI0MTUiLCI0MTYiLCI0MTciLCI0MTgiLCI0MjIiLCI0MjMiLCI0MjQiLCI0MjUiLCI0MjYiLCI0MjgiLCI0MjkiLCI0MzEiLCI1MDAiLCI1MDEiLCI1MDIiLCI1MDMiLCI1MDQiLCI1MDUiLCI1MDYiLCI1MDciLCI1MDkiLCI1MTAiLCI1MTEiLCJfZnVuY3Rpb25zSGF2ZU5hbWVzIiwiaGFzT3duIiwicFNsaWNlIiwiZnVuY3Rpb25zSGF2ZU5hbWVzIiwicFRvU3RyaW5nIiwiYXJyYnVmIiwiRGF0YVZpZXciLCJhc3NlcnQiLCJmYWlsIiwib2siLCJyZWdleCIsImdldE5hbWUiLCJmdW5jIiwiQXNzZXJ0aW9uRXJyb3IiLCJleHBlY3RlZCIsIm9wZXJhdG9yIiwiZ2VuZXJhdGVkTWVzc2FnZSIsInRydW5jYXRlIiwic3RhY2tTdGFydEZ1bmN0aW9uIiwiZm5fbmFtZSIsIm5leHRfbGluZSIsInNvbWV0aGluZyIsInV0aWxJbnNwZWN0IiwicmF3bmFtZSIsIl9kZWVwRXF1YWwiLCJzdHJpY3QiLCJtZW1vcyIsIm11bHRpbGluZSIsImxhc3RJbmRleCIsImlnbm9yZUNhc2UiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJhY3R1YWxJbmRleCIsImFjdHVhbFZpc2l0ZWRPYmplY3RzIiwiYUlzQXJncyIsImlzQXJndW1lbnRzIiwiYklzQXJncyIsImthIiwia2IiLCJzb3J0Iiwib2JqZWN0IiwiZXhwZWN0ZWRFeGNlcHRpb24iLCJpc1Byb3RvdHlwZU9mIiwiX3Rocm93cyIsInNob3VsZFRocm93IiwiYmxvY2siLCJ1c2VyUHJvdmlkZWRNZXNzYWdlIiwiaXNVbmV4cGVjdGVkRXhjZXB0aW9uIiwiZXF1YWwiLCJub3RFcXVhbCIsImRlZXBFcXVhbCIsImRlZXBTdHJpY3RFcXVhbCIsIm5vdERlZXBFcXVhbCIsIm5vdERlZXBTdHJpY3RFcXVhbCIsInN0cmljdEVxdWFsIiwibm90U3RyaWN0RXF1YWwiLCJ0aHJvd3MiLCJkb2VzTm90VGhyb3ciLCJpZkVycm9yIiwicGFyc2VGbG9hdCIsImxvbmciLCJtcyIsInBsdXJhbCIsInJvdW5kIiwiY2VpbCIsInByZXZUaW1lIiwiY3JlYXRlRGVidWciLCJuYW1lc3BhY2UiLCJlbmFibGVkIiwiY3VyciIsImRpZmYiLCJjb2VyY2UiLCJmb3JtYXR0ZXIiLCJmb3JtYXR0ZXJzIiwiZm9ybWF0QXJncyIsImxvZ0ZuIiwidXNlQ29sb3JzIiwiY29sb3IiLCJtb2R1bGUiLCJkZWZhdWx0IiwiZW5hYmxlIiwibmFtZXNwYWNlcyIsInNhdmUiLCJza2lwcyIsIm5hbWVzIiwicmVxdWlyZSQkMCIsImxvYWQiLCJyIiwic3RvcmFnZSIsIkRFQlVHIiwiRnVuY3Rpb24iLCJodW1hbml6ZSIsImxhc3RDIiwicmVtb3ZlSXRlbSIsImRvY3VtZW50RWxlbWVudCIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwiZXhjZXB0aW9uIiwidGFibGUiLCIkMSIsImNocm9tZSIsImxvY2FsIiwibG9jYWxTdG9yYWdlIiwiaW5zcGVjdE9wdHMiLCJ1dGlsIiwicHJlZml4IiwiQm9vbGVhbiIsInR0eSIsImZkIiwiZmlsdGVyIiwiREVCVUdfRkQiLCJzdGRvdXQiLCJzdGRlcnIiLCJndWVzc0hhbmRsZVR5cGUiLCJfdHlwZSIsIl9oYW5kbGUiLCJ1bnJlZiIsInJlcXVpcmUkJDEiLCJTeW5jV3JpdGVTdHJlYW0iLCJhdXRvQ2xvc2UiLCJyZXF1aXJlJCQyIiwiU29ja2V0IiwiTyIsIlVSTCIsImV2ZW50SGFuZGxlcnMiLCJfcmVkaXJlY3RhYmxlIiwiUmVkaXJlY3Rpb25FcnJvciIsImNyZWF0ZUVycm9yVHlwZSIsIlRvb01hbnlSZWRpcmVjdHNFcnJvciIsIk1heEJvZHlMZW5ndGhFeGNlZWRlZEVycm9yIiwiV3JpdGVBZnRlckVuZEVycm9yIiwiUmVkaXJlY3RhYmxlUmVxdWVzdCIsInJlc3BvbnNlQ2FsbGJhY2siLCJfc2FuaXRpemVPcHRpb25zIiwiX29wdGlvbnMiLCJfZW5kZWQiLCJfZW5kaW5nIiwiX3JlZGlyZWN0Q291bnQiLCJfcmVkaXJlY3RzIiwiX3JlcXVlc3RCb2R5TGVuZ3RoIiwiX3JlcXVlc3RCb2R5QnVmZmVycyIsIl9vbk5hdGl2ZVJlc3BvbnNlIiwiX3Byb2Nlc3NSZXNwb25zZSIsIl9wZXJmb3JtUmVxdWVzdCIsInN0YXJ0VGltZXIiLCJtc2VjcyIsIl90aW1lb3V0IiwiY2xlYXJUaW1lciIsInByb3RvY29scyIsIm1heFJlZGlyZWN0cyIsIm1heEJvZHlMZW5ndGgiLCJuYXRpdmVQcm90b2NvbHMiLCJzY2hlbWUiLCJuYXRpdmVQcm90b2NvbCIsIndyYXBwZWRQcm90b2NvbCIsInVybFN0ciIsInVybFRvT3B0aW9ucyIsImFzc2lnbiIsInVybE9iamVjdCIsInN0YXJ0c1dpdGgiLCJyZW1vdmVNYXRjaGluZ0hlYWRlcnMiLCJsYXN0VmFsdWUiLCJkZWZhdWx0TWVzc2FnZSIsIkN1c3RvbUVycm9yIiwiX2N1cnJlbnRSZXF1ZXN0IiwiY3VycmVudFJlcXVlc3QiLCJzb2NrZXQiLCJwcm9wZXJ0eSIsInNlYXJjaFBvcyIsImFnZW50cyIsImFnZW50IiwiX2N1cnJlbnRVcmwiLCJfaXNSZWRpcmVjdCIsImJ1ZmZlcnMiLCJ3cml0ZU5leHQiLCJ0cmFja1JlZGlyZWN0cyIsImZvbGxvd1JlZGlyZWN0cyIsInByZXZpb3VzSG9zdE5hbWUiLCJyZWRpcmVjdFVybCIsInJlZGlyZWN0VXJsUGFydHMiLCJiZWZvcmVSZWRpcmVjdCIsInJlc3BvbnNlRGV0YWlscyIsImNhdXNlIiwicmVzcG9uc2VVcmwiLCJyZWRpcmVjdHMiLCIyIiwiMSIsIjAiLCItMSIsIi0yIiwiLTMiLCItNCIsIi01IiwiLTYiLCJaU3RyZWFtIiwibmV4dF9pbiIsImF2YWlsX2luIiwidG90YWxfaW4iLCJuZXh0X291dCIsImF2YWlsX291dCIsInRvdGFsX291dCIsImRhdGFfdHlwZSIsImFkbGVyIiwiYXJyYXlTZXQiLCJzcmNfb2ZmcyIsImRlc3Rfb2ZmcyIsIkJ1ZjgiLCJCdWYxNiIsIlVpbnQxNkFycmF5IiwiQnVmMzIiLCJJbnQzMkFycmF5IiwiemVybyIsImV4dHJhX2xiaXRzIiwiZXh0cmFfZGJpdHMiLCJleHRyYV9ibGJpdHMiLCJibF9vcmRlciIsInN0YXRpY19sdHJlZSIsInN0YXRpY19kdHJlZSIsIkRfQ09ERVMiLCJfZGlzdF9jb2RlIiwiX2xlbmd0aF9jb2RlIiwiTUFYX01BVENIIiwiYmFzZV9sZW5ndGgiLCJzdGF0aWNfbF9kZXNjIiwic3RhdGljX2RfZGVzYyIsInN0YXRpY19ibF9kZXNjIiwiYmFzZV9kaXN0IiwiU3RhdGljVHJlZURlc2MiLCJzdGF0aWNfdHJlZSIsImV4dHJhX2JpdHMiLCJleHRyYV9iYXNlIiwiZWxlbXMiLCJtYXhfbGVuZ3RoIiwiaGFzX3N0cmVlIiwiVHJlZURlc2MiLCJkeW5fdHJlZSIsInN0YXRfZGVzYyIsIm1heF9jb2RlIiwiZF9jb2RlIiwiZGlzdCIsInB1dF9zaG9ydCIsInBlbmRpbmdfYnVmIiwicGVuZGluZyIsInNlbmRfYml0cyIsImJpX3ZhbGlkIiwiYmlfYnVmIiwic2VuZF9jb2RlIiwidHJlZSIsImJpX3JldmVyc2UiLCJnZW5fY29kZXMiLCJibF9jb3VudCIsImJpdHMiLCJuZXh0X2NvZGUiLCJNQVhfQklUUyIsImluaXRfYmxvY2siLCJMSVRFUkFMUyIsImR5bl9sdHJlZSIsImR5bl9kdHJlZSIsImJsX3RyZWUiLCJFTkRfQkxPQ0siLCJvcHRfbGVuIiwic3RhdGljX2xlbiIsImxhc3RfbGl0IiwiYmlfd2luZHVwIiwic21hbGxlciIsIl9uMiIsIl9tMiIsInBxZG93bmhlYXAiLCJoZWFwIiwiaGVhcF9sZW4iLCJjb21wcmVzc19ibG9jayIsImx0cmVlIiwiZHRyZWUiLCJsYyIsImx4IiwiZF9idWYiLCJsX2J1ZiIsImJ1aWxkX3RyZWUiLCJub2RlIiwic3RyZWUiLCJoZWFwX21heCIsInhiaXRzIiwic2Nhbl90cmVlIiwiY3VybGVuIiwicHJldmxlbiIsIm5leHRsZW4iLCJtYXhfY291bnQiLCJtaW5fY291bnQiLCJSRVBfM182IiwiUkVQWl8zXzEwIiwiUkVQWl8xMV8xMzgiLCJzZW5kX3RyZWUiLCJzdGF0aWNfaW5pdF9kb25lIiwiX3RyX3N0b3JlZF9ibG9jayIsInN0b3JlZF9sZW4iLCJfdHJfdGFsbHkiLCJsaXRfYnVmc2l6ZSIsImFkbGVyMzIiLCJzMSIsInMyIiwiY3JjVGFibGUiLCJjcmMzMiIsImNyYyIsImNvbmZpZ3VyYXRpb25fdGFibGUiLCJaX1NUUkVBTV9FUlJPUiIsIk1JTl9MT09LQUhFQUQiLCJIQ1JDX1NUQVRFIiwiQlVTWV9TVEFURSIsIkZJTklTSF9TVEFURSIsInN0cm0iLCJlcnJvckNvZGUiLCJyYW5rIiwiZmx1c2hfcGVuZGluZyIsInBlbmRpbmdfb3V0IiwiZmx1c2hfYmxvY2tfb25seSIsIm9wdF9sZW5iIiwic3RhdGljX2xlbmIiLCJtYXhfYmxpbmRleCIsImxldmVsIiwiYmxhY2tfbWFzayIsImxfZGVzYyIsImRfZGVzYyIsImJsX2Rlc2MiLCJCTF9DT0RFUyIsInN0cmF0ZWd5IiwibGNvZGVzIiwiZGNvZGVzIiwiYmxjb2RlcyIsIl90cl9mbHVzaF9ibG9jayIsImJsb2NrX3N0YXJ0Iiwic3Ryc3RhcnQiLCJwdXRfYnl0ZSIsInB1dFNob3J0TVNCIiwibG9uZ2VzdF9tYXRjaCIsImN1cl9tYXRjaCIsImNoYWluX2xlbmd0aCIsIm1heF9jaGFpbl9sZW5ndGgiLCJzY2FuIiwiYmVzdF9sZW4iLCJwcmV2X2xlbmd0aCIsIm5pY2VfbWF0Y2giLCJ3X3NpemUiLCJfd2luIiwid21hc2siLCJ3X21hc2siLCJzdHJlbmQiLCJzY2FuX2VuZDEiLCJzY2FuX2VuZCIsImdvb2RfbWF0Y2giLCJsb29rYWhlYWQiLCJtYXRjaF9zdGFydCIsImZpbGxfd2luZG93IiwibW9yZSIsIl93X3NpemUiLCJ3aW5kb3dfc2l6ZSIsImhhc2hfc2l6ZSIsImluc2VydCIsImluc19oIiwiaGFzaF9zaGlmdCIsImhhc2hfbWFzayIsImRlZmxhdGVfZmFzdCIsImhhc2hfaGVhZCIsImJmbHVzaCIsIm1hdGNoX2xlbmd0aCIsIm1heF9sYXp5X21hdGNoIiwiTUlOX01BVENIIiwiZGVmbGF0ZV9zbG93IiwibWF4X2luc2VydCIsInByZXZfbWF0Y2giLCJtYXRjaF9hdmFpbGFibGUiLCJDb25maWciLCJnb29kX2xlbmd0aCIsIm1heF9sYXp5IiwibmljZV9sZW5ndGgiLCJtYXhfY2hhaW4iLCJEZWZsYXRlU3RhdGUiLCJwZW5kaW5nX2J1Zl9zaXplIiwiZ3poZWFkIiwiZ3ppbmRleCIsImxhc3RfZmx1c2giLCJ3X2JpdHMiLCJoYXNoX2JpdHMiLCJIRUFQX1NJWkUiLCJkZWZsYXRlUmVzZXQiLCJMRU5HVEhfQ09ERVMiLCJMX0NPREVTIiwiX3RyX2luaXQiLCJkZWZsYXRlIiwib2xkX2ZsdXNoIiwiYmVnIiwidGV4dCIsImhjcmMiLCJjb21tZW50Iiwib3MiLCJic3RhdGUiLCJTVEFUSUNfVFJFRVMiLCJfdHJfYWxpZ24iLCJpbmZsYXRlX2Zhc3QiLCJfaW4iLCJfb3V0IiwiZG1heCIsIndzaXplIiwid2hhdmUiLCJ3bmV4dCIsInNfd2luZG93IiwiaG9sZCIsImxjb2RlIiwiZGNvZGUiLCJsbWFzayIsImRtYXNrIiwiaGVyZSIsIm9wIiwiZnJvbV9zb3VyY2UiLCJsZW5jb2RlIiwiZGlzdGNvZGUiLCJsZW5iaXRzIiwiZGlzdGJpdHMiLCJ0b3AiLCJkb2xlbiIsImRvZGlzdCIsInNhbmUiLCJtYXhfYmxvY2tfc2l6ZSIsIm1heF9zdGFydCIsImxiYXNlIiwibGV4dCIsImRiYXNlIiwiZGV4dCIsImluZmxhdGVfdGFibGUiLCJsZW5zIiwibGVuc19pbmRleCIsImNvZGVzIiwidGFibGVfaW5kZXgiLCJ3b3JrIiwiaW5jciIsImxvdyIsIm1hc2siLCJoZXJlX2JpdHMiLCJoZXJlX29wIiwiaGVyZV92YWwiLCJzeW0iLCJyb290IiwiZHJvcCIsImxlZnQiLCJ1c2VkIiwiaHVmZiIsImJhc2VfaW5kZXgiLCJNQVhCSVRTIiwib2ZmcyIsImV4dHJhX2luZGV4IiwiVFlQRSIsIkJBRCIsInpzd2FwMzIiLCJJbmZsYXRlU3RhdGUiLCJoYXZlZGljdCIsImZsYWdzIiwiY2hlY2siLCJ0b3RhbCIsIndiaXRzIiwibmNvZGUiLCJubGVuIiwibmRpc3QiLCJoYXZlIiwibGVuZHluIiwiZGlzdGR5biIsImJhY2siLCJ3YXMiLCJpbmZsYXRlUmVzZXQiLCJsZW5maXgiLCJkaXN0Zml4IiwidmlyZ2luIiwiZml4ZWR0YWJsZXMiLCJabGliIiwiaW5pdF9kb25lIiwid3JpdGVfaW5fcHJvZ3Jlc3MiLCJwZW5kaW5nX2Nsb3NlIiwid2luZG93Qml0cyIsIm1lbUxldmVsIiwiZGljdGlvbmFyeSIsImJ1ZmZlclNldCIsInpzdHJlYW0iLCJpbmZsYXRlSW5pdDIiLCJfZXJyb3IiLCJfd3JpdGVDaGVjayIsImluX29mZiIsImluX2xlbiIsIm91dF9vZmYiLCJvdXRfbGVuIiwiY2xvc2UiLCJ3cml0ZVN5bmMiLCJfc2V0IiwicHV0IiwibGFzdF9iaXRzIiwibGFzdF9vcCIsImxhc3RfdmFsIiwiaGJ1ZiIsIm9yZGVyIiwiaW5mX2xlYXZlIiwieGZsYWdzIiwiZXh0cmFfbGVuIiwiaW5mbGF0ZSIsInJlc2V0IiwiX2JpbmRpbmciLCJaX01JTl9XSU5ET1dCSVRTIiwiWl9NQVhfV0lORE9XQklUUyIsIlpfREVGQVVMVF9XSU5ET1dCSVRTIiwiWl9NSU5fQ0hVTksiLCJaX01BWF9DSFVOSyIsIlpfREVGQVVMVF9DSFVOSyIsIlpfTUlOX01FTUxFVkVMIiwiWl9NQVhfTUVNTEVWRUwiLCJaX0RFRkFVTFRfTUVNTEVWRUwiLCJaX01JTl9MRVZFTCIsIlpfTUFYX0xFVkVMIiwiWl9ERUZBVUxUX0xFVkVMIiwiWl9ERUZBVUxUX0NPTVBSRVNTSU9OIiwiWl9PSyIsIlpfU1RSRUFNX0VORCIsIlpfTkVFRF9ESUNUIiwiWl9FUlJOTyIsIlpfREFUQV9FUlJPUiIsIlpfTUVNX0VSUk9SIiwiWl9CVUZfRVJST1IiLCJaX1ZFUlNJT05fRVJST1IiLCJEZWZsYXRlIiwiREVGTEFURSIsIkluZmxhdGUiLCJJTkZMQVRFIiwiR3ppcCIsIkdaSVAiLCJHdW56aXAiLCJHVU5aSVAiLCJEZWZsYXRlUmF3IiwiREVGTEFURVJBVyIsIkluZmxhdGVSYXciLCJJTkZMQVRFUkFXIiwiVW56aXAiLCJVTlpJUCIsIl9jaHVua1NpemUiLCJjaHVua1NpemUiLCJaX05PX0ZMVVNIIiwiWl9QQVJUSUFMX0ZMVVNIIiwiWl9TWU5DX0ZMVVNIIiwiWl9GVUxMX0ZMVVNIIiwiWl9GSU5JU0giLCJaX0JMT0NLIiwiX2ZsdXNoRmxhZyIsIlpfRklMVEVSRUQiLCJaX0hVRkZNQU5fT05MWSIsIlpfUkxFIiwiWl9GSVhFRCIsIlpfREVGQVVMVF9TVFJBVEVHWSIsIl9oYWRFcnJvciIsImVycm5vIiwiX2J1ZmZlciIsIl9vZmZzZXQiLCJfY2xvc2VkIiwiX2xldmVsIiwiX3N0cmF0ZWd5Iiwia2luZCIsImZsdXNoRmxhZyIsIl9wcm9jZXNzQ2h1bmsiLCJhdmFpbEluQmVmb3JlIiwiYXZhaWxPdXRCZWZvcmUiLCJpbk9mZiIsImFzeW5jIiwibnJlYWQiLCJhdmFpbEluQWZ0ZXIiLCJhdmFpbE91dEFmdGVyIiwibmV3UmVxIiwiaHR0cEZvbGxvdyIsImh0dHBzRm9sbG93IiwiaXNIdHRwcyIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwiQ29udGVudC1UeXBlIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiYWRhcHRlciIsImRlZmF1bHRzIiwiUHJvbWlzZSIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidW5lc2NhcGUiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwiYnVpbGRGdWxsUGF0aCIsImJ1aWxkVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwic2V0dGxlIiwib25hYm9ydCIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ4c3JmVmFsdWUiLCJpc1VSTFNhbWVPcmlnaW4iLCJ4c3JmQ29va2llTmFtZSIsImNvb2tpZXMiLCJ4c3JmSGVhZGVyTmFtZSIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwiY2FuY2VsIiwicmVzb2x2ZVByb21pc2UiLCJyZWplY3RQcm9taXNlIiwicGtnIiwidXJsQXV0aCIsImlzSHR0cHNSZXF1ZXN0IiwiaHR0cHNBZ2VudCIsImh0dHBBZ2VudCIsInNvY2tldFBhdGgiLCJ0cmFuc3BvcnQiLCJwcm94eSIsInByb3h5RW52IiwicHJveHlVcmwiLCJwYXJzZWRQcm94eVVybCIsIm5vUHJveHlFbnYiLCJub19wcm94eSIsIk5PX1BST1hZIiwic2hvdWxkUHJveHkiLCJzb21lIiwicHJveHlFbGVtZW50IiwicHJveHlVcmxBdXRoIiwiYmFzZTY0IiwiaXNIdHRwc1Byb3h5IiwiYWJvcnRlZCIsImxhc3RSZXF1ZXN0IiwiZGVjb21wcmVzcyIsInpsaWIiLCJyZXNwb25zZUJ1ZmZlciIsIm1heENvbnRlbnRMZW5ndGgiLCJyZXNwb25zZURhdGEiLCJyZXNwb25zZUVuY29kaW5nIiwidHJhbnNmb3JtUmVxdWVzdCIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsImNvbW1vbiIsIkFjY2VwdCIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwidHJhbnNmb3JtRGF0YSIsImlzQ2FuY2VsIiwiY29uZmlnMSIsImNvbmZpZzIiLCJ2YWx1ZUZyb21Db25maWcyS2V5cyIsIm1lcmdlRGVlcFByb3BlcnRpZXNLZXlzIiwiZGVmYXVsdFRvQ29uZmlnMktleXMiLCJkaXJlY3RNZXJnZUtleXMiLCJnZXRNZXJnZWRWYWx1ZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJheGlvc0tleXMiLCJvdGhlcktleXMiLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiaW50ZXJjZXB0b3JzIiwibWVyZ2VDb25maWciLCJjaGFpbiIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9yIiwiZ2V0VXJpIiwiQ2FuY2VsIiwiQ2FuY2VsVG9rZW4iLCJleGVjdXRvciIsInRva2VuIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiaW5zdGFuY2UiLCJheGlvcyIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsImF4aW9zXzEiLCJwb3N0IiwicGF0Y2giLCJkZWxldGUiLCJfX2NyZWF0ZUJpbmRpbmciLCJrMiIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsIl9faW1wb3J0U3RhciIsIkFic3RyYWN0IiwiUmVxdWVzdCIsIkFwcCIsImJhc2VVcmwiLCJNZWV0aW5nIiwiZXh0ZXJuYWxBcGkiLCJfX2F3YWl0ZXIiLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsInN0ZXAiLCJ0aHJvdyIsImRlZmF1bHRfMSIsIkppdHNpTWVldEV4dGVybmFsQVBJIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzY3JpcHQiLCJub2RlTmFtZSIsImFwcGVuZENoaWxkIiwiSW1wb3J0Sml0c2lGaWxlXzEiLCJwYXJlbnROb2RlIiwiand0Iiwicm9vbU5hbWUiLCJ3aWR0aCIsImhlaWdodCIsIm9uQ2xvc2UiLCJvbkxvYWQiLCJ1c2VyIiwiZGlzcGxheU5hbWUiLCJ1c2VySW5mbyIsImNvbmZpZ092ZXJ3cml0ZSIsInN0YXJ0V2l0aEF1ZGlvTXV0ZWQiLCJzdGFydFdpdGhWaWRlb011dGVkIiwiaW50ZXJmYWNlQ29uZmlnT3ZlcndyaXRlIiwiVE9PTEJBUl9CVVRUT05TIiwiYnV0dG9ucyIsIkppdHNpRXh0ZXJuYWxBcGkiLCJleGVjdXRlQ29tbWFuZCIsInNoYXJlTGluayIsImlubmVySFRNTCIsImdldE51bWJlck9mUGFydGljaXBhbnRzIiwiQXBwRXJyb3JfMSIsInJlc291cmNlXzEiLCJKaXRzaU1lZXRfMSIsIlNlc3Npb24iLCJzZXNzaW9uQ3VycmVudCIsImNhdGNoIiwic2Vzc2lvbk5hbWUiLCJpbmZvIiwiY29uZmVyZW5jZSIsInN0YXJ0Q29uZmVyZW5jZSIsInNlc3Npb25Ub2tlbiIsInNob3J0IiwiZW5kQ29uZmVyZW5jZSIsImNsb3NlQ29uZmVyZW5jZSIsIk9yZyIsIm9yZ0lkIiwiT3JnVW5pdCIsIm9yZ05hbWUiLCJvcmdVbml0TmFtZSIsIkRlbGF5ZWRTdHJlYW0iLCJkYXRhU2l6ZSIsIm1heERhdGFTaXplIiwicGF1c2VTdHJlYW0iLCJfbWF4RGF0YVNpemVFeGNlZWRlZCIsIl9yZWxlYXNlZCIsIl9idWZmZXJlZEV2ZW50cyIsImRlbGF5ZWRTdHJlYW0iLCJvcHRpb24iLCJyZWFsRW1pdCIsIl9oYW5kbGVFbWl0IiwiX2NoZWNrSWZNYXhEYXRhU2l6ZUV4Y2VlZGVkIiwiQ29tYmluZWRTdHJlYW0iLCJwYXVzZVN0cmVhbXMiLCJfc3RyZWFtcyIsIl9jdXJyZW50U3RyZWFtIiwiX2luc2lkZUxvb3AiLCJfcGVuZGluZ05leHQiLCJub3JtYWxpemVBcnJheSIsImFsbG93QWJvdmVSb290IiwiY29tYmluZWRTdHJlYW0iLCJpc1N0cmVhbUxpa2UiLCJhcHBlbmQiLCJuZXdTdHJlYW0iLCJfY2hlY2tEYXRhU2l6ZSIsIl9oYW5kbGVFcnJvcnMiLCJfZ2V0TmV4dCIsIl9yZWFsR2V0TmV4dCIsIl9waXBlTmV4dCIsIl9lbWl0RXJyb3IiLCJfcmVzZXQiLCJfdXBkYXRlRGF0YVNpemUiLCJzcGxpdFBhdGhSZSIsInNwbGl0UGF0aCIsImZpbGVuYW1lIiwicmVzb2x2ZWRQYXRoIiwicmVzb2x2ZWRBYnNvbHV0ZSIsIm5vcm1hbGl6ZSIsImlzUGF0aEFic29sdXRlIiwidHJhaWxpbmdTbGFzaCIsImV4dG5hbWUiLCJiYXNlbmFtZSIsImRpcm5hbWUiLCJkZWxpbWl0ZXIiLCJ0byIsImZyb21QYXJ0cyIsInRvUGFydHMiLCJzYW1lUGFydHNMZW5ndGgiLCJvdXRwdXRQYXJ0cyIsInBhdGhzIiwiZXh0ZW5zaW9ucyIsInR5cGVzIiwicHJlZmVyZW5jZSIsIkVYVFJBQ1RfVFlQRV9SRUdFWFAiLCJURVhUX1RZUEVfUkVHRVhQIiwiY2hhcnNldCIsIm1pbWUiLCJkYiIsImV4dHMiLCJleHRlbnNpb24iLCJzZXRJbW1lZGlhdGUiLCJpc0FzeW5jIiwiZGVmZXIiLCJqb2JzIiwiY2xlYW4iLCJrZXllZExpc3QiLCJpdGVtIiwicmVzdWx0cyIsInNvcnRNZXRob2QiLCJpc05hbWVkTGlzdCIsImluaXRTdGF0ZSIsIml0ZXJhdGUiLCJpdGVyYXRvckhhbmRsZXIiLCJ0ZXJtaW5hdG9yIiwiYXNjZW5kaW5nIiwicGFyc2VVcmwiLCJfb3ZlcmhlYWRMZW5ndGgiLCJfdmFsdWVMZW5ndGgiLCJfdmFsdWVzVG9NZWFzdXJlIiwiTElORV9CUkVBSyIsImZpZWxkIiwiX211bHRpUGFydEhlYWRlciIsImZvb3RlciIsIl9tdWx0aVBhcnRGb290ZXIiLCJfdHJhY2tMZW5ndGgiLCJ2YWx1ZUxlbmd0aCIsImtub3duTGVuZ3RoIiwiX2xlbmd0aFJldHJpZXZlciIsImZzIiwic3RhdCIsImZpbGVTaXplIiwiY29udGVudERpc3Bvc2l0aW9uIiwiX2dldENvbnRlbnREaXNwb3NpdGlvbiIsImNvbnRlbnRUeXBlIiwiX2dldENvbnRlbnRUeXBlIiwiY29udGVudHMiLCJDb250ZW50LURpc3Bvc2l0aW9uIiwicG9wdWxhdGUiLCJnZXRCb3VuZGFyeSIsImZpbGVwYXRoIiwiY2xpZW50IiwiX2h0dHBNZXNzYWdlIiwiX2xhc3RCb3VuZGFyeSIsImdldEhlYWRlcnMiLCJ1c2VySGVhZGVycyIsImZvcm1IZWFkZXJzIiwiY29udGVudC10eXBlIiwiX2JvdW5kYXJ5IiwiX2dlbmVyYXRlQm91bmRhcnkiLCJkYXRhQnVmZmVyIiwiYm91bmRhcnkiLCJyYW5kb20iLCJnZXRMZW5ndGhTeW5jIiwiaGFzS25vd25MZW5ndGgiLCJnZXRMZW5ndGgiLCJhc3luY2tpdCIsInZhbHVlcyIsInN1Ym1pdCIsIm9uUmVzcG9uc2UiLCJyZXNwb25jZSIsImZvcm1fZGF0YV8xIiwiQXJjaGl2ZSIsImZvcm0iLCJvcmciLCJvcmdVbml0Iiwic2Vzc2lvbiIsImZpbGVJZCIsIlVzZXIiLCJ1c2VySWQiLCJQbGFuIiwicHJlc2NyaXB0aW9uSWQiLCJTZXNzaW9uQWN0aW9uc18xIiwiT3JnQWN0aW9uc18xIiwiT3JnVW5pdEFjdGlvbnNfMSIsIkFyY2hpdmVBY3Rpb25zXzEiLCJyZXF1aXJlJCQzIiwiQXV0aFJlc291cmNlXzEiLCJyZXF1aXJlJCQ0IiwiVXNlckFjdGlvbnNfMSIsInJlcXVpcmUkJDUiLCJQcmVzY3JpcHRpb25BY3Rpb25fMSIsInJlcXVpcmUkJDYiLCJyZXF1aXJlJCQ3IiwibG9naW4iLCJhcmNoaXZlIiwicHJlc2NyaXB0aW9uIiwiYWNjZXNzVG9rZW4iLCJBcHBfMSJdLCJtYXBwaW5ncyI6InNaQUNBQSxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsV0FDL0MsTUFBTUMsVUFBaUJDLE1BQ25CQyxZQUFZQyxFQUFTQyxFQUFPLElBQUtDLE1BQzdCQyxNQUFNSCxHQUNOSSxLQUFLSixRQUFVQSxFQUNmSSxLQUFLSCxLQUFPQSxFQUNaRyxLQUFLRixTQUFXQSxFQUNoQkUsS0FBS0gsS0FBT0EsRUFDWkcsS0FBS0YsU0FBV0EsRUFDaEJKLE1BQU1PLGtCQUFr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
