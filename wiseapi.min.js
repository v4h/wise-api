var WiseAPI=function(){"use strict";var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function n(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function a(e,n){return e(n={exports:{}},n.exports),n.exports}function t(e){return e&&e.default||e}var i=a((function(e,n){Object.defineProperty(n,"__esModule",{value:!0});class a extends Error{constructor(e,n=500,a=!1){super(e),this.message=e,this.code=n,this.internal=a,this.code=n,this.internal=a,Error.captureStackTrace(this,this.constructor)}}n.default=a}));n(i);var o=function(e,n){return function(){for(var a=new Array(arguments.length),t=0;t<a.length;t++)a[t]=arguments[t];return e.apply(n,a)}},s=Object.prototype.toString;function r(e){return"[object Array]"===s.call(e)}function c(e){return void 0===e}function p(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==s.call(e))return!1;var n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}function u(e){return"[object Function]"===s.call(e)}function d(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),r(e))for(var a=0,t=e.length;a<t;a++)n.call(null,e[a],a,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&n.call(null,e[i],i,e)}var h={isArray:r,isArrayBuffer:function(e){return"[object ArrayBuffer]"===s.call(e)},isBuffer:function(e){return null!==e&&!c(e)&&null!==e.constructor&&!c(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:p,isPlainObject:l,isUndefined:c,isDate:function(e){return"[object Date]"===s.call(e)},isFile:function(e){return"[object File]"===s.call(e)},isBlob:function(e){return"[object Blob]"===s.call(e)},isFunction:u,isStream:function(e){return p(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:d,merge:function e(){var n={};function a(a,t){l(n[t])&&l(a)?n[t]=e(n[t],a):l(a)?n[t]=e({},a):r(a)?n[t]=a.slice():n[t]=a}for(var t=0,i=arguments.length;t<i;t++)d(arguments[t],a);return n},extend:function(e,n,a){return d(n,(function(n,t){e[t]=a&&"function"==typeof n?o(n,a):n})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}};function m(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var f=function(e,n,a){if(!n)return e;var t;if(a)t=a(n);else if(h.isURLSearchParams(n))t=n.toString();else{var i=[];h.forEach(n,(function(e,n){null!=e&&(h.isArray(e)?n+="[]":e=[e],h.forEach(e,(function(e){h.isDate(e)?e=e.toISOString():h.isObject(e)&&(e=JSON.stringify(e)),i.push(m(n)+"="+m(e))})))})),t=i.join("&")}if(t){var o=e.indexOf("#");-1!==o&&(e=e.slice(0,o)),e+=(-1===e.indexOf("?")?"?":"&")+t}return e};function v(){this.handlers=[]}v.prototype.use=function(e,n){return this.handlers.push({fulfilled:e,rejected:n}),this.handlers.length-1},v.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},v.prototype.forEach=function(e){h.forEach(this.handlers,(function(n){null!==n&&e(n)}))};var x=v,g=function(e,n,a){return h.forEach(a,(function(a){e=a(e,n)})),e},b=function(e){return!(!e||!e.__CANCEL__)},w="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function _(){throw new Error("setTimeout has not been defined")}function y(){throw new Error("clearTimeout has not been defined")}var k=_,E=y;function j(e){if(k===setTimeout)return setTimeout(e,0);if((k===_||!k)&&setTimeout)return k=setTimeout,setTimeout(e,0);try{return k(e,0)}catch(n){try{return k.call(null,e,0)}catch(n){return k.call(this,e,0)}}}"function"==typeof w.setTimeout&&(k=setTimeout),"function"==typeof w.clearTimeout&&(E=clearTimeout);var A,R=[],z=!1,S=-1;function T(){z&&A&&(z=!1,A.length?R=A.concat(R):S=-1,R.length&&O())}function O(){if(!z){var e=j(T);z=!0;for(var n=R.length;n;){for(A=R,R=[];++S<n;)A&&A[S].run();S=-1,n=R.length}A=null,z=!1,function(e){if(E===clearTimeout)return clearTimeout(e);if((E===y||!E)&&clearTimeout)return E=clearTimeout,clearTimeout(e);try{E(e)}catch(n){try{return E.call(null,e)}catch(n){return E.call(this,e)}}}(e)}}function L(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var a=1;a<arguments.length;a++)n[a-1]=arguments[a];R.push(new q(e,n)),1!==R.length||z||j(O)}function q(e,n){this.fun=e,this.array=n}function C(){}q.prototype.run=function(){this.fun.apply(null,this.array)};var B=C,U=C,M=C,P=C,N=C,D=C,I=C,$=w.performance||{},F=$.now||$.mozNow||$.msNow||$.oNow||$.webkitNow||function(){return(new Date).getTime()},Z=new Date,H={nextTick:L,title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:B,addListener:U,once:M,off:P,removeListener:N,removeAllListeners:D,emit:I,binding:function(e){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(e){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(e){var n=.001*F.call($),a=Math.floor(n),t=Math.floor(n%1*1e9);return e&&(a-=e[0],(t-=e[1])<0&&(a--,t+=1e9)),[a,t]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-Z)/1e3}},Y=function(e,n){h.forEach(e,(function(a,t){t!==n&&t.toUpperCase()===n.toUpperCase()&&(e[n]=a,delete e[t])}))},W=function(e,n,a,t,i){return e.config=n,a&&(e.code=a),e.request=t,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e},V=function(e,n,a,t,i){var o=new Error(e);return W(o,n,a,t,i)},K=function(e,n,a){var t=a.config.validateStatus;a.status&&t&&!t(a.status)?n(V("Request failed with status code "+a.status,a.config,null,a.request,a)):e(a)},G=h.isStandardBrowserEnv()?{write:function(e,n,a,t,i,o){var s=[];s.push(e+"="+encodeURIComponent(n)),h.isNumber(a)&&s.push("expires="+new Date(a).toGMTString()),h.isString(t)&&s.push("path="+t),h.isString(i)&&s.push("domain="+i),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}},X=function(e,n){return e&&!/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(n)?function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}(e,n):n},J=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"],Q=h.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),a=document.createElement("a");function t(e){var t=e;return n&&(a.setAttribute("href",t),t=a.href),a.setAttribute("href",t),{href:a.href,protocol:a.protocol?a.protocol.replace(/:$/,""):"",host:a.host,search:a.search?a.search.replace(/^\?/,""):"",hash:a.hash?a.hash.replace(/^#/,""):"",hostname:a.hostname,port:a.port,pathname:"/"===a.pathname.charAt(0)?a.pathname:"/"+a.pathname}}return e=t(window.location.href),function(n){var a=h.isString(n)?t(n):n;return a.protocol===e.protocol&&a.host===e.host}}():function(){return!0},ee=[],ne=[],ae="undefined"!=typeof Uint8Array?Uint8Array:Array,te=!1;function ie(){te=!0;for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=0,a=e.length;n<a;++n)ee[n]=e[n],ne[e.charCodeAt(n)]=n;ne["-".charCodeAt(0)]=62,ne["_".charCodeAt(0)]=63}function oe(e,n,a){for(var t,i,o=[],s=n;s<a;s+=3)t=(e[s]<<16)+(e[s+1]<<8)+e[s+2],o.push(ee[(i=t)>>18&63]+ee[i>>12&63]+ee[i>>6&63]+ee[63&i]);return o.join("")}function se(e){var n;te||ie();for(var a=e.length,t=a%3,i="",o=[],s=16383,r=0,c=a-t;r<c;r+=s)o.push(oe(e,r,r+s>c?c:r+s));return 1===t?(n=e[a-1],i+=ee[n>>2],i+=ee[n<<4&63],i+="=="):2===t&&(n=(e[a-2]<<8)+e[a-1],i+=ee[n>>10],i+=ee[n>>4&63],i+=ee[n<<2&63],i+="="),o.push(i),o.join("")}function re(e,n,a,t,i){var o,s,r=8*i-t-1,c=(1<<r)-1,p=c>>1,l=-7,u=a?i-1:0,d=a?-1:1,h=e[n+u];for(u+=d,o=h&(1<<-l)-1,h>>=-l,l+=r;l>0;o=256*o+e[n+u],u+=d,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=t;l>0;s=256*s+e[n+u],u+=d,l-=8);if(0===o)o=1-p;else{if(o===c)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,t),o-=p}return(h?-1:1)*s*Math.pow(2,o-t)}function ce(e,n,a,t,i,o){var s,r,c,p=8*o-i-1,l=(1<<p)-1,u=l>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=t?0:o-1,m=t?1:-1,f=n<0||0===n&&1/n<0?1:0;for(n=Math.abs(n),isNaN(n)||n===1/0?(r=isNaN(n)?1:0,s=l):(s=Math.floor(Math.log(n)/Math.LN2),n*(c=Math.pow(2,-s))<1&&(s--,c*=2),(n+=s+u>=1?d/c:d*Math.pow(2,1-u))*c>=2&&(s++,c/=2),s+u>=l?(r=0,s=l):s+u>=1?(r=(n*c-1)*Math.pow(2,i),s+=u):(r=n*Math.pow(2,u-1)*Math.pow(2,i),s=0));i>=8;e[a+h]=255&r,h+=m,r/=256,i-=8);for(s=s<<i|r,p+=i;p>0;e[a+h]=255&s,h+=m,s/=256,p-=8);e[a+h-m]|=128*f}var pe={}.toString,le=Array.isArray||function(e){return"[object Array]"==pe.call(e)};function ue(){return he.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function de(e,n){if(ue()<n)throw new RangeError("Invalid typed array length");return he.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(n)).__proto__=he.prototype:(null===e&&(e=new he(n)),e.length=n),e}function he(e,n,a){if(!(he.TYPED_ARRAY_SUPPORT||this instanceof he))return new he(e,n,a);if("number"==typeof e){if("string"==typeof n)throw new Error("If encoding is specified then the first argument must be a string");return ve(this,e)}return me(this,e,n,a)}function me(e,n,a,t){if("number"==typeof n)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&n instanceof ArrayBuffer?function(e,n,a,t){if(n.byteLength,a<0||n.byteLength<a)throw new RangeError("'offset' is out of bounds");if(n.byteLength<a+(t||0))throw new RangeError("'length' is out of bounds");return n=void 0===a&&void 0===t?new Uint8Array(n):void 0===t?new Uint8Array(n,a):new Uint8Array(n,a,t),he.TYPED_ARRAY_SUPPORT?(e=n).__proto__=he.prototype:e=xe(e,n),e}(e,n,a,t):"string"==typeof n?function(e,n,a){if("string"==typeof a&&""!==a||(a="utf8"),!he.isEncoding(a))throw new TypeError('"encoding" must be a valid string encoding');var t=0|we(n,a),i=(e=de(e,t)).write(n,a);return i!==t&&(e=e.slice(0,i)),e}(e,n,a):function(e,n){if(be(n)){var a=0|ge(n.length);return 0===(e=de(e,a)).length||n.copy(e,0,0,a),e}if(n){if("undefined"!=typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!=typeof n.length||(t=n.length)!=t?de(e,0):xe(e,n);if("Buffer"===n.type&&le(n.data))return xe(e,n.data)}var t;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,n)}function fe(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function ve(e,n){if(fe(n),e=de(e,n<0?0:0|ge(n)),!he.TYPED_ARRAY_SUPPORT)for(var a=0;a<n;++a)e[a]=0;return e}function xe(e,n){var a=n.length<0?0:0|ge(n.length);e=de(e,a);for(var t=0;t<a;t+=1)e[t]=255&n[t];return e}function ge(e){if(e>=ue())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+ue().toString(16)+" bytes");return 0|e}function be(e){return!(null==e||!e._isBuffer)}function we(e,n){if(be(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var a=e.length;if(0===a)return 0;for(var t=!1;;)switch(n){case"ascii":case"latin1":case"binary":return a;case"utf8":case"utf-8":case void 0:return We(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*a;case"hex":return a>>>1;case"base64":return Ve(e).length;default:if(t)return We(e).length;n=(""+n).toLowerCase(),t=!0}}function _e(e,n,a){var t=!1;if((void 0===n||n<0)&&(n=0),n>this.length)return"";if((void 0===a||a>this.length)&&(a=this.length),a<=0)return"";if((a>>>=0)<=(n>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return Ue(this,n,a);case"utf8":case"utf-8":return Le(this,n,a);case"ascii":return Ce(this,n,a);case"latin1":case"binary":return Be(this,n,a);case"base64":return Oe(this,n,a);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Me(this,n,a);default:if(t)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),t=!0}}function ye(e,n,a){var t=e[n];e[n]=e[a],e[a]=t}function ke(e,n,a,t,i){if(0===e.length)return-1;if("string"==typeof a?(t=a,a=0):a>2147483647?a=2147483647:a<-2147483648&&(a=-2147483648),a=+a,isNaN(a)&&(a=i?0:e.length-1),a<0&&(a=e.length+a),a>=e.length){if(i)return-1;a=e.length-1}else if(a<0){if(!i)return-1;a=0}if("string"==typeof n&&(n=he.from(n,t)),be(n))return 0===n.length?-1:Ee(e,n,a,t,i);if("number"==typeof n)return n&=255,he.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,n,a):Uint8Array.prototype.lastIndexOf.call(e,n,a):Ee(e,[n],a,t,i);throw new TypeError("val must be string, number or Buffer")}function Ee(e,n,a,t,i){var o,s=1,r=e.length,c=n.length;if(void 0!==t&&("ucs2"===(t=String(t).toLowerCase())||"ucs-2"===t||"utf16le"===t||"utf-16le"===t)){if(e.length<2||n.length<2)return-1;s=2,r/=2,c/=2,a/=2}function p(e,n){return 1===s?e[n]:e.readUInt16BE(n*s)}if(i){var l=-1;for(o=a;o<r;o++)if(p(e,o)===p(n,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===c)return l*s}else-1!==l&&(o-=o-l),l=-1}else for(a+c>r&&(a=r-c),o=a;o>=0;o--){for(var u=!0,d=0;d<c;d++)if(p(e,o+d)!==p(n,d)){u=!1;break}if(u)return o}return-1}function je(e,n,a,t){a=Number(a)||0;var i=e.length-a;t?(t=Number(t))>i&&(t=i):t=i;var o=n.length;if(o%2!=0)throw new TypeError("Invalid hex string");t>o/2&&(t=o/2);for(var s=0;s<t;++s){var r=parseInt(n.substr(2*s,2),16);if(isNaN(r))return s;e[a+s]=r}return s}function Ae(e,n,a,t){return Ke(We(n,e.length-a),e,a,t)}function Re(e,n,a,t){return Ke(function(e){for(var n=[],a=0;a<e.length;++a)n.push(255&e.charCodeAt(a));return n}(n),e,a,t)}function ze(e,n,a,t){return Re(e,n,a,t)}function Se(e,n,a,t){return Ke(Ve(n),e,a,t)}function Te(e,n,a,t){return Ke(function(e,n){for(var a,t,i,o=[],s=0;s<e.length&&!((n-=2)<0);++s)t=(a=e.charCodeAt(s))>>8,i=a%256,o.push(i),o.push(t);return o}(n,e.length-a),e,a,t)}function Oe(e,n,a){return 0===n&&a===e.length?se(e):se(e.slice(n,a))}function Le(e,n,a){a=Math.min(e.length,a);for(var t=[],i=n;i<a;){var o,s,r,c,p=e[i],l=null,u=p>239?4:p>223?3:p>191?2:1;if(i+u<=a)switch(u){case 1:p<128&&(l=p);break;case 2:128==(192&(o=e[i+1]))&&(c=(31&p)<<6|63&o)>127&&(l=c);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&(c=(15&p)<<12|(63&o)<<6|63&s)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:o=e[i+1],s=e[i+2],r=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&r)&&(c=(15&p)<<18|(63&o)<<12|(63&s)<<6|63&r)>65535&&c<1114112&&(l=c)}null===l?(l=65533,u=1):l>65535&&(l-=65536,t.push(l>>>10&1023|55296),l=56320|1023&l),t.push(l),i+=u}return function(e){var n=e.length;if(n<=qe)return String.fromCharCode.apply(String,e);for(var a="",t=0;t<n;)a+=String.fromCharCode.apply(String,e.slice(t,t+=qe));return a}(t)}he.TYPED_ARRAY_SUPPORT=void 0===w.TYPED_ARRAY_SUPPORT||w.TYPED_ARRAY_SUPPORT,he.poolSize=8192,he._augment=function(e){return e.__proto__=he.prototype,e},he.from=function(e,n,a){return me(null,e,n,a)},he.TYPED_ARRAY_SUPPORT&&(he.prototype.__proto__=Uint8Array.prototype,he.__proto__=Uint8Array),he.alloc=function(e,n,a){return function(e,n,a,t){return fe(n),n<=0?de(e,n):void 0!==a?"string"==typeof t?de(e,n).fill(a,t):de(e,n).fill(a):de(e,n)}(null,e,n,a)},he.allocUnsafe=function(e){return ve(null,e)},he.allocUnsafeSlow=function(e){return ve(null,e)},he.isBuffer=Ge,he.compare=function(e,n){if(!be(e)||!be(n))throw new TypeError("Arguments must be Buffers");if(e===n)return 0;for(var a=e.length,t=n.length,i=0,o=Math.min(a,t);i<o;++i)if(e[i]!==n[i]){a=e[i],t=n[i];break}return a<t?-1:t<a?1:0},he.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},he.concat=function(e,n){if(!le(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return he.alloc(0);var a;if(void 0===n)for(n=0,a=0;a<e.length;++a)n+=e[a].length;var t=he.allocUnsafe(n),i=0;for(a=0;a<e.length;++a){var o=e[a];if(!be(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(t,i),i+=o.length}return t},he.byteLength=we,he.prototype._isBuffer=!0,he.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var n=0;n<e;n+=2)ye(this,n,n+1);return this},he.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var n=0;n<e;n+=4)ye(this,n,n+3),ye(this,n+1,n+2);return this},he.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var n=0;n<e;n+=8)ye(this,n,n+7),ye(this,n+1,n+6),ye(this,n+2,n+5),ye(this,n+3,n+4);return this},he.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?Le(this,0,e):_e.apply(this,arguments)},he.prototype.equals=function(e){if(!be(e))throw new TypeError("Argument must be a Buffer");return this===e||0===he.compare(this,e)},he.prototype.inspect=function(){var e="";return this.length>0&&(e=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(e+=" ... ")),"<Buffer "+e+">"},he.prototype.compare=function(e,n,a,t,i){if(!be(e))throw new TypeError("Argument must be a Buffer");if(void 0===n&&(n=0),void 0===a&&(a=e?e.length:0),void 0===t&&(t=0),void 0===i&&(i=this.length),n<0||a>e.length||t<0||i>this.length)throw new RangeError("out of range index");if(t>=i&&n>=a)return 0;if(t>=i)return-1;if(n>=a)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(t>>>=0),s=(a>>>=0)-(n>>>=0),r=Math.min(o,s),c=this.slice(t,i),p=e.slice(n,a),l=0;l<r;++l)if(c[l]!==p[l]){o=c[l],s=p[l];break}return o<s?-1:s<o?1:0},he.prototype.includes=function(e,n,a){return-1!==this.indexOf(e,n,a)},he.prototype.indexOf=function(e,n,a){return ke(this,e,n,a,!0)},he.prototype.lastIndexOf=function(e,n,a){return ke(this,e,n,a,!1)},he.prototype.write=function(e,n,a,t){if(void 0===n)t="utf8",a=this.length,n=0;else if(void 0===a&&"string"==typeof n)t=n,a=this.length,n=0;else{if(!isFinite(n))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");n|=0,isFinite(a)?(a|=0,void 0===t&&(t="utf8")):(t=a,a=void 0)}var i=this.length-n;if((void 0===a||a>i)&&(a=i),e.length>0&&(a<0||n<0)||n>this.length)throw new RangeError("Attempt to write outside buffer bounds");t||(t="utf8");for(var o=!1;;)switch(t){case"hex":return je(this,e,n,a);case"utf8":case"utf-8":return Ae(this,e,n,a);case"ascii":return Re(this,e,n,a);case"latin1":case"binary":return ze(this,e,n,a);case"base64":return Se(this,e,n,a);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Te(this,e,n,a);default:if(o)throw new TypeError("Unknown encoding: "+t);t=(""+t).toLowerCase(),o=!0}},he.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var qe=4096;function Ce(e,n,a){var t="";a=Math.min(e.length,a);for(var i=n;i<a;++i)t+=String.fromCharCode(127&e[i]);return t}function Be(e,n,a){var t="";a=Math.min(e.length,a);for(var i=n;i<a;++i)t+=String.fromCharCode(e[i]);return t}function Ue(e,n,a){var t=e.length;(!n||n<0)&&(n=0),(!a||a<0||a>t)&&(a=t);for(var i="",o=n;o<a;++o)i+=Ye(e[o]);return i}function Me(e,n,a){for(var t=e.slice(n,a),i="",o=0;o<t.length;o+=2)i+=String.fromCharCode(t[o]+256*t[o+1]);return i}function Pe(e,n,a){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+n>a)throw new RangeError("Trying to access beyond buffer length")}function Ne(e,n,a,t,i,o){if(!be(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(n>i||n<o)throw new RangeError('"value" argument is out of bounds');if(a+t>e.length)throw new RangeError("Index out of range")}function De(e,n,a,t){n<0&&(n=65535+n+1);for(var i=0,o=Math.min(e.length-a,2);i<o;++i)e[a+i]=(n&255<<8*(t?i:1-i))>>>8*(t?i:1-i)}function Ie(e,n,a,t){n<0&&(n=4294967295+n+1);for(var i=0,o=Math.min(e.length-a,4);i<o;++i)e[a+i]=n>>>8*(t?i:3-i)&255}function $e(e,n,a,t,i,o){if(a+t>e.length)throw new RangeError("Index out of range");if(a<0)throw new RangeError("Index out of range")}function Fe(e,n,a,t,i){return i||$e(e,0,a,4),ce(e,n,a,t,23,4),a+4}function Ze(e,n,a,t,i){return i||$e(e,0,a,8),ce(e,n,a,t,52,8),a+8}he.prototype.slice=function(e,n){var a,t=this.length;if((e=~~e)<0?(e+=t)<0&&(e=0):e>t&&(e=t),(n=void 0===n?t:~~n)<0?(n+=t)<0&&(n=0):n>t&&(n=t),n<e&&(n=e),he.TYPED_ARRAY_SUPPORT)(a=this.subarray(e,n)).__proto__=he.prototype;else{var i=n-e;a=new he(i,void 0);for(var o=0;o<i;++o)a[o]=this[o+e]}return a},he.prototype.readUIntLE=function(e,n,a){e|=0,n|=0,a||Pe(e,n,this.length);for(var t=this[e],i=1,o=0;++o<n&&(i*=256);)t+=this[e+o]*i;return t},he.prototype.readUIntBE=function(e,n,a){e|=0,n|=0,a||Pe(e,n,this.length);for(var t=this[e+--n],i=1;n>0&&(i*=256);)t+=this[e+--n]*i;return t},he.prototype.readUInt8=function(e,n){return n||Pe(e,1,this.length),this[e]},he.prototype.readUInt16LE=function(e,n){return n||Pe(e,2,this.length),this[e]|this[e+1]<<8},he.prototype.readUInt16BE=function(e,n){return n||Pe(e,2,this.length),this[e]<<8|this[e+1]},he.prototype.readUInt32LE=function(e,n){return n||Pe(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},he.prototype.readUInt32BE=function(e,n){return n||Pe(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},he.prototype.readIntLE=function(e,n,a){e|=0,n|=0,a||Pe(e,n,this.length);for(var t=this[e],i=1,o=0;++o<n&&(i*=256);)t+=this[e+o]*i;return t>=(i*=128)&&(t-=Math.pow(2,8*n)),t},he.prototype.readIntBE=function(e,n,a){e|=0,n|=0,a||Pe(e,n,this.length);for(var t=n,i=1,o=this[e+--t];t>0&&(i*=256);)o+=this[e+--t]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*n)),o},he.prototype.readInt8=function(e,n){return n||Pe(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},he.prototype.readInt16LE=function(e,n){n||Pe(e,2,this.length);var a=this[e]|this[e+1]<<8;return 32768&a?4294901760|a:a},he.prototype.readInt16BE=function(e,n){n||Pe(e,2,this.length);var a=this[e+1]|this[e]<<8;return 32768&a?4294901760|a:a},he.prototype.readInt32LE=function(e,n){return n||Pe(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},he.prototype.readInt32BE=function(e,n){return n||Pe(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},he.prototype.readFloatLE=function(e,n){return n||Pe(e,4,this.length),re(this,e,!0,23,4)},he.prototype.readFloatBE=function(e,n){return n||Pe(e,4,this.length),re(this,e,!1,23,4)},he.prototype.readDoubleLE=function(e,n){return n||Pe(e,8,this.length),re(this,e,!0,52,8)},he.prototype.readDoubleBE=function(e,n){return n||Pe(e,8,this.length),re(this,e,!1,52,8)},he.prototype.writeUIntLE=function(e,n,a,t){e=+e,n|=0,a|=0,t||Ne(this,e,n,a,Math.pow(2,8*a)-1,0);var i=1,o=0;for(this[n]=255&e;++o<a&&(i*=256);)this[n+o]=e/i&255;return n+a},he.prototype.writeUIntBE=function(e,n,a,t){e=+e,n|=0,a|=0,t||Ne(this,e,n,a,Math.pow(2,8*a)-1,0);var i=a-1,o=1;for(this[n+i]=255&e;--i>=0&&(o*=256);)this[n+i]=e/o&255;return n+a},he.prototype.writeUInt8=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,1,255,0),he.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[n]=255&e,n+1},he.prototype.writeUInt16LE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,2,65535,0),he.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):De(this,e,n,!0),n+2},he.prototype.writeUInt16BE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,2,65535,0),he.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):De(this,e,n,!1),n+2},he.prototype.writeUInt32LE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,4,4294967295,0),he.TYPED_ARRAY_SUPPORT?(this[n+3]=e>>>24,this[n+2]=e>>>16,this[n+1]=e>>>8,this[n]=255&e):Ie(this,e,n,!0),n+4},he.prototype.writeUInt32BE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,4,4294967295,0),he.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):Ie(this,e,n,!1),n+4},he.prototype.writeIntLE=function(e,n,a,t){if(e=+e,n|=0,!t){var i=Math.pow(2,8*a-1);Ne(this,e,n,a,i-1,-i)}var o=0,s=1,r=0;for(this[n]=255&e;++o<a&&(s*=256);)e<0&&0===r&&0!==this[n+o-1]&&(r=1),this[n+o]=(e/s>>0)-r&255;return n+a},he.prototype.writeIntBE=function(e,n,a,t){if(e=+e,n|=0,!t){var i=Math.pow(2,8*a-1);Ne(this,e,n,a,i-1,-i)}var o=a-1,s=1,r=0;for(this[n+o]=255&e;--o>=0&&(s*=256);)e<0&&0===r&&0!==this[n+o+1]&&(r=1),this[n+o]=(e/s>>0)-r&255;return n+a},he.prototype.writeInt8=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,1,127,-128),he.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[n]=255&e,n+1},he.prototype.writeInt16LE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,2,32767,-32768),he.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):De(this,e,n,!0),n+2},he.prototype.writeInt16BE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,2,32767,-32768),he.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):De(this,e,n,!1),n+2},he.prototype.writeInt32LE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,4,2147483647,-2147483648),he.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8,this[n+2]=e>>>16,this[n+3]=e>>>24):Ie(this,e,n,!0),n+4},he.prototype.writeInt32BE=function(e,n,a){return e=+e,n|=0,a||Ne(this,e,n,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),he.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):Ie(this,e,n,!1),n+4},he.prototype.writeFloatLE=function(e,n,a){return Fe(this,e,n,!0,a)},he.prototype.writeFloatBE=function(e,n,a){return Fe(this,e,n,!1,a)},he.prototype.writeDoubleLE=function(e,n,a){return Ze(this,e,n,!0,a)},he.prototype.writeDoubleBE=function(e,n,a){return Ze(this,e,n,!1,a)},he.prototype.copy=function(e,n,a,t){if(a||(a=0),t||0===t||(t=this.length),n>=e.length&&(n=e.length),n||(n=0),t>0&&t<a&&(t=a),t===a)return 0;if(0===e.length||0===this.length)return 0;if(n<0)throw new RangeError("targetStart out of bounds");if(a<0||a>=this.length)throw new RangeError("sourceStart out of bounds");if(t<0)throw new RangeError("sourceEnd out of bounds");t>this.length&&(t=this.length),e.length-n<t-a&&(t=e.length-n+a);var i,o=t-a;if(this===e&&a<n&&n<t)for(i=o-1;i>=0;--i)e[i+n]=this[i+a];else if(o<1e3||!he.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+n]=this[i+a];else Uint8Array.prototype.set.call(e,this.subarray(a,a+o),n);return o},he.prototype.fill=function(e,n,a,t){if("string"==typeof e){if("string"==typeof n?(t=n,n=0,a=this.length):"string"==typeof a&&(t=a,a=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==t&&"string"!=typeof t)throw new TypeError("encoding must be a string");if("string"==typeof t&&!he.isEncoding(t))throw new TypeError("Unknown encoding: "+t)}else"number"==typeof e&&(e&=255);if(n<0||this.length<n||this.length<a)throw new RangeError("Out of range index");if(a<=n)return this;var o;if(n>>>=0,a=void 0===a?this.length:a>>>0,e||(e=0),"number"==typeof e)for(o=n;o<a;++o)this[o]=e;else{var s=be(e)?e:We(new he(e,t).toString()),r=s.length;for(o=0;o<a-n;++o)this[o+n]=s[o%r]}return this};var He=/[^+\/0-9A-Za-z-_]/g;function Ye(e){return e<16?"0"+e.toString(16):e.toString(16)}function We(e,n){var a;n=n||1/0;for(var t=e.length,i=null,o=[],s=0;s<t;++s){if((a=e.charCodeAt(s))>55295&&a<57344){if(!i){if(a>56319){(n-=3)>-1&&o.push(239,191,189);continue}if(s+1===t){(n-=3)>-1&&o.push(239,191,189);continue}i=a;continue}if(a<56320){(n-=3)>-1&&o.push(239,191,189),i=a;continue}a=65536+(i-55296<<10|a-56320)}else i&&(n-=3)>-1&&o.push(239,191,189);if(i=null,a<128){if((n-=1)<0)break;o.push(a)}else if(a<2048){if((n-=2)<0)break;o.push(a>>6|192,63&a|128)}else if(a<65536){if((n-=3)<0)break;o.push(a>>12|224,a>>6&63|128,63&a|128)}else{if(!(a<1114112))throw new Error("Invalid code point");if((n-=4)<0)break;o.push(a>>18|240,a>>12&63|128,a>>6&63|128,63&a|128)}}return o}function Ve(e){return function(e){var n,a,t,i,o,s;te||ie();var r=e.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");o="="===e[r-2]?2:"="===e[r-1]?1:0,s=new ae(3*r/4-o),t=o>0?r-4:r;var c=0;for(n=0,a=0;n<t;n+=4,a+=3)i=ne[e.charCodeAt(n)]<<18|ne[e.charCodeAt(n+1)]<<12|ne[e.charCodeAt(n+2)]<<6|ne[e.charCodeAt(n+3)],s[c++]=i>>16&255,s[c++]=i>>8&255,s[c++]=255&i;return 2===o?(i=ne[e.charCodeAt(n)]<<2|ne[e.charCodeAt(n+1)]>>4,s[c++]=255&i):1===o&&(i=ne[e.charCodeAt(n)]<<10|ne[e.charCodeAt(n+1)]<<4|ne[e.charCodeAt(n+2)]>>2,s[c++]=i>>8&255,s[c++]=255&i),s}(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(He,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Ke(e,n,a,t){for(var i=0;i<t&&!(i+a>=n.length||i>=e.length);++i)n[i+a]=e[i];return i}function Ge(e){return null!=e&&(!!e._isBuffer||Xe(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&Xe(e.slice(0,0))}(e))}function Xe(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}var Je,Qe,en=ln(w.fetch)&&ln(w.ReadableStream);function nn(e){Qe||(Qe=new w.XMLHttpRequest).open("GET",w.location.host?"/":"https://example.com");try{return Qe.responseType=e,Qe.responseType===e}catch(e){return!1}}var an=void 0!==w.ArrayBuffer,tn=an&&ln(w.ArrayBuffer.prototype.slice),on=an&&nn("arraybuffer"),sn=!en&&tn&&nn("ms-stream"),rn=!en&&an&&nn("moz-chunked-arraybuffer"),cn=ln(Qe.overrideMimeType),pn=ln(w.VBArray);function ln(e){return"function"==typeof e}Qe=null;var un="function"==typeof Object.create?function(e,n){e.super_=n,e.prototype=Object.create(n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,n){e.super_=n;var a=function(){};a.prototype=n.prototype,e.prototype=new a,e.prototype.constructor=e},dn=/%[sdj%]/g;function hn(e){if(!Sn(e)){for(var n=[],a=0;a<arguments.length;a++)n.push(gn(arguments[a]));return n.join(" ")}a=1;for(var t=arguments,i=t.length,o=String(e).replace(dn,(function(e){if("%%"===e)return"%";if(a>=i)return e;switch(e){case"%s":return String(t[a++]);case"%d":return Number(t[a++]);case"%j":try{return JSON.stringify(t[a++])}catch(e){return"[Circular]"}default:return e}})),s=t[a];a<i;s=t[++a])An(s)||!Ln(s)?o+=" "+s:o+=" "+gn(s);return o}function mn(e,n){if(Tn(w.process))return function(){return mn(e,n).apply(this,arguments)};if(!0===H.noDeprecation)return e;var a=!1;return function(){if(!a){if(H.throwDeprecation)throw new Error(n);H.traceDeprecation?console.trace(n):console.error(n),a=!0}return e.apply(this,arguments)}}var fn,vn={};function xn(e){return Tn(fn)&&(fn=H.env.NODE_DEBUG||""),e=e.toUpperCase(),vn[e]||(new RegExp("\\b"+e+"\\b","i").test(fn)?vn[e]=function(){var n=hn.apply(null,arguments);console.error("%s %d: %s",e,0,n)}:vn[e]=function(){}),vn[e]}function gn(e,n){var a={seen:[],stylize:wn};return arguments.length>=3&&(a.depth=arguments[2]),arguments.length>=4&&(a.colors=arguments[3]),jn(n)?a.showHidden=n:n&&In(a,n),Tn(a.showHidden)&&(a.showHidden=!1),Tn(a.depth)&&(a.depth=2),Tn(a.colors)&&(a.colors=!1),Tn(a.customInspect)&&(a.customInspect=!0),a.colors&&(a.stylize=bn),_n(a,e,a.depth)}function bn(e,n){var a=gn.styles[n];return a?"["+gn.colors[a][0]+"m"+e+"["+gn.colors[a][1]+"m":e}function wn(e,n){return e}function _n(e,n,a){if(e.customInspect&&n&&Bn(n.inspect)&&n.inspect!==gn&&(!n.constructor||n.constructor.prototype!==n)){var t=n.inspect(a,e);return Sn(t)||(t=_n(e,t,a)),t}var i=function(e,n){if(Tn(n))return e.stylize("undefined","undefined");if(Sn(n)){var a="'"+JSON.stringify(n).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(a,"string")}return zn(n)?e.stylize(""+n,"number"):jn(n)?e.stylize(""+n,"boolean"):An(n)?e.stylize("null","null"):void 0}(e,n);if(i)return i;var o=Object.keys(n),s=function(e){var n={};return e.forEach((function(e,a){n[e]=!0})),n}(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(n)),Cn(n)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return yn(n);if(0===o.length){if(Bn(n)){var r=n.name?": "+n.name:"";return e.stylize("[Function"+r+"]","special")}if(On(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(qn(n))return e.stylize(Date.prototype.toString.call(n),"date");if(Cn(n))return yn(n)}var c,p="",l=!1,u=["{","}"];return En(n)&&(l=!0,u=["[","]"]),Bn(n)&&(p=" [Function"+(n.name?": "+n.name:"")+"]"),On(n)&&(p=" "+RegExp.prototype.toString.call(n)),qn(n)&&(p=" "+Date.prototype.toUTCString.call(n)),Cn(n)&&(p=" "+yn(n)),0!==o.length||l&&0!=n.length?a<0?On(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),c=l?function(e,n,a,t,i){for(var o=[],s=0,r=n.length;s<r;++s)$n(n,String(s))?o.push(kn(e,n,a,t,String(s),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(kn(e,n,a,t,i,!0))})),o}(e,n,a,s,o):o.map((function(t){return kn(e,n,a,s,t,l)})),e.seen.pop(),function(e,n,a){return e.reduce((function(e,n){return n.indexOf("\n"),e+n.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?a[0]+(""===n?"":n+"\n ")+" "+e.join(",\n  ")+" "+a[1]:a[0]+n+" "+e.join(", ")+" "+a[1]}(c,p,u)):u[0]+p+u[1]}function yn(e){return"["+Error.prototype.toString.call(e)+"]"}function kn(e,n,a,t,i,o){var s,r,c;if((c=Object.getOwnPropertyDescriptor(n,i)||{value:n[i]}).get?r=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(r=e.stylize("[Setter]","special")),$n(t,i)||(s="["+i+"]"),r||(e.seen.indexOf(c.value)<0?(r=An(a)?_n(e,c.value,null):_n(e,c.value,a-1)).indexOf("\n")>-1&&(r=o?r.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+r.split("\n").map((function(e){return"   "+e})).join("\n")):r=e.stylize("[Circular]","special")),Tn(s)){if(o&&i.match(/^\d+$/))return r;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+r}function En(e){return Array.isArray(e)}function jn(e){return"boolean"==typeof e}function An(e){return null===e}function Rn(e){return null==e}function zn(e){return"number"==typeof e}function Sn(e){return"string"==typeof e}function Tn(e){return void 0===e}function On(e){return Ln(e)&&"[object RegExp]"===Mn(e)}function Ln(e){return"object"==typeof e&&null!==e}function qn(e){return Ln(e)&&"[object Date]"===Mn(e)}function Cn(e){return Ln(e)&&("[object Error]"===Mn(e)||e instanceof Error)}function Bn(e){return"function"==typeof e}function Un(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e}function Mn(e){return Object.prototype.toString.call(e)}function Pn(e){return e<10?"0"+e.toString(10):e.toString(10)}gn.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},gn.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var Nn=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function Dn(){var e=new Date,n=[Pn(e.getHours()),Pn(e.getMinutes()),Pn(e.getSeconds())].join(":");return[e.getDate(),Nn[e.getMonth()],n].join(" ")}function In(e,n){if(!n||!Ln(n))return e;for(var a=Object.keys(n),t=a.length;t--;)e[a[t]]=n[a[t]];return e}function $n(e,n){return Object.prototype.hasOwnProperty.call(e,n)}var Fn={inherits:un,_extend:In,log:function(){console.log("%s - %s",Dn(),hn.apply(null,arguments))},isBuffer:function(e){return he.isBuffer(e)},isPrimitive:Un,isFunction:Bn,isError:Cn,isDate:qn,isObject:Ln,isRegExp:On,isUndefined:Tn,isSymbol:function(e){return"symbol"==typeof e},isString:Sn,isNumber:zn,isNullOrUndefined:Rn,isNull:An,isBoolean:jn,isArray:En,inspect:gn,deprecate:mn,format:hn,debuglog:xn};function Zn(){}function Hn(){Hn.init.call(this)}function Yn(e){return void 0===e._maxListeners?Hn.defaultMaxListeners:e._maxListeners}function Wn(e,n,a){if(n)e.call(a);else for(var t=e.length,i=na(e,t),o=0;o<t;++o)i[o].call(a)}function Vn(e,n,a,t){if(n)e.call(a,t);else for(var i=e.length,o=na(e,i),s=0;s<i;++s)o[s].call(a,t)}function Kn(e,n,a,t,i){if(n)e.call(a,t,i);else for(var o=e.length,s=na(e,o),r=0;r<o;++r)s[r].call(a,t,i)}function Gn(e,n,a,t,i,o){if(n)e.call(a,t,i,o);else for(var s=e.length,r=na(e,s),c=0;c<s;++c)r[c].call(a,t,i,o)}function Xn(e,n,a,t){if(n)e.apply(a,t);else for(var i=e.length,o=na(e,i),s=0;s<i;++s)o[s].apply(a,t)}function Jn(e,n,a,t){var i,o,s,r;if("function"!=typeof a)throw new TypeError('"listener" argument must be a function');if((o=e._events)?(o.newListener&&(e.emit("newListener",n,a.listener?a.listener:a),o=e._events),s=o[n]):(o=e._events=new Zn,e._eventsCount=0),s){if("function"==typeof s?s=o[n]=t?[a,s]:[s,a]:t?s.unshift(a):s.push(a),!s.warned&&(i=Yn(e))&&i>0&&s.length>i){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+n+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=n,c.count=s.length,r=c,"function"==typeof console.warn?console.warn(r):console.log(r)}}else s=o[n]=a,++e._eventsCount;return e}function Qn(e,n,a){var t=!1;function i(){e.removeListener(n,i),t||(t=!0,a.apply(e,arguments))}return i.listener=a,i}function ea(e){var n=this._events;if(n){var a=n[e];if("function"==typeof a)return 1;if(a)return a.length}return 0}function na(e,n){for(var a=new Array(n);n--;)a[n]=e[n];return a}function aa(){this.head=null,this.tail=null,this.length=0}Zn.prototype=Object.create(null),Hn.EventEmitter=Hn,Hn.usingDomains=!1,Hn.prototype.domain=void 0,Hn.prototype._events=void 0,Hn.prototype._maxListeners=void 0,Hn.defaultMaxListeners=10,Hn.init=function(){this.domain=null,Hn.usingDomains&&(void 0).active,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new Zn,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},Hn.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},Hn.prototype.getMaxListeners=function(){return Yn(this)},Hn.prototype.emit=function(e){var n,a,t,i,o,s,r,c="error"===e;if(s=this._events)c=c&&null==s.error;else if(!c)return!1;if(r=this.domain,c){if(n=arguments[1],!r){if(n instanceof Error)throw n;var p=new Error('Uncaught, unspecified "error" event. ('+n+")");throw p.context=n,p}return n||(n=new Error('Uncaught, unspecified "error" event')),n.domainEmitter=this,n.domain=r,n.domainThrown=!1,r.emit("error",n),!1}if(!(a=s[e]))return!1;var l="function"==typeof a;switch(t=arguments.length){case 1:Wn(a,l,this);break;case 2:Vn(a,l,this,arguments[1]);break;case 3:Kn(a,l,this,arguments[1],arguments[2]);break;case 4:Gn(a,l,this,arguments[1],arguments[2],arguments[3]);break;default:for(i=new Array(t-1),o=1;o<t;o++)i[o-1]=arguments[o];Xn(a,l,this,i)}return!0},Hn.prototype.addListener=function(e,n){return Jn(this,e,n,!1)},Hn.prototype.on=Hn.prototype.addListener,Hn.prototype.prependListener=function(e,n){return Jn(this,e,n,!0)},Hn.prototype.once=function(e,n){if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');return this.on(e,Qn(this,e,n)),this},Hn.prototype.prependOnceListener=function(e,n){if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,Qn(this,e,n)),this},Hn.prototype.removeListener=function(e,n){var a,t,i,o,s;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');if(!(t=this._events))return this;if(!(a=t[e]))return this;if(a===n||a.listener&&a.listener===n)0==--this._eventsCount?this._events=new Zn:(delete t[e],t.removeListener&&this.emit("removeListener",e,a.listener||n));else if("function"!=typeof a){for(i=-1,o=a.length;o-- >0;)if(a[o]===n||a[o].listener&&a[o].listener===n){s=a[o].listener,i=o;break}if(i<0)return this;if(1===a.length){if(a[0]=void 0,0==--this._eventsCount)return this._events=new Zn,this;delete t[e]}else!function(e,n){for(var a=n,t=a+1,i=e.length;t<i;a+=1,t+=1)e[a]=e[t];e.pop()}(a,i);t.removeListener&&this.emit("removeListener",e,s||n)}return this},Hn.prototype.removeAllListeners=function(e){var n,a;if(!(a=this._events))return this;if(!a.removeListener)return 0===arguments.length?(this._events=new Zn,this._eventsCount=0):a[e]&&(0==--this._eventsCount?this._events=new Zn:delete a[e]),this;if(0===arguments.length){for(var t,i=Object.keys(a),o=0;o<i.length;++o)"removeListener"!==(t=i[o])&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events=new Zn,this._eventsCount=0,this}if("function"==typeof(n=a[e]))this.removeListener(e,n);else if(n)do{this.removeListener(e,n[n.length-1])}while(n[0]);return this},Hn.prototype.listeners=function(e){var n,a=this._events;return a&&(n=a[e])?"function"==typeof n?[n.listener||n]:function(e){for(var n=new Array(e.length),a=0;a<n.length;++a)n[a]=e[a].listener||e[a];return n}(n):[]},Hn.listenerCount=function(e,n){return"function"==typeof e.listenerCount?e.listenerCount(n):ea.call(e,n)},Hn.prototype.listenerCount=ea,Hn.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]},aa.prototype.push=function(e){var n={data:e,next:null};this.length>0?this.tail.next=n:this.head=n,this.tail=n,++this.length},aa.prototype.unshift=function(e){var n={data:e,next:this.head};0===this.length&&(this.tail=n),this.head=n,++this.length},aa.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},aa.prototype.clear=function(){this.head=this.tail=null,this.length=0},aa.prototype.join=function(e){if(0===this.length)return"";for(var n=this.head,a=""+n.data;n=n.next;)a+=e+n.data;return a},aa.prototype.concat=function(e){if(0===this.length)return he.alloc(0);if(1===this.length)return this.head.data;for(var n=he.allocUnsafe(e>>>0),a=this.head,t=0;a;)a.data.copy(n,t),t+=a.data.length,a=a.next;return n};var ta=he.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function ia(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),function(e){if(e&&!ta(e))throw new Error("Unknown encoding: "+e)}(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=sa;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=ra;break;default:return void(this.write=oa)}this.charBuffer=new he(6),this.charReceived=0,this.charLength=0}function oa(e){return e.toString(this.encoding)}function sa(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function ra(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}ia.prototype.write=function(e){for(var n="";this.charLength;){var a=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,a),this.charReceived+=a,this.charReceived<this.charLength)return"";if(e=e.slice(a,e.length),!((t=(n=this.charBuffer.slice(0,this.charLength).toString(this.encoding)).charCodeAt(n.length-1))>=55296&&t<=56319)){if(this.charReceived=this.charLength=0,0===e.length)return n;break}this.charLength+=this.surrogateSize,n=""}this.detectIncompleteChar(e);var t,i=e.length;if(this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,i),i-=this.charReceived),i=(n+=e.toString(this.encoding,0,i)).length-1,(t=n.charCodeAt(i))>=55296&&t<=56319){var o=this.surrogateSize;return this.charLength+=o,this.charReceived+=o,this.charBuffer.copy(this.charBuffer,o,0,o),e.copy(this.charBuffer,0,0,o),n.substring(0,i)}return n},ia.prototype.detectIncompleteChar=function(e){for(var n=e.length>=3?3:e.length;n>0;n--){var a=e[e.length-n];if(1==n&&a>>5==6){this.charLength=2;break}if(n<=2&&a>>4==14){this.charLength=3;break}if(n<=3&&a>>3==30){this.charLength=4;break}}this.charReceived=n},ia.prototype.end=function(e){var n="";if(e&&e.length&&(n=this.write(e)),this.charReceived){var a=this.charReceived,t=this.charBuffer,i=this.encoding;n+=t.slice(0,a).toString(i)}return n},la.ReadableState=pa;var ca=xn("stream");function pa(e,n){e=e||{},this.objectMode=!!e.objectMode,n instanceof Pa&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var a=e.highWaterMark,t=this.objectMode?16:16384;this.highWaterMark=a||0===a?a:t,this.highWaterMark=~~this.highWaterMark,this.buffer=new aa,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(this.decoder=new ia(e.encoding),this.encoding=e.encoding)}function la(e){if(!(this instanceof la))return new la(e);this._readableState=new pa(e,this),this.readable=!0,e&&"function"==typeof e.read&&(this._read=e.read),Hn.call(this)}function ua(e,n,a,t,i){var o=function(e,n){var a=null;return he.isBuffer(n)||"string"==typeof n||null==n||e.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a}(n,a);if(o)e.emit("error",o);else if(null===a)n.reading=!1,function(e,n){if(!n.ended){if(n.decoder){var a=n.decoder.end();a&&a.length&&(n.buffer.push(a),n.length+=n.objectMode?1:a.length)}n.ended=!0,ma(e)}}(e,n);else if(n.objectMode||a&&a.length>0)if(n.ended&&!i){var s=new Error("stream.push() after EOF");e.emit("error",s)}else if(n.endEmitted&&i){var r=new Error("stream.unshift() after end event");e.emit("error",r)}else{var c;!n.decoder||i||t||(a=n.decoder.write(a),c=!n.objectMode&&0===a.length),i||(n.reading=!1),c||(n.flowing&&0===n.length&&!n.sync?(e.emit("data",a),e.read(0)):(n.length+=n.objectMode?1:a.length,i?n.buffer.unshift(a):n.buffer.push(a),n.needReadable&&ma(e))),function(e,n){n.readingMore||(n.readingMore=!0,L(va,e,n))}(e,n)}else i||(n.reading=!1);return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(n)}un(la,Hn),la.prototype.push=function(e,n){var a=this._readableState;return a.objectMode||"string"!=typeof e||(n=n||a.defaultEncoding)!==a.encoding&&(e=he.from(e,n),n=""),ua(this,a,e,n,!1)},la.prototype.unshift=function(e){return ua(this,this._readableState,e,"",!0)},la.prototype.isPaused=function(){return!1===this._readableState.flowing},la.prototype.setEncoding=function(e){return this._readableState.decoder=new ia(e),this._readableState.encoding=e,this};var da=8388608;function ha(e,n){return e<=0||0===n.length&&n.ended?0:n.objectMode?1:e!=e?n.flowing&&n.length?n.buffer.head.data.length:n.length:(e>n.highWaterMark&&(n.highWaterMark=function(e){return e>=da?e=da:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=n.length?e:n.ended?n.length:(n.needReadable=!0,0))}function ma(e){var n=e._readableState;n.needReadable=!1,n.emittedReadable||(ca("emitReadable",n.flowing),n.emittedReadable=!0,n.sync?L(fa,e):fa(e))}function fa(e){ca("emit readable"),e.emit("readable"),ba(e)}function va(e,n){for(var a=n.length;!n.reading&&!n.flowing&&!n.ended&&n.length<n.highWaterMark&&(ca("maybeReadMore read 0"),e.read(0),a!==n.length);)a=n.length;n.readingMore=!1}function xa(e){ca("readable nexttick read 0"),e.read(0)}function ga(e,n){n.reading||(ca("resume read 0"),e.read(0)),n.resumeScheduled=!1,n.awaitDrain=0,e.emit("resume"),ba(e),n.flowing&&!n.reading&&e.read(0)}function ba(e){var n=e._readableState;for(ca("flow",n.flowing);n.flowing&&null!==e.read(););}function wa(e,n){return 0===n.length?null:(n.objectMode?a=n.buffer.shift():!e||e>=n.length?(a=n.decoder?n.buffer.join(""):1===n.buffer.length?n.buffer.head.data:n.buffer.concat(n.length),n.buffer.clear()):a=function(e,n,a){var t;return e<n.head.data.length?(t=n.head.data.slice(0,e),n.head.data=n.head.data.slice(e)):t=e===n.head.data.length?n.shift():a?function(e,n){var a=n.head,t=1,i=a.data;for(e-=i.length;a=a.next;){var o=a.data,s=e>o.length?o.length:e;if(s===o.length?i+=o:i+=o.slice(0,e),0==(e-=s)){s===o.length?(++t,a.next?n.head=a.next:n.head=n.tail=null):(n.head=a,a.data=o.slice(s));break}++t}return n.length-=t,i}(e,n):function(e,n){var a=he.allocUnsafe(e),t=n.head,i=1;for(t.data.copy(a),e-=t.data.length;t=t.next;){var o=t.data,s=e>o.length?o.length:e;if(o.copy(a,a.length-e,0,s),0==(e-=s)){s===o.length?(++i,t.next?n.head=t.next:n.head=n.tail=null):(n.head=t,t.data=o.slice(s));break}++i}return n.length-=i,a}(e,n),t}(e,n.buffer,n.decoder),a);var a}function _a(e){var n=e._readableState;if(n.length>0)throw new Error('"endReadable()" called on non-empty stream');n.endEmitted||(n.ended=!0,L(ya,n,e))}function ya(e,n){e.endEmitted||0!==e.length||(e.endEmitted=!0,n.readable=!1,n.emit("end"))}function ka(e,n){for(var a=0,t=e.length;a<t;a++)if(e[a]===n)return a;return-1}function Ea(){}function ja(e,n,a){this.chunk=e,this.encoding=n,this.callback=a,this.next=null}function Aa(e,n){Object.defineProperty(this,"buffer",{get:mn((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")}),e=e||{},this.objectMode=!!e.objectMode,n instanceof Pa&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var a=e.highWaterMark,t=this.objectMode?16:16384;this.highWaterMark=a||0===a?a:t,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var i=!1===e.decodeStrings;this.decodeStrings=!i,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,n){var a=e._writableState,t=a.sync,i=a.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(a),n)!function(e,n,a,t,i){--n.pendingcb,a?L(i,t):i(t),e._writableState.errorEmitted=!0,e.emit("error",t)}(e,a,t,n,i);else{var o=Oa(a);o||a.corked||a.bufferProcessing||!a.bufferedRequest||Ta(e,a),t?L(Sa,e,a,o,i):Sa(e,a,o,i)}}(n,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new Ca(this)}function Ra(e){if(!(this instanceof Ra||this instanceof Pa))return new Ra(e);this._writableState=new Aa(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev)),Hn.call(this)}function za(e,n,a,t,i,o,s){n.writelen=t,n.writecb=s,n.writing=!0,n.sync=!0,a?e._writev(i,n.onwrite):e._write(i,o,n.onwrite),n.sync=!1}function Sa(e,n,a,t){a||function(e,n){0===n.length&&n.needDrain&&(n.needDrain=!1,e.emit("drain"))}(e,n),n.pendingcb--,t(),qa(e,n)}function Ta(e,n){n.bufferProcessing=!0;var a=n.bufferedRequest;if(e._writev&&a&&a.next){var t=n.bufferedRequestCount,i=new Array(t),o=n.corkedRequestsFree;o.entry=a;for(var s=0;a;)i[s]=a,a=a.next,s+=1;za(e,n,!0,n.length,i,"",o.finish),n.pendingcb++,n.lastBufferedRequest=null,o.next?(n.corkedRequestsFree=o.next,o.next=null):n.corkedRequestsFree=new Ca(n)}else{for(;a;){var r=a.chunk,c=a.encoding,p=a.callback;if(za(e,n,!1,n.objectMode?1:r.length,r,c,p),a=a.next,n.writing)break}null===a&&(n.lastBufferedRequest=null)}n.bufferedRequestCount=0,n.bufferedRequest=a,n.bufferProcessing=!1}function Oa(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function La(e,n){n.prefinished||(n.prefinished=!0,e.emit("prefinish"))}function qa(e,n){var a=Oa(n);return a&&(0===n.pendingcb?(La(e,n),n.finished=!0,e.emit("finish")):La(e,n)),a}function Ca(e){var n=this;this.next=null,this.entry=null,this.finish=function(a){var t=n.entry;for(n.entry=null;t;){var i=t.callback;e.pendingcb--,i(a),t=t.next}e.corkedRequestsFree?e.corkedRequestsFree.next=n:e.corkedRequestsFree=n}}la.prototype.read=function(e){ca("read",e),e=parseInt(e,10);var n=this._readableState,a=e;if(0!==e&&(n.emittedReadable=!1),0===e&&n.needReadable&&(n.length>=n.highWaterMark||n.ended))return ca("read: emitReadable",n.length,n.ended),0===n.length&&n.ended?_a(this):ma(this),null;if(0===(e=ha(e,n))&&n.ended)return 0===n.length&&_a(this),null;var t,i=n.needReadable;return ca("need readable",i),(0===n.length||n.length-e<n.highWaterMark)&&ca("length less than watermark",i=!0),n.ended||n.reading?ca("reading or ended",i=!1):i&&(ca("do read"),n.reading=!0,n.sync=!0,0===n.length&&(n.needReadable=!0),this._read(n.highWaterMark),n.sync=!1,n.reading||(e=ha(a,n))),null===(t=e>0?wa(e,n):null)?(n.needReadable=!0,e=0):n.length-=e,0===n.length&&(n.ended||(n.needReadable=!0),a!==e&&n.ended&&_a(this)),null!==t&&this.emit("data",t),t},la.prototype._read=function(e){this.emit("error",new Error("not implemented"))},la.prototype.pipe=function(e,n){var a=this,t=this._readableState;switch(t.pipesCount){case 0:t.pipes=e;break;case 1:t.pipes=[t.pipes,e];break;default:t.pipes.push(e)}t.pipesCount+=1,ca("pipe count=%d opts=%j",t.pipesCount,n);var i=n&&!1===n.end?p:s;function o(e){ca("onunpipe"),e===a&&p()}function s(){ca("onend"),e.end()}t.endEmitted?L(i):a.once("end",i),e.on("unpipe",o);var r=function(e){return function(){var n=e._readableState;ca("pipeOnDrain",n.awaitDrain),n.awaitDrain&&n.awaitDrain--,0===n.awaitDrain&&e.listeners("data").length&&(n.flowing=!0,ba(e))}}(a);e.on("drain",r);var c=!1;function p(){ca("cleanup"),e.removeListener("close",h),e.removeListener("finish",m),e.removeListener("drain",r),e.removeListener("error",d),e.removeListener("unpipe",o),a.removeListener("end",s),a.removeListener("end",p),a.removeListener("data",u),c=!0,!t.awaitDrain||e._writableState&&!e._writableState.needDrain||r()}var l=!1;function u(n){ca("ondata"),l=!1,!1!==e.write(n)||l||((1===t.pipesCount&&t.pipes===e||t.pipesCount>1&&-1!==ka(t.pipes,e))&&!c&&(ca("false write response, pause",a._readableState.awaitDrain),a._readableState.awaitDrain++,l=!0),a.pause())}function d(n){ca("onerror",n),f(),e.removeListener("error",d),0===("error",e.listeners("error").length)&&e.emit("error",n)}function h(){e.removeListener("finish",m),f()}function m(){ca("onfinish"),e.removeListener("close",h),f()}function f(){ca("unpipe"),a.unpipe(e)}return a.on("data",u),function(e,n,a){if("function"==typeof e.prependListener)return e.prependListener(n,a);e._events&&e._events[n]?Array.isArray(e._events[n])?e._events[n].unshift(a):e._events[n]=[a,e._events[n]]:e.on(n,a)}(e,"error",d),e.once("close",h),e.once("finish",m),e.emit("pipe",a),t.flowing||(ca("pipe resume"),a.resume()),e},la.prototype.unpipe=function(e){var n=this._readableState;if(0===n.pipesCount)return this;if(1===n.pipesCount)return e&&e!==n.pipes||(e||(e=n.pipes),n.pipes=null,n.pipesCount=0,n.flowing=!1,e&&e.emit("unpipe",this)),this;if(!e){var a=n.pipes,t=n.pipesCount;n.pipes=null,n.pipesCount=0,n.flowing=!1;for(var i=0;i<t;i++)a[i].emit("unpipe",this);return this}var o=ka(n.pipes,e);return-1===o||(n.pipes.splice(o,1),n.pipesCount-=1,1===n.pipesCount&&(n.pipes=n.pipes[0]),e.emit("unpipe",this)),this},la.prototype.on=function(e,n){var a=Hn.prototype.on.call(this,e,n);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var t=this._readableState;t.endEmitted||t.readableListening||(t.readableListening=t.needReadable=!0,t.emittedReadable=!1,t.reading?t.length&&ma(this):L(xa,this))}return a},la.prototype.addListener=la.prototype.on,la.prototype.resume=function(){var e=this._readableState;return e.flowing||(ca("resume"),e.flowing=!0,function(e,n){n.resumeScheduled||(n.resumeScheduled=!0,L(ga,e,n))}(this,e)),this},la.prototype.pause=function(){return ca("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(ca("pause"),this._readableState.flowing=!1,this.emit("pause")),this},la.prototype.wrap=function(e){var n=this._readableState,a=!1,t=this;for(var i in e.on("end",(function(){if(ca("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){ca("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i||(n.objectMode||i&&i.length)&&(t.push(i)||(a=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(n){return function(){return e[n].apply(e,arguments)}}(i));return function(e,n){for(var a=0,t=e.length;a<t;a++)n(e[a])}(["error","close","destroy","pause","resume"],(function(n){e.on(n,t.emit.bind(t,n))})),t._read=function(n){ca("wrapped _read",n),a&&(a=!1,e.resume())},t},la._fromList=wa,Ra.WritableState=Aa,un(Ra,Hn),Aa.prototype.getBuffer=function(){for(var e=this.bufferedRequest,n=[];e;)n.push(e),e=e.next;return n},Ra.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},Ra.prototype.write=function(e,n,a){var t=this._writableState,i=!1;return"function"==typeof n&&(a=n,n=null),he.isBuffer(e)?n="buffer":n||(n=t.defaultEncoding),"function"!=typeof a&&(a=Ea),t.ended?function(e,n){var a=new Error("write after end");e.emit("error",a),L(n,a)}(this,a):function(e,n,a,t){var i=!0,o=!1;return null===a?o=new TypeError("May not write null values to stream"):he.isBuffer(a)||"string"==typeof a||void 0===a||n.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(e.emit("error",o),L(t,o),i=!1),i}(this,t,e,a)&&(t.pendingcb++,i=function(e,n,a,t,i){a=function(e,n,a){return e.objectMode||!1===e.decodeStrings||"string"!=typeof n||(n=he.from(n,a)),n}(n,a,t),he.isBuffer(a)&&(t="buffer");var o=n.objectMode?1:a.length;n.length+=o;var s=n.length<n.highWaterMark;if(s||(n.needDrain=!0),n.writing||n.corked){var r=n.lastBufferedRequest;n.lastBufferedRequest=new ja(a,t,i),r?r.next=n.lastBufferedRequest:n.bufferedRequest=n.lastBufferedRequest,n.bufferedRequestCount+=1}else za(e,n,!1,o,a,t,i);return s}(this,t,e,n,a)),i},Ra.prototype.cork=function(){this._writableState.corked++},Ra.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||Ta(this,e))},Ra.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Ra.prototype._write=function(e,n,a){a(new Error("not implemented"))},Ra.prototype._writev=null,Ra.prototype.end=function(e,n,a){var t=this._writableState;"function"==typeof e?(a=e,e=null,n=null):"function"==typeof n&&(a=n,n=null),null!=e&&this.write(e,n),t.corked&&(t.corked=1,this.uncork()),t.ending||t.finished||function(e,n,a){n.ending=!0,qa(e,n),a&&(n.finished?L(a):e.once("finish",a)),n.ended=!0,e.writable=!1}(this,t,a)},un(Pa,la);for(var Ba=Object.keys(Ra.prototype),Ua=0;Ua<Ba.length;Ua++){var Ma=Ba[Ua];Pa.prototype[Ma]||(Pa.prototype[Ma]=Ra.prototype[Ma])}function Pa(e){if(!(this instanceof Pa))return new Pa(e);la.call(this,e),Ra.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",Na)}function Na(){this.allowHalfOpen||this._writableState.ended||L(Da,this)}function Da(e){e.end()}function Ia(e){this.afterTransform=function(n,a){return function(e,n,a){var t=e._transformState;t.transforming=!1;var i=t.writecb;if(!i)return e.emit("error",new Error("no writecb in Transform class"));t.writechunk=null,t.writecb=null,null!=a&&e.push(a),i(n);var o=e._readableState;o.reading=!1,(o.needReadable||o.length<o.highWaterMark)&&e._read(o.highWaterMark)}(e,n,a)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function $a(e){if(!(this instanceof $a))return new $a(e);Pa.call(this,e),this._transformState=new Ia(this);var n=this;this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.once("prefinish",(function(){"function"==typeof this._flush?this._flush((function(e){Fa(n,e)})):Fa(n)}))}function Fa(e,n){if(n)return e.emit("error",n);var a=e._writableState,t=e._transformState;if(a.length)throw new Error("Calling transform done when ws.length != 0");if(t.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}function Za(e){if(!(this instanceof Za))return new Za(e);$a.call(this,e)}function Ha(){Hn.call(this)}un($a,Pa),$a.prototype.push=function(e,n){return this._transformState.needTransform=!1,Pa.prototype.push.call(this,e,n)},$a.prototype._transform=function(e,n,a){throw new Error("Not implemented")},$a.prototype._write=function(e,n,a){var t=this._transformState;if(t.writecb=a,t.writechunk=e,t.writeencoding=n,!t.transforming){var i=this._readableState;(t.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},$a.prototype._read=function(e){var n=this._transformState;null!==n.writechunk&&n.writecb&&!n.transforming?(n.transforming=!0,this._transform(n.writechunk,n.writeencoding,n.afterTransform)):n.needTransform=!0},un(Za,$a),Za.prototype._transform=function(e,n,a){a(null,e)},un(Ha,Hn),Ha.Readable=la,Ha.Writable=Ra,Ha.Duplex=Pa,Ha.Transform=$a,Ha.PassThrough=Za,Ha.Stream=Ha,Ha.prototype.pipe=function(e,n){var a=this;function t(n){e.writable&&!1===e.write(n)&&a.pause&&a.pause()}function i(){a.readable&&a.resume&&a.resume()}a.on("data",t),e.on("drain",i),e._isStdio||n&&!1===n.end||(a.on("end",s),a.on("close",r));var o=!1;function s(){o||(o=!0,e.end())}function r(){o||(o=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(p(),0===Hn.listenerCount(this,"error"))throw e}function p(){a.removeListener("data",t),e.removeListener("drain",i),a.removeListener("end",s),a.removeListener("close",r),a.removeListener("error",c),e.removeListener("error",c),a.removeListener("end",p),a.removeListener("close",p),e.removeListener("close",p)}return a.on("error",c),e.on("error",c),a.on("end",p),a.on("close",p),e.on("close",p),e.emit("pipe",a),e};function Ya(e,n,a){var t,i=this;if(la.call(i),i._mode=a,i.headers={},i.rawHeaders=[],i.trailers={},i.rawTrailers=[],i.on("end",(function(){H.nextTick((function(){i.emit("close")}))})),"fetch"===a){i._fetchResponse=n,i.url=n.url,i.statusCode=n.status,i.statusMessage=n.statusText;for(var o,s,r=n.headers[Symbol.iterator]();o=(s=r.next()).value,!s.done;)i.headers[o[0].toLowerCase()]=o[1],i.rawHeaders.push(o[0],o[1]);var c=n.body.getReader();(t=function(){c.read().then((function(e){i._destroyed||(e.done?i.push(null):(i.push(new he(e.value)),t()))}))})()}else if(i._xhr=e,i._pos=0,i.url=e.responseURL,i.statusCode=e.status,i.statusMessage=e.statusText,e.getAllResponseHeaders().split(/\r?\n/).forEach((function(e){var n=e.match(/^([^:]+):\s*(.*)/);if(n){var a=n[1].toLowerCase();"set-cookie"===a?(void 0===i.headers[a]&&(i.headers[a]=[]),i.headers[a].push(n[2])):void 0!==i.headers[a]?i.headers[a]+=", "+n[2]:i.headers[a]=n[2],i.rawHeaders.push(n[1],n[2])}})),i._charset="x-user-defined",!cn){var p=i.rawHeaders["mime-type"];if(p){var l=p.match(/;\s*charset=([^;])(;|$)/);l&&(i._charset=l[1].toLowerCase())}i._charset||(i._charset="utf-8")}}function Wa(e){var n,a=this;Ra.call(a),a._opts=e,a._body=[],a._headers={},e.auth&&a.setHeader("Authorization","Basic "+new he(e.auth).toString("base64")),Object.keys(e.headers).forEach((function(n){a.setHeader(n,e.headers[n])}));var t=!0;if("disable-fetch"===e.mode)t=!1,n=!0;else if("prefer-streaming"===e.mode)n=!1;else if("allow-wrong-content-type"===e.mode)n=!cn;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");n=!0}a._mode=function(e,n){return en&&n?"fetch":rn?"moz-chunked-arraybuffer":sn?"ms-stream":on&&e?"arraybuffer":pn&&e?"text:vbarray":"text"}(n,t),a.on("finish",(function(){a._onFinish()}))}un(Ya,la),Ya.prototype._read=function(){},Ya.prototype._onXHRProgress=function(){var e=this,n=e._xhr,a=null;switch(e._mode){case"text:vbarray":if(4!==n.readyState)break;try{a=new w.VBArray(n.responseBody).toArray()}catch(e){}if(null!==a){e.push(new he(a));break}case"text":try{a=n.responseText}catch(n){e._mode="text:vbarray";break}if(a.length>e._pos){var t=a.substr(e._pos);if("x-user-defined"===e._charset){for(var i=new he(t.length),o=0;o<t.length;o++)i[o]=255&t.charCodeAt(o);e.push(i)}else e.push(t,e._charset);e._pos=a.length}break;case"arraybuffer":if(4!==n.readyState||!n.response)break;a=n.response,e.push(new he(new Uint8Array(a)));break;case"moz-chunked-arraybuffer":if(a=n.response,3!==n.readyState||!a)break;e.push(new he(new Uint8Array(a)));break;case"ms-stream":if(a=n.response,3!==n.readyState)break;var s=new w.MSStreamReader;s.onprogress=function(){s.result.byteLength>e._pos&&(e.push(new he(new Uint8Array(s.result.slice(e._pos)))),e._pos=s.result.byteLength)},s.onload=function(){e.push(null)},s.readAsArrayBuffer(a)}4===e._xhr.readyState&&"ms-stream"!==e._mode&&e.push(null)},un(Wa,Ra);var Va=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","user-agent","via"];Wa.prototype.setHeader=function(e,n){var a=e.toLowerCase();-1===Va.indexOf(a)&&(this._headers[a]={name:e,value:n})},Wa.prototype.getHeader=function(e){return this._headers[e.toLowerCase()].value},Wa.prototype.removeHeader=function(e){delete this._headers[e.toLowerCase()]},Wa.prototype._onFinish=function(){var e=this;if(!e._destroyed){var n,a=e._opts,t=e._headers;if("POST"!==a.method&&"PUT"!==a.method&&"PATCH"!==a.method||(n=function(){if(void 0!==Je)return Je;try{new w.Blob([new ArrayBuffer(1)]),Je=!0}catch(e){Je=!1}return Je}()?new w.Blob(e._body.map((function(e){return function(e){if(e instanceof Uint8Array){if(0===e.byteOffset&&e.byteLength===e.buffer.byteLength)return e.buffer;if("function"==typeof e.buffer.slice)return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}if(Ge(e)){for(var n=new Uint8Array(e.length),a=e.length,t=0;t<a;t++)n[t]=e[t];return n.buffer}throw new Error("Argument must be a Buffer")}(e)})),{type:(t["content-type"]||{}).value||""}):he.concat(e._body).toString()),"fetch"===e._mode){var i=Object.keys(t).map((function(e){return[t[e].name,t[e].value]}));w.fetch(e._opts.url,{method:e._opts.method,headers:i,body:n,mode:"cors",credentials:a.withCredentials?"include":"same-origin"}).then((function(n){e._fetchResponse=n,e._connect()}),(function(n){e.emit("error",n)}))}else{var o=e._xhr=new w.XMLHttpRequest;try{o.open(e._opts.method,e._opts.url,!0)}catch(n){return void H.nextTick((function(){e.emit("error",n)}))}"responseType"in o&&(o.responseType=e._mode.split(":")[0]),"withCredentials"in o&&(o.withCredentials=!!a.withCredentials),"text"===e._mode&&"overrideMimeType"in o&&o.overrideMimeType("text/plain; charset=x-user-defined"),Object.keys(t).forEach((function(e){o.setRequestHeader(t[e].name,t[e].value)})),e._response=null,o.onreadystatechange=function(){switch(o.readyState){case 3:case 4:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(o.onprogress=function(){e._onXHRProgress()}),o.onerror=function(){e._destroyed||e.emit("error",new Error("XHR error"))};try{o.send(n)}catch(n){return void H.nextTick((function(){e.emit("error",n)}))}}}},Wa.prototype._onXHRProgress=function(){var e=this;(function(e){try{var n=e.status;return null!==n&&0!==n}catch(e){return!1}})(e._xhr)&&!e._destroyed&&(e._response||e._connect(),e._response._onXHRProgress())},Wa.prototype._connect=function(){var e=this;e._destroyed||(e._response=new Ya(e._xhr,e._fetchResponse,e._mode),e.emit("response",e._response))},Wa.prototype._write=function(e,n,a){this._body.push(e),a()},Wa.prototype.abort=Wa.prototype.destroy=function(){var e=this;e._destroyed=!0,e._response&&(e._response._destroyed=!0),e._xhr&&e._xhr.abort()},Wa.prototype.end=function(e,n,a){"function"==typeof e&&(a=e,e=void 0),Ra.prototype.end.call(this,e,n,a)},Wa.prototype.flushHeaders=function(){},Wa.prototype.setTimeout=function(){},Wa.prototype.setNoDelay=function(){},Wa.prototype.setSocketKeepAlive=function(){};
/*! https://mths.be/punycode v1.4.1 by @mathias */
var Ka=2147483647,Ga=/[^\x20-\x7E]/,Xa=/[\x2E\u3002\uFF0E\uFF61]/g,Ja={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},Qa=Math.floor,et=String.fromCharCode;function nt(e){throw new RangeError(Ja[e])}function at(e,n){return e+22+75*(e<26)-((0!=n)<<5)}function tt(e,n,a){var t=0;for(e=a?Qa(e/700):e>>1,e+=Qa(e/n);e>455;t+=36)e=Qa(e/35);return Qa(t+36*e/(e+38))}function it(e){return function(e,n){var a=e.split("@"),t="";a.length>1&&(t=a[0]+"@",e=a[1]);var i=function(e,n){for(var a=e.length,t=[];a--;)t[a]=n(e[a]);return t}((e=e.replace(Xa,".")).split("."),(function(e){return Ga.test(e)?"xn--"+function(e){var n,a,t,i,o,s,r,c,p,l,u,d,h,m,f,v=[];for(d=(e=function(e){for(var n,a,t=[],i=0,o=e.length;i<o;)(n=e.charCodeAt(i++))>=55296&&n<=56319&&i<o?56320==(64512&(a=e.charCodeAt(i++)))?t.push(((1023&n)<<10)+(1023&a)+65536):(t.push(n),i--):t.push(n);return t}(e)).length,n=128,a=0,o=72,s=0;s<d;++s)(u=e[s])<128&&v.push(et(u));for(t=i=v.length,i&&v.push("-");t<d;){for(r=Ka,s=0;s<d;++s)(u=e[s])>=n&&u<r&&(r=u);for(r-n>Qa((Ka-a)/(h=t+1))&&nt("overflow"),a+=(r-n)*h,n=r,s=0;s<d;++s)if((u=e[s])<n&&++a>Ka&&nt("overflow"),u==n){for(c=a,p=36;!(c<(l=p<=o?1:p>=o+26?26:p-o));p+=36)f=c-l,m=36-l,v.push(et(at(l+f%m,0))),c=Qa(f/m);v.push(et(at(c,0))),o=tt(a,h,t==i),a=0,++t}++a,++n}return v.join("")}(e):e})).join(".");return t+i}(e)}function ot(e,n){return Object.prototype.hasOwnProperty.call(e,n)}var st=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function rt(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}}function ct(e,n){if(e.map)return e.map(n);for(var a=[],t=0;t<e.length;t++)a.push(n(e[t],t));return a}var pt=Object.keys||function(e){var n=[];for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&n.push(a);return n};function lt(e,n,a,t){n=n||"&",a=a||"=";var i={};if("string"!=typeof e||0===e.length)return i;var o=/\+/g;e=e.split(n);var s=1e3;t&&"number"==typeof t.maxKeys&&(s=t.maxKeys);var r=e.length;s>0&&r>s&&(r=s);for(var c=0;c<r;++c){var p,l,u,d,h=e[c].replace(o,"%20"),m=h.indexOf(a);m>=0?(p=h.substr(0,m),l=h.substr(m+1)):(p=h,l=""),u=decodeURIComponent(p),d=decodeURIComponent(l),ot(i,u)?st(i[u])?i[u].push(d):i[u]=[i[u],d]:i[u]=d}return i}var ut={parse:jt,resolve:function(e,n){return jt(e,!1,!0).resolve(n)},resolveObject:function(e,n){return e?jt(e,!1,!0).resolveObject(n):n},format:function(e){return Sn(e)&&(e=At({},e)),Rt(e)},Url:dt};function dt(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var ht=/^([a-z0-9.+-]+:)/i,mt=/:[0-9]*$/,ft=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,vt=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),xt=["'"].concat(vt),gt=["%","/","?",";","#"].concat(xt),bt=["/","?","#"],wt=/^[+a-z0-9A-Z_-]{0,63}$/,_t=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,yt={javascript:!0,"javascript:":!0},kt={javascript:!0,"javascript:":!0},Et={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function jt(e,n,a){if(e&&Ln(e)&&e instanceof dt)return e;var t=new dt;return t.parse(e,n,a),t}function At(e,n,a,t){if(!Sn(n))throw new TypeError("Parameter 'url' must be a string, not "+typeof n);var i=n.indexOf("?"),o=-1!==i&&i<n.indexOf("#")?"?":"#",s=n.split(o);s[0]=s[0].replace(/\\/g,"/");var r=n=s.join(o);if(r=r.trim(),!t&&1===n.split("#").length){var c=ft.exec(r);if(c)return e.path=r,e.href=r,e.pathname=c[1],c[2]?(e.search=c[2],e.query=a?lt(e.search.substr(1)):e.search.substr(1)):a&&(e.search="",e.query={}),e}var p,l,u,d,h=ht.exec(r);if(h){var m=(h=h[0]).toLowerCase();e.protocol=m,r=r.substr(h.length)}if(t||h||r.match(/^\/\/[^@\/]+@[^@\/]+/)){var f="//"===r.substr(0,2);!f||h&&kt[h]||(r=r.substr(2),e.slashes=!0)}if(!kt[h]&&(f||h&&!Et[h])){var v,x,g=-1;for(p=0;p<bt.length;p++)-1!==(l=r.indexOf(bt[p]))&&(-1===g||l<g)&&(g=l);for(-1!==(x=-1===g?r.lastIndexOf("@"):r.lastIndexOf("@",g))&&(v=r.slice(0,x),r=r.slice(x+1),e.auth=decodeURIComponent(v)),g=-1,p=0;p<gt.length;p++)-1!==(l=r.indexOf(gt[p]))&&(-1===g||l<g)&&(g=l);-1===g&&(g=r.length),e.host=r.slice(0,g),r=r.slice(g),zt(e),e.hostname=e.hostname||"";var b="["===e.hostname[0]&&"]"===e.hostname[e.hostname.length-1];if(!b){var w=e.hostname.split(/\./);for(p=0,u=w.length;p<u;p++){var _=w[p];if(_&&!_.match(wt)){for(var y="",k=0,E=_.length;k<E;k++)_.charCodeAt(k)>127?y+="x":y+=_[k];if(!y.match(wt)){var j=w.slice(0,p),A=w.slice(p+1),R=_.match(_t);R&&(j.push(R[1]),A.unshift(R[2])),A.length&&(r="/"+A.join(".")+r),e.hostname=j.join(".");break}}}}e.hostname.length>255?e.hostname="":e.hostname=e.hostname.toLowerCase(),b||(e.hostname=it(e.hostname)),d=e.port?":"+e.port:"";var z=e.hostname||"";e.host=z+d,e.href+=e.host,b&&(e.hostname=e.hostname.substr(1,e.hostname.length-2),"/"!==r[0]&&(r="/"+r))}if(!yt[m])for(p=0,u=xt.length;p<u;p++){var S=xt[p];if(-1!==r.indexOf(S)){var T=encodeURIComponent(S);T===S&&(T=escape(S)),r=r.split(S).join(T)}}var O=r.indexOf("#");-1!==O&&(e.hash=r.substr(O),r=r.slice(0,O));var L=r.indexOf("?");if(-1!==L?(e.search=r.substr(L),e.query=r.substr(L+1),a&&(e.query=lt(e.query)),r=r.slice(0,L)):a&&(e.search="",e.query={}),r&&(e.pathname=r),Et[m]&&e.hostname&&!e.pathname&&(e.pathname="/"),e.pathname||e.search){d=e.pathname||"";var q=e.search||"";e.path=d+q}return e.href=Rt(e),e}function Rt(e){var n=e.auth||"";n&&(n=(n=encodeURIComponent(n)).replace(/%3A/i,":"),n+="@");var a=e.protocol||"",t=e.pathname||"",i=e.hash||"",o=!1,s="";e.host?o=n+e.host:e.hostname&&(o=n+(-1===e.hostname.indexOf(":")?e.hostname:"["+this.hostname+"]"),e.port&&(o+=":"+e.port)),e.query&&Ln(e.query)&&Object.keys(e.query).length&&(s=function(e,n,a,t){return n=n||"&",a=a||"=",null===e&&(e=void 0),"object"==typeof e?ct(pt(e),(function(t){var i=encodeURIComponent(rt(t))+a;return st(e[t])?ct(e[t],(function(e){return i+encodeURIComponent(rt(e))})).join(n):i+encodeURIComponent(rt(e[t]))})).join(n):""}(e.query));var r=e.search||s&&"?"+s||"";return a&&":"!==a.substr(-1)&&(a+=":"),e.slashes||(!a||Et[a])&&!1!==o?(o="//"+(o||""),t&&"/"!==t.charAt(0)&&(t="/"+t)):o||(o=""),i&&"#"!==i.charAt(0)&&(i="#"+i),r&&"?"!==r.charAt(0)&&(r="?"+r),a+o+(t=t.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(r=r.replace("#","%23"))+i}function zt(e){var n=e.host,a=mt.exec(n);a&&(":"!==(a=a[0])&&(e.port=a.substr(1)),n=n.substr(0,n.length-a.length)),n&&(e.hostname=n)}function St(e,n){"string"==typeof e&&(e=jt(e));var a=-1===w.location.protocol.search(/^https?:$/)?"http:":"",t=e.protocol||a,i=e.hostname||e.host,o=e.port,s=e.path||"/";i&&-1!==i.indexOf(":")&&(i="["+i+"]"),e.url=(i?t+"//"+i:"")+(o?":"+o:"")+s,e.method=(e.method||"GET").toUpperCase(),e.headers=e.headers||{};var r=new Wa(e);return n&&r.on("response",n),r}function Tt(){}dt.prototype.parse=function(e,n,a){return At(this,e,n,a)},dt.prototype.format=function(){return Rt(this)},dt.prototype.resolve=function(e){return this.resolveObject(jt(e,!1,!0)).format()},dt.prototype.resolveObject=function(e){if(Sn(e)){var n=new dt;n.parse(e,!1,!0),e=n}for(var a,t=new dt,i=Object.keys(this),o=0;o<i.length;o++){var s=i[o];t[s]=this[s]}if(t.hash=e.hash,""===e.href)return t.href=t.format(),t;if(e.slashes&&!e.protocol){for(var r=Object.keys(e),c=0;c<r.length;c++){var p=r[c];"protocol"!==p&&(t[p]=e[p])}return Et[t.protocol]&&t.hostname&&!t.pathname&&(t.path=t.pathname="/"),t.href=t.format(),t}if(e.protocol&&e.protocol!==t.protocol){if(!Et[e.protocol]){for(var l=Object.keys(e),u=0;u<l.length;u++){var d=l[u];t[d]=e[d]}return t.href=t.format(),t}if(t.protocol=e.protocol,e.host||kt[e.protocol])t.pathname=e.pathname;else{for(a=(e.pathname||"").split("/");a.length&&!(e.host=a.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==a[0]&&a.unshift(""),a.length<2&&a.unshift(""),t.pathname=a.join("/")}if(t.search=e.search,t.query=e.query,t.host=e.host||"",t.auth=e.auth,t.hostname=e.hostname||e.host,t.port=e.port,t.pathname||t.search){var h=t.pathname||"",m=t.search||"";t.path=h+m}return t.slashes=t.slashes||e.slashes,t.href=t.format(),t}var f,v=t.pathname&&"/"===t.pathname.charAt(0),x=e.host||e.pathname&&"/"===e.pathname.charAt(0),g=x||v||t.host&&e.pathname,b=g,w=t.pathname&&t.pathname.split("/")||[],_=t.protocol&&!Et[t.protocol];if(a=e.pathname&&e.pathname.split("/")||[],_&&(t.hostname="",t.port=null,t.host&&(""===w[0]?w[0]=t.host:w.unshift(t.host)),t.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===a[0]?a[0]=e.host:a.unshift(e.host)),e.host=null),g=g&&(""===a[0]||""===w[0])),x)t.host=e.host||""===e.host?e.host:t.host,t.hostname=e.hostname||""===e.hostname?e.hostname:t.hostname,t.search=e.search,t.query=e.query,w=a;else if(a.length)w||(w=[]),w.pop(),w=w.concat(a),t.search=e.search,t.query=e.query;else if(!Rn(e.search))return _&&(t.hostname=t.host=w.shift(),(f=!!(t.host&&t.host.indexOf("@")>0)&&t.host.split("@"))&&(t.auth=f.shift(),t.host=t.hostname=f.shift())),t.search=e.search,t.query=e.query,An(t.pathname)&&An(t.search)||(t.path=(t.pathname?t.pathname:"")+(t.search?t.search:"")),t.href=t.format(),t;if(!w.length)return t.pathname=null,t.search?t.path="/"+t.search:t.path=null,t.href=t.format(),t;for(var y=w.slice(-1)[0],k=(t.host||e.host||w.length>1)&&("."===y||".."===y)||""===y,E=0,j=w.length;j>=0;j--)"."===(y=w[j])?w.splice(j,1):".."===y?(w.splice(j,1),E++):E&&(w.splice(j,1),E--);if(!g&&!b)for(;E--;E)w.unshift("..");!g||""===w[0]||w[0]&&"/"===w[0].charAt(0)||w.unshift(""),k&&"/"!==w.join("/").substr(-1)&&w.push("");var A=""===w[0]||w[0]&&"/"===w[0].charAt(0);return _&&(t.hostname=t.host=A?"":w.length?w.shift():"",(f=!!(t.host&&t.host.indexOf("@")>0)&&t.host.split("@"))&&(t.auth=f.shift(),t.host=t.hostname=f.shift())),(g=g||t.host&&w.length)&&!A&&w.unshift(""),w.length?t.pathname=w.join("/"):(t.pathname=null,t.path=null),An(t.pathname)&&An(t.search)||(t.path=(t.pathname?t.pathname:"")+(t.search?t.search:"")),t.auth=e.auth||t.auth,t.slashes=t.slashes||e.slashes,t.href=t.format(),t},dt.prototype.parseHost=function(){return zt(this)},Tt.defaultMaxSockets=4;var Ot={request:St,get:function(e,n){var a=St(e,n);return a.end(),a},Agent:Tt,METHODS:["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"],STATUS_CODES:{100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Time-out",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request-URI Too Large",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Time-out",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}};function Lt(e,n){if(e===n)return 0;for(var a=e.length,t=n.length,i=0,o=Math.min(a,t);i<o;++i)if(e[i]!==n[i]){a=e[i],t=n[i];break}return a<t?-1:t<a?1:0}var qt,Ct=Object.prototype.hasOwnProperty,Bt=Object.keys||function(e){var n=[];for(var a in e)Ct.call(e,a)&&n.push(a);return n},Ut=Array.prototype.slice;function Mt(){return void 0!==qt?qt:qt="foo"===function(){}.name}function Pt(e){return Object.prototype.toString.call(e)}function Nt(e){return!Ge(e)&&"function"==typeof w.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer)))}function Dt(e,n){e||Yt(e,!0,n,"==",Wt)}var It=/\s*function\s+([^\(\s]*)\s*/;function $t(e){if(Bn(e)){if(Mt())return e.name;var n=e.toString().match(It);return n&&n[1]}}function Ft(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=function(e){return Zt(Ht(e.actual),128)+" "+e.operator+" "+Zt(Ht(e.expected),128)}(this),this.generatedMessage=!0);var n=e.stackStartFunction||Yt;if(Error.captureStackTrace)Error.captureStackTrace(this,n);else{var a=new Error;if(a.stack){var t=a.stack,i=$t(n),o=t.indexOf("\n"+i);if(o>=0){var s=t.indexOf("\n",o+1);t=t.substring(s+1)}this.stack=t}}}function Zt(e,n){return"string"==typeof e?e.length<n?e:e.slice(0,n):e}function Ht(e){if(Mt()||!Bn(e))return gn(e);var n=$t(e);return"[Function"+(n?": "+n:"")+"]"}function Yt(e,n,a,t,i){throw new Ft({message:a,actual:e,expected:n,operator:t,stackStartFunction:i})}function Wt(e,n){e||Yt(e,!0,n,"==",Wt)}function Vt(e,n,a,t){if(e===n)return!0;if(Ge(e)&&Ge(n))return 0===Lt(e,n);if(qn(e)&&qn(n))return e.getTime()===n.getTime();if(On(e)&&On(n))return e.source===n.source&&e.global===n.global&&e.multiline===n.multiline&&e.lastIndex===n.lastIndex&&e.ignoreCase===n.ignoreCase;if(null!==e&&"object"==typeof e||null!==n&&"object"==typeof n){if(Nt(e)&&Nt(n)&&Pt(e)===Pt(n)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===Lt(new Uint8Array(e.buffer),new Uint8Array(n.buffer));if(Ge(e)!==Ge(n))return!1;var i=(t=t||{actual:[],expected:[]}).actual.indexOf(e);return-1!==i&&i===t.expected.indexOf(n)||(t.actual.push(e),t.expected.push(n),function(e,n,a,t){if(null==e||null==n)return!1;if(Un(e)||Un(n))return e===n;if(a&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(n))return!1;var i=Kt(e),o=Kt(n);if(i&&!o||!i&&o)return!1;if(i)return Vt(e=Ut.call(e),n=Ut.call(n),a);var s,r,c=Bt(e),p=Bt(n);if(c.length!==p.length)return!1;for(c.sort(),p.sort(),r=c.length-1;r>=0;r--)if(c[r]!==p[r])return!1;for(r=c.length-1;r>=0;r--)if(!Vt(e[s=c[r]],n[s],a,t))return!1;return!0}(e,n,a,t))}return a?e===n:e==n}function Kt(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function Gt(e,n){if(!e||!n)return!1;if("[object RegExp]"==Object.prototype.toString.call(n))return n.test(e);try{if(e instanceof n)return!0}catch(e){}return!Error.isPrototypeOf(n)&&!0===n.call({},e)}function Xt(e,n,a,t){var i;if("function"!=typeof n)throw new TypeError('"block" argument must be a function');"string"==typeof a&&(t=a,a=null),i=function(e){var n;try{e()}catch(e){n=e}return n}(n),t=(a&&a.name?" ("+a.name+").":".")+(t?" "+t:"."),e&&!i&&Yt(i,a,"Missing expected exception"+t);var o="string"==typeof t,s=!e&&i&&!a;if((!e&&Cn(i)&&o&&Gt(i,a)||s)&&Yt(i,a,"Got unwanted exception"+t),e&&i&&a&&!Gt(i,a)||!e&&i)throw i}Dt.AssertionError=Ft,un(Ft,Error),Dt.fail=Yt,Dt.ok=Wt,Dt.equal=function e(n,a,t){n!=a&&Yt(n,a,t,"==",e)},Dt.notEqual=function e(n,a,t){n==a&&Yt(n,a,t,"!=",e)},Dt.deepEqual=function e(n,a,t){Vt(n,a,!1)||Yt(n,a,t,"deepEqual",e)},Dt.deepStrictEqual=function e(n,a,t){Vt(n,a,!0)||Yt(n,a,t,"deepStrictEqual",e)},Dt.notDeepEqual=function e(n,a,t){Vt(n,a,!1)&&Yt(n,a,t,"notDeepEqual",e)},Dt.notDeepStrictEqual=function e(n,a,t){Vt(n,a,!0)&&Yt(n,a,t,"notDeepStrictEqual",e)},Dt.strictEqual=function e(n,a,t){n!==a&&Yt(n,a,t,"===",e)},Dt.notStrictEqual=function e(n,a,t){n===a&&Yt(n,a,t,"!==",e)},Dt.throws=function(e,n,a){Xt(!0,e,n,a)},Dt.doesNotThrow=function(e,n,a){Xt(!1,e,n,a)},Dt.ifError=function(e){if(e)throw e};var Jt=1e3,Qt=6e4,ei=60*Qt,ni=24*ei,ai=function(e,n){n=n||{};var a=typeof e;if("string"===a&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var n=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(n){var a=parseFloat(n[1]);switch((n[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"days":case"day":case"d":return a*ni;case"hours":case"hour":case"hrs":case"hr":case"h":return a*ei;case"minutes":case"minute":case"mins":case"min":case"m":return a*Qt;case"seconds":case"second":case"secs":case"sec":case"s":return a*Jt;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===a&&!1===isNaN(e))return n.long?function(e){return ti(e,ni,"day")||ti(e,ei,"hour")||ti(e,Qt,"minute")||ti(e,Jt,"second")||e+" ms"}(e):function(e){return e>=ni?Math.round(e/ni)+"d":e>=ei?Math.round(e/ei)+"h":e>=Qt?Math.round(e/Qt)+"m":e>=Jt?Math.round(e/Jt)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function ti(e,n,a){if(!(e<n))return e<1.5*n?Math.floor(e/n)+" "+a:Math.ceil(e/n)+" "+a+"s"}var ii=a((function(e,n){var a;function t(e){function t(){if(t.enabled){var e=t,i=+new Date,o=i-(a||i);e.diff=o,e.prev=a,e.curr=i,a=i;for(var s=new Array(arguments.length),r=0;r<s.length;r++)s[r]=arguments[r];s[0]=n.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(a,t){if("%%"===a)return a;c++;var i=n.formatters[t];if("function"==typeof i){var o=s[c];a=i.call(e,o),s.splice(c,1),c--}return a})),n.formatArgs.call(e,s);var p=t.log||n.log||console.log.bind(console);p.apply(e,s)}}return t.namespace=e,t.enabled=n.enabled(e),t.useColors=n.useColors(),t.color=function(e){var a,t=0;for(a in e)t=(t<<5)-t+e.charCodeAt(a),t|=0;return n.colors[Math.abs(t)%n.colors.length]}(e),"function"==typeof n.init&&n.init(t),t}(n=e.exports=t.debug=t.default=t).coerce=function(e){return e instanceof Error?e.stack||e.message:e},n.disable=function(){n.enable("")},n.enable=function(e){n.save(e),n.names=[],n.skips=[];for(var a=("string"==typeof e?e:"").split(/[\s,]+/),t=a.length,i=0;i<t;i++)a[i]&&("-"===(e=a[i].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")))},n.enabled=function(e){var a,t;for(a=0,t=n.skips.length;a<t;a++)if(n.skips[a].test(e))return!1;for(a=0,t=n.names.length;a<t;a++)if(n.names[a].test(e))return!0;return!1},n.humanize=ai,n.names=[],n.skips=[],n.formatters={}}));ii.coerce,ii.disable,ii.enable,ii.enabled,ii.humanize,ii.names,ii.skips,ii.formatters;var oi=a((function(e,n){function a(){var e;try{e=n.storage.debug}catch(e){}return!e&&void 0!==H&&"env"in H&&(e=H.env.DEBUG),e}(n=e.exports=ii).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},n.formatArgs=function(e){var a=this.useColors;if(e[0]=(a?"%c":"")+this.namespace+(a?" %c":" ")+e[0]+(a?"%c ":" ")+"+"+n.humanize(this.diff),a){var t="color: "+this.color;e.splice(1,0,t,"color: inherit");var i=0,o=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(i++,"%c"===e&&(o=i))})),e.splice(o,0,t)}},n.save=function(e){try{null==e?n.storage.removeItem("debug"):n.storage.debug=e}catch(e){}},n.load=a,n.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},n.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),n.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],n.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},n.enable(a())}));oi.log,oi.formatArgs,oi.save,oi.load,oi.useColors,oi.storage,oi.colors;var si=function(){return!1},ri=function(){throw new Error("tty.ReadStream is not implemented")},ci={},pi=a((function(e,n){(n=e.exports=ii).init=function(e){e.inspectOpts={};for(var a=Object.keys(n.inspectOpts),t=0;t<a.length;t++)e.inspectOpts[a[t]]=n.inspectOpts[a[t]]},n.log=function(){return t.write(Fn.format.apply(Fn,arguments)+"\n")},n.formatArgs=function(e){var a=this.namespace;if(this.useColors){var t=this.color,i="  [3"+t+";1m"+a+" [0m";e[0]=i+e[0].split("\n").join("\n"+i),e.push("[3"+t+"m+"+n.humanize(this.diff)+"[0m")}else e[0]=(new Date).toUTCString()+" "+a+" "+e[0]},n.save=function(e){null==e?delete H.env.DEBUG:H.env.DEBUG=e},n.load=i,n.useColors=function(){return"colors"in n.inspectOpts?Boolean(n.inspectOpts.colors):si(a)},n.colors=[6,2,3,4,5,1],n.inspectOpts=Object.keys(H.env).filter((function(e){return/^debug_/i.test(e)})).reduce((function(e,n){var a=n.substring(6).toLowerCase().replace(/_([a-z])/g,(function(e,n){return n.toUpperCase()})),t=H.env[n];return t=!!/^(yes|on|true|enabled)$/i.test(t)||!/^(no|off|false|disabled)$/i.test(t)&&("null"===t?null:Number(t)),e[a]=t,e}),{});var a=parseInt(H.env.DEBUG_FD,10)||2;1!==a&&2!==a&&Fn.deprecate((function(){}),"except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();var t=1===a?H.stdout:2===a?H.stderr:function(e){var n;switch(H.binding("tty_wrap").guessHandleType(e)){case"TTY":(n=new ri(e))._type="tty",n._handle&&n._handle.unref&&n._handle.unref();break;case"FILE":(n=new ci.SyncWriteStream(e,{autoClose:!1}))._type="fs";break;case"PIPE":case"TCP":(n=new ci.Socket({fd:e,readable:!1,writable:!0})).readable=!1,n.read=null,n._type="pipe",n._handle&&n._handle.unref&&n._handle.unref();break;default:throw new Error("Implement me. Unknown stream file type!")}return n.fd=e,n._isStdio=!0,n}(a);function i(){return H.env.DEBUG}n.formatters.o=function(e){return this.inspectOpts.colors=this.useColors,Fn.inspect(e,this.inspectOpts).split("\n").map((function(e){return e.trim()})).join(" ")},n.formatters.O=function(e){return this.inspectOpts.colors=this.useColors,Fn.inspect(e,this.inspectOpts)},n.enable(i())}));pi.init,pi.log,pi.formatArgs,pi.save,pi.load,pi.useColors,pi.colors,pi.inspectOpts;var li,ui=a((function(e){void 0!==H&&"renderer"===H.type?e.exports=oi:e.exports=pi})),di=function(){if(!li)try{li=ui("follow-redirects")}catch(e){li=function(){}}li.apply(null,arguments)},hi=ut.URL,mi=Ha.Writable,fi=["abort","aborted","connect","error","socket","timeout"],vi=Object.create(null);fi.forEach((function(e){vi[e]=function(n,a,t){this._redirectable.emit(e,n,a,t)}}));var xi=ji("ERR_FR_REDIRECTION_FAILURE",""),gi=ji("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded"),bi=ji("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),wi=ji("ERR_STREAM_WRITE_AFTER_END","write after end");function _i(e,n){mi.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],n&&this.on("response",n);var a=this;this._onNativeResponse=function(e){a._processResponse(e)},this._performRequest()}function yi(e){var n={maxRedirects:21,maxBodyLength:10485760},a={};return Object.keys(e).forEach((function(t){var i=t+":",o=a[i]=e[t],s=n[t]=Object.create(o);Object.defineProperties(s,{request:{value:function(e,t,o){if("string"==typeof e){var s=e;try{e=function(e){var n={protocol:e.protocol,hostname:e.hostname.startsWith("[")?e.hostname.slice(1,-1):e.hostname,hash:e.hash,search:e.search,pathname:e.pathname,path:e.pathname+e.search,href:e.href};return""!==e.port&&(n.port=Number(e.port)),n}(new hi(s))}catch(n){e=ut.parse(s)}}else o=t,t=e,e={protocol:i};return"function"==typeof t&&(o=t,t=null),(t=Object.assign({maxRedirects:n.maxRedirects,maxBodyLength:n.maxBodyLength},e,t)).nativeProtocols=a,Dt.equal(t.protocol,i,"protocol mismatch"),di("options",t),new _i(t,o)},configurable:!0,enumerable:!0,writable:!0},get:{value:function(e,n,a){var t=s.request(e,n,a);return t.end(),t},configurable:!0,enumerable:!0,writable:!0}})})),n}function ki(){}function Ei(e,n){var a;for(var t in n)e.test(t)&&(a=n[t],delete n[t]);return a}function ji(e,n){function a(e){Error.captureStackTrace(this,this.constructor),this.message=e||n}return a.prototype=new Error,a.prototype.constructor=a,a.prototype.name="Error ["+e+"]",a.prototype.code=e,a}function Ai(e){for(var n=0;n<fi.length;n++)e.removeListener(fi[n],vi[fi[n]]);e.on("error",ki),e.abort()}_i.prototype=Object.create(mi.prototype),_i.prototype.abort=function(){Ai(this._currentRequest),this.emit("abort"),this.removeAllListeners()},_i.prototype.write=function(e,n,a){if(this._ending)throw new wi;if(!("string"==typeof e||"object"==typeof e&&"length"in e))throw new TypeError("data should be a string, Buffer or Uint8Array");"function"==typeof n&&(a=n,n=null),0!==e.length?this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:n}),this._currentRequest.write(e,n,a)):(this.emit("error",new bi),this.abort()):a&&a()},_i.prototype.end=function(e,n,a){if("function"==typeof e?(a=e,e=n=null):"function"==typeof n&&(a=n,n=null),e){var t=this,i=this._currentRequest;this.write(e,n,(function(){t._ended=!0,i.end(null,null,a)})),this._ending=!0}else this._ended=this._ending=!0,this._currentRequest.end(null,null,a)},_i.prototype.setHeader=function(e,n){this._options.headers[e]=n,this._currentRequest.setHeader(e,n)},_i.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)},_i.prototype.setTimeout=function(e,n){var a=this;function t(n){n.setTimeout(e),n.removeListener("timeout",n.destroy),n.addListener("timeout",n.destroy)}function i(n){a._timeout&&clearTimeout(a._timeout),a._timeout=setTimeout((function(){a.emit("timeout"),o()}),e),t(n)}function o(){clearTimeout(this._timeout),n&&a.removeListener("timeout",n),this.socket||a._currentRequest.removeListener("socket",i)}return n&&this.on("timeout",n),this.socket?i(this.socket):this._currentRequest.once("socket",i),this.on("socket",t),this.once("response",o),this.once("error",o),this},["flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach((function(e){_i.prototype[e]=function(n,a){return this._currentRequest[e](n,a)}})),["aborted","connection","socket"].forEach((function(e){Object.defineProperty(_i.prototype,e,{get:function(){return this._currentRequest[e]}})})),_i.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var n=e.path.indexOf("?");n<0?e.pathname=e.path:(e.pathname=e.path.substring(0,n),e.search=e.path.substring(n))}},_i.prototype._performRequest=function(){var e=this._options.protocol,n=this._options.nativeProtocols[e];if(n){if(this._options.agents){var a=e.substr(0,e.length-1);this._options.agent=this._options.agents[a]}var t=this._currentRequest=n.request(this._options,this._onNativeResponse);this._currentUrl=ut.format(this._options),t._redirectable=this;for(var i=0;i<fi.length;i++)t.on(fi[i],vi[fi[i]]);if(this._isRedirect){var o=0,s=this,r=this._requestBodyBuffers;!function e(n){if(t===s._currentRequest)if(n)s.emit("error",n);else if(o<r.length){var a=r[o++];t.finished||t.write(a.data,a.encoding,e)}else s._ended&&t.end()}()}}else this.emit("error",new TypeError("Unsupported protocol "+e))},_i.prototype._processResponse=function(e){var n=e.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:e.headers,statusCode:n});var a=e.headers.location;if(a&&!1!==this._options.followRedirects&&n>=300&&n<400){if(Ai(this._currentRequest),e.destroy(),++this._redirectCount>this._options.maxRedirects)return void this.emit("error",new gi);((301===n||302===n)&&"POST"===this._options.method||303===n&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],Ei(/^content-/i,this._options.headers));var t=Ei(/^host$/i,this._options.headers)||ut.parse(this._currentUrl).hostname,i=ut.resolve(this._currentUrl,a);di("redirecting to",i),this._isRedirect=!0;var o=ut.parse(i);if(Object.assign(this._options,o),o.hostname!==t&&Ei(/^authorization$/i,this._options.headers),"function"==typeof this._options.beforeRedirect){var s={headers:e.headers};try{this._options.beforeRedirect.call(null,this._options,s)}catch(e){return void this.emit("error",e)}this._sanitizeOptions(this._options)}try{this._performRequest()}catch(e){var r=new xi("Redirected request failed: "+e.message);r.cause=e,this.emit("error",r)}}else e.responseUrl=this._currentUrl,e.redirects=this._redirects,this.emit("response",e),this._requestBodyBuffers=[]};var Ri=yi({http:Ot,https:Ot}),zi=yi;Ri.wrap=zi;var Si={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};function Ti(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}function Oi(e,n,a,t,i){if(n.subarray&&e.subarray)e.set(n.subarray(a,a+t),i);else for(var o=0;o<t;o++)e[i+o]=n[a+o]}var Li=Uint8Array,qi=Uint16Array,Ci=Int32Array;function Bi(e){for(var n=e.length;--n>=0;)e[n]=0}var Ui=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],Mi=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Pi=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Ni=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Di=new Array(576);Bi(Di);var Ii=new Array(60);Bi(Ii);var $i=new Array(512);Bi($i);var Fi=new Array(256);Bi(Fi);var Zi=new Array(29);Bi(Zi);var Hi,Yi,Wi,Vi=new Array(30);function Ki(e,n,a,t,i){this.static_tree=e,this.extra_bits=n,this.extra_base=a,this.elems=t,this.max_length=i,this.has_stree=e&&e.length}function Gi(e,n){this.dyn_tree=e,this.max_code=0,this.stat_desc=n}function Xi(e){return e<256?$i[e]:$i[256+(e>>>7)]}function Ji(e,n){e.pending_buf[e.pending++]=255&n,e.pending_buf[e.pending++]=n>>>8&255}function Qi(e,n,a){e.bi_valid>16-a?(e.bi_buf|=n<<e.bi_valid&65535,Ji(e,e.bi_buf),e.bi_buf=n>>16-e.bi_valid,e.bi_valid+=a-16):(e.bi_buf|=n<<e.bi_valid&65535,e.bi_valid+=a)}function eo(e,n,a){Qi(e,a[2*n],a[2*n+1])}function no(e,n){var a=0;do{a|=1&e,e>>>=1,a<<=1}while(--n>0);return a>>>1}function ao(e,n,a){var t,i,o=new Array(16),s=0;for(t=1;t<=15;t++)o[t]=s=s+a[t-1]<<1;for(i=0;i<=n;i++){var r=e[2*i+1];0!==r&&(e[2*i]=no(o[r]++,r))}}function to(e){var n;for(n=0;n<286;n++)e.dyn_ltree[2*n]=0;for(n=0;n<30;n++)e.dyn_dtree[2*n]=0;for(n=0;n<19;n++)e.bl_tree[2*n]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function io(e){e.bi_valid>8?Ji(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function oo(e,n,a,t){var i=2*n,o=2*a;return e[i]<e[o]||e[i]===e[o]&&t[n]<=t[a]}function so(e,n,a){for(var t=e.heap[a],i=a<<1;i<=e.heap_len&&(i<e.heap_len&&oo(n,e.heap[i+1],e.heap[i],e.depth)&&i++,!oo(n,t,e.heap[i],e.depth));)e.heap[a]=e.heap[i],a=i,i<<=1;e.heap[a]=t}function ro(e,n,a){var t,i,o,s,r=0;if(0!==e.last_lit)do{t=e.pending_buf[e.d_buf+2*r]<<8|e.pending_buf[e.d_buf+2*r+1],i=e.pending_buf[e.l_buf+r],r++,0===t?eo(e,i,n):(eo(e,(o=Fi[i])+256+1,n),0!==(s=Ui[o])&&Qi(e,i-=Zi[o],s),eo(e,o=Xi(--t),a),0!==(s=Mi[o])&&Qi(e,t-=Vi[o],s))}while(r<e.last_lit);eo(e,256,n)}function co(e,n){var a,t,i,o=n.dyn_tree,s=n.stat_desc.static_tree,r=n.stat_desc.has_stree,c=n.stat_desc.elems,p=-1;for(e.heap_len=0,e.heap_max=573,a=0;a<c;a++)0!==o[2*a]?(e.heap[++e.heap_len]=p=a,e.depth[a]=0):o[2*a+1]=0;for(;e.heap_len<2;)o[2*(i=e.heap[++e.heap_len]=p<2?++p:0)]=1,e.depth[i]=0,e.opt_len--,r&&(e.static_len-=s[2*i+1]);for(n.max_code=p,a=e.heap_len>>1;a>=1;a--)so(e,o,a);i=c;do{a=e.heap[1],e.heap[1]=e.heap[e.heap_len--],so(e,o,1),t=e.heap[1],e.heap[--e.heap_max]=a,e.heap[--e.heap_max]=t,o[2*i]=o[2*a]+o[2*t],e.depth[i]=(e.depth[a]>=e.depth[t]?e.depth[a]:e.depth[t])+1,o[2*a+1]=o[2*t+1]=i,e.heap[1]=i++,so(e,o,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,n){var a,t,i,o,s,r,c=n.dyn_tree,p=n.max_code,l=n.stat_desc.static_tree,u=n.stat_desc.has_stree,d=n.stat_desc.extra_bits,h=n.stat_desc.extra_base,m=n.stat_desc.max_length,f=0;for(o=0;o<=15;o++)e.bl_count[o]=0;for(c[2*e.heap[e.heap_max]+1]=0,a=e.heap_max+1;a<573;a++)(o=c[2*c[2*(t=e.heap[a])+1]+1]+1)>m&&(o=m,f++),c[2*t+1]=o,t>p||(e.bl_count[o]++,s=0,t>=h&&(s=d[t-h]),r=c[2*t],e.opt_len+=r*(o+s),u&&(e.static_len+=r*(l[2*t+1]+s)));if(0!==f){do{for(o=m-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[m]--,f-=2}while(f>0);for(o=m;0!==o;o--)for(t=e.bl_count[o];0!==t;)(i=e.heap[--a])>p||(c[2*i+1]!==o&&(e.opt_len+=(o-c[2*i+1])*c[2*i],c[2*i+1]=o),t--)}}(e,n),ao(o,p,e.bl_count)}function po(e,n,a){var t,i,o=-1,s=n[1],r=0,c=7,p=4;for(0===s&&(c=138,p=3),n[2*(a+1)+1]=65535,t=0;t<=a;t++)i=s,s=n[2*(t+1)+1],++r<c&&i===s||(r<p?e.bl_tree[2*i]+=r:0!==i?(i!==o&&e.bl_tree[2*i]++,e.bl_tree[32]++):r<=10?e.bl_tree[34]++:e.bl_tree[36]++,r=0,o=i,0===s?(c=138,p=3):i===s?(c=6,p=3):(c=7,p=4))}function lo(e,n,a){var t,i,o=-1,s=n[1],r=0,c=7,p=4;for(0===s&&(c=138,p=3),t=0;t<=a;t++)if(i=s,s=n[2*(t+1)+1],!(++r<c&&i===s)){if(r<p)do{eo(e,i,e.bl_tree)}while(0!=--r);else 0!==i?(i!==o&&(eo(e,i,e.bl_tree),r--),eo(e,16,e.bl_tree),Qi(e,r-3,2)):r<=10?(eo(e,17,e.bl_tree),Qi(e,r-3,3)):(eo(e,18,e.bl_tree),Qi(e,r-11,7));r=0,o=i,0===s?(c=138,p=3):i===s?(c=6,p=3):(c=7,p=4)}}Bi(Vi);var uo=!1;function ho(e,n,a,t){Qi(e,0+(t?1:0),3),function(e,n,a,t){io(e),Ji(e,a),Ji(e,~a),Oi(e.pending_buf,e.window,n,a,e.pending),e.pending+=a}(e,n,a)}function mo(e,n,a){return e.pending_buf[e.d_buf+2*e.last_lit]=n>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&n,e.pending_buf[e.l_buf+e.last_lit]=255&a,e.last_lit++,0===n?e.dyn_ltree[2*a]++:(e.matches++,n--,e.dyn_ltree[2*(Fi[a]+256+1)]++,e.dyn_dtree[2*Xi(n)]++),e.last_lit===e.lit_bufsize-1}function fo(e,n,a,t){for(var i=65535&e|0,o=e>>>16&65535|0,s=0;0!==a;){a-=s=a>2e3?2e3:a;do{o=o+(i=i+n[t++]|0)|0}while(--s);i%=65521,o%=65521}return i|o<<16|0}var vo=function(){for(var e,n=[],a=0;a<256;a++){e=a;for(var t=0;t<8;t++)e=1&e?3988292384^e>>>1:e>>>1;n[a]=e}return n}();function xo(e,n,a,t){var i=vo,o=t+a;e^=-1;for(var s=t;s<o;s++)e=e>>>8^i[255&(e^n[s])];return-1^e}var go,bo=-2,wo=258,_o=262,yo=103,ko=113,Eo=666;function jo(e,n){return e.msg=Si[n],n}function Ao(e){return(e<<1)-(e>4?9:0)}function Ro(e){for(var n=e.length;--n>=0;)e[n]=0}function zo(e){var n=e.state,a=n.pending;a>e.avail_out&&(a=e.avail_out),0!==a&&(Oi(e.output,n.pending_buf,n.pending_out,a,e.next_out),e.next_out+=a,n.pending_out+=a,e.total_out+=a,e.avail_out-=a,n.pending-=a,0===n.pending&&(n.pending_out=0))}function So(e,n){(function(e,n,a,t){var i,o,s=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=function(e){var n,a=4093624447;for(n=0;n<=31;n++,a>>>=1)if(1&a&&0!==e.dyn_ltree[2*n])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(n=32;n<256;n++)if(0!==e.dyn_ltree[2*n])return 1;return 0}(e)),co(e,e.l_desc),co(e,e.d_desc),s=function(e){var n;for(po(e,e.dyn_ltree,e.l_desc.max_code),po(e,e.dyn_dtree,e.d_desc.max_code),co(e,e.bl_desc),n=18;n>=3&&0===e.bl_tree[2*Ni[n]+1];n--);return e.opt_len+=3*(n+1)+5+5+4,n}(e),i=e.opt_len+3+7>>>3,(o=e.static_len+3+7>>>3)<=i&&(i=o)):i=o=a+5,a+4<=i&&-1!==n?ho(e,n,a,t):4===e.strategy||o===i?(Qi(e,2+(t?1:0),3),ro(e,Di,Ii)):(Qi(e,4+(t?1:0),3),function(e,n,a,t){var i;for(Qi(e,n-257,5),Qi(e,a-1,5),Qi(e,t-4,4),i=0;i<t;i++)Qi(e,e.bl_tree[2*Ni[i]+1],3);lo(e,e.dyn_ltree,n-1),lo(e,e.dyn_dtree,a-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,s+1),ro(e,e.dyn_ltree,e.dyn_dtree)),to(e),t&&io(e)})(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,n),e.block_start=e.strstart,zo(e.strm)}function To(e,n){e.pending_buf[e.pending++]=n}function Oo(e,n){e.pending_buf[e.pending++]=n>>>8&255,e.pending_buf[e.pending++]=255&n}function Lo(e,n){var a,t,i=e.max_chain_length,o=e.strstart,s=e.prev_length,r=e.nice_match,c=e.strstart>e.w_size-_o?e.strstart-(e.w_size-_o):0,p=e.window,l=e.w_mask,u=e.prev,d=e.strstart+wo,h=p[o+s-1],m=p[o+s];e.prev_length>=e.good_match&&(i>>=2),r>e.lookahead&&(r=e.lookahead);do{if(p[(a=n)+s]===m&&p[a+s-1]===h&&p[a]===p[o]&&p[++a]===p[o+1]){o+=2,a++;do{}while(p[++o]===p[++a]&&p[++o]===p[++a]&&p[++o]===p[++a]&&p[++o]===p[++a]&&p[++o]===p[++a]&&p[++o]===p[++a]&&p[++o]===p[++a]&&p[++o]===p[++a]&&o<d);if(t=wo-(d-o),o=d-wo,t>s){if(e.match_start=n,s=t,t>=r)break;h=p[o+s-1],m=p[o+s]}}}while((n=u[n&l])>c&&0!=--i);return s<=e.lookahead?s:e.lookahead}function qo(e){var n,a,t,i,o,s,r,c,p,l,u=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=u+(u-_o)){Oi(e.window,e.window,u,u,0),e.match_start-=u,e.strstart-=u,e.block_start-=u,n=a=e.hash_size;do{t=e.head[--n],e.head[n]=t>=u?t-u:0}while(--a);n=a=u;do{t=e.prev[--n],e.prev[n]=t>=u?t-u:0}while(--a);i+=u}if(0===e.strm.avail_in)break;if(s=e.strm,r=e.window,c=e.strstart+e.lookahead,p=i,l=void 0,(l=s.avail_in)>p&&(l=p),a=0===l?0:(s.avail_in-=l,Oi(r,s.input,s.next_in,l,c),1===s.state.wrap?s.adler=fo(s.adler,r,l,c):2===s.state.wrap&&(s.adler=xo(s.adler,r,l,c)),s.next_in+=l,s.total_in+=l,l),e.lookahead+=a,e.lookahead+e.insert>=3)for(o=e.strstart-e.insert,e.ins_h=e.window[o],e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+3-1])&e.hash_mask,e.prev[o&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=o,o++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<_o&&0!==e.strm.avail_in)}function Co(e,n){for(var a,t;;){if(e.lookahead<_o){if(qo(e),e.lookahead<_o&&0===n)return 1;if(0===e.lookahead)break}if(a=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==a&&e.strstart-a<=e.w_size-_o&&(e.match_length=Lo(e,a)),e.match_length>=3)if(t=mo(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else t=mo(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(t&&(So(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===n?(So(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(So(e,!1),0===e.strm.avail_out)?1:2}function Bo(e,n){for(var a,t,i;;){if(e.lookahead<_o){if(qo(e),e.lookahead<_o&&0===n)return 1;if(0===e.lookahead)break}if(a=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==a&&e.prev_length<e.max_lazy_match&&e.strstart-a<=e.w_size-_o&&(e.match_length=Lo(e,a),e.match_length<=5&&(1===e.strategy||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-3,t=mo(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,t&&(So(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((t=mo(e,0,e.window[e.strstart-1]))&&So(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(t=mo(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===n?(So(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(So(e,!1),0===e.strm.avail_out)?1:2}function Uo(e,n,a,t,i){this.good_length=e,this.max_lazy=n,this.nice_length=a,this.max_chain=t,this.func=i}function Mo(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new qi(1146),this.dyn_dtree=new qi(122),this.bl_tree=new qi(78),Ro(this.dyn_ltree),Ro(this.dyn_dtree),Ro(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new qi(16),this.heap=new qi(573),Ro(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new qi(573),Ro(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function Po(e){var n=function(e){var n;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(n=e.state).pending=0,n.pending_out=0,n.wrap<0&&(n.wrap=-n.wrap),n.status=n.wrap?42:ko,e.adler=2===n.wrap?0:1,n.last_flush=0,function(e){uo||(function(){var e,n,a,t,i,o=new Array(16);for(a=0,t=0;t<28;t++)for(Zi[t]=a,e=0;e<1<<Ui[t];e++)Fi[a++]=t;for(Fi[a-1]=t,i=0,t=0;t<16;t++)for(Vi[t]=i,e=0;e<1<<Mi[t];e++)$i[i++]=t;for(i>>=7;t<30;t++)for(Vi[t]=i<<7,e=0;e<1<<Mi[t]-7;e++)$i[256+i++]=t;for(n=0;n<=15;n++)o[n]=0;for(e=0;e<=143;)Di[2*e+1]=8,e++,o[8]++;for(;e<=255;)Di[2*e+1]=9,e++,o[9]++;for(;e<=279;)Di[2*e+1]=7,e++,o[7]++;for(;e<=287;)Di[2*e+1]=8,e++,o[8]++;for(ao(Di,287,o),e=0;e<30;e++)Ii[2*e+1]=5,Ii[2*e]=no(e,5);Hi=new Ki(Di,Ui,257,286,15),Yi=new Ki(Ii,Mi,0,30,15),Wi=new Ki(new Array(0),Pi,0,19,7)}(),uo=!0),e.l_desc=new Gi(e.dyn_ltree,Hi),e.d_desc=new Gi(e.dyn_dtree,Yi),e.bl_desc=new Gi(e.bl_tree,Wi),e.bi_buf=0,e.bi_valid=0,to(e)}(n),0):jo(e,bo)}(e);return 0===n&&function(e){e.window_size=2*e.w_size,Ro(e.head),e.max_lazy_match=go[e.level].max_lazy,e.good_match=go[e.level].good_length,e.nice_match=go[e.level].nice_length,e.max_chain_length=go[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0}(e.state),n}function No(e,n){var a,t,i,o;if(!e||!e.state||n>5||n<0)return e?jo(e,bo):bo;if(t=e.state,!e.output||!e.input&&0!==e.avail_in||t.status===Eo&&4!==n)return jo(e,0===e.avail_out?-5:bo);if(t.strm=e,a=t.last_flush,t.last_flush=n,42===t.status)if(2===t.wrap)e.adler=0,To(t,31),To(t,139),To(t,8),t.gzhead?(To(t,(t.gzhead.text?1:0)+(t.gzhead.hcrc?2:0)+(t.gzhead.extra?4:0)+(t.gzhead.name?8:0)+(t.gzhead.comment?16:0)),To(t,255&t.gzhead.time),To(t,t.gzhead.time>>8&255),To(t,t.gzhead.time>>16&255),To(t,t.gzhead.time>>24&255),To(t,9===t.level?2:t.strategy>=2||t.level<2?4:0),To(t,255&t.gzhead.os),t.gzhead.extra&&t.gzhead.extra.length&&(To(t,255&t.gzhead.extra.length),To(t,t.gzhead.extra.length>>8&255)),t.gzhead.hcrc&&(e.adler=xo(e.adler,t.pending_buf,t.pending,0)),t.gzindex=0,t.status=69):(To(t,0),To(t,0),To(t,0),To(t,0),To(t,0),To(t,9===t.level?2:t.strategy>=2||t.level<2?4:0),To(t,3),t.status=ko);else{var s=8+(t.w_bits-8<<4)<<8;s|=(t.strategy>=2||t.level<2?0:t.level<6?1:6===t.level?2:3)<<6,0!==t.strstart&&(s|=32),s+=31-s%31,t.status=ko,Oo(t,s),0!==t.strstart&&(Oo(t,e.adler>>>16),Oo(t,65535&e.adler)),e.adler=1}if(69===t.status)if(t.gzhead.extra){for(i=t.pending;t.gzindex<(65535&t.gzhead.extra.length)&&(t.pending!==t.pending_buf_size||(t.gzhead.hcrc&&t.pending>i&&(e.adler=xo(e.adler,t.pending_buf,t.pending-i,i)),zo(e),i=t.pending,t.pending!==t.pending_buf_size));)To(t,255&t.gzhead.extra[t.gzindex]),t.gzindex++;t.gzhead.hcrc&&t.pending>i&&(e.adler=xo(e.adler,t.pending_buf,t.pending-i,i)),t.gzindex===t.gzhead.extra.length&&(t.gzindex=0,t.status=73)}else t.status=73;if(73===t.status)if(t.gzhead.name){i=t.pending;do{if(t.pending===t.pending_buf_size&&(t.gzhead.hcrc&&t.pending>i&&(e.adler=xo(e.adler,t.pending_buf,t.pending-i,i)),zo(e),i=t.pending,t.pending===t.pending_buf_size)){o=1;break}o=t.gzindex<t.gzhead.name.length?255&t.gzhead.name.charCodeAt(t.gzindex++):0,To(t,o)}while(0!==o);t.gzhead.hcrc&&t.pending>i&&(e.adler=xo(e.adler,t.pending_buf,t.pending-i,i)),0===o&&(t.gzindex=0,t.status=91)}else t.status=91;if(91===t.status)if(t.gzhead.comment){i=t.pending;do{if(t.pending===t.pending_buf_size&&(t.gzhead.hcrc&&t.pending>i&&(e.adler=xo(e.adler,t.pending_buf,t.pending-i,i)),zo(e),i=t.pending,t.pending===t.pending_buf_size)){o=1;break}o=t.gzindex<t.gzhead.comment.length?255&t.gzhead.comment.charCodeAt(t.gzindex++):0,To(t,o)}while(0!==o);t.gzhead.hcrc&&t.pending>i&&(e.adler=xo(e.adler,t.pending_buf,t.pending-i,i)),0===o&&(t.status=yo)}else t.status=yo;if(t.status===yo&&(t.gzhead.hcrc?(t.pending+2>t.pending_buf_size&&zo(e),t.pending+2<=t.pending_buf_size&&(To(t,255&e.adler),To(t,e.adler>>8&255),e.adler=0,t.status=ko)):t.status=ko),0!==t.pending){if(zo(e),0===e.avail_out)return t.last_flush=-1,0}else if(0===e.avail_in&&Ao(n)<=Ao(a)&&4!==n)return jo(e,-5);if(t.status===Eo&&0!==e.avail_in)return jo(e,-5);if(0!==e.avail_in||0!==t.lookahead||0!==n&&t.status!==Eo){var r=2===t.strategy?function(e,n){for(var a;;){if(0===e.lookahead&&(qo(e),0===e.lookahead)){if(0===n)return 1;break}if(e.match_length=0,a=mo(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,a&&(So(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===n?(So(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(So(e,!1),0===e.strm.avail_out)?1:2}(t,n):3===t.strategy?function(e,n){for(var a,t,i,o,s=e.window;;){if(e.lookahead<=wo){if(qo(e),e.lookahead<=wo&&0===n)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(t=s[i=e.strstart-1])===s[++i]&&t===s[++i]&&t===s[++i]){o=e.strstart+wo;do{}while(t===s[++i]&&t===s[++i]&&t===s[++i]&&t===s[++i]&&t===s[++i]&&t===s[++i]&&t===s[++i]&&t===s[++i]&&i<o);e.match_length=wo-(o-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(a=mo(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(a=mo(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),a&&(So(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===n?(So(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(So(e,!1),0===e.strm.avail_out)?1:2}(t,n):go[t.level].func(t,n);if(3!==r&&4!==r||(t.status=Eo),1===r||3===r)return 0===e.avail_out&&(t.last_flush=-1),0;if(2===r&&(1===n?function(e){Qi(e,2,3),eo(e,256,Di),function(e){16===e.bi_valid?(Ji(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}(t):5!==n&&(ho(t,0,0,!1),3===n&&(Ro(t.head),0===t.lookahead&&(t.strstart=0,t.block_start=0,t.insert=0))),zo(e),0===e.avail_out))return t.last_flush=-1,0}return 4!==n?0:t.wrap<=0?1:(2===t.wrap?(To(t,255&e.adler),To(t,e.adler>>8&255),To(t,e.adler>>16&255),To(t,e.adler>>24&255),To(t,255&e.total_in),To(t,e.total_in>>8&255),To(t,e.total_in>>16&255),To(t,e.total_in>>24&255)):(Oo(t,e.adler>>>16),Oo(t,65535&e.adler)),zo(e),t.wrap>0&&(t.wrap=-t.wrap),0!==t.pending?0:1)}function Do(e,n){var a,t,i,o,s,r,c,p,l,u,d,h,m,f,v,x,g,b,w,_,y,k,E,j,A;a=e.state,t=e.next_in,j=e.input,i=t+(e.avail_in-5),o=e.next_out,A=e.output,s=o-(n-e.avail_out),r=o+(e.avail_out-257),c=a.dmax,p=a.wsize,l=a.whave,u=a.wnext,d=a.window,h=a.hold,m=a.bits,f=a.lencode,v=a.distcode,x=(1<<a.lenbits)-1,g=(1<<a.distbits)-1;e:do{m<15&&(h+=j[t++]<<m,m+=8,h+=j[t++]<<m,m+=8),b=f[h&x];n:for(;;){if(h>>>=w=b>>>24,m-=w,0==(w=b>>>16&255))A[o++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=f[(65535&b)+(h&(1<<w)-1)];continue n}if(32&w){a.mode=12;break e}e.msg="invalid literal/length code",a.mode=30;break e}_=65535&b,(w&=15)&&(m<w&&(h+=j[t++]<<m,m+=8),_+=h&(1<<w)-1,h>>>=w,m-=w),m<15&&(h+=j[t++]<<m,m+=8,h+=j[t++]<<m,m+=8),b=v[h&g];a:for(;;){if(h>>>=w=b>>>24,m-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=v[(65535&b)+(h&(1<<w)-1)];continue a}e.msg="invalid distance code",a.mode=30;break e}if(y=65535&b,m<(w&=15)&&(h+=j[t++]<<m,(m+=8)<w&&(h+=j[t++]<<m,m+=8)),(y+=h&(1<<w)-1)>c){e.msg="invalid distance too far back",a.mode=30;break e}if(h>>>=w,m-=w,y>(w=o-s)){if((w=y-w)>l&&a.sane){e.msg="invalid distance too far back",a.mode=30;break e}if(k=0,E=d,0===u){if(k+=p-w,w<_){_-=w;do{A[o++]=d[k++]}while(--w);k=o-y,E=A}}else if(u<w){if(k+=p+u-w,(w-=u)<_){_-=w;do{A[o++]=d[k++]}while(--w);if(k=0,u<_){_-=w=u;do{A[o++]=d[k++]}while(--w);k=o-y,E=A}}}else if(k+=u-w,w<_){_-=w;do{A[o++]=d[k++]}while(--w);k=o-y,E=A}for(;_>2;)A[o++]=E[k++],A[o++]=E[k++],A[o++]=E[k++],_-=3;_&&(A[o++]=E[k++],_>1&&(A[o++]=E[k++]))}else{k=o-y;do{A[o++]=A[k++],A[o++]=A[k++],A[o++]=A[k++],_-=3}while(_>2);_&&(A[o++]=A[k++],_>1&&(A[o++]=A[k++]))}break}}break}}while(t<i&&o<r);t-=_=m>>3,h&=(1<<(m-=_<<3))-1,e.next_in=t,e.next_out=o,e.avail_in=t<i?i-t+5:5-(t-i),e.avail_out=o<r?r-o+257:257-(o-r),a.hold=h,a.bits=m}go=[new Uo(0,0,0,0,(function(e,n){var a=65535;for(a>e.pending_buf_size-5&&(a=e.pending_buf_size-5);;){if(e.lookahead<=1){if(qo(e),0===e.lookahead&&0===n)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var t=e.block_start+a;if((0===e.strstart||e.strstart>=t)&&(e.lookahead=e.strstart-t,e.strstart=t,So(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-_o&&(So(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===n?(So(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(So(e,!1),e.strm.avail_out),1)})),new Uo(4,4,8,4,Co),new Uo(4,5,16,8,Co),new Uo(4,6,32,32,Co),new Uo(4,4,16,16,Bo),new Uo(8,16,32,32,Bo),new Uo(8,16,128,128,Bo),new Uo(8,32,128,256,Bo),new Uo(32,128,258,1024,Bo),new Uo(32,258,258,4096,Bo)];var Io=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],$o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],Fo=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],Zo=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];function Ho(e,n,a,t,i,o,s,r){var c,p,l,u,d,h,m,f,v,x=r.bits,g=0,b=0,w=0,_=0,y=0,k=0,E=0,j=0,A=0,R=0,z=null,S=0,T=new qi(16),O=new qi(16),L=null,q=0;for(g=0;g<=15;g++)T[g]=0;for(b=0;b<t;b++)T[n[a+b]]++;for(y=x,_=15;_>=1&&0===T[_];_--);if(y>_&&(y=_),0===_)return i[o++]=20971520,i[o++]=20971520,r.bits=1,0;for(w=1;w<_&&0===T[w];w++);for(y<w&&(y=w),j=1,g=1;g<=15;g++)if(j<<=1,(j-=T[g])<0)return-1;if(j>0&&(0===e||1!==_))return-1;for(O[1]=0,g=1;g<15;g++)O[g+1]=O[g]+T[g];for(b=0;b<t;b++)0!==n[a+b]&&(s[O[n[a+b]]++]=b);if(0===e?(z=L=s,h=19):1===e?(z=Io,S-=257,L=$o,q-=257,h=256):(z=Fo,L=Zo,h=-1),R=0,b=0,g=w,d=o,k=y,E=0,l=-1,u=(A=1<<y)-1,1===e&&A>852||2===e&&A>592)return 1;for(;;){m=g-E,s[b]<h?(f=0,v=s[b]):s[b]>h?(f=L[q+s[b]],v=z[S+s[b]]):(f=96,v=0),c=1<<g-E,w=p=1<<k;do{i[d+(R>>E)+(p-=c)]=m<<24|f<<16|v|0}while(0!==p);for(c=1<<g-1;R&c;)c>>=1;if(0!==c?(R&=c-1,R+=c):R=0,b++,0==--T[g]){if(g===_)break;g=n[a+s[b]]}if(g>y&&(R&u)!==l){for(0===E&&(E=y),d+=w,j=1<<(k=g-E);k+E<_&&!((j-=T[k+E])<=0);)k++,j<<=1;if(A+=1<<k,1===e&&A>852||2===e&&A>592)return 1;i[l=R&u]=y<<24|k<<16|d-o|0}}return 0!==R&&(i[d+R]=g-E<<24|64<<16|0),r.bits=y,0}var Yo=-2,Wo=12,Vo=30;function Ko(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function Go(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new qi(320),this.work=new qi(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function Xo(e){var n;return e&&e.state?((n=e.state).wsize=0,n.whave=0,n.wnext=0,function(e){var n;return e&&e.state?(n=e.state,e.total_in=e.total_out=n.total=0,e.msg="",n.wrap&&(e.adler=1&n.wrap),n.mode=1,n.last=0,n.havedict=0,n.dmax=32768,n.head=null,n.hold=0,n.bits=0,n.lencode=n.lendyn=new Ci(852),n.distcode=n.distdyn=new Ci(592),n.sane=1,n.back=-1,0):Yo}(e)):Yo}var Jo,Qo,es,ns=!0;function as(e){if(ns){var n;for(Jo=new Ci(512),Qo=new Ci(32),n=0;n<144;)e.lens[n++]=8;for(;n<256;)e.lens[n++]=9;for(;n<280;)e.lens[n++]=7;for(;n<288;)e.lens[n++]=8;for(Ho(1,e.lens,0,288,Jo,0,e.work,{bits:9}),n=0;n<32;)e.lens[n++]=5;Ho(2,e.lens,0,32,Qo,0,e.work,{bits:5}),ns=!1}e.lencode=Jo,e.lenbits=9,e.distcode=Qo,e.distbits=5}function ts(e){if(e<1||e>7)throw new TypeError("Bad argument");this.mode=e,this.init_done=!1,this.write_in_progress=!1,this.pending_close=!1,this.windowBits=0,this.level=0,this.memLevel=0,this.strategy=0,this.dictionary=null}function is(e,n){for(var a=0;a<e.length;a++)this[n+a]=e[a]}ts.prototype.init=function(e,n,a,t,i){var o;switch(this.windowBits=e,this.level=n,this.memLevel=a,this.strategy=t,3!==this.mode&&4!==this.mode||(this.windowBits+=16),7===this.mode&&(this.windowBits+=32),5!==this.mode&&6!==this.mode||(this.windowBits=-this.windowBits),this.strm=new Ti,this.mode){case 1:case 3:case 5:o=function(e,n,a,t,i,o){if(!e)return bo;var s=1;if(-1===n&&(n=6),t<0?(s=0,t=-t):t>15&&(s=2,t-=16),i<1||i>9||t<8||t>15||n<0||n>9||o<0||o>4)return jo(e,bo);8===t&&(t=9);var r=new Mo;return e.state=r,r.strm=e,r.wrap=s,r.gzhead=null,r.w_bits=t,r.w_size=1<<r.w_bits,r.w_mask=r.w_size-1,r.hash_bits=i+7,r.hash_size=1<<r.hash_bits,r.hash_mask=r.hash_size-1,r.hash_shift=~~((r.hash_bits+3-1)/3),r.window=new Li(2*r.w_size),r.head=new qi(r.hash_size),r.prev=new qi(r.w_size),r.lit_bufsize=1<<i+6,r.pending_buf_size=4*r.lit_bufsize,r.pending_buf=new Li(r.pending_buf_size),r.d_buf=1*r.lit_bufsize,r.l_buf=3*r.lit_bufsize,r.level=n,r.strategy=o,r.method=8,Po(e)}(this.strm,this.level,0,this.windowBits,this.memLevel,this.strategy);break;case 2:case 4:case 6:case 7:o=function(e,n){var a,t;return e?(t=new Go,e.state=t,t.window=null,0!==(a=function(e,n){var a,t;return e&&e.state?(t=e.state,n<0?(a=0,n=-n):(a=1+(n>>4),n<48&&(n&=15)),n&&(n<8||n>15)?Yo:(null!==t.window&&t.wbits!==n&&(t.window=null),t.wrap=a,t.wbits=n,Xo(e))):Yo}(e,n))&&(e.state=null),a):Yo}(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}0===o?(this.write_in_progress=!1,this.init_done=!0):this._error(o)},ts.prototype.params=function(){throw new Error("deflateParams Not supported")},ts.prototype._writeCheck=function(){if(!this.init_done)throw new Error("write before init");if(0===this.mode)throw new Error("already finalized");if(this.write_in_progress)throw new Error("write already in progress");if(this.pending_close)throw new Error("close is pending")},ts.prototype.write=function(e,n,a,t,i,o,s){this._writeCheck(),this.write_in_progress=!0;var r=this;return H.nextTick((function(){r.write_in_progress=!1;var c=r._write(e,n,a,t,i,o,s);r.callback(c[0],c[1]),r.pending_close&&r.close()})),this},ts.prototype.writeSync=function(e,n,a,t,i,o,s){return this._writeCheck(),this._write(e,n,a,t,i,o,s)},ts.prototype._write=function(e,n,a,t,i,o,s){if(this.write_in_progress=!0,0!==e&&1!==e&&2!==e&&3!==e&&4!==e&&5!==e)throw new Error("Invalid flush value");null==n&&(n=new he(0),t=0,a=0),i._set?i.set=i._set:i.set=is;var r,c=this.strm;switch(c.avail_in=t,c.input=n,c.next_in=a,c.avail_out=s,c.output=i,c.next_out=o,this.mode){case 1:case 3:case 5:r=No(c,e);break;case 7:case 2:case 4:case 6:r=function(e,n){var a,t,i,o,s,r,c,p,l,u,d,h,m,f,v,x,g,b,w,_,y,k,E,j,A=0,R=new Li(4),z=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return Yo;(a=e.state).mode===Wo&&(a.mode=13),s=e.next_out,i=e.output,c=e.avail_out,o=e.next_in,t=e.input,r=e.avail_in,p=a.hold,l=a.bits,u=r,d=c,k=0;e:for(;;)switch(a.mode){case 1:if(0===a.wrap){a.mode=13;break}for(;l<16;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}if(2&a.wrap&&35615===p){a.check=0,R[0]=255&p,R[1]=p>>>8&255,a.check=xo(a.check,R,2,0),p=0,l=0,a.mode=2;break}if(a.flags=0,a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&p)<<8)+(p>>8))%31){e.msg="incorrect header check",a.mode=Vo;break}if(8!=(15&p)){e.msg="unknown compression method",a.mode=Vo;break}if(l-=4,y=8+(15&(p>>>=4)),0===a.wbits)a.wbits=y;else if(y>a.wbits){e.msg="invalid window size",a.mode=Vo;break}a.dmax=1<<y,e.adler=a.check=1,a.mode=512&p?10:Wo,p=0,l=0;break;case 2:for(;l<16;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}if(a.flags=p,8!=(255&a.flags)){e.msg="unknown compression method",a.mode=Vo;break}if(57344&a.flags){e.msg="unknown header flags set",a.mode=Vo;break}a.head&&(a.head.text=p>>8&1),512&a.flags&&(R[0]=255&p,R[1]=p>>>8&255,a.check=xo(a.check,R,2,0)),p=0,l=0,a.mode=3;case 3:for(;l<32;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}a.head&&(a.head.time=p),512&a.flags&&(R[0]=255&p,R[1]=p>>>8&255,R[2]=p>>>16&255,R[3]=p>>>24&255,a.check=xo(a.check,R,4,0)),p=0,l=0,a.mode=4;case 4:for(;l<16;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}a.head&&(a.head.xflags=255&p,a.head.os=p>>8),512&a.flags&&(R[0]=255&p,R[1]=p>>>8&255,a.check=xo(a.check,R,2,0)),p=0,l=0,a.mode=5;case 5:if(1024&a.flags){for(;l<16;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}a.length=p,a.head&&(a.head.extra_len=p),512&a.flags&&(R[0]=255&p,R[1]=p>>>8&255,a.check=xo(a.check,R,2,0)),p=0,l=0}else a.head&&(a.head.extra=null);a.mode=6;case 6:if(1024&a.flags&&((h=a.length)>r&&(h=r),h&&(a.head&&(y=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Array(a.head.extra_len)),Oi(a.head.extra,t,o,h,y)),512&a.flags&&(a.check=xo(a.check,t,h,o)),r-=h,o+=h,a.length-=h),a.length))break e;a.length=0,a.mode=7;case 7:if(2048&a.flags){if(0===r)break e;h=0;do{y=t[o+h++],a.head&&y&&a.length<65536&&(a.head.name+=String.fromCharCode(y))}while(y&&h<r);if(512&a.flags&&(a.check=xo(a.check,t,h,o)),r-=h,o+=h,y)break e}else a.head&&(a.head.name=null);a.length=0,a.mode=8;case 8:if(4096&a.flags){if(0===r)break e;h=0;do{y=t[o+h++],a.head&&y&&a.length<65536&&(a.head.comment+=String.fromCharCode(y))}while(y&&h<r);if(512&a.flags&&(a.check=xo(a.check,t,h,o)),r-=h,o+=h,y)break e}else a.head&&(a.head.comment=null);a.mode=9;case 9:if(512&a.flags){for(;l<16;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}if(p!==(65535&a.check)){e.msg="header crc mismatch",a.mode=Vo;break}p=0,l=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),e.adler=a.check=0,a.mode=Wo;break;case 10:for(;l<32;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}e.adler=a.check=Ko(p),p=0,l=0,a.mode=11;case 11:if(0===a.havedict)return e.next_out=s,e.avail_out=c,e.next_in=o,e.avail_in=r,a.hold=p,a.bits=l,2;e.adler=a.check=1,a.mode=Wo;case Wo:if(5===n||6===n)break e;case 13:if(a.last){p>>>=7&l,l-=7&l,a.mode=27;break}for(;l<3;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}switch(a.last=1&p,l-=1,3&(p>>>=1)){case 0:a.mode=14;break;case 1:if(as(a),a.mode=20,6===n){p>>>=2,l-=2;break e}break;case 2:a.mode=17;break;case 3:e.msg="invalid block type",a.mode=Vo}p>>>=2,l-=2;break;case 14:for(p>>>=7&l,l-=7&l;l<32;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}if((65535&p)!=(p>>>16^65535)){e.msg="invalid stored block lengths",a.mode=Vo;break}if(a.length=65535&p,p=0,l=0,a.mode=15,6===n)break e;case 15:a.mode=16;case 16:if(h=a.length){if(h>r&&(h=r),h>c&&(h=c),0===h)break e;Oi(i,t,o,h,s),r-=h,o+=h,c-=h,s+=h,a.length-=h;break}a.mode=Wo;break;case 17:for(;l<14;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}if(a.nlen=257+(31&p),p>>>=5,l-=5,a.ndist=1+(31&p),p>>>=5,l-=5,a.ncode=4+(15&p),p>>>=4,l-=4,a.nlen>286||a.ndist>30){e.msg="too many length or distance symbols",a.mode=Vo;break}a.have=0,a.mode=18;case 18:for(;a.have<a.ncode;){for(;l<3;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}a.lens[z[a.have++]]=7&p,p>>>=3,l-=3}for(;a.have<19;)a.lens[z[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,E={bits:a.lenbits},k=Ho(0,a.lens,0,19,a.lencode,0,a.work,E),a.lenbits=E.bits,k){e.msg="invalid code lengths set",a.mode=Vo;break}a.have=0,a.mode=19;case 19:for(;a.have<a.nlen+a.ndist;){for(;x=(A=a.lencode[p&(1<<a.lenbits)-1])>>>16&255,g=65535&A,!((v=A>>>24)<=l);){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}if(g<16)p>>>=v,l-=v,a.lens[a.have++]=g;else{if(16===g){for(j=v+2;l<j;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}if(p>>>=v,l-=v,0===a.have){e.msg="invalid bit length repeat",a.mode=Vo;break}y=a.lens[a.have-1],h=3+(3&p),p>>>=2,l-=2}else if(17===g){for(j=v+3;l<j;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}l-=v,y=0,h=3+(7&(p>>>=v)),p>>>=3,l-=3}else{for(j=v+7;l<j;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}l-=v,y=0,h=11+(127&(p>>>=v)),p>>>=7,l-=7}if(a.have+h>a.nlen+a.ndist){e.msg="invalid bit length repeat",a.mode=Vo;break}for(;h--;)a.lens[a.have++]=y}}if(a.mode===Vo)break;if(0===a.lens[256]){e.msg="invalid code -- missing end-of-block",a.mode=Vo;break}if(a.lenbits=9,E={bits:a.lenbits},k=Ho(1,a.lens,0,a.nlen,a.lencode,0,a.work,E),a.lenbits=E.bits,k){e.msg="invalid literal/lengths set",a.mode=Vo;break}if(a.distbits=6,a.distcode=a.distdyn,E={bits:a.distbits},k=Ho(2,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,E),a.distbits=E.bits,k){e.msg="invalid distances set",a.mode=Vo;break}if(a.mode=20,6===n)break e;case 20:a.mode=21;case 21:if(r>=6&&c>=258){e.next_out=s,e.avail_out=c,e.next_in=o,e.avail_in=r,a.hold=p,a.bits=l,Do(e,d),s=e.next_out,i=e.output,c=e.avail_out,o=e.next_in,t=e.input,r=e.avail_in,p=a.hold,l=a.bits,a.mode===Wo&&(a.back=-1);break}for(a.back=0;x=(A=a.lencode[p&(1<<a.lenbits)-1])>>>16&255,g=65535&A,!((v=A>>>24)<=l);){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}if(x&&0==(240&x)){for(b=v,w=x,_=g;x=(A=a.lencode[_+((p&(1<<b+w)-1)>>b)])>>>16&255,g=65535&A,!(b+(v=A>>>24)<=l);){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}p>>>=b,l-=b,a.back+=b}if(p>>>=v,l-=v,a.back+=v,a.length=g,0===x){a.mode=26;break}if(32&x){a.back=-1,a.mode=Wo;break}if(64&x){e.msg="invalid literal/length code",a.mode=Vo;break}a.extra=15&x,a.mode=22;case 22:if(a.extra){for(j=a.extra;l<j;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}a.length+=p&(1<<a.extra)-1,p>>>=a.extra,l-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=23;case 23:for(;x=(A=a.distcode[p&(1<<a.distbits)-1])>>>16&255,g=65535&A,!((v=A>>>24)<=l);){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}if(0==(240&x)){for(b=v,w=x,_=g;x=(A=a.distcode[_+((p&(1<<b+w)-1)>>b)])>>>16&255,g=65535&A,!(b+(v=A>>>24)<=l);){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}p>>>=b,l-=b,a.back+=b}if(p>>>=v,l-=v,a.back+=v,64&x){e.msg="invalid distance code",a.mode=Vo;break}a.offset=g,a.extra=15&x,a.mode=24;case 24:if(a.extra){for(j=a.extra;l<j;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}a.offset+=p&(1<<a.extra)-1,p>>>=a.extra,l-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){e.msg="invalid distance too far back",a.mode=Vo;break}a.mode=25;case 25:if(0===c)break e;if(h=d-c,a.offset>h){if((h=a.offset-h)>a.whave&&a.sane){e.msg="invalid distance too far back",a.mode=Vo;break}h>a.wnext?(h-=a.wnext,m=a.wsize-h):m=a.wnext-h,h>a.length&&(h=a.length),f=a.window}else f=i,m=s-a.offset,h=a.length;h>c&&(h=c),c-=h,a.length-=h;do{i[s++]=f[m++]}while(--h);0===a.length&&(a.mode=21);break;case 26:if(0===c)break e;i[s++]=a.length,c--,a.mode=21;break;case 27:if(a.wrap){for(;l<32;){if(0===r)break e;r--,p|=t[o++]<<l,l+=8}if(d-=c,e.total_out+=d,a.total+=d,d&&(e.adler=a.check=a.flags?xo(a.check,i,d,s-d):fo(a.check,i,d,s-d)),d=c,(a.flags?p:Ko(p))!==a.check){e.msg="incorrect data check",a.mode=Vo;break}p=0,l=0}a.mode=28;case 28:if(a.wrap&&a.flags){for(;l<32;){if(0===r)break e;r--,p+=t[o++]<<l,l+=8}if(p!==(4294967295&a.total)){e.msg="incorrect length check",a.mode=Vo;break}p=0,l=0}a.mode=29;case 29:k=1;break e;case Vo:k=-3;break e;case 31:return-4;case 32:default:return Yo}return e.next_out=s,e.avail_out=c,e.next_in=o,e.avail_in=r,a.hold=p,a.bits=l,(a.wsize||d!==e.avail_out&&a.mode<Vo&&(a.mode<27||4!==n))&&function(e,n,a,t){var i,o=e.state;null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new Li(o.wsize)),t>=o.wsize?(Oi(o.window,n,a-o.wsize,o.wsize,0),o.wnext=0,o.whave=o.wsize):((i=o.wsize-o.wnext)>t&&(i=t),Oi(o.window,n,a-t,i,o.wnext),(t-=i)?(Oi(o.window,n,a-t,t,0),o.wnext=t,o.whave=o.wsize):(o.wnext+=i,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=i)))}(e,e.output,e.next_out,d-e.avail_out),u-=e.avail_in,d-=e.avail_out,e.total_in+=u,e.total_out+=d,a.total+=d,a.wrap&&d&&(e.adler=a.check=a.flags?xo(a.check,i,d,e.next_out-d):fo(a.check,i,d,e.next_out-d)),e.data_type=a.bits+(a.last?64:0)+(a.mode===Wo?128:0)+(20===a.mode||15===a.mode?256:0),(0===u&&0===d||4===n)&&0===k&&(k=-5),k}(c,e);break;default:throw new Error("Unknown mode "+this.mode)}return 1!==r&&0!==r&&this._error(r),this.write_in_progress=!1,[c.avail_in,c.avail_out]},ts.prototype.close=function(){this.write_in_progress?this.pending_close=!0:(this.pending_close=!1,1===this.mode||3===this.mode||5===this.mode?function(e){var n;e&&e.state&&(42!==(n=e.state.status)&&69!==n&&73!==n&&91!==n&&n!==yo&&n!==ko&&n!==Eo?jo(e,bo):(e.state=null,n===ko&&jo(e,-3)))}(this.strm):function(e){if(!e||!e.state)return Yo;var n=e.state;n.window&&(n.window=null),e.state=null}(this.strm),this.mode=0)},ts.prototype.reset=function(){switch(this.mode){case 1:case 5:es=Po(this.strm);break;case 2:case 6:es=Xo(this.strm)}0!==es&&this._error(es)},ts.prototype._error=function(e){this.onerror(Si[e]+": "+this.strm.msg,e),this.write_in_progress=!1,this.pending_close&&this.close()};var os=Object.freeze({__proto__:null,NONE:0,DEFLATE:1,INFLATE:2,GZIP:3,GUNZIP:4,DEFLATERAW:5,INFLATERAW:6,UNZIP:7,Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8,Zlib:ts}),ss={};Object.keys(os).forEach((function(e){ss[e]=os[e]})),ss.Z_MIN_WINDOWBITS=8,ss.Z_MAX_WINDOWBITS=15,ss.Z_DEFAULT_WINDOWBITS=15,ss.Z_MIN_CHUNK=64,ss.Z_MAX_CHUNK=1/0,ss.Z_DEFAULT_CHUNK=16384,ss.Z_MIN_MEMLEVEL=1,ss.Z_MAX_MEMLEVEL=9,ss.Z_DEFAULT_MEMLEVEL=8,ss.Z_MIN_LEVEL=-1,ss.Z_MAX_LEVEL=9,ss.Z_DEFAULT_LEVEL=ss.Z_DEFAULT_COMPRESSION;var rs={Z_OK:ss.Z_OK,Z_STREAM_END:ss.Z_STREAM_END,Z_NEED_DICT:ss.Z_NEED_DICT,Z_ERRNO:ss.Z_ERRNO,Z_STREAM_ERROR:ss.Z_STREAM_ERROR,Z_DATA_ERROR:ss.Z_DATA_ERROR,Z_MEM_ERROR:ss.Z_MEM_ERROR,Z_BUF_ERROR:ss.Z_BUF_ERROR,Z_VERSION_ERROR:ss.Z_VERSION_ERROR};function cs(e){if(!(this instanceof cs))return new cs(e);fs.call(this,e,ss.DEFLATE)}function ps(e){if(!(this instanceof ps))return new ps(e);fs.call(this,e,ss.INFLATE)}function ls(e){if(!(this instanceof ls))return new ls(e);fs.call(this,e,ss.GZIP)}function us(e){if(!(this instanceof us))return new us(e);fs.call(this,e,ss.GUNZIP)}function ds(e){if(!(this instanceof ds))return new ds(e);fs.call(this,e,ss.DEFLATERAW)}function hs(e){if(!(this instanceof hs))return new hs(e);fs.call(this,e,ss.INFLATERAW)}function ms(e){if(!(this instanceof ms))return new ms(e);fs.call(this,e,ss.UNZIP)}function fs(e,n){if(this._opts=e=e||{},this._chunkSize=e.chunkSize||ss.Z_DEFAULT_CHUNK,$a.call(this,e),e.flush&&e.flush!==ss.Z_NO_FLUSH&&e.flush!==ss.Z_PARTIAL_FLUSH&&e.flush!==ss.Z_SYNC_FLUSH&&e.flush!==ss.Z_FULL_FLUSH&&e.flush!==ss.Z_FINISH&&e.flush!==ss.Z_BLOCK)throw new Error("Invalid flush flag: "+e.flush);if(this._flushFlag=e.flush||ss.Z_NO_FLUSH,e.chunkSize&&(e.chunkSize<ss.Z_MIN_CHUNK||e.chunkSize>ss.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+e.chunkSize);if(e.windowBits&&(e.windowBits<ss.Z_MIN_WINDOWBITS||e.windowBits>ss.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+e.windowBits);if(e.level&&(e.level<ss.Z_MIN_LEVEL||e.level>ss.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+e.level);if(e.memLevel&&(e.memLevel<ss.Z_MIN_MEMLEVEL||e.memLevel>ss.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+e.memLevel);if(e.strategy&&e.strategy!=ss.Z_FILTERED&&e.strategy!=ss.Z_HUFFMAN_ONLY&&e.strategy!=ss.Z_RLE&&e.strategy!=ss.Z_FIXED&&e.strategy!=ss.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+e.strategy);if(e.dictionary&&!he.isBuffer(e.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._binding=new ss.Zlib(n);var a=this;this._hadError=!1,this._binding.onerror=function(e,n){a._binding=null,a._hadError=!0;var t=new Error(e);t.errno=n,t.code=ss.codes[n],a.emit("error",t)};var t=ss.Z_DEFAULT_COMPRESSION;"number"==typeof e.level&&(t=e.level);var i=ss.Z_DEFAULT_STRATEGY;"number"==typeof e.strategy&&(i=e.strategy),this._binding.init(e.windowBits||ss.Z_DEFAULT_WINDOWBITS,t,e.memLevel||ss.Z_DEFAULT_MEMLEVEL,i,e.dictionary),this._buffer=new he(this._chunkSize),this._offset=0,this._closed=!1,this._level=t,this._strategy=i,this.once("end",this.close)}Object.keys(rs).forEach((function(e){rs[rs[e]]=e})),un(fs,$a),fs.prototype.params=function(e,n,a){if(e<ss.Z_MIN_LEVEL||e>ss.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+e);if(n!=ss.Z_FILTERED&&n!=ss.Z_HUFFMAN_ONLY&&n!=ss.Z_RLE&&n!=ss.Z_FIXED&&n!=ss.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+n);if(this._level!==e||this._strategy!==n){var t=this;this.flush(ss.Z_SYNC_FLUSH,(function(){t._binding.params(e,n),t._hadError||(t._level=e,t._strategy=n,a&&a())}))}else H.nextTick(a)},fs.prototype.reset=function(){return this._binding.reset()},fs.prototype._flush=function(e){this._transform(new he(0),"",e)},fs.prototype.flush=function(e,n){var a=this._writableState;if(("function"==typeof e||void 0===e&&!n)&&(n=e,e=ss.Z_FULL_FLUSH),a.ended)n&&H.nextTick(n);else if(a.ending)n&&this.once("end",n);else if(a.needDrain){var t=this;this.once("drain",(function(){t.flush(n)}))}else this._flushFlag=e,this.write(new he(0),"",n)},fs.prototype.close=function(e){if(e&&H.nextTick(e),!this._closed){this._closed=!0,this._binding.close();var n=this;H.nextTick((function(){n.emit("close")}))}},fs.prototype._transform=function(e,n,a){var t,i=this._writableState,o=(i.ending||i.ended)&&(!e||i.length===e.length);if(null===!e&&!he.isBuffer(e))return a(new Error("invalid input"));o?t=ss.Z_FINISH:(t=this._flushFlag,e.length>=i.length&&(this._flushFlag=this._opts.flush||ss.Z_NO_FLUSH)),this._processChunk(e,t,a)},fs.prototype._processChunk=function(e,n,a){var t=e&&e.length,i=this._chunkSize-this._offset,o=0,s=this,r="function"==typeof a;if(!r){var c,p=[],l=0;this.on("error",(function(e){c=e}));do{var u=this._binding.writeSync(n,e,o,t,this._buffer,this._offset,i)}while(!this._hadError&&m(u[0],u[1]));if(this._hadError)throw c;var d=he.concat(p,l);return this.close(),d}var h=this._binding.write(n,e,o,t,this._buffer,this._offset,i);function m(c,u){if(!s._hadError){var d=i-u;if(function(e,n){if(!e)throw new Error("have should not go down")}(d>=0),d>0){var h=s._buffer.slice(s._offset,s._offset+d);s._offset+=d,r?s.push(h):(p.push(h),l+=h.length)}if((0===u||s._offset>=s._chunkSize)&&(i=s._chunkSize,s._offset=0,s._buffer=new he(s._chunkSize)),0===u){if(o+=t-c,t=c,!r)return!0;var f=s._binding.write(n,e,o,t,s._buffer,s._offset,s._chunkSize);return f.callback=m,void(f.buffer=e)}if(!r)return!1;a()}}h.buffer=e,h.callback=m},un(cs,fs),un(ps,fs),un(ls,fs),un(us,fs),un(ds,fs),un(hs,fs),un(ms,fs);var vs=function(e){return new ms(e)},xs="axios",gs="0.20.0",bs="Promise based HTTP client for the browser and node.js",ws="index.js",_s={test:"grunt test && bundlesize",start:"node ./sandbox/server.js",build:"NODE_ENV=production grunt build",preversion:"npm test",version:"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",postversion:"git push && git push --tags",examples:"node ./examples/server.js",coveralls:"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",fix:"eslint --fix lib/**/*.js"},ys={type:"git",url:"https://github.com/axios/axios.git"},ks=["xhr","http","ajax","promise","node"],Es="Matt Zabriskie",js={url:"https://github.com/axios/axios/issues"},As="https://github.com/axios/axios",Rs={bundlesize:"^0.17.0",coveralls:"^3.0.0","es6-promise":"^4.2.4",grunt:"^1.0.2","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^20.1.0","grunt-karma":"^2.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^1.0.18","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1",karma:"^1.3.0","karma-chrome-launcher":"^2.2.0","karma-coverage":"^1.1.1","karma-firefox-launcher":"^1.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-opera-launcher":"^1.0.0","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^1.2.0","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^1.7.0","load-grunt-tasks":"^3.5.2",minimist:"^1.2.0",mocha:"^5.2.0",sinon:"^4.5.0",typescript:"^2.8.1","url-search-params":"^0.10.0",webpack:"^1.13.1","webpack-dev-server":"^1.14.1"},zs={"./lib/adapters/http.js":"./lib/adapters/xhr.js"},Ss="dist/axios.min.js",Ts="dist/axios.min.js",Os="./index.d.ts",Ls={"follow-redirects":"^1.10.0"},qs=[{path:"./dist/axios.min.js",threshold:"5kB"}],Cs={name:xs,version:gs,description:bs,main:ws,scripts:_s,repository:ys,keywords:ks,author:Es,license:"MIT",bugs:js,homepage:As,devDependencies:Rs,browser:zs,jsdelivr:Ss,unpkg:Ts,typings:Os,dependencies:Ls,bundlesize:qs},Bs=t(Object.freeze({__proto__:null,name:xs,version:gs,description:bs,main:ws,scripts:_s,repository:ys,keywords:ks,author:Es,license:"MIT",bugs:js,homepage:As,devDependencies:Rs,browser:zs,jsdelivr:Ss,unpkg:Ts,typings:Os,dependencies:Ls,bundlesize:qs,default:Cs})),Us=Ri.http,Ms=Ri.https,Ps=/https:?/,Ns={"Content-Type":"application/x-www-form-urlencoded"};function Ds(e,n){!h.isUndefined(e)&&h.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var Is,$s={adapter:("undefined"!=typeof XMLHttpRequest?Is=function(e){return new Promise((function(n,a){var t=e.data,i=e.headers;h.isFormData(t)&&delete i["Content-Type"],(h.isBlob(t)||h.isFile(t))&&t.type&&delete i["Content-Type"];var o=new XMLHttpRequest;if(e.auth){var s=e.auth.username||"",r=unescape(encodeURIComponent(e.auth.password))||"";i.Authorization="Basic "+btoa(s+":"+r)}var c=X(e.baseURL,e.url);if(o.open(e.method.toUpperCase(),f(c,e.params,e.paramsSerializer),!0),o.timeout=e.timeout,o.onreadystatechange=function(){if(o&&4===o.readyState&&(0!==o.status||o.responseURL&&0===o.responseURL.indexOf("file:"))){var t,i,s,r,c,p="getAllResponseHeaders"in o?(t=o.getAllResponseHeaders(),c={},t?(h.forEach(t.split("\n"),(function(e){if(r=e.indexOf(":"),i=h.trim(e.substr(0,r)).toLowerCase(),s=h.trim(e.substr(r+1)),i){if(c[i]&&J.indexOf(i)>=0)return;c[i]="set-cookie"===i?(c[i]?c[i]:[]).concat([s]):c[i]?c[i]+", "+s:s}})),c):c):null,l={data:e.responseType&&"text"!==e.responseType?o.response:o.responseText,status:o.status,statusText:o.statusText,headers:p,config:e,request:o};K(n,a,l),o=null}},o.onabort=function(){o&&(a(V("Request aborted",e,"ECONNABORTED",o)),o=null)},o.onerror=function(){a(V("Network Error",e,null,o)),o=null},o.ontimeout=function(){var n="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(n=e.timeoutErrorMessage),a(V(n,e,"ECONNABORTED",o)),o=null},h.isStandardBrowserEnv()){var p=(e.withCredentials||Q(c))&&e.xsrfCookieName?G.read(e.xsrfCookieName):void 0;p&&(i[e.xsrfHeaderName]=p)}if("setRequestHeader"in o&&h.forEach(i,(function(e,n){void 0===t&&"content-type"===n.toLowerCase()?delete i[n]:o.setRequestHeader(n,e)})),h.isUndefined(e.withCredentials)||(o.withCredentials=!!e.withCredentials),e.responseType)try{o.responseType=e.responseType}catch(n){if("json"!==e.responseType)throw n}"function"==typeof e.onDownloadProgress&&o.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&o.upload&&o.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){o&&(o.abort(),a(e),o=null)})),t||(t=null),o.send(t)}))}:void 0!==H&&"[object process]"===Object.prototype.toString.call(H)&&(Is=function(e){return new Promise((function(n,a){var t=function(e){n(e)},i=function(e){a(e)},o=e.data,s=e.headers;if(s["User-Agent"]||s["user-agent"]||(s["User-Agent"]="axios/"+Bs.version),o&&!h.isStream(o)){if(he.isBuffer(o));else if(h.isArrayBuffer(o))o=he.from(new Uint8Array(o));else{if(!h.isString(o))return i(V("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",e));o=he.from(o,"utf-8")}s["Content-Length"]=o.length}var r=void 0;e.auth&&(r=(e.auth.username||"")+":"+(e.auth.password||""));var c=X(e.baseURL,e.url),p=ut.parse(c),l=p.protocol||"http:";if(!r&&p.auth){var u=p.auth.split(":");r=(u[0]||"")+":"+(u[1]||"")}r&&delete s.Authorization;var d=Ps.test(l),m=d?e.httpsAgent:e.httpAgent,v={path:f(p.path,e.params,e.paramsSerializer).replace(/^\?/,""),method:e.method.toUpperCase(),headers:s,agent:m,agents:{http:e.httpAgent,https:e.httpsAgent},auth:r};e.socketPath?v.socketPath=e.socketPath:(v.hostname=p.hostname,v.port=p.port);var x,g=e.proxy;if(!g&&!1!==g){var b=l.slice(0,-1)+"_proxy",w=H.env[b]||H.env[b.toUpperCase()];if(w){var _=ut.parse(w),y=H.env.no_proxy||H.env.NO_PROXY,k=!0;if(y&&(k=!y.split(",").map((function(e){return e.trim()})).some((function(e){return!!e&&("*"===e||"."===e[0]&&p.hostname.substr(p.hostname.length-e.length)===e||p.hostname===e)}))),k&&(g={host:_.hostname,port:_.port},_.auth)){var E=_.auth.split(":");g.auth={username:E[0],password:E[1]}}}}if(g&&(v.hostname=g.host,v.host=g.host,v.headers.host=p.hostname+(p.port?":"+p.port:""),v.port=g.port,v.path=l+"//"+p.hostname+(p.port?":"+p.port:"")+v.path,g.auth)){var j=he.from(g.auth.username+":"+g.auth.password,"utf8").toString("base64");v.headers["Proxy-Authorization"]="Basic "+j}var A=d&&(!g||Ps.test(g.protocol));e.transport?x=e.transport:0===e.maxRedirects?x=Ot:(e.maxRedirects&&(v.maxRedirects=e.maxRedirects),x=A?Ms:Us),e.maxBodyLength>-1&&(v.maxBodyLength=e.maxBodyLength);var R=x.request(v,(function(n){if(!R.aborted){var a=n,o=n.req||R;if(204!==n.statusCode&&"HEAD"!==o.method&&!1!==e.decompress)switch(n.headers["content-encoding"]){case"gzip":case"compress":case"deflate":a=a.pipe(vs()),delete n.headers["content-encoding"]}var s={status:n.statusCode,statusText:n.statusMessage,headers:n.headers,config:e,request:o};if("stream"===e.responseType)s.data=a,K(t,i,s);else{var r=[];a.on("data",(function(n){r.push(n),e.maxContentLength>-1&&he.concat(r).length>e.maxContentLength&&(a.destroy(),i(V("maxContentLength size of "+e.maxContentLength+" exceeded",e,null,o)))})),a.on("error",(function(n){R.aborted||i(W(n,e,null,o))})),a.on("end",(function(){var n=he.concat(r);"arraybuffer"!==e.responseType&&(n=n.toString(e.responseEncoding),e.responseEncoding&&"utf8"!==e.responseEncoding||(n=h.stripBOM(n))),s.data=n,K(t,i,s)}))}}}));R.on("error",(function(n){R.aborted&&"ERR_FR_TOO_MANY_REDIRECTS"!==n.code||i(W(n,e,null,R))})),e.timeout&&R.setTimeout(e.timeout,(function(){R.abort(),i(V("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",R))})),e.cancelToken&&e.cancelToken.promise.then((function(e){R.aborted||(R.abort(),i(e))})),h.isStream(o)?o.on("error",(function(n){i(W(n,e,null,R))})).pipe(R):R.end(o)}))}),Is),transformRequest:[function(e,n){return Y(n,"Accept"),Y(n,"Content-Type"),h.isFormData(e)||h.isArrayBuffer(e)||h.isBuffer(e)||h.isStream(e)||h.isFile(e)||h.isBlob(e)?e:h.isArrayBufferView(e)?e.buffer:h.isURLSearchParams(e)?(Ds(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):h.isObject(e)?(Ds(n,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};h.forEach(["delete","get","head"],(function(e){$s.headers[e]={}})),h.forEach(["post","put","patch"],(function(e){$s.headers[e]=h.merge(Ns)}));var Fs=$s;function Zs(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var Hs=function(e){return Zs(e),e.headers=e.headers||{},e.data=g(e.data,e.headers,e.transformRequest),e.headers=h.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),h.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete e.headers[n]})),(e.adapter||Fs.adapter)(e).then((function(n){return Zs(e),n.data=g(n.data,n.headers,e.transformResponse),n}),(function(n){return b(n)||(Zs(e),n&&n.response&&(n.response.data=g(n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)}))},Ys=function(e,n){n=n||{};var a={},t=["url","method","data"],i=["headers","auth","proxy","params"],o=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function r(e,n){return h.isPlainObject(e)&&h.isPlainObject(n)?h.merge(e,n):h.isPlainObject(n)?h.merge({},n):h.isArray(n)?n.slice():n}function c(t){h.isUndefined(n[t])?h.isUndefined(e[t])||(a[t]=r(void 0,e[t])):a[t]=r(e[t],n[t])}h.forEach(t,(function(e){h.isUndefined(n[e])||(a[e]=r(void 0,n[e]))})),h.forEach(i,c),h.forEach(o,(function(t){h.isUndefined(n[t])?h.isUndefined(e[t])||(a[t]=r(void 0,e[t])):a[t]=r(void 0,n[t])})),h.forEach(s,(function(t){t in n?a[t]=r(e[t],n[t]):t in e&&(a[t]=r(void 0,e[t]))}));var p=t.concat(i).concat(o).concat(s),l=Object.keys(e).concat(Object.keys(n)).filter((function(e){return-1===p.indexOf(e)}));return h.forEach(l,c),a};function Ws(e){this.defaults=e,this.interceptors={request:new x,response:new x}}Ws.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=Ys(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var n=[Hs,void 0],a=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){n.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){n.push(e.fulfilled,e.rejected)}));n.length;)a=a.then(n.shift(),n.shift());return a},Ws.prototype.getUri=function(e){return e=Ys(this.defaults,e),f(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},h.forEach(["delete","get","head","options"],(function(e){Ws.prototype[e]=function(n,a){return this.request(Ys(a||{},{method:e,url:n}))}})),h.forEach(["post","put","patch"],(function(e){Ws.prototype[e]=function(n,a,t){return this.request(Ys(t||{},{method:e,url:n,data:a}))}}));var Vs=Ws;function Ks(e){this.message=e}Ks.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},Ks.prototype.__CANCEL__=!0;var Gs=Ks;function Xs(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(e){n=e}));var a=this;e((function(e){a.reason||(a.reason=new Gs(e),n(a.reason))}))}Xs.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},Xs.source=function(){var e;return{token:new Xs((function(n){e=n})),cancel:e}};var Js=Xs;function Qs(e){var n=new Vs(e),a=o(Vs.prototype.request,n);return h.extend(a,Vs.prototype,n),h.extend(a,n),a}var er=Qs(Fs);er.Axios=Vs,er.create=function(e){return Qs(Ys(er.defaults,e))},er.Cancel=Gs,er.CancelToken=Js,er.isCancel=b,er.all=function(e){return Promise.all(e)},er.spread=function(e){return function(n){return e.apply(null,n)}};var nr=er,ar=er;nr.default=ar;var tr=nr,ir=a((function(n,a){var t=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0}),a.Request=void 0;const i=t(tr);a.Request=class{constructor(e=i.default){this.request=e}get(e,n={}){return this.request.get(e,n)}post(e,n,a={}){return this.request.post(e,n,a)}put(e,n,a={}){return this.request.put(e,n,a)}patch(e,n,a={}){return this.request.patch(e,n,a)}delete(e,n={}){return this.request.delete(e,n)}static isRequestError(e){return!(!e.response||!e.response.status)}}}));n(ir),ir.Request;var or=a((function(n,a){var t=e&&e.__createBinding||(Object.create?function(e,n,a,t){void 0===t&&(t=a),Object.defineProperty(e,t,{enumerable:!0,get:function(){return n[a]}})}:function(e,n,a,t){void 0===t&&(t=a),e[t]=n[a]}),i=e&&e.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&t(n,e,a);return i(n,e),n};Object.defineProperty(a,"__esModule",{value:!0});const s=o(ir);a.default=class{constructor(e="",n=""){this.token=e,this.url=n,this.request=new s.Request}}}));n(or);var sr=a((function(e,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default={App:{baseUrl:"http://localhost:3333/api"},Meeting:{domain:"conf.v4h.cloud",externalApi:"https://conf.v4h.cloud/external_api.js"}}}));n(sr);var rr=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},i=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const o=i(sr);a.default=e=>new Promise((n=>t(void 0,void 0,void 0,(function*(){if(window.JitsiMeetExternalAPI)n(window.JitsiMeetExternalAPI);else{const a=document.getElementsByTagName("head")[0],t=document.createElement("script");t.setAttribute("type","text/javascript"),t.setAttribute("src",e?`https://${e}/external_api.js`:o.default.Meeting.externalApi),a.addEventListener("load",(e=>{"SCRIPT"===e.target.nodeName&&n(window.JitsiMeetExternalAPI)}),!0),a.appendChild(t)}}))))}));n(rr);var cr=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},i=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const o=i(rr),s=i(sr);a.default=class{startConference(e){return t(this,void 0,void 0,(function*(){const n={parentNode:e.parentNode,jwt:e.jwt,roomName:e.roomName,width:640,height:480,onClose:e.onClose,onLoad:e.onLoad,user:{displayName:e.userInfo&&e.userInfo.displayName?e.userInfo.displayName:"Convidado"},configOverwrite:{startWithAudioMuted:e.startWithAudioMuted,startWithVideoMuted:e.startWithVideoMuted},interfaceConfigOverwrite:{TOOLBAR_BUTTONS:e.buttons}};console.log(n),this.options=n,o.default().then((a=>{this.JitsiExternalApi=new a(e.domain?e.domain:s.default.Meeting.domain,n),e.userInfo&&e.userInfo.displayName&&this.JitsiExternalApi.executeCommand("displayName",e.userInfo.displayName),e.shareLink&&this.JitsiExternalApi.executeCommand("link",e.shareLink),this.JitsiExternalApi.addEventListener("readyToClose",n.onClose)}))}))}closeConference(){return t(this,void 0,void 0,(function*(){this.options.parentNode.innerHTML=""}))}getNumberOfPart(){return t(this,void 0,void 0,(function*(){return this.JitsiExternalApi.getNumberOfParticipants()}))}}}));n(cr);var pr=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(i),r=o(or),c=o(cr);class p extends r.default{constructor(e,n,a){super(e,n),this.url=`${this.url}/sessions`,this.sessionCurrent=null,this.domain=a}create(e){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return t(this,void 0,void 0,(function*(){return this.request.put(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return t(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}join(e){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/${e}/join`,null,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}startConference(e,n){return t(this,void 0,void 0,(function*(){const a=yield this.join(e);this.conference=new c.default,this.sessionCurrent=e,yield this.conference.startConference(Object.assign({jwt:a.sessionToken,roomName:a.short,onClose:()=>t(this,void 0,void 0,(function*(){yield this.endConference(e,n.onClose)})),domain:this.domain},n))}))}stopConference(){return t(this,void 0,void 0,(function*(){this.sessionCurrent&&(yield this.conference.closeConference())}))}endConference(e,n){return t(this,void 0,void 0,(function*(){this.conference.closeConference(),n&&n()}))}}a.default=p}));n(pr);var lr=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(i),r=o(or);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/rooms`}create(e){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return t(this,void 0,void 0,(function*(){return this.request.put(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return t(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}open(e,n){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/${e}/open`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}join(e,n){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/${e}/join`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}close(e){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/${e}/close`,null,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}a.default=c}));n(lr);var ur=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(i),r=o(or);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/orgs`}create(e){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return t(this,void 0,void 0,(function*(){return this.request.patch(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return t(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}a.default=c}));n(ur);var dr=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(i),r=o(or);class c extends r.default{constructor(e,n){super(e,n)}create(e,n){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/orgs/${e}/orgUnits`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e,n){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/orgs/${e}/orgUnits/${n}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/orgs/${e}/orgUnits`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n,a){return t(this,void 0,void 0,(function*(){return this.request.patch(`${this.url}/orgs/${e}/orgUnits/${n}`,a,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e,n){return t(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/orgs/${e}/orgUnits/${n}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}a.default=c}));n(dr);var hr=Ha.Stream,mr=fr;function fr(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}Fn.inherits(fr,hr),fr.create=function(e,n){var a=new this;for(var t in n=n||{})a[t]=n[t];a.source=e;var i=e.emit;return e.emit=function(){return a._handleEmit(arguments),i.apply(e,arguments)},e.on("error",(function(){})),a.pauseStream&&e.pause(),a},Object.defineProperty(fr.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),fr.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},fr.prototype.resume=function(){this._released||this.release(),this.source.resume()},fr.prototype.pause=function(){this.source.pause()},fr.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},fr.prototype.pipe=function(){var e=hr.prototype.pipe.apply(this,arguments);return this.resume(),e},fr.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},fr.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}};var vr=Ha.Stream,xr=gr;function gr(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null,this._insideLoop=!1,this._pendingNext=!1}function br(e,n){for(var a=0,t=e.length-1;t>=0;t--){var i=e[t];"."===i?e.splice(t,1):".."===i?(e.splice(t,1),a++):a&&(e.splice(t,1),a--)}if(n)for(;a--;a)e.unshift("..");return e}Fn.inherits(gr,vr),gr.create=function(e){var n=new this;for(var a in e=e||{})n[a]=e[a];return n},gr.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!he.isBuffer(e)},gr.prototype.append=function(e){if(gr.isStreamLike(e)){if(!(e instanceof mr)){var n=mr.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=n}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},gr.prototype.pipe=function(e,n){return vr.prototype.pipe.call(this,e,n),this.resume(),e},gr.prototype._getNext=function(){if(this._currentStream=null,this._insideLoop)this._pendingNext=!0;else{this._insideLoop=!0;try{do{this._pendingNext=!1,this._realGetNext()}while(this._pendingNext)}finally{this._insideLoop=!1}}},gr.prototype._realGetNext=function(){var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){gr.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),this._pipeNext(e)}.bind(this)):this._pipeNext(e):this.end()},gr.prototype._pipeNext=function(e){if(this._currentStream=e,gr.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var n=e;this.write(n),this._getNext()},gr.prototype._handleErrors=function(e){var n=this;e.on("error",(function(e){n._emitError(e)}))},gr.prototype.write=function(e){this.emit("data",e)},gr.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},gr.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},gr.prototype.end=function(){this._reset(),this.emit("end")},gr.prototype.destroy=function(){this._reset(),this.emit("close")},gr.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},gr.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},gr.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach((function(n){n.dataSize&&(e.dataSize+=n.dataSize)})),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},gr.prototype._emitError=function(e){this._reset(),this.emit("error",e)};var wr=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,_r=function(e){return wr.exec(e).slice(1)};function yr(){for(var e="",n=!1,a=arguments.length-1;a>=-1&&!n;a--){var t=a>=0?arguments[a]:"/";if("string"!=typeof t)throw new TypeError("Arguments to path.resolve must be strings");t&&(e=t+"/"+e,n="/"===t.charAt(0))}return(n?"/":"")+(e=br(Ar(e.split("/"),(function(e){return!!e})),!n).join("/"))||"."}function kr(e){var n=Er(e),a="/"===Rr(e,-1);return(e=br(Ar(e.split("/"),(function(e){return!!e})),!n).join("/"))||n||(e="."),e&&a&&(e+="/"),(n?"/":"")+e}function Er(e){return"/"===e.charAt(0)}var jr={extname:function(e){return _r(e)[3]},basename:function(e,n){var a=_r(e)[2];return n&&a.substr(-1*n.length)===n&&(a=a.substr(0,a.length-n.length)),a},dirname:function(e){var n=_r(e),a=n[0],t=n[1];return a||t?(t&&(t=t.substr(0,t.length-1)),a+t):"."},sep:"/",delimiter:":",relative:function(e,n){function a(e){for(var n=0;n<e.length&&""===e[n];n++);for(var a=e.length-1;a>=0&&""===e[a];a--);return n>a?[]:e.slice(n,a-n+1)}e=yr(e).substr(1),n=yr(n).substr(1);for(var t=a(e.split("/")),i=a(n.split("/")),o=Math.min(t.length,i.length),s=o,r=0;r<o;r++)if(t[r]!==i[r]){s=r;break}var c=[];for(r=s;r<t.length;r++)c.push("..");return(c=c.concat(i.slice(s))).join("/")},join:function(){var e=Array.prototype.slice.call(arguments,0);return kr(Ar(e,(function(e,n){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},isAbsolute:Er,normalize:kr,resolve:yr};function Ar(e,n){if(e.filter)return e.filter(n);for(var a=[],t=0;t<e.length;t++)n(e[t],t,e)&&a.push(e[t]);return a}var Rr="b"==="ab".substr(-1)?function(e,n,a){return e.substr(n,a)}:function(e,n,a){return n<0&&(n=e.length+n),e.substr(n,a)},zr=t(Object.freeze({__proto__:null,default:{"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/3gpp-ims+xml":{source:"iana",compressible:!0},"application/a2l":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:!0},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/alto-updatestreamcontrol+json":{source:"iana",compressible:!0},"application/alto-updatestreamparams+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:!0,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:!0,extensions:["atomdeleted"]},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:!0,extensions:["atomsvc"]},"application/atsc-dwd+xml":{source:"iana",compressible:!0,extensions:["dwd"]},"application/atsc-dynamic-event-message":{source:"iana"},"application/atsc-held+xml":{source:"iana",compressible:!0,extensions:["held"]},"application/atsc-rdt+json":{source:"iana",compressible:!0},"application/atsc-rsat+xml":{source:"iana",compressible:!0,extensions:["rsat"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:!0},"application/bacnet-xdd+zip":{source:"iana",compressible:!1},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana",compressible:!0,extensions:["xcs"]},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/captive+json":{source:"iana",compressible:!0},"application/cbor":{source:"iana"},"application/cbor-seq":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:!0},"application/ccxml+xml":{source:"iana",compressible:!0,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:!0,extensions:["cdfx"]},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:!0},"application/cellml+xml":{source:"iana",compressible:!0},"application/cfw":{source:"iana"},"application/clr":{source:"iana"},"application/clue+xml":{source:"iana",compressible:!0},"application/clue_info+xml":{source:"iana",compressible:!0},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:!0},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:!0},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:!0},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:!0},"application/cstadata+xml":{source:"iana",compressible:!0},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",compressible:!0,extensions:["mpd"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:!0,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:!0},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana",compressible:!0},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:!0},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:!0,extensions:["dbk"]},"application/dots+cbor":{source:"iana"},"application/dskpp+xml":{source:"iana",compressible:!0},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:!0,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["es","ecma"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/elm+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/elm+xml":{source:"iana",compressible:!0},"application/emergencycalldata.cap+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/emergencycalldata.comment+xml":{source:"iana",compressible:!0},"application/emergencycalldata.control+xml":{source:"iana",compressible:!0},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.veds+xml":{source:"iana",compressible:!0},"application/emma+xml":{source:"iana",compressible:!0,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:!0,extensions:["emotionml"]},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:!0},"application/epub+zip":{source:"iana",compressible:!1,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/expect-ct-report+json":{source:"iana",compressible:!0},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:!0,extensions:["fdt"]},"application/fhir+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/fhir+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/flexfec":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1},"application/framework-attributes+xml":{source:"iana",compressible:!0},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:!0},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:!0,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:!0,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:!0},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:!0},"application/ibe-pkg-reply+xml":{source:"iana",compressible:!0},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:!0,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:!0,extensions:["its"]},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/jscalendar+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:!0},"application/kpml-response+xml":{source:"iana",compressible:!0},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:!0,extensions:["lgr"]},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:!0},"application/lost+xml":{source:"iana",compressible:!0,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:!0},"application/lpf+zip":{source:"iana",compressible:!1},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:!0,extensions:["mads"]},"application/manifest+json":{charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:!0,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:!0,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:!0},"application/mathml-presentation+xml":{source:"iana",compressible:!0},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:!0},"application/mbms-deregister+xml":{source:"iana",compressible:!0},"application/mbms-envelope+xml":{source:"iana",compressible:!0},"application/mbms-msk+xml":{source:"iana",compressible:!0},"application/mbms-msk-response+xml":{source:"iana",compressible:!0},"application/mbms-protection-description+xml":{source:"iana",compressible:!0},"application/mbms-reception-report+xml":{source:"iana",compressible:!0},"application/mbms-register+xml":{source:"iana",compressible:!0},"application/mbms-register-response+xml":{source:"iana",compressible:!0},"application/mbms-schedule+xml":{source:"iana",compressible:!0},"application/mbms-user-service-description+xml":{source:"iana",compressible:!0},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:!0},"application/media_control+xml":{source:"iana",compressible:!0},"application/mediaservercontrol+xml":{source:"iana",compressible:!0,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",compressible:!0,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:!0,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:!0,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mipc":{source:"iana"},"application/mmt-aei+xml":{source:"iana",compressible:!0,extensions:["maei"]},"application/mmt-usd+xml":{source:"iana",compressible:!0,extensions:["musd"]},"application/mods+xml":{source:"iana",compressible:!0,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:!0},"application/mrb-publish+xml":{source:"iana",compressible:!0},"application/msc-ivr+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msc-mixer+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/multipart-core":{source:"iana"},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana",extensions:["nq"]},"application/n-triples":{source:"iana",extensions:["nt"]},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana",charset:"US-ASCII"},"application/news-groupinfo":{source:"iana",charset:"US-ASCII"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:!0},"application/node":{source:"iana",extensions:["cjs"]},"application/nss":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odm+xml":{source:"iana",compressible:!0},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:!0,extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:!0,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{source:"iana",compressible:!0},"application/oscore":{source:"iana"},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p2p-overlay+xml":{source:"iana",compressible:!0,extensions:["relo"]},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pem-certificate-chain":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana"},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pidf-diff+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:!0,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana",compressible:!0},"application/provenance+xml":{source:"iana",compressible:!0,extensions:["provx"]},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.cyn":{source:"iana",charset:"7-BIT"},"application/prs.hpub+zip":{source:"iana",compressible:!1},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:!0},"application/pskc+xml":{source:"iana",compressible:!0,extensions:["pskcxml"]},"application/pvd+json":{source:"iana",compressible:!0},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:!0,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",compressible:!0,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:!0,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:!0},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:!0},"application/rls-services+xml":{source:"iana",compressible:!0,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:!0,extensions:["rapd"]},"application/route-s-tsid+xml":{source:"iana",compressible:!0,extensions:["sls"]},"application/route-usd+xml":{source:"iana",compressible:!0,extensions:["rusd"]},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:!0,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:!0},"application/samlmetadata+xml":{source:"iana",compressible:!0},"application/sarif+json":{source:"iana",compressible:!0},"application/sbe":{source:"iana"},"application/sbml+xml":{source:"iana",compressible:!0,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:!0},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:!0},"application/senml+xml":{source:"iana",compressible:!0,extensions:["senmlx"]},"application/senml-etch+cbor":{source:"iana"},"application/senml-etch+json":{source:"iana",compressible:!0},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:!0},"application/sensml+xml":{source:"iana",compressible:!0,extensions:["sensmlx"]},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:!0},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:!0,extensions:["shf"]},"application/sieve":{source:"iana",extensions:["siv","sieve"]},"application/simple-filter+xml":{source:"iana",compressible:!0},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/sipc":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:!0,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:!0,extensions:["srx"]},"application/spirits-event+xml":{source:"iana",compressible:!0},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:!0,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:!0,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:!0,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:!0,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:!0},"application/swid+xml":{source:"iana",compressible:!0,extensions:["swidtag"]},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/taxii+json":{source:"iana",compressible:!0},"application/td+json":{source:"iana",compressible:!0},"application/tei+xml":{source:"iana",compressible:!0,extensions:["tei","teicorpus"]},"application/tetra_isi":{source:"iana"},"application/thraud+xml":{source:"iana",compressible:!0,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:!0},"application/tnauthlist":{source:"iana"},"application/toml":{compressible:!0,extensions:["toml"]},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana"},"application/ttml+xml":{source:"iana",compressible:!0,extensions:["ttml"]},"application/tve-trigger":{source:"iana"},"application/tzif":{source:"iana"},"application/tzif-leap":{source:"iana"},"application/ubjson":{compressible:!1,extensions:["ubj"]},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:!0},"application/urc-ressheet+xml":{source:"iana",compressible:!0,extensions:["rsheet"]},"application/urc-targetdesc+xml":{source:"iana",compressible:!0,extensions:["td"]},"application/urc-uisocketdesc+xml":{source:"iana",compressible:!0},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana",compressible:!0},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:!0,extensions:["1km"]},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.interworking-data":{source:"iana"},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-init-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-transmission-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:!1,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:!0,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.afplinedata-pagedef":{source:"iana"},"application/vnd.afpc.cmoca-cmresource":{source:"iana"},"application/vnd.afpc.foca-charset":{source:"iana"},"application/vnd.afpc.foca-codedfont":{source:"iana"},"application/vnd.afpc.foca-codepage":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.afpc.modca-cmtable":{source:"iana"},"application/vnd.afpc.modca-formdef":{source:"iana"},"application/vnd.afpc.modca-mediummap":{source:"iana"},"application/vnd.afpc.modca-objectcontainer":{source:"iana"},"application/vnd.afpc.modca-overlay":{source:"iana"},"application/vnd.afpc.modca-pagesegment":{source:"iana"},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:!0},"application/vnd.android.ota":{source:"iana"},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.aplextor.warrp+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",compressible:!0,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["key"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:!0},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:!0,extensions:["bmml"]},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.error":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:!0},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.bpf":{source:"iana"},"application/vnd.bpf3":{source:"iana"},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:!0},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:!0,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.ciedi":{source:"iana"},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:!0,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana",compressible:!1},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:!0,extensions:["wbs"]},"application/vnd.cryptii.pipe+json":{source:"iana",compressible:!0},"application/vnd.crypto-shade-file":{source:"iana"},"application/vnd.cryptomator.encrypted":{source:"iana"},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:!0},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:!0},"application/vnd.cybank":{source:"iana"},"application/vnd.cyclonedx+json":{source:"iana",compressible:!0},"application/vnd.cyclonedx+xml":{source:"iana",compressible:!0},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:!1},"application/vnd.d3m-dataset":{source:"iana"},"application/vnd.d3m-problem":{source:"iana"},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.dbf":{source:"iana",extensions:["dbf"]},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:!0,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:!0},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbisl+xml":{source:"iana",compressible:!0},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:!0},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:!0},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:!0},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:!1},"application/vnd.eszigno3+xml":{source:"iana",compressible:!0,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:!1},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:!1},"application/vnd.etsi.cug+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:!0},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:!0},"application/vnd.etsi.sci+xml":{source:"iana",compressible:!0},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:!0},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:!0},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:!1},"application/vnd.exstream-package":{source:"iana"},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.ficlab.flb+zip":{source:"iana",compressible:!1},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:!0},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.gentics.grd+json":{source:"iana",compressible:!0},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana",compressible:!0},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.slides":{source:"iana"},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:!0},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:!1},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:!0},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",compressible:!0,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:!0,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:!0},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:!1},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:!1},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:!0},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:!0},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:!0},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:!0,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.iso11783-10+zip":{source:"iana",compressible:!1},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las":{source:"iana"},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",compressible:!0,extensions:["lasxml"]},"application/vnd.laszip":{source:"iana"},"application/vnd.leap+json":{source:"iana",compressible:!0},"application/vnd.liberty-request+xml":{source:"iana",compressible:!0},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:!0,extensions:["lbe"]},"application/vnd.logipipe.circuit+zip":{source:"iana",compressible:!1},"application/vnd.loom":{source:"iana"},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana"},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:!0},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:!0},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:!0},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:!0},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:!0},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nebumind.line":{source:"iana"},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:!0},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:!0},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:!0},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:!0,extensions:["ac"]},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:!0},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oci.image.manifest.v1+json":{source:"iana",compressible:!0},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:!0},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:!0},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:!0},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:!0},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:!0},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:!0},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:!0},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:!0},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:!0,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:!0},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+cbor":{source:"iana"},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:!0},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:!0},"application/vnd.omads-email+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-file+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-folder+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:!0,extensions:["obgx"]},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:!0,extensions:["osm"]},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:!0},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:!0},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.patientecommsdoc":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:!0},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:!0},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:!0},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana",extensions:["rar"]},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:!0,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:!0,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sar":{source:"iana"},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.seis+json":{source:"iana",compressible:!0},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shade-save-file":{source:"iana"},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:!0},"application/vnd.shopkick+json":{source:"iana",compressible:!0},"application/vnd.shp":{source:"iana"},"application/vnd.shx":{source:"iana"},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.snesdev-page-table":{source:"iana"},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:!0,extensions:["fo"]},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:!0,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.sycle+xml":{source:"iana",compressible:!0},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",charset:"UTF-8",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:!0},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:!0},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:!0,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.veryant.thin":{source:"iana"},"application/vnd.ves.encrypted":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",charset:"UTF-8",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.dpp":{source:"iana"},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:!0},"application/vnd.wv.ssp+xml":{source:"iana",compressible:!0},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:!0},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:!0,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:!0,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:!0,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:!0},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:!0,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:!0,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:!0,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:!0,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:!0,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-keepass2":{extensions:["kdbx"]},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-pki-message":{source:"iana"},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"iana",extensions:["der","crt","pem"]},"application/x-x509-ca-ra-cert":{source:"iana"},"application/x-x509-next-ca-cert":{source:"iana"},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:!0,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:!0},"application/xaml+xml":{source:"apache",compressible:!0,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:!0,extensions:["xav"]},"application/xcap-caps+xml":{source:"iana",compressible:!0,extensions:["xca"]},"application/xcap-diff+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:!0,extensions:["xel"]},"application/xcap-error+xml":{source:"iana",compressible:!0},"application/xcap-ns+xml":{source:"iana",compressible:!0,extensions:["xns"]},"application/xcon-conference-info+xml":{source:"iana",compressible:!0},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:!0},"application/xenc+xml":{source:"iana",compressible:!0,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:!0},"application/xliff+xml":{source:"iana",compressible:!0,extensions:["xlf"]},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:!0},"application/xmpp+xml":{source:"iana",compressible:!0},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:!0,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:!0,extensions:["xsl","xslt"]},"application/xspf+xml":{source:"apache",compressible:!0,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:!0,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana",compressible:!0},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana",compressible:!0},"application/yin+xml":{source:"iana",compressible:!0,extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana",extensions:["amr"]},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/flexfec":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/mhas":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana",extensions:["mxmf"]},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx","opus"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/scip":{source:"iana"},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sofa":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tetra_acelp":{source:"iana"},"audio/tetra_acelp_bb":{source:"iana"},"audio/tone":{source:"iana"},"audio/tsvcis":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dts.uhd":{source:"iana"},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",compressible:!0,extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:!1,extensions:["apng"]},"image/avci":{source:"iana"},"image/avcs":{source:"iana"},"image/avif":{source:"iana",compressible:!1,extensions:["avif"]},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/hej2k":{source:"iana",extensions:["hej2"]},"image/hsj2":{source:"iana",extensions:["hsj2"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jph":{source:"iana",extensions:["jph"]},"image/jphc":{source:"iana",extensions:["jhc"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/jxr":{source:"iana",extensions:["jxr"]},"image/jxra":{source:"iana",extensions:["jxra"]},"image/jxrs":{source:"iana",extensions:["jxrs"]},"image/jxs":{source:"iana",extensions:["jxs"]},"image/jxsc":{source:"iana",extensions:["jxsc"]},"image/jxsi":{source:"iana",extensions:["jxsi"]},"image/jxss":{source:"iana",extensions:["jxss"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/ktx2":{source:"iana",extensions:["ktx2"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:!1,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-dds":{extensions:["dds"]},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.pco.b16":{source:"iana",extensions:["b16"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana",extensions:["3mf"]},"model/e57":{source:"iana"},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/mtl":{source:"iana",extensions:["mtl"]},"model/obj":{source:"iana",extensions:["obj"]},"model/stl":{source:"iana",extensions:["stl"]},"model/vnd.collada+xml":{source:"iana",compressible:!0,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:!0},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana",extensions:["ogex"]},"model/vnd.parasolid.transmit.binary":{source:"iana",extensions:["x_b"]},"model/vnd.parasolid.transmit.text":{source:"iana",extensions:["x_t"]},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.sap.vds":{source:"iana",extensions:["vds"]},"model/vnd.usdz+zip":{source:"iana",compressible:!1,extensions:["usdz"]},"model/vnd.valve.source.compiled-map":{source:"iana",extensions:["bsp"]},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana",extensions:["x3db"]},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana",extensions:["x3dv"]},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana"},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/cql":{source:"iana"},"text/cql-expression":{source:"iana"},"text/cql-identifier":{source:"iana"},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/fhirpath":{source:"iana"},"text/flexfec":{source:"iana"},"text/fwdred":{source:"iana"},"text/gff3":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{compressible:!0,extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mdx":{compressible:!0,extensions:["mdx"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana",charset:"UTF-8"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana",charset:"UTF-8"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shaclc":{source:"iana"},"text/shex":{extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/spdx":{source:"iana",extensions:["spdx"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana",charset:"UTF-8"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana",charset:"UTF-8"},"text/vnd.ficlab.flt":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hans":{source:"iana"},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.senx.warpscript":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sosi":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",charset:"UTF-8",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana",charset:"UTF-8"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/av1":{source:"iana"},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/ffv1":{source:"iana"},"video/flexfec":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana",extensions:["m4s"]},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/scip":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vnd.youtube.yt":{source:"iana"},"video/vp8":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}}})),Sr=a((function(e,n){var a,t,i,o=jr.extname,s=/^\s*([^;\s]*)(?:;|\s|$)/,r=/^text\//i;function c(e){if(!e||"string"!=typeof e)return!1;var n=s.exec(e),a=n&&zr[n[1].toLowerCase()];return a&&a.charset?a.charset:!(!n||!r.test(n[1]))&&"UTF-8"}n.charset=c,n.charsets={lookup:c},n.contentType=function(e){if(!e||"string"!=typeof e)return!1;var a=-1===e.indexOf("/")?n.lookup(e):e;if(!a)return!1;if(-1===a.indexOf("charset")){var t=n.charset(a);t&&(a+="; charset="+t.toLowerCase())}return a},n.extension=function(e){if(!e||"string"!=typeof e)return!1;var a=s.exec(e),t=a&&n.extensions[a[1].toLowerCase()];return!(!t||!t.length)&&t[0]},n.extensions=Object.create(null),n.lookup=function(e){if(!e||"string"!=typeof e)return!1;var a=o("x."+e).toLowerCase().substr(1);return a&&n.types[a]||!1},n.types=Object.create(null),a=n.extensions,t=n.types,i=["nginx","apache",void 0,"iana"],Object.keys(zr).forEach((function(e){var n=zr[e],o=n.extensions;if(o&&o.length){a[e]=o;for(var s=0;s<o.length;s++){var r=o[s];if(t[r]){var c=i.indexOf(zr[t[r]].source),p=i.indexOf(n.source);if("application/octet-stream"!==t[r]&&(c>p||c===p&&"application/"===t[r].substr(0,12)))continue}t[r]=e}}}))}));Sr.charset,Sr.charsets,Sr.contentType,Sr.extension,Sr.extensions,Sr.lookup,Sr.types;var Tr=function(e){var n="function"==typeof setImmediate?setImmediate:"object"==typeof H&&"function"==typeof H.nextTick?H.nextTick:null;n?n(e):setTimeout(e,0)},Or=function(e){var n=!1;return Tr((function(){n=!0})),function(a,t){n?e(a,t):Tr((function(){e(a,t)}))}},Lr=function(e){Object.keys(e.jobs).forEach(qr.bind(e)),e.jobs={}};function qr(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}var Cr=function(e,n,a,t){var i=a.keyedList?a.keyedList[a.index]:a.index;a.jobs[i]=function(e,n,a,t){return 2==e.length?e(a,Or(t)):e(a,n,Or(t))}(n,i,e[i],(function(e,n){i in a.jobs&&(delete a.jobs[i],e?Lr(a):a.results[i]=n,t(e,a.results))}))},Br=function(e,n){var a=!Array.isArray(e),t={index:0,keyedList:a||n?Object.keys(e):null,jobs:{},results:a?{}:[],size:a?Object.keys(e).length:e.length};return n&&t.keyedList.sort(a?n:function(a,t){return n(e[a],e[t])}),t},Ur=function(e){Object.keys(this.jobs).length&&(this.index=this.size,Lr(this),Or(e)(null,this.results))},Mr=function(e,n,a,t){var i=Br(e,a);return Cr(e,n,i,(function a(o,s){o?t(o,s):(i.index++,i.index<(i.keyedList||e).length?Cr(e,n,i,a):t(null,i.results))})),Ur.bind(i,t)};function Pr(e,n){return e<n?-1:e>n?1:0}Mr.ascending=Pr,Mr.descending=function(e,n){return-1*Pr(e,n)};var Nr=function(e,n,a){for(var t=Br(e);t.index<(t.keyedList||e).length;)Cr(e,n,t,(function(e,n){e?a(e,n):0!==Object.keys(t.jobs).length||a(null,t.results)})),t.index++;return Ur.bind(t,a)},Dr=function(e,n){return Object.keys(n).forEach((function(a){e[a]=e[a]||n[a]})),e},Ir=ut.parse,$r=Fr;function Fr(e){if(!(this instanceof Fr))return new Fr(e);for(var n in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],xr.call(this),e=e||{})this[n]=e[n]}Fn.inherits(Fr,xr),Fr.LINE_BREAK="\r\n",Fr.DEFAULT_CONTENT_TYPE="application/octet-stream",Fr.prototype.append=function(e,n,a){"string"==typeof(a=a||{})&&(a={filename:a});var t=xr.prototype.append.bind(this);if("number"==typeof n&&(n=""+n),Fn.isArray(n))this._error(new Error("Arrays are not supported."));else{var i=this._multiPartHeader(e,n,a),o=this._multiPartFooter();t(i),t(n),t(o),this._trackLength(i,n,a)}},Fr.prototype._trackLength=function(e,n,a){var t=0;null!=a.knownLength?t+=+a.knownLength:he.isBuffer(n)?t=n.length:"string"==typeof n&&(t=he.byteLength(n)),this._valueLength+=t,this._overheadLength+=he.byteLength(e)+Fr.LINE_BREAK.length,n&&(n.path||n.readable&&n.hasOwnProperty("httpVersion"))&&(a.knownLength||this._valuesToMeasure.push(n))},Fr.prototype._lengthRetriever=function(e,n){e.hasOwnProperty("fd")?null!=e.end&&e.end!=1/0&&null!=e.start?n(null,e.end+1-(e.start?e.start:0)):ci.stat(e.path,(function(a,t){var i;a?n(a):(i=t.size-(e.start?e.start:0),n(null,i))})):e.hasOwnProperty("httpVersion")?n(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",(function(a){e.pause(),n(null,+a.headers["content-length"])})),e.resume()):n("Unknown stream")},Fr.prototype._multiPartHeader=function(e,n,a){if("string"==typeof a.header)return a.header;var t,i=this._getContentDisposition(n,a),o=this._getContentType(n,a),s="",r={"Content-Disposition":["form-data",'name="'+e+'"'].concat(i||[]),"Content-Type":[].concat(o||[])};for(var c in"object"==typeof a.header&&Dr(r,a.header),r)r.hasOwnProperty(c)&&null!=(t=r[c])&&(Array.isArray(t)||(t=[t]),t.length&&(s+=c+": "+t.join("; ")+Fr.LINE_BREAK));return"--"+this.getBoundary()+Fr.LINE_BREAK+s+Fr.LINE_BREAK},Fr.prototype._getContentDisposition=function(e,n){var a,t;return"string"==typeof n.filepath?a=jr.normalize(n.filepath).replace(/\\/g,"/"):n.filename||e.name||e.path?a=jr.basename(n.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(a=jr.basename(e.client._httpMessage.path||"")),a&&(t='filename="'+a+'"'),t},Fr.prototype._getContentType=function(e,n){var a=n.contentType;return!a&&e.name&&(a=Sr.lookup(e.name)),!a&&e.path&&(a=Sr.lookup(e.path)),!a&&e.readable&&e.hasOwnProperty("httpVersion")&&(a=e.headers["content-type"]),a||!n.filepath&&!n.filename||(a=Sr.lookup(n.filepath||n.filename)),a||"object"!=typeof e||(a=Fr.DEFAULT_CONTENT_TYPE),a},Fr.prototype._multiPartFooter=function(){return function(e){var n=Fr.LINE_BREAK;0===this._streams.length&&(n+=this._lastBoundary()),e(n)}.bind(this)},Fr.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+Fr.LINE_BREAK},Fr.prototype.getHeaders=function(e){var n,a={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(n in e)e.hasOwnProperty(n)&&(a[n.toLowerCase()]=e[n]);return a},Fr.prototype.setBoundary=function(e){this._boundary=e},Fr.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},Fr.prototype.getBuffer=function(){for(var e=new he.alloc(0),n=this.getBoundary(),a=0,t=this._streams.length;a<t;a++)"function"!=typeof this._streams[a]&&(e=he.isBuffer(this._streams[a])?he.concat([e,this._streams[a]]):he.concat([e,he.from(this._streams[a])]),"string"==typeof this._streams[a]&&this._streams[a].substring(2,n.length+2)===n||(e=he.concat([e,he.from(Fr.LINE_BREAK)])));return he.concat([e,he.from(this._lastBoundary())])},Fr.prototype._generateBoundary=function(){for(var e="--------------------------",n=0;n<24;n++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},Fr.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},Fr.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},Fr.prototype.getLength=function(e){var n=this._overheadLength+this._valueLength;this._streams.length&&(n+=this._lastBoundary().length),this._valuesToMeasure.length?Nr(this._valuesToMeasure,this._lengthRetriever,(function(a,t){a?e(a):(t.forEach((function(e){n+=e})),e(null,n))})):H.nextTick(e.bind(this,null,n))},Fr.prototype.submit=function(e,n){var a,t,i={method:"post"};return"string"==typeof e?(e=Ir(e),t=Dr({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},i)):(t=Dr(e,i)).port||(t.port="https:"==t.protocol?443:80),t.headers=this.getHeaders(e.headers),t.protocol,a=Ot.request(t),this.getLength(function(e,t){if(e)this._error(e);else if(a.setHeader("Content-Length",t),this.pipe(a),n){var i,o=function(e,t){return a.removeListener("error",o),a.removeListener("response",i),n.call(this,e,t)};i=o.bind(this,null),a.on("error",o),a.on("response",i)}}.bind(this)),a},Fr.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},Fr.prototype.toString=function(){return"[object FormData]"};var Zr=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o($r),r=o(i),c=o(or);class p extends c.default{constructor(e,n){super(e,n),this.url=`${this.url}/archives`}sendFile(e,n){return t(this,void 0,void 0,(function*(){const a=new s.default;return n.org&&a.append("org",n.org),n.orgUnit&&a.append("orgUnit",n.orgUnit),n.session&&a.append("session",n.session),n.type&&a.append("type",n.type),a.append("filename",e),this.request.post(`${this.url}`,a,{headers:Object.assign({Authorization:this.token?`Bearer ${this.token}`:""},a.getHeaders())}).then((e=>e.data)).catch((e=>{throw new r.default(e.response.data,e.response.status)}))}))}find(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new r.default(e.response.data,e.response.status)}))}))}download(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}/download`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new r.default(e.response.data,e.response.status)}))}))}}a.default=p}));n(Zr);var Hr=a((function(n,a){var t=e&&e.__createBinding||(Object.create?function(e,n,a,t){void 0===t&&(t=a),Object.defineProperty(e,t,{enumerable:!0,get:function(){return n[a]}})}:function(e,n,a,t){void 0===t&&(t=a),e[t]=n[a]}),o=e&&e.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),s=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&t(n,e,a);return o(n,e),n},r=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},c=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const p=s(ir),l=c(i);a.default=class{constructor(e){this.url=e,this.request=new p.Request}login(e){return r(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/auth`,e).then((e=>e.data)).catch((e=>{throw console.log(e),new l.default(e.response.data,e.response.status)}))}))}}}));n(Hr);var Yr=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(i),r=o(or);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/users`}create(e){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(e){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/list`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return t(this,void 0,void 0,(function*(){return this.request.patch(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return t(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}verify(e){return t(this,void 0,void 0,(function*(){return this.request.patch(`${this.url}/verify`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}a.default=c}));n(Yr);var Wr=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(i),r=o(or);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/prescriptions`}create(e){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}list(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}`,{params:e,headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return t(this,void 0,void 0,(function*(){return this.request.patch(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return t(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}sign(e,n){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/${e}/sign`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}download(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}/download`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""},responseType:"arraybuffer"}).then((e=>Buffer.from(e.data,"base64"))).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}a.default=c}));n(Wr);var Vr=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(i),r=o(or);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/recordings`}find(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}`,{params:e,headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return t(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}download(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}/download`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}}a.default=c}));n(Vr);var Kr=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(i),r=o(or);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/skins`}create(e){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return t(this,void 0,void 0,(function*(){return this.request.put(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return t(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}a.default=c}));n(Kr);var Gr=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const s=o(i),r=o(or);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/Profiles`}create(e){return t(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}find(e){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(){return t(this,void 0,void 0,(function*(){return this.request.get(`${this.url}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return t(this,void 0,void 0,(function*(){return this.request.put(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return t(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}a.default=c}));n(Gr);var Xr=a((function(n,a){var t=e&&e.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function s(e){try{c(t.next(e))}catch(e){o(e)}}function r(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((t=t.apply(e,n||[])).next())}))},i=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const o=i(pr),s=i(lr),r=i(ur),c=i(dr),p=i(Zr),l=i(Hr),u=i(Yr),d=i(Wr),h=i(Vr),m=i(Kr),f=i(Gr),v=i(sr);a.default=class{setup(e){return t(this,void 0,void 0,(function*(){this.baseUrl=e&&e.baseUrl?e.baseUrl:v.default.App.baseUrl,e&&e.token&&(this.token=e.token),e&&e.login&&e.password&&(yield this.login(e.login,e.password)),this.org=new r.default(this.token,this.baseUrl),this.orgUnit=new c.default(this.token,this.baseUrl),this.session=new o.default(this.token,this.baseUrl,e.domain),this.room=new s.default(this.token,this.baseUrl),this.archive=new p.default(this.token,this.baseUrl),this.user=new u.default(this.token,this.baseUrl),this.prescription=new d.default(this.token,this.baseUrl),this.recording=new h.default(this.token,this.baseUrl),this.profile=new f.default(this.token,this.baseUrl),this.skin=new m.default(this.token,this.baseUrl)}))}login(e,n){return t(this,void 0,void 0,(function*(){const a=new l.default(this.baseUrl),t=yield a.login({login:e,password:n});this.token=t.accessToken}))}}}));return n(Xr),n(a((function(n,a){var t=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});const i=t(Xr);a.default=i.default})))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
